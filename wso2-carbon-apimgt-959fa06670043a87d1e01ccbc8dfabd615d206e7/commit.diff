diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java
index a56006e21b5..368f5bc1f90 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIAdmin.java
@@ -18,6 +18,7 @@
 package org.wso2.carbon.apimgt.api;
 
 import org.wso2.carbon.apimgt.api.model.Application;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.Label;
 import org.wso2.carbon.apimgt.api.model.Monetization;
 import org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo;
@@ -123,6 +124,75 @@ void addMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizationUs
     void updateMonetizationUsagePublishInfo(MonetizationUsagePublishInfo monetizationUsagePublishInfo)
             throws APIManagementException;
 
+    /**
+     * Adds a new category for the tenant
+     *
+     * @param userName    logged in user name
+     * @param category        category to add
+     * @throws APIManagementException if failed add category
+     */
+    APICategory addCategory(APICategory category, String userName) throws APIManagementException;
+
+    /**
+     * Updates an API Category
+     *
+     * @param apiCategory
+     * @return
+     * @throws APIManagementException
+     */
+    void updateCategory(APICategory apiCategory) throws APIManagementException;
+
+    /**
+     * Delete an API Category
+     *
+     * @param categoryID
+     * @param username
+     * @throws APIManagementException
+     */
+    void deleteCategory(String categoryID, String username) throws APIManagementException;
+
+    /**
+     * Checks whether an api category exists by the given name
+     *
+     * 1. in case uuid is null : checks whether the categoryName is already taken in the tenantDomain (this
+     *                           flow is used when adding a new api category)
+     * 2. in case uuid is not null: checks whether the categoryName is already taken by any category other than the one
+     *                              defined by the passed uuid in the given tenant
+     *
+     * @param categoryName
+     * @param tenantID
+     * @return true if an api category exists by the given category name
+     * @throws APIManagementException
+     */
+    boolean isCategoryNameExists(String categoryName, String uuid, int tenantID) throws APIManagementException;
+
+    /**
+     * Returns all api categories of the tenant
+     *
+     * @param tenantID
+     * @return
+     * @throws APIManagementException
+     */
+    List<APICategory> getAllAPICategoriesOfTenant(int tenantID) throws APIManagementException;
+
+    /**
+     * Returns all api categories of the tenant along with the count of attached APIs
+     *
+     * @param username
+     * @return
+     * @throws APIManagementException
+     */
+    List<APICategory> getAllAPICategoriesOfTenantForAdminListing(String username) throws APIManagementException;
+
+    /**
+     * Get API Category identified by the given uuid
+     *
+     * @param apiCategoryId api category UUID
+     * @return
+     * @throws APIManagementException
+     */
+    APICategory getAPICategoryByID(String apiCategoryId) throws APIManagementException;
+
     /**
      * The method converts the date into timestamp
      *
diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java
index ce99157189a..b7c32214084 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIManager.java
@@ -789,7 +789,7 @@ String addProductResourceFile(APIProductIdentifier identifier, String resourcePa
 
     /**
      * Get open api definition for the product
-     * @param APIProduct product
+     * @param  product
      * @return openapidoc
      * @throws APIManagementException
      */
diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/API.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/API.java
index ac9655ce0cb..5ecc636564c 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/API.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/API.java
@@ -163,6 +163,8 @@
      */
     private boolean enableSchemaValidation = false;
 
+    private List<APICategory> apiCategories;
+
 
     public void setEnvironmentList(Set<String> environmentList) {
         this.environmentList = environmentList;
@@ -986,6 +988,14 @@ public static String getEndpointConfigString(List<APIEndpoint> endpoints) {
         return sb.toString();
     }
 
+    public void setApiCategories(List<APICategory> apiCategories) {
+        this.apiCategories = apiCategories;
+    }
+
+    public List<APICategory> getApiCategories() {
+        return apiCategories;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (o == this) return true;
diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APICategory.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APICategory.java
new file mode 100644
index 00000000000..66adbe24ae2
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APICategory.java
@@ -0,0 +1,80 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.api.model;
+
+/**
+ * This class represents API Categories
+ */
+public class APICategory {
+    private String id;
+    private String name;
+    private String description;
+    private int numberOfAPIs;
+    private int tenantID;
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setTenantID(int tenantID) {
+        this.tenantID = tenantID;
+    }
+
+    public int getTenantID() {
+        return tenantID;
+    }
+
+    public void setNumberOfAPIs(int numberOfAPIs) {
+        this.numberOfAPIs = numberOfAPIs;
+    }
+
+    public int getNumberOfAPIs() {
+        return numberOfAPIs;
+    }
+
+    /**
+     * Name,TenantID combination is unique and cannot be duplicated. Hence two API category objects t1 and t2 are
+     * considered equal if both have the same name and same tenant id
+     *
+     * @param obj
+     * @return
+     */
+    public boolean equals(Object obj) {
+        return this.tenantID == ((APICategory)obj).getTenantID() && this.getName().equals(((APICategory) obj).getName());
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIProduct.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIProduct.java
index 3021b6c052e..f40e3b1881e 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIProduct.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/APIProduct.java
@@ -98,6 +98,8 @@
     private String accessControl;
     private String accessControlRoles;
 
+    private List<APICategory> apiCategories;
+
     private Date lastUpdated;
     private Date createdTime;
 
@@ -519,4 +521,13 @@ public void setProductLevelPolicy(String productLevelPolicy) {
     public void removeAllTiers() {
         availableTiers.clear();
     }
+
+    public void setApiCategories(List<APICategory> apiCategories) {
+        this.apiCategories = apiCategories;
+    }
+
+    public List<APICategory> getApiCategories() {
+        return apiCategories;
+    }
+
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java
index 960ef9438eb..87173e2f665 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIAdminImpl.java
@@ -22,21 +22,28 @@
 import org.apache.commons.logging.LogFactory;
 import org.wso2.carbon.apimgt.api.APIAdmin;
 import org.wso2.carbon.apimgt.api.APIManagementException;
+import org.wso2.carbon.apimgt.api.APIMgtResourceNotFoundException;
 import org.wso2.carbon.apimgt.api.model.Application;
 import org.wso2.carbon.apimgt.api.model.Label;
 import org.wso2.carbon.apimgt.api.model.Monetization;
 import org.wso2.carbon.apimgt.api.model.MonetizationUsagePublishInfo;
 import org.wso2.carbon.apimgt.api.model.botDataAPI.BotDetectionData;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.api.model.ResourceFile;
 import org.wso2.carbon.apimgt.impl.dao.ApiMgtDAO;
 import org.wso2.carbon.apimgt.impl.monetization.DefaultMonetizationImpl;
 import org.wso2.carbon.apimgt.impl.utils.APIUtil;
+import org.wso2.carbon.registry.core.Registry;
+import org.wso2.carbon.registry.core.RegistryConstants;
+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;
 import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
 
 import java.text.SimpleDateFormat;
 import java.sql.SQLException;
 import java.util.Date;
 import java.util.List;
+import java.util.Map;
 import java.util.TimeZone;
 
 /**
@@ -280,4 +287,68 @@ public void addBotDataEmailConfiguration(String email) throws APIManagementExcep
     public void deleteBotDataEmailList(String uuid) throws APIManagementException, SQLException {
         apiMgtDAO.deleteBotDataEmailList(uuid);
     }
+
+    public APICategory addCategory(APICategory category, String userName) throws APIManagementException {
+        int tenantID = APIUtil.getTenantId(userName);
+        if (isCategoryNameExists(category.getName(), null, tenantID)) {
+            APIUtil.handleException("Category with name '" + category.getName() + "' already exists");
+        }
+        return apiMgtDAO.addCategory(tenantID, category);
+    }
+
+    public void updateCategory(APICategory apiCategory) throws APIManagementException {
+        apiMgtDAO.updateCategory(apiCategory);
+    }
+
+    public void deleteCategory(String categoryID, String username) throws APIManagementException {
+        APICategory category = getAPICategoryByID(categoryID);
+        int attchedAPICount = isCategoryAttached(category, username);
+        if ( attchedAPICount > 0) {
+            APIUtil.handleException("Unable to delete the category. It is attached to API(s)");
+        }
+        apiMgtDAO.deleteCategory(categoryID);
+    }
+
+    public List<APICategory> getAllAPICategoriesOfTenant(int tenantId) throws APIManagementException {
+        return apiMgtDAO.getAllCategories(tenantId);
+    }
+
+    public List<APICategory> getAllAPICategoriesOfTenantForAdminListing(String username) throws APIManagementException{
+        int tenantID = APIUtil.getTenantId(username);
+        List<APICategory> categories = getAllAPICategoriesOfTenant(tenantID);
+        if (categories.size() > 0) {
+            for (APICategory category : categories) {
+                int length = isCategoryAttached(category, username);
+                category.setNumberOfAPIs(length);
+            }
+        }
+        return categories;
+    }
+
+    public boolean isCategoryNameExists(String categoryName, String uuid, int tenantID) throws APIManagementException {
+        return ApiMgtDAO.getInstance().isAPICategoryNameExists(categoryName, uuid, tenantID);
+    }
+
+    public APICategory getAPICategoryByID(String apiCategoryId) throws APIManagementException {
+        APICategory apiCategory = ApiMgtDAO.getInstance().getAPICategoryByID(apiCategoryId);
+        if (apiCategory != null) {
+            return apiCategory;
+        }else {
+            String msg = "Failed to get APICategory. API category corresponding to UUID " + apiCategoryId
+                    + " does not exist";
+            throw new APIMgtResourceNotFoundException(msg);
+        }
+    }
+
+    private int isCategoryAttached(APICategory category, String username) throws APIManagementException {
+        APIProviderImpl apiProvider = new APIProviderImpl(username);
+        //no need to add type prefix here since we need to ge the total number of category associations including both
+        //APIs and API categories
+        String searchQuery = APIConstants.CATEGORY_SEARCH_TYPE_PREFIX + "=*" + category.getName() + "*";
+        String tenantDomain = MultitenantUtils.getTenantDomain(username);
+        Map<String, Object> result = apiProvider
+                .searchPaginatedAPIs(searchQuery, tenantDomain, 0, Integer.MAX_VALUE, true);
+        int length = (Integer) result.get("length");
+        return length;
+    }
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
index b7e8a8f3cea..e4dd7c12c23 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
@@ -1467,6 +1467,8 @@ private ConfigParameters() {
     private static final String CONTEXT_SEARCH_TYPE_PREFIX = "context";
     public static final String CONTENT_SEARCH_TYPE_PREFIX = "content";
     public static final String TYPE_SEARCH_TYPE_PREFIX = "type";
+    public static final String LABEL_SEARCH_TYPE_PREFIX = "label";
+    public static final String CATEGORY_SEARCH_TYPE_PREFIX = "api-category";
 
     //api-product related constants
     public static final String API_PRODUCT_VERSION = "1.0.0";
@@ -1672,7 +1674,8 @@ private ConfigParameters() {
     public static final String[] API_SEARCH_PREFIXES = { DOCUMENTATION_SEARCH_TYPE_PREFIX, TAGS_SEARCH_TYPE_PREFIX,
             NAME_TYPE_PREFIX, SUBCONTEXT_SEARCH_TYPE_PREFIX, PROVIDER_SEARCH_TYPE_PREFIX, CONTEXT_SEARCH_TYPE_PREFIX,
             VERSION_SEARCH_TYPE_PREFIX, LCSTATE_SEARCH_KEY.toLowerCase(), API_DESCRIPTION.toLowerCase(),
-            API_STATUS.toLowerCase(), CONTENT_SEARCH_TYPE_PREFIX, TYPE_SEARCH_TYPE_PREFIX };
+            API_STATUS.toLowerCase(), CONTENT_SEARCH_TYPE_PREFIX, TYPE_SEARCH_TYPE_PREFIX, LABEL_SEARCH_TYPE_PREFIX,
+            CATEGORY_SEARCH_TYPE_PREFIX };
     // Prefix for registry attributes.
     public static final String OVERVIEW_PREFIX = "overview_";
     /**
@@ -1847,6 +1850,12 @@ private ConfigParameters() {
     public static final String API_KEY_REVOKE_PATH = "/apikey/revoke";
 
     public static final String SKIP_ROLES_BY_REGEX = "skipRolesByRegex";
+    
+    /**
+     * API categories related constants
+     */
+    public static final String API_CATEGORIES_CATEGORY_NAME = "apiCategories_categoryName";
+    public static final String API_CATEGORY = "api-category";
 
     // AWS Lambda: Constants for aws lambda
     public static final String AWS_SECRET_KEY = "AWS_SECRET_KEY";
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java
index ce3bc88f778..a238ff80350 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIProviderImpl.java
@@ -53,6 +53,7 @@
 import org.wso2.carbon.apimgt.api.dto.ClientCertificateDTO;
 import org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
 import org.wso2.carbon.apimgt.api.model.APIProductIdentifier;
@@ -1422,6 +1423,14 @@ private void updateApiArtifact(API api, boolean updateMetadata, boolean updatePe
                 APIUtil.setResourcePermissions(api.getId().getProviderName(), api.getVisibility(), visibleRoles,
                         artifactPath, registry);
             }
+            //attaching api categories to the API
+            List<APICategory> attachedApiCategories = api.getApiCategories();
+            artifact.removeAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME);
+            if (attachedApiCategories != null) {
+                for (APICategory category : attachedApiCategories) {
+                    artifact.addAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME, category.getName());
+                }
+            }
             registry.commitTransaction();
             transactionCommitted = true;
             if (updatePermissions) {
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java
index 45625fe547f..1ce9de40835 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/AbstractAPIManager.java
@@ -43,6 +43,7 @@
 import org.wso2.carbon.apimgt.api.ExceptionCodes;
 import org.wso2.carbon.apimgt.api.PolicyNotFoundException;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIKey;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
@@ -2143,22 +2144,27 @@ public boolean isDuplicateContextTemplate(String contextTemplate) throws APIMana
                 String[] searchKeys = query.split("=");
 
                 if (searchKeys.length >= 2) {
-                    //prevent api-meta. getting prefixed to labelName and restrict label serach to exact match only
-                    if (APIConstants.LABEL.equals(searchKeys[0])) {
-                        searchKeys[0] = APIConstants.API_LABELS_GATEWAY_LABELS;
-                        if (searchKeys[1].startsWith("*")) {
-                            searchKeys[1] = searchKeys[1].substring(1, searchKeys[1].length());
-                        }
-                        if (searchKeys[1].endsWith("*")) {
-                            searchKeys[1] = searchKeys[1].substring(0, searchKeys[1].length() - 1);
-                        }
-                    } else if (!Arrays.asList(APIConstants.API_SEARCH_PREFIXES).contains(searchKeys[0].toLowerCase())) {
+                    if (!Arrays.asList(APIConstants.API_SEARCH_PREFIXES).contains(searchKeys[0].toLowerCase())) {
                         if (log.isDebugEnabled()) {
                             log.debug(searchKeys[0] + " does not match with any of the reserved key words. Hence"
                                     + " appending " + APIConstants.API_RELATED_CUSTOM_PROPERTIES_PREFIX + " as prefix");
                         }
                         searchKeys[0] = (APIConstants.API_RELATED_CUSTOM_PROPERTIES_PREFIX + searchKeys[0]);
                     }
+
+                    // Ideally query keys for label and  category searchs are as below
+                    //      label -> labels_labelName
+                    //      category -> apiCategories_categoryName
+                    // Since these are not user friendly we allow to use prefixes label and api-category. And label and
+                    // category search should only return results that exactly match.
+                    if (searchKeys[0].equals(APIConstants.LABEL_SEARCH_TYPE_PREFIX)) {
+                        searchKeys[0] = APIConstants.API_LABELS_GATEWAY_LABELS;
+                        searchKeys[1] = searchKeys[1].replace("*", "");
+                    } else if (searchKeys[0].equals(APIConstants.CATEGORY_SEARCH_TYPE_PREFIX)) {
+                        searchKeys[0] = APIConstants.API_CATEGORIES_CATEGORY_NAME;
+                        searchKeys[1] = searchKeys[1].replace("*", "");
+                    }
+
                     if (filteredQuery.length() == 0) {
                         filteredQuery.append(searchKeys[0]).append("=").append(searchKeys[1]);
                     } else {
@@ -3587,5 +3593,4 @@ public String getAPIDefinitionOfAPIProduct(APIProduct product) throws APIManagem
         return apiDocContent;
 
     }
-
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
index 2b0207dbea6..e7dcdd37943 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
@@ -34,6 +34,7 @@
 import org.wso2.carbon.apimgt.api.dto.ConditionGroupDTO;
 import org.wso2.carbon.apimgt.api.dto.UserApplicationAPIUsage;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIKey;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
@@ -14321,4 +14322,166 @@ public void removeExpiredJWTs() throws APIManagementException {
             handleException("Error while deleting expired JWTs from revoke table.", e);
         }
     }
+
+    /**
+     * Adds an API category
+     *
+     * @param tenantID     Logged in user's tenant ID
+     * @param category     Category
+     * @return Category
+     */
+    public APICategory addCategory(int tenantID, APICategory category) throws APIManagementException {
+        String uuid = UUID.randomUUID().toString();
+        category.setId(uuid);
+        try (Connection connection = APIMgtDBUtil.getConnection();
+            PreparedStatement statement = connection.prepareStatement(SQLConstants.ADD_CATEGORY_SQL)) {
+            statement.setString(1, uuid);
+            statement.setString(2, category.getName());
+            statement.setString(3, category.getDescription());
+            statement.setInt(4, tenantID);
+            statement.executeUpdate();
+        } catch (SQLException e) {
+            handleException("Failed to add Category: " + uuid, e);
+        }
+        return category;
+    }
+
+    /**
+     * Update API Category
+     *
+     * @param apiCategory API category object with updated details
+     * @throws APIManagementException
+     */
+    public void updateCategory(APICategory apiCategory) throws APIManagementException {
+        try (Connection connection = APIMgtDBUtil.getConnection();
+                PreparedStatement statement = connection.prepareStatement(SQLConstants.UPDATE_API_CATEGORY)) {
+            statement.setString(1, apiCategory.getDescription());
+            statement.setString(2, apiCategory.getName());
+            statement.setString(3, apiCategory.getId());
+            statement.execute();
+        } catch (SQLException e) {
+            handleException("Failed to update API Category : " + apiCategory.getName() + " of tenant " +
+                    APIUtil.getTenantDomainFromTenantId(apiCategory.getTenantID()), e);
+        }
+    }
+
+    /**
+     * Get all available API categories of the tenant
+     *
+     * @param tenantID
+     * @return API Categories List
+     */
+    public List<APICategory> getAllCategories(int tenantID) throws APIManagementException {
+        List<APICategory> categoriesList = new ArrayList<>();
+        try (Connection connection = APIMgtDBUtil.getConnection();
+            PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_CATEGORIES_BY_TENANT_ID_SQL)) {
+            statement.setInt(1, tenantID);
+
+            ResultSet rs = statement.executeQuery();
+            while(rs.next()) {
+                String id = rs.getString("UUID");
+                String name = rs.getString("NAME");
+                String description = rs.getString("DESCRIPTION");
+
+                APICategory category = new APICategory();
+                category.setId(id);
+                category.setName(name);
+                category.setDescription(description);
+                category.setTenantID(tenantID);
+
+                categoriesList.add(category);
+            }
+        } catch (SQLException e) {
+            handleException("Failed to retrieve API categories for tenant " + tenantID, e);
+        }
+        return categoriesList;
+    }
+
+    /**
+     * Checks whether the given category name is already available under given tenant domain with any UUID other than the given UUID
+     *
+     * @param categoryName
+     * @param uuid
+     * @param tenantID
+     * @return
+     */
+    public boolean isAPICategoryNameExists(String categoryName, String uuid, int tenantID) throws APIManagementException {
+        String sql = SQLConstants.IS_API_CATEGORY_NAME_EXISTS;
+        if (uuid != null) {
+            sql = SQLConstants.IS_API_CATEGORY_NAME_EXISTS_FOR_ANOTHER_UUID;
+        }
+        try (Connection connection = APIMgtDBUtil.getConnection();
+                PreparedStatement statement = connection.prepareStatement(sql)) {
+            statement.setString(1, categoryName);
+            statement.setInt(2, tenantID);
+            if (uuid != null) {
+                statement.setString(3, uuid);
+            }
+
+            ResultSet rs = statement.executeQuery();
+            if (rs.next()) {
+                int count = rs.getInt("API_CATEGORY_COUNT");
+                if (count > 0) {
+                    return true;
+                }
+            }
+        } catch (SQLException e) {
+            handleException("Failed to check whether API category name : " + categoryName + " exists", e);
+        }
+        return false;
+    }
+
+
+    public APICategory getAPICategoryByID(String apiCategoryID) throws APIManagementException {
+        APICategory apiCategory = null;
+        try (Connection connection = APIMgtDBUtil.getConnection();
+            PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_CATEGORY_BY_ID)) {
+            statement.setString(1, apiCategoryID);
+
+            ResultSet rs = statement.executeQuery();
+            if (rs.next()) {
+                apiCategory = new APICategory();
+                apiCategory.setName(rs.getString("NAME"));
+                apiCategory.setDescription(rs.getString("DESCRIPTION"));
+                apiCategory.setTenantID(rs.getInt("TENANT_ID"));
+                apiCategory.setId(apiCategoryID);
+            }
+        } catch (SQLException e) {
+            handleException("Failed to fetch API category : " + apiCategoryID, e);
+        }
+        return apiCategory;
+    }
+
+    public APICategory getAPICategoryByName(String apiCategoryName, String tenantDomain) throws APIManagementException {
+        APICategory apiCategory = null;
+        int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);
+        try (Connection connection = APIMgtDBUtil.getConnection();
+                PreparedStatement statement = connection.prepareStatement(SQLConstants.GET_API_CATEGORY_BY_NAME)) {
+            statement.setString(1, apiCategoryName);
+            statement.setInt(2, tenantID);
+
+            ResultSet rs = statement.executeQuery();
+            if (rs.next()) {
+                apiCategory = new APICategory();
+                apiCategory.setName(rs.getString("NAME"));
+                apiCategory.setDescription(rs.getString("DESCRIPTION"));
+                apiCategory.setTenantID(rs.getInt("TENANT_ID"));
+                apiCategory.setId(rs.getString("UUID"));
+            }
+        } catch (SQLException e) {
+            handleException("Failed to fetch API category : " + apiCategoryName + " of tenant " + tenantDomain, e);
+        }
+        return apiCategory;
+    }
+
+    public void deleteCategory(String categoryID) throws APIManagementException {
+        try (Connection connection = APIMgtDBUtil.getConnection();
+                PreparedStatement statement = connection.prepareStatement(SQLConstants.DELETE_API_CATEGORY)) {
+            statement.setString(1, categoryID);
+            statement.executeUpdate();
+        } catch (SQLException e) {
+            handleException("Failed to delete API category : " + categoryID, e);
+        }
+    }
+
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
index a64d08c0952..338e548f90a 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
@@ -3098,6 +3098,27 @@
                 "ON RES_SCOPE.SCOPE_ID = SCOPE.SCOPE_ID " +
             "WHERE RES_SCOPE.RESOURCE_PATH = ?";
 
+    /** API Categories related constants **/
+
+    public static final String ADD_CATEGORY_SQL = "INSERT INTO AM_API_CATEGORIES "
+            + "(UUID, NAME, DESCRIPTION, TENANT_ID) VALUES (?,?,?,?)";
+
+    public static final String GET_CATEGORIES_BY_TENANT_ID_SQL = "SELECT * FROM AM_API_CATEGORIES WHERE TENANT_ID = ?";
+
+    public static final String IS_API_CATEGORY_NAME_EXISTS = "SELECT COUNT(UUID) AS API_CATEGORY_COUNT FROM "
+            + "AM_API_CATEGORIES WHERE NAME = ? AND TENANT_ID = ?";
+
+    public static final String IS_API_CATEGORY_NAME_EXISTS_FOR_ANOTHER_UUID = "SELECT COUNT(UUID) AS API_CATEGORY_COUNT FROM "
+            + "AM_API_CATEGORIES WHERE NAME = ? AND TENANT_ID = ? AND UUID != ?";
+
+    public static final String GET_API_CATEGORY_BY_ID = "SELECT * FROM AM_API_CATEGORIES WHERE UUID = ?";
+
+    public static final String GET_API_CATEGORY_BY_NAME = "SELECT * FROM AM_API_CATEGORIES WHERE NAME = ? AND TENANT_ID = ?";
+
+    public static final String UPDATE_API_CATEGORY = "UPDATE AM_API_CATEGORIES SET DESCRIPTION = ?, NAME = ? WHERE UUID = ?";
+
+    public static final String DELETE_API_CATEGORY = "DELETE FROM AM_API_CATEGORIES WHERE UUID = ?";
+
     /** Throttle related constants**/
 
     public static class ThrottleSQLConstants{
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java
index c6f6acb7616..4b005cbb9d3 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/utils/APIUtil.java
@@ -34,6 +34,7 @@
 import org.apache.axis2.transport.http.HTTPConstants;
 import org.apache.axis2.util.JavaUtils;
 import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
@@ -82,6 +83,7 @@
 import org.wso2.carbon.apimgt.api.doc.model.Operation;
 import org.wso2.carbon.apimgt.api.doc.model.Parameter;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
 import org.wso2.carbon.apimgt.api.model.APIProductIdentifier;
@@ -471,6 +473,7 @@ public static API getAPI(GovernanceArtifact artifact, Registry registry)
             api.setCorsConfiguration(getCorsConfigurationFromArtifact(artifact));
             api.setAuthorizationHeader(artifact.getAttribute(APIConstants.API_OVERVIEW_AUTHORIZATION_HEADER));
             api.setApiSecurity(artifact.getAttribute(APIConstants.API_OVERVIEW_API_SECURITY));
+            api.setApiCategories(getAPICategoriesFromAPIGovernanceArtifact(artifact, tenantId));
 
         } catch (GovernanceException e) {
             String msg = "Failed to get API for artifact ";
@@ -696,7 +699,7 @@ public static API getAPIForPublishing(GovernanceArtifact artifact, Registry regi
                 api.setMonetizationProperties(jsonObj);
             }
             api.setGatewayLabels(getLabelsFromAPIGovernanceArtifact(artifact, api.getId().getProviderName()));
-
+            api.setApiCategories(getAPICategoriesFromAPIGovernanceArtifact(artifact, tenantId));
             //get endpoint config string from artifact, parse it as a json and set the environment list configured with
             //non empty URLs to API object
             try {
@@ -1246,6 +1249,15 @@ public static GenericArtifact createAPIArtifactContent(GenericArtifact artifact,
             //attaching micro-gateway labels to the API
             attachLabelsToAPIArtifact(artifact, api, tenantDomain);
 
+            //attaching api categories to the API
+            List<APICategory> attachedApiCategories = api.getApiCategories();
+            artifact.removeAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME);
+            if (attachedApiCategories != null) {
+                for (APICategory category : attachedApiCategories) {
+                    artifact.addAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME, category.getName());
+                }
+            }
+
             //set monetization status (i.e - enabled or disabled)
             artifact.setAttribute(APIConstants.Monetization.API_MONETIZATION_STATUS, Boolean.toString(api.getMonetizationStatus()));
             //set additional monetization data
@@ -1355,6 +1367,15 @@ public static GenericArtifact createAPIProductArtifactContent(GenericArtifact ar
                 artifact.setAttribute(APIConstants.Monetization.API_MONETIZATION_PROPERTIES,
                         apiProduct.getMonetizationProperties().toJSONString());
             }
+
+            //attaching api categories to the API
+            List<APICategory> attachedApiCategories = apiProduct.getApiCategories();
+            artifact.removeAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME);
+            if (attachedApiCategories != null) {
+                for (APICategory category : attachedApiCategories) {
+                    artifact.addAttribute(APIConstants.API_CATEGORIES_CATEGORY_NAME, category.getName());
+                }
+            }
         } catch (GovernanceException e) {
             String msg = "Failed to create API for : " + apiProduct.getId().getName();
             log.error(msg, e);
@@ -9245,6 +9266,7 @@ public static APIProduct getAPIProduct(GovernanceArtifact artifact, Registry reg
                 JSONObject jsonObj = (JSONObject) parser.parse(monetizationInfo);
                 apiProduct.setMonetizationProperties(jsonObj);
             }
+            apiProduct.setApiCategories(getAPICategoriesFromAPIGovernanceArtifact(artifact, tenantId));
         } catch (GovernanceException e) {
             String msg = "Failed to get API Product for artifact ";
             throw new APIManagementException(msg, e);
@@ -9834,5 +9856,67 @@ public static String appendTenantDomainForEmailUsernames(String username, String
         }
         return username;
     }
+
+    /**
+     * This method returns the categories attached to the API
+     *
+     * @param artifact        API artifact
+     * @param tenantID        tenant ID of API Provider
+     * @return List<APICategory> list of categories
+     */
+    private static List<APICategory> getAPICategoriesFromAPIGovernanceArtifact(GovernanceArtifact artifact, int tenantID)
+            throws GovernanceException, APIManagementException {
+        String[] categoriesOfAPI = artifact.getAttributes(APIConstants.API_CATEGORIES_CATEGORY_NAME);
+
+        List<APICategory> categoryList = new ArrayList<>();
+
+        if (ArrayUtils.isNotEmpty(categoriesOfAPI)) {
+            //category array retrieved from artifact has only the category name, therefore we need to fetch categories
+            //and fill out missing attributes before attaching the list to the api
+            String tenantDomain = getTenantDomainFromTenantId(tenantID);
+            List<APICategory> allCategories = getAllAPICategoriesOfTenant(tenantDomain);
+
+            //todo-category: optimize this loop with breaks
+            for (String categoryName : categoriesOfAPI) {
+                for (APICategory category : allCategories) {
+                    if (categoryName.equals(category.getName())) {
+                        categoryList.add(category);
+                        break;
+                    }
+                }
+            }
+        }
+        return categoryList;
+    }
+
+    /**
+     * This method is used to get the categories in a given tenant space
+     *
+     * @param tenantDomain tenant domain name
+     * @return categories in a given tenant space
+     * @throws APIManagementException if failed to fetch categories
+     */
+    public static List<APICategory> getAllAPICategoriesOfTenant(String tenantDomain) throws APIManagementException {
+        ApiMgtDAO apiMgtDAO = ApiMgtDAO.getInstance();
+        int tenantId = getTenantIdFromTenantDomain(tenantDomain);
+        return apiMgtDAO.getAllCategories(tenantId);
+    }
+
+    /**
+     * Validates the API category names to be attached to an API
+     * @param categories
+     * @param tenantDomain
+     * @return
+     */
+    public static boolean validateAPICategories(List<APICategory> categories, String tenantDomain)
+            throws APIManagementException {
+        List<APICategory> availableCategories = getAllAPICategoriesOfTenant(tenantDomain);
+        for (APICategory category : categories) {
+            if (!availableCategories.contains(category)) {
+                return false;
+            }
+        }
+        return true;
+    }
 }
 
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/tenant/tenant-conf.json b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/tenant/tenant-conf.json
index 5b61e960695..8bd306abb64 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/tenant/tenant-conf.json
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/resources/tenant/tenant-conf.json
@@ -191,6 +191,10 @@
       {
         "Name": "apim:tenantInfo",
         "Roles": "admin"
+      },
+      {
+        "Name": "apim:admin_operations",
+        "Roles": "admin"
       }
     ]
   },
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/resources/dbscripts/h2.sql b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/resources/dbscripts/h2.sql
index 9816be16e55..cb11d49ac7c 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/resources/dbscripts/h2.sql
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/test/resources/dbscripts/h2.sql
@@ -1638,4 +1638,13 @@ CREATE TABLE IF NOT EXISTS AM_REVOKED_JWT (
     TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (UUID)
 );
+
+CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (
+  UUID VARCHAR(50),
+  NAME VARCHAR(255),
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+);
 -- End of API-MGT Tables --
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApi.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApi.java
new file mode 100644
index 00000000000..38ff609070e
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApi.java
@@ -0,0 +1,90 @@
+package org.wso2.carbon.apimgt.rest.api.admin;
+
+import org.wso2.carbon.apimgt.rest.api.admin.dto.*;
+import org.wso2.carbon.apimgt.rest.api.admin.ApiCategoriesApiService;
+import org.wso2.carbon.apimgt.rest.api.admin.factories.ApiCategoriesApiServiceFactory;
+
+import io.swagger.annotations.ApiParam;
+
+import org.wso2.carbon.apimgt.rest.api.admin.dto.ErrorDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryListDTO;
+
+import java.util.List;
+
+import java.io.InputStream;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+import org.apache.cxf.jaxrs.ext.multipart.Multipart;
+
+import javax.ws.rs.core.Response;
+import javax.ws.rs.*;
+
+@Path("/api-categories")
+@Consumes({ "application/json" })
+@Produces({ "application/json" })
+@io.swagger.annotations.Api(value = "/api-categories", description = "the api-categories API")
+public class ApiCategoriesApi  {
+
+   private final ApiCategoriesApiService delegate = ApiCategoriesApiServiceFactory.getApiCategoriesApi();
+
+    @DELETE
+    @Path("/{apiCategoryId}")
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @io.swagger.annotations.ApiOperation(value = "Delete an API Category", notes = "Delete an API Category by API Category Id\n", response = void.class)
+    @io.swagger.annotations.ApiResponses(value = { 
+        @io.swagger.annotations.ApiResponse(code = 200, message = "OK.\nAPI Category successfully deleted.\n"),
+        
+        @io.swagger.annotations.ApiResponse(code = 404, message = "Not Found.\nAPI Category to be deleted does not exist.\n") })
+
+    public Response apiCategoriesApiCategoryIdDelete(@ApiParam(value = "API Category UUID\n",required=true ) @PathParam("apiCategoryId")  String apiCategoryId,
+    @ApiParam(value = "Validator for conditional requests; based on ETag (Will be supported in future).\n"  )@HeaderParam("If-Match") String ifMatch,
+    @ApiParam(value = "Validator for conditional requests; based on Last Modified header (Will be supported in future).\n"  )@HeaderParam("If-Unmodified-Since") String ifUnmodifiedSince)
+    {
+    return delegate.apiCategoriesApiCategoryIdDelete(apiCategoryId,ifMatch,ifUnmodifiedSince);
+    }
+    @PUT
+    @Path("/{apiCategoryId}")
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @io.swagger.annotations.ApiOperation(value = "Update an API Category", notes = "Update an API Category by category Id\n", response = APICategoryDTO.class)
+    @io.swagger.annotations.ApiResponses(value = { 
+        @io.swagger.annotations.ApiResponse(code = 200, message = "OK.\nLabel updated.\n"),
+        
+        @io.swagger.annotations.ApiResponse(code = 400, message = "Bad Request.\nInvalid request or validation error.\n"),
+        
+        @io.swagger.annotations.ApiResponse(code = 404, message = "Not Found.\nThe resource to be updated does not exist.\n") })
+
+    public Response apiCategoriesApiCategoryIdPut(@ApiParam(value = "API Category UUID\n",required=true ) @PathParam("apiCategoryId")  String apiCategoryId,
+    @ApiParam(value = "API Category object with updated information\n" ,required=true ) APICategoryDTO body)
+    {
+    return delegate.apiCategoriesApiCategoryIdPut(apiCategoryId,body);
+    }
+    @GET
+    
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @io.swagger.annotations.ApiOperation(value = "Get all API categories", notes = "Get all API categories\n", response = APICategoryListDTO.class)
+    @io.swagger.annotations.ApiResponses(value = { 
+        @io.swagger.annotations.ApiResponse(code = 200, message = "OK.\nCategories returned\n") })
+
+    public Response apiCategoriesGet()
+    {
+    return delegate.apiCategoriesGet();
+    }
+    @POST
+    
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @io.swagger.annotations.ApiOperation(value = "Add a new API Category", notes = "Add a new API Category\n", response = APICategoryDTO.class)
+    @io.swagger.annotations.ApiResponses(value = { 
+        @io.swagger.annotations.ApiResponse(code = 201, message = "Created.\nSuccessful response with the newly created object as entity in the body.\n"),
+        
+        @io.swagger.annotations.ApiResponse(code = 400, message = "Bad Request.\nInvalid request or validation error\n") })
+
+    public Response apiCategoriesPost(@ApiParam(value = "API Category object that should to be added\n" ,required=true ) APICategoryDTO body)
+    {
+    return delegate.apiCategoriesPost(body);
+    }
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApiService.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApiService.java
new file mode 100644
index 00000000000..9754a99e892
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/ApiCategoriesApiService.java
@@ -0,0 +1,23 @@
+package org.wso2.carbon.apimgt.rest.api.admin;
+
+import org.wso2.carbon.apimgt.rest.api.admin.*;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.*;
+
+import org.wso2.carbon.apimgt.rest.api.admin.dto.ErrorDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryListDTO;
+
+import java.util.List;
+
+import java.io.InputStream;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+
+import javax.ws.rs.core.Response;
+
+public abstract class ApiCategoriesApiService {
+    public abstract Response apiCategoriesApiCategoryIdDelete(String apiCategoryId,String ifMatch,String ifUnmodifiedSince);
+    public abstract Response apiCategoriesApiCategoryIdPut(String apiCategoryId,APICategoryDTO body);
+    public abstract Response apiCategoriesGet();
+    public abstract Response apiCategoriesPost(APICategoryDTO body);
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryDTO.java
new file mode 100644
index 00000000000..b96da3be727
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryDTO.java
@@ -0,0 +1,75 @@
+package org.wso2.carbon.apimgt.rest.api.admin.dto;
+
+
+import io.swagger.annotations.*;
+import com.fasterxml.jackson.annotation.*;
+
+import javax.validation.constraints.NotNull;
+
+
+
+
+
+@ApiModel(description = "")
+public class APICategoryDTO  {
+  
+  
+  
+  private String id = null;
+  
+  @NotNull
+  private String name = null;
+  
+  
+  private String description = null;
+
+  
+  /**
+   **/
+  @ApiModelProperty(value = "")
+  @JsonProperty("id")
+  public String getId() {
+    return id;
+  }
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  
+  /**
+   **/
+  @ApiModelProperty(required = true, value = "")
+  @JsonProperty("name")
+  public String getName() {
+    return name;
+  }
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  
+  /**
+   **/
+  @ApiModelProperty(value = "")
+  @JsonProperty("description")
+  public String getDescription() {
+    return description;
+  }
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  
+
+  @Override
+  public String toString()  {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryDTO {\n");
+    
+    sb.append("  id: ").append(id).append("\n");
+    sb.append("  name: ").append(name).append("\n");
+    sb.append("  description: ").append(description).append("\n");
+    sb.append("}\n");
+    return sb.toString();
+  }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryListDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryListDTO.java
new file mode 100644
index 00000000000..918707bf366
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/APICategoryListDTO.java
@@ -0,0 +1,63 @@
+package org.wso2.carbon.apimgt.rest.api.admin.dto;
+
+import java.util.ArrayList;
+import java.util.List;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryDTO;
+
+import io.swagger.annotations.*;
+import com.fasterxml.jackson.annotation.*;
+
+import javax.validation.constraints.NotNull;
+
+
+
+
+
+@ApiModel(description = "")
+public class APICategoryListDTO  {
+  
+  
+  
+  private Integer count = null;
+  
+  
+  private List<APICategoryDTO> list = new ArrayList<APICategoryDTO>();
+
+  
+  /**
+   * Number of API categories returned.\n
+   **/
+  @ApiModelProperty(value = "Number of API categories returned.\n")
+  @JsonProperty("count")
+  public Integer getCount() {
+    return count;
+  }
+  public void setCount(Integer count) {
+    this.count = count;
+  }
+
+  
+  /**
+   **/
+  @ApiModelProperty(value = "")
+  @JsonProperty("list")
+  public List<APICategoryDTO> getList() {
+    return list;
+  }
+  public void setList(List<APICategoryDTO> list) {
+    this.list = list;
+  }
+
+  
+
+  @Override
+  public String toString()  {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryListDTO {\n");
+    
+    sb.append("  count: ").append(count).append("\n");
+    sb.append("  list: ").append(list).append("\n");
+    sb.append("}\n");
+    return sb.toString();
+  }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/FileInfoDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/FileInfoDTO.java
new file mode 100644
index 00000000000..a07ede87d87
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/dto/FileInfoDTO.java
@@ -0,0 +1,61 @@
+package org.wso2.carbon.apimgt.rest.api.admin.dto;
+
+
+import io.swagger.annotations.*;
+import com.fasterxml.jackson.annotation.*;
+
+import javax.validation.constraints.NotNull;
+
+
+
+
+
+@ApiModel(description = "")
+public class FileInfoDTO  {
+  
+  
+  
+  private String relativePath = null;
+  
+  
+  private String mediaType = null;
+
+  
+  /**
+   * relative location of the file (excluding the base context and host of the Admin API)
+   **/
+  @ApiModelProperty(value = "relative location of the file (excluding the base context and host of the Admin API)")
+  @JsonProperty("relativePath")
+  public String getRelativePath() {
+    return relativePath;
+  }
+  public void setRelativePath(String relativePath) {
+    this.relativePath = relativePath;
+  }
+
+  
+  /**
+   * media-type of the file
+   **/
+  @ApiModelProperty(value = "media-type of the file")
+  @JsonProperty("mediaType")
+  public String getMediaType() {
+    return mediaType;
+  }
+  public void setMediaType(String mediaType) {
+    this.mediaType = mediaType;
+  }
+
+  
+
+  @Override
+  public String toString()  {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class FileInfoDTO {\n");
+    
+    sb.append("  relativePath: ").append(relativePath).append("\n");
+    sb.append("  mediaType: ").append(mediaType).append("\n");
+    sb.append("}\n");
+    return sb.toString();
+  }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/factories/ApiCategoriesApiServiceFactory.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/factories/ApiCategoriesApiServiceFactory.java
new file mode 100644
index 00000000000..43a12848ef8
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/gen/java/org/wso2/carbon/apimgt/rest/api/admin/factories/ApiCategoriesApiServiceFactory.java
@@ -0,0 +1,14 @@
+package org.wso2.carbon.apimgt.rest.api.admin.factories;
+
+import org.wso2.carbon.apimgt.rest.api.admin.ApiCategoriesApiService;
+import org.wso2.carbon.apimgt.rest.api.admin.impl.ApiCategoriesApiServiceImpl;
+
+public class ApiCategoriesApiServiceFactory {
+
+   private final static ApiCategoriesApiService service = new ApiCategoriesApiServiceImpl();
+
+   public static ApiCategoriesApiService getApiCategoriesApi()
+   {
+      return service;
+   }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/ApiCategoriesApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/ApiCategoriesApiServiceImpl.java
new file mode 100644
index 00000000000..e658627a2ea
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/impl/ApiCategoriesApiServiceImpl.java
@@ -0,0 +1,128 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.admin.impl;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.apimgt.api.APIAdmin;
+import org.wso2.carbon.apimgt.api.APIManagementException;
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.impl.APIAdminImpl;
+import org.wso2.carbon.apimgt.impl.utils.APIUtil;
+import org.wso2.carbon.apimgt.rest.api.admin.ApiCategoriesApiService;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryListDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.utils.mappings.APICategoryMappingUtil;
+import org.wso2.carbon.apimgt.rest.api.util.RestApiConstants;
+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;
+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
+
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.List;
+import javax.ws.rs.core.Response;
+
+public class ApiCategoriesApiServiceImpl extends ApiCategoriesApiService {
+    private static final Log log = LogFactory.getLog(ApiCategoriesApiServiceImpl.class);
+
+    public Response apiCategoriesGet(){
+        try {
+            APIAdmin apiAdmin = new APIAdminImpl();
+            String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();
+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);
+            List<APICategory> categoryList = apiAdmin.getAllAPICategoriesOfTenant(tenantID);
+            APICategoryListDTO categoryListDTO =
+                    APICategoryMappingUtil.fromCategoryListToCategoryListDTO(categoryList);
+            return Response.ok().entity(categoryListDTO).build();
+        } catch (APIManagementException e) {
+            String errorMessage = "Error while retrieving API categories";
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        }
+        return null;
+    }
+
+    public Response apiCategoriesPost(APICategoryDTO body){
+        APICategory apiCategory = null;
+        try {
+            APIAdmin apiAdmin = new APIAdminImpl();
+            String userName = RestApiUtil.getLoggedInUsername();
+            apiCategory = APICategoryMappingUtil.fromCategoryDTOToCategory(body);
+            APICategoryDTO categoryDTO = APICategoryMappingUtil.
+                    fromCategoryToCategoryDTO(apiAdmin.addCategory(apiCategory, userName));
+            URI location = new URI(RestApiConstants.RESOURCE_PATH_CATEGORY + "/" + categoryDTO.getId());
+            return Response.created(location).entity(categoryDTO).build();
+        } catch (APIManagementException | URISyntaxException e) {
+            String errorMessage = "Error while adding new API Category '" + body.getName() + "' - " + e.getMessage() ;
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        }
+        return null;
+    }
+
+    public Response apiCategoriesApiCategoryIdPut(String apiCategoryId, APICategoryDTO body) {
+        try {
+            APIAdmin apiAdmin = new APIAdminImpl();
+            String userName = RestApiUtil.getLoggedInUsername();
+            String tenantDomain = MultitenantUtils.getTenantDomain(userName);
+            int tenantID = APIUtil.getTenantIdFromTenantDomain(tenantDomain);
+            APICategory apiCategoryToUpdate = APICategoryMappingUtil.fromCategoryDTOToCategory(body);
+            APICategory apiCategoryOriginal = apiAdmin.getAPICategoryByID(apiCategoryId);
+            if (apiCategoryOriginal == null) {
+                String errorMsg = "No api category with the given category ID exists :" + apiCategoryId;
+                log.error(errorMsg);
+                throw new APIManagementException(errorMsg);
+            }
+
+            //Override several properties as they are not allowed to be updated
+            apiCategoryToUpdate.setName(apiCategoryOriginal.getName());
+            apiCategoryToUpdate.setId(apiCategoryOriginal.getId());
+            apiCategoryToUpdate.setTenantID(apiCategoryOriginal.getTenantID());
+
+            //We allow to update API Category name given that the new category name is not taken yet
+            String oldName = apiCategoryOriginal.getName();
+            String updatedName = apiCategoryToUpdate.getName();
+            if (!oldName.equals(updatedName) && apiAdmin.isCategoryNameExists(updatedName, apiCategoryId, tenantID)) {
+                String errorMsg = "An API category already exists by the new API category name :" + updatedName;
+                log.error(errorMsg);
+                throw new APIManagementException(errorMsg);
+            }
+
+            apiAdmin.updateCategory(apiCategoryToUpdate);
+            APICategory updatedAPICategory = apiAdmin.getAPICategoryByID(apiCategoryId);
+            APICategoryDTO updatedAPICategoryDTO = APICategoryMappingUtil.fromCategoryToCategoryDTO(updatedAPICategory);
+            return Response.ok().entity(updatedAPICategoryDTO).build();
+        } catch (APIManagementException e) {
+            String errorMessage = "Error while updating API Category '" + body.getName() + "' - " + e.getMessage() ;
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        }
+        return null;
+    }
+
+    public Response apiCategoriesApiCategoryIdDelete(String apiCategoryId, String ifMatch,
+            String ifUnmodifiedSince) {
+        try {
+            APIAdmin apiAdmin = new APIAdminImpl();
+            String userName = RestApiUtil.getLoggedInUsername();
+            apiAdmin.deleteCategory(apiCategoryId, userName);
+            return Response.ok().build();
+        } catch (APIManagementException e) {
+            String errorMessage = "Error while deleting API Category '" + apiCategoryId + "' - " + e.getMessage() ;
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        }
+        return null;
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/APICategoryMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/APICategoryMappingUtil.java
new file mode 100644
index 00000000000..bf43aa155c7
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/java/org/wso2/carbon/apimgt/rest/api/admin/utils/mappings/APICategoryMappingUtil.java
@@ -0,0 +1,89 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.admin.utils.mappings;
+
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.admin.dto.APICategoryListDTO;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class APICategoryMappingUtil {
+
+    /**
+     * Converts a CategoryDTO to APICategory
+     * @param categoryDTO
+     * @return APICategoty
+     */
+    public static APICategory fromCategoryDTOToCategory(APICategoryDTO categoryDTO) {
+        APICategory category = new APICategory();
+
+        category.setId(categoryDTO.getId());
+        category.setName(categoryDTO.getName());
+        category.setDescription(categoryDTO.getDescription());
+        return category;
+    }
+
+    /**
+     * Converts a Category to CategoryDTO
+     * @param category
+     * @return categoryDTO
+     */
+    public static APICategoryDTO fromCategoryToCategoryDTO(APICategory category) {
+        APICategoryDTO categoryDTO = new APICategoryDTO();
+
+        categoryDTO.setId(category.getId());
+        categoryDTO.setName(category.getName());
+        categoryDTO.setDescription(category.getDescription());
+        return categoryDTO;
+    }
+
+    /**
+     * Convert list of API Categories to CategoryListDTO
+     *
+     * @param categories List of api categories
+     * @return CategoryListDTO list containing api category data
+     */
+    public static APICategoryListDTO fromCategoryListToCategoryListDTO(List<APICategory> categories) {
+        APICategoryListDTO categoryListDTO = new APICategoryListDTO();
+        categoryListDTO.setCount(categories.size());
+        categoryListDTO.setList(fromCategoryListToCategoryDTOList(categories));
+        return categoryListDTO;
+    }
+
+    /**
+     * Converts api category List to CategoryDTO List.
+     *
+     * @param categories List of api categories
+     * @return CategoryDTO list
+     */
+    private static List<APICategoryDTO> fromCategoryListToCategoryDTOList(List<APICategory> categories) {
+        List<APICategoryDTO> categoryDTOs = new ArrayList<>();
+        for (APICategory category : categories) {
+            APICategoryDTO categoryDTO = new APICategoryDTO();
+            categoryDTO.setId(category.getId());
+            categoryDTO.setName(category.getName());
+            categoryDTO.setDescription(category.getDescription());
+            categoryDTOs.add(categoryDTO);
+        }
+        return categoryDTOs;
+    }
+
+
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml
index 7dadeedc3c2..d952618344f 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml
@@ -113,6 +113,10 @@ x-wso2-security:
         roles: admin
         name: apim:tenantInfo
         key: apim:tenantInfo
+      - description: ""
+        roles: admin
+        name: apim:admin_operations
+        key: apim:admin_operations
 
 ######################################################
 # The "API Collection" resource APIs
@@ -2622,6 +2626,143 @@ paths:
           schema:
             $ref: '#/definitions/Error'
 
+######################################################
+# The "Category Collection" resource API
+######################################################
+  /api-categories:
+
+#-----------------------------------------------------
+# Retrieve all categories
+#-----------------------------------------------------
+    get:
+      x-scope: apim:admin_operations
+      x-wso2-request: |
+              GET https://localhost:9443/api/am/admin/v0.16/api-categories
+              Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
+      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/admin/v0.16/api-categories\""
+      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
+      summary: Get all API categories
+      description: |
+        Get all API categories
+      tags:
+        - API Category (Collection)
+      responses:
+        200:
+          description: |
+            OK.
+            Categories returned
+          schema:
+            $ref: '#/definitions/APICategoryList'
+
+#-----------------------------------------------------
+# Add a Category
+#-----------------------------------------------------
+    post:
+      x-scope: apim:admin_operations
+      x-wso2-curl: "curl -k -X POST -H \"Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\" -H \"Content-Type: application/json\" https://apis.wso2.com/api/am/admin/v0.16/api-categories -d @data.json"
+      x-wso2-request: "POST https://localhost:9443/api/am/admin/v0.16/api-categories\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n -d  {\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n }"
+      x-wso2-response: "HTTP/1.1 201 Created\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
+      summary: Add a new API Category
+      description: |
+        Add a new API Category
+      parameters:
+        - in: body
+          name: body
+          description: |
+            API Category object that should to be added
+          required: true
+          schema:
+            $ref: '#/definitions/APICategory'
+      tags:
+        - API Category (Individual)
+      responses:
+        201:
+          description: |
+            Created.
+            Successful response with the newly created object as entity in the body.
+          schema:
+            $ref: '#/definitions/APICategory'
+        400:
+          description: |
+            Bad Request.
+            Invalid request or validation error
+          schema:
+            $ref: '#/definitions/Error'
+
+  ######################################################
+  # The "Individual Category" resource APIs
+  ######################################################
+
+  /api-categories/{apiCategoryId}:
+
+  #-----------------------------------------------------
+  # Update a Category
+  #-----------------------------------------------------
+    put:
+      x-scope: apim:admin_operations
+      x-wso2-curl: "curl -k -X PUT -H \"Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v0.16/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779 -d @data.json"
+      x-wso2-request: "PUT https://localhost:9443/api/am/admin/v0.16/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n   {\r\n       \"name\":\"update_internal\",\r\n	\"description\":\"Updated label used for internal purpose\",\r\n	\"accessUrls\":[\r\n	  \"https://localhost:9095\"\r\n         ]\r\n     }"
+      x-wso2-response: "HTTP/1.1 200 Ok\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
+      summary: Update an API Category
+      description: |
+        Update an API Category by category Id
+      parameters:
+        - $ref: '#/parameters/apiCategoryId'
+        - in: body
+          name: body
+          description: |
+            API Category object with updated information
+          required: true
+          schema:
+            $ref: '#/definitions/APICategory'
+      tags:
+        - API Category (Individual)
+      responses:
+        200:
+          description: |
+            OK.
+            Label updated.
+          schema:
+            $ref: '#/definitions/APICategory'
+        400:
+          description: |
+            Bad Request.
+            Invalid request or validation error.
+          schema:
+            $ref: '#/definitions/Error'
+        404:
+          description: |
+            Not Found.
+            The resource to be updated does not exist.
+          schema:
+            $ref: '#/definitions/Error'
+  #-----------------------------------------------------
+  # Delete an API Category
+  #-----------------------------------------------------
+    delete:
+      x-scope: apim:admin_operations
+      x-wso2-response: "HTTP/1.1 200 OK"
+      summary: Delete an API Category
+      description: |
+        Delete an API Category by API Category Id
+      parameters:
+        - $ref: '#/parameters/apiCategoryId'
+        - $ref: '#/parameters/If-Match'
+        - $ref: '#/parameters/If-Unmodified-Since'
+      tags:
+        - API Category (Individual)
+      responses:
+        200:
+          description: |
+            OK.
+            API Category successfully deleted.
+        404:
+          description: |
+            Not Found.
+            API Category to be deleted does not exist.
+          schema:
+            $ref: '#/definitions/Error'
+
 ######################################################
 # Parameters - required by some of the APIs above
 ######################################################
@@ -2784,6 +2925,16 @@ parameters:
     required: true
     type: string
 
+  # API Category Id
+  # Specified as part of the path expression
+  apiCategoryId:
+    name: apiCategoryId
+    in: path
+    description: |
+      API Category UUID
+    type: string
+    required: true
+
 ######################################################
 # The resources used by some of the APIs above within the message body
 ######################################################
@@ -3627,6 +3778,57 @@ definitions:
       tenantId:
         type: integer
         example: -1234
+
+  #-----------------------------------------------------
+  # The Category resource
+  #-----------------------------------------------------
+  APICategory:
+    title: API Category
+    required:
+    - name
+    properties:
+      id:
+        type: string
+        example: "01234567-0123-0123-0123-012345678901"
+      name:
+        type: string
+        example: "Finance"
+      description:
+        type: string
+        example: "Finance related APIs"
+
+  #-----------------------------------------------------
+  # The Category List resource
+  #-----------------------------------------------------
+  APICategoryList:
+    title: API Category List
+    properties:
+      count:
+        type: integer
+        description: |
+          Number of API categories returned.
+        example: 1
+      list:
+        type: array
+        items:
+          $ref: '#/definitions/APICategory'
+
+  #-----------------------------------------------------
+  # The File Information resource
+  #-----------------------------------------------------
+  FileInfo :
+    title: File Information including meta data
+    properties:
+      relativePath:
+        type: string
+        description: relative location of the file (excluding the base context and host of the Admin API)
+        example: "api-categories/01234567-0123-0123-0123-012345678901/thumbnail"
+      mediaType:
+        type: string
+        description: media-type of the file
+        example: "image/jpeg"
+
+
 #-----------------------------------------------------
 # END-OF-FILE
 #-----------------------------------------------------
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml
index cca75369efb..187414e1c68 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/webapp/WEB-INF/beans.xml
@@ -25,6 +25,7 @@
             <bean class="org.wso2.carbon.apimgt.rest.api.admin.MonetizationApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.admin.WorkflowsApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.admin.TenantInfoApi"/>
+            <bean class="org.wso2.carbon.apimgt.rest.api.admin.ApiCategoriesApi"/>
         </jaxrs:serviceBeans>
         <jaxrs:providers>
             <bean class="com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider"/>
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApi.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApi.java
new file mode 100644
index 00000000000..010cb2fead0
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApi.java
@@ -0,0 +1,52 @@
+package org.wso2.carbon.apimgt.rest.api.publisher.v1;
+
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryListDTO;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.ApiCategoriesApiService;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.impl.ApiCategoriesApiServiceImpl;
+import org.wso2.carbon.apimgt.api.APIManagementException;
+
+import javax.ws.rs.*;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.SecurityContext;
+import javax.inject.Inject;
+
+import io.swagger.annotations.*;
+import java.io.InputStream;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+import org.apache.cxf.jaxrs.ext.multipart.Multipart;
+
+import java.util.Map;
+import java.util.List;
+import javax.validation.constraints.*;
+@Path("/api-categories")
+
+@Api(description = "the api-categories API")
+@Consumes({ "application/json" })
+@Produces({ "application/json" })
+
+
+public class ApiCategoriesApi  {
+
+  @Context MessageContext securityContext;
+
+ApiCategoriesApiService delegate = new ApiCategoriesApiServiceImpl();
+
+
+    @GET
+    
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @ApiOperation(value = "Get all API categories", notes = "Get all API categories ", response = APICategoryListDTO.class, authorizations = {
+        @Authorization(value = "OAuth2Security", scopes = {
+            @AuthorizationScope(scope = "apim:api_view", description = "View API")
+        })
+    }, tags={ "API Category (Collection)" })
+    @ApiResponses(value = { 
+        @ApiResponse(code = 200, message = "OK. Categories returned ", response = APICategoryListDTO.class) })
+    public Response apiCategoriesGet() throws APIManagementException{
+        return delegate.apiCategoriesGet(securityContext);
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApiService.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApiService.java
new file mode 100644
index 00000000000..8f7bd150108
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/ApiCategoriesApiService.java
@@ -0,0 +1,24 @@
+package org.wso2.carbon.apimgt.rest.api.publisher.v1;
+
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.*;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.*;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+import org.apache.cxf.jaxrs.ext.multipart.Multipart;
+
+import org.wso2.carbon.apimgt.api.APIManagementException;
+
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryListDTO;
+
+import java.util.List;
+
+import java.io.InputStream;
+
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.SecurityContext;
+
+
+public interface ApiCategoriesApiService {
+      public Response apiCategoriesGet(MessageContext messageContext) throws APIManagementException;
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryDTO.java
new file mode 100644
index 00000000000..6ba96f594fc
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryDTO.java
@@ -0,0 +1,117 @@
+package org.wso2.carbon.apimgt.rest.api.publisher.v1.dto;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import javax.validation.constraints.*;
+
+
+import io.swagger.annotations.*;
+import java.util.Objects;
+
+import javax.xml.bind.annotation.*;
+import org.wso2.carbon.apimgt.rest.api.util.annotations.Scope;
+
+
+
+public class APICategoryDTO   {
+  
+    private String id = null;
+    private String name = null;
+    private String description = null;
+
+  /**
+   **/
+  public APICategoryDTO id(String id) {
+    this.id = id;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "01234567-0123-0123-0123-012345678901", value = "")
+  @JsonProperty("id")
+  public String getId() {
+    return id;
+  }
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   **/
+  public APICategoryDTO name(String name) {
+    this.name = name;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "Finance", required = true, value = "")
+  @JsonProperty("name")
+  @NotNull
+  public String getName() {
+    return name;
+  }
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   **/
+  public APICategoryDTO description(String description) {
+    this.description = description;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "Finance related APIs", value = "")
+  @JsonProperty("description")
+  public String getDescription() {
+    return description;
+  }
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+
+  @Override
+  public boolean equals(java.lang.Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    APICategoryDTO apICategory = (APICategoryDTO) o;
+    return Objects.equals(id, apICategory.id) &&
+        Objects.equals(name, apICategory.name) &&
+        Objects.equals(description, apICategory.description);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(id, name, description);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryDTO {\n");
+    
+    sb.append("    id: ").append(toIndentedString(id)).append("\n");
+    sb.append("    name: ").append(toIndentedString(name)).append("\n");
+    sb.append("    description: ").append(toIndentedString(description)).append("\n");
+    sb.append("}");
+    return sb.toString();
+  }
+
+  /**
+   * Convert the given object to string with each line indented by 4 spaces
+   * (except the first line).
+   */
+  private String toIndentedString(java.lang.Object o) {
+    if (o == null) {
+      return "null";
+    }
+    return o.toString().replace("\n", "\n    ");
+  }
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryListDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryListDTO.java
new file mode 100644
index 00000000000..fabf906fe1b
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APICategoryListDTO.java
@@ -0,0 +1,100 @@
+package org.wso2.carbon.apimgt.rest.api.publisher.v1.dto;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import java.util.ArrayList;
+import java.util.List;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryDTO;
+import javax.validation.constraints.*;
+
+
+import io.swagger.annotations.*;
+import java.util.Objects;
+
+import javax.xml.bind.annotation.*;
+import org.wso2.carbon.apimgt.rest.api.util.annotations.Scope;
+
+
+
+public class APICategoryListDTO   {
+  
+    private Integer count = null;
+    private List<APICategoryDTO> list = new ArrayList<>();
+
+  /**
+   * Number of API categories returned. 
+   **/
+  public APICategoryListDTO count(Integer count) {
+    this.count = count;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "1", value = "Number of API categories returned. ")
+  @JsonProperty("count")
+  public Integer getCount() {
+    return count;
+  }
+  public void setCount(Integer count) {
+    this.count = count;
+  }
+
+  /**
+   **/
+  public APICategoryListDTO list(List<APICategoryDTO> list) {
+    this.list = list;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "")
+  @JsonProperty("list")
+  public List<APICategoryDTO> getList() {
+    return list;
+  }
+  public void setList(List<APICategoryDTO> list) {
+    this.list = list;
+  }
+
+
+  @Override
+  public boolean equals(java.lang.Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    APICategoryListDTO apICategoryList = (APICategoryListDTO) o;
+    return Objects.equals(count, apICategoryList.count) &&
+        Objects.equals(list, apICategoryList.list);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(count, list);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryListDTO {\n");
+    
+    sb.append("    count: ").append(toIndentedString(count)).append("\n");
+    sb.append("    list: ").append(toIndentedString(list)).append("\n");
+    sb.append("}");
+    return sb.toString();
+  }
+
+  /**
+   * Convert the given object to string with each line indented by 4 spaces
+   * (except the first line).
+   */
+  private String toIndentedString(java.lang.Object o) {
+    if (o == null) {
+      return "null";
+    }
+    return o.toString().replace("\n", "\n    ");
+  }
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIDTO.java
index d32a3791775..bf1ec0d7252 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIDTO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIDTO.java
@@ -249,6 +249,7 @@ public static EndpointImplementationTypeEnum fromValue(String v) {
     private List<ScopeDTO> scopes = new ArrayList<>();
     private List<APIOperationsDTO> operations = new ArrayList<>();
     private APIThreatProtectionPoliciesDTO threatProtectionPolicies = null;
+    private List<String> categories = new ArrayList<>();
 
   /**
    * UUID of the api registry artifact 
@@ -1051,6 +1052,24 @@ public void setThreatProtectionPolicies(APIThreatProtectionPoliciesDTO threatPro
     this.threatProtectionPolicies = threatProtectionPolicies;
   }
 
+  /**
+   * API categories 
+   **/
+  public APIDTO categories(List<String> categories) {
+    this.categories = categories;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "API categories ")
+  @JsonProperty("categories")
+  public List<String> getCategories() {
+    return categories;
+  }
+  public void setCategories(List<String> categories) {
+    this.categories = categories;
+  }
+
 
   @Override
   public boolean equals(java.lang.Object o) {
@@ -1106,12 +1125,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(endpointImplementationType, API.endpointImplementationType) &&
         Objects.equals(scopes, API.scopes) &&
         Objects.equals(operations, API.operations) &&
-        Objects.equals(threatProtectionPolicies, API.threatProtectionPolicies);
+        Objects.equals(threatProtectionPolicies, API.threatProtectionPolicies) &&
+        Objects.equals(categories, API.categories);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(id, name, description, context, version, provider, lifeCycleStatus, wsdlInfo, wsdlUrl, responseCachingEnabled, cacheTimeout, destinationStatsEnabled, hasThumbnail, isDefaultVersion, enableSchemaValidation, type, transport, tags, policies, apiThrottlingPolicy, authorizationHeader, securityScheme, maxTps, visibility, visibleRoles, visibleTenants, endpointSecurity, gatewayEnvironments, labels, mediationPolicies, subscriptionAvailability, subscriptionAvailableTenants, additionalProperties, monetization, accessControl, accessControlRoles, businessInformation, corsConfiguration, workflowStatus, createdTime, lastUpdatedTime, endpointConfig, endpointImplementationType, scopes, operations, threatProtectionPolicies);
+    return Objects.hash(id, name, description, context, version, provider, lifeCycleStatus, wsdlInfo, wsdlUrl, responseCachingEnabled, cacheTimeout, destinationStatsEnabled, hasThumbnail, isDefaultVersion, enableSchemaValidation, type, transport, tags, policies, apiThrottlingPolicy, authorizationHeader, securityScheme, maxTps, visibility, visibleRoles, visibleTenants, endpointSecurity, gatewayEnvironments, labels, mediationPolicies, subscriptionAvailability, subscriptionAvailableTenants, additionalProperties, monetization, accessControl, accessControlRoles, businessInformation, corsConfiguration, workflowStatus, createdTime, lastUpdatedTime, endpointConfig, endpointImplementationType, scopes, operations, threatProtectionPolicies, categories);
   }
 
   @Override
@@ -1165,6 +1185,7 @@ public String toString() {
     sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
     sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
     sb.append("    threatProtectionPolicies: ").append(toIndentedString(threatProtectionPolicies)).append("\n");
+    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
     sb.append("}");
     return sb.toString();
   }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIProductDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIProductDTO.java
index 860e0f75e85..569de06a2d2 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIProductDTO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/dto/APIProductDTO.java
@@ -190,6 +190,7 @@ public static SubscriptionAvailabilityEnum fromValue(String v) {
     private String lastUpdatedTime = null;
     private List<ProductAPIDTO> apis = new ArrayList<>();
     private List<ScopeDTO> scopes = new ArrayList<>();
+    private List<String> categories = new ArrayList<>();
 
   /**
    * UUID of the api product 
@@ -771,6 +772,24 @@ public void setScopes(List<ScopeDTO> scopes) {
     this.scopes = scopes;
   }
 
+  /**
+   * API categories 
+   **/
+  public APIProductDTO categories(List<String> categories) {
+    this.categories = categories;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "API categories ")
+  @JsonProperty("categories")
+  public List<String> getCategories() {
+    return categories;
+  }
+  public void setCategories(List<String> categories) {
+    this.categories = categories;
+  }
+
 
   @Override
   public boolean equals(java.lang.Object o) {
@@ -813,12 +832,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(createdTime, apIProduct.createdTime) &&
         Objects.equals(lastUpdatedTime, apIProduct.lastUpdatedTime) &&
         Objects.equals(apis, apIProduct.apis) &&
-        Objects.equals(scopes, apIProduct.scopes);
+        Objects.equals(scopes, apIProduct.scopes) &&
+        Objects.equals(categories, apIProduct.categories);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(id, name, context, description, provider, hasThumbnail, state, enableSchemaValidation, responseCachingEnabled, cacheTimeout, visibility, visibleRoles, visibleTenants, accessControl, accessControlRoles, gatewayEnvironments, apiType, transport, tags, policies, apiThrottlingPolicy, authorizationHeader, securityScheme, subscriptionAvailability, subscriptionAvailableTenants, additionalProperties, monetization, businessInformation, corsConfiguration, createdTime, lastUpdatedTime, apis, scopes);
+    return Objects.hash(id, name, context, description, provider, hasThumbnail, state, enableSchemaValidation, responseCachingEnabled, cacheTimeout, visibility, visibleRoles, visibleTenants, accessControl, accessControlRoles, gatewayEnvironments, apiType, transport, tags, policies, apiThrottlingPolicy, authorizationHeader, securityScheme, subscriptionAvailability, subscriptionAvailableTenants, additionalProperties, monetization, businessInformation, corsConfiguration, createdTime, lastUpdatedTime, apis, scopes, categories);
   }
 
   @Override
@@ -859,6 +879,7 @@ public String toString() {
     sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
     sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
     sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
+    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
     sb.append("}");
     return sb.toString();
   }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApiCategoriesApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApiCategoriesApiServiceImpl.java
new file mode 100644
index 00000000000..56d96791407
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApiCategoriesApiServiceImpl.java
@@ -0,0 +1,55 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.publisher.v1.impl;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.apimgt.api.APIAdmin;
+import org.wso2.carbon.apimgt.api.APIManagementException;
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.impl.APIAdminImpl;
+import org.wso2.carbon.apimgt.impl.utils.APIUtil;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.*;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryListDTO;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.utils.mappings.APICategoryMappingUtil;
+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;
+
+import java.util.List;
+
+import javax.ws.rs.core.Response;
+
+public class ApiCategoriesApiServiceImpl implements ApiCategoriesApiService {
+    private static final Log log = LogFactory.getLog(ApiCategoriesApiServiceImpl.class);
+    
+    public Response apiCategoriesGet(MessageContext messageContext) {
+          try {
+              String tenantDomain = RestApiUtil.getLoggedInUserTenantDomain();
+              List<APICategory> categoryList = APIUtil.getAllAPICategoriesOfTenant(tenantDomain);
+              APICategoryListDTO categoryListDTO =
+                      APICategoryMappingUtil.fromCategoryListToCategoryListDTO(categoryList);
+              return Response.ok().entity(categoryListDTO).build();
+          } catch (APIManagementException e) {
+              String errorMessage = "Error while retrieving API categories";
+              RestApiUtil.handleInternalServerError(errorMessage, e, log);
+          }
+          return null;
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java
index 0796de73a69..c91655729ae 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/impl/ApisApiServiceImpl.java
@@ -318,6 +318,13 @@ public Response apisPost(APIDTO body, String oasVersion, MessageContext messageC
 
             API apiToAdd = prepareToCreateAPIByDTO(body);
             validateScopes(apiToAdd);
+            //validate API categories
+            List<APICategory> apiCategories = apiToAdd.getApiCategories();
+            if (apiCategories != null && apiCategories.size() >0) {
+                if (!APIUtil.validateAPICategories(apiCategories, RestApiUtil.getLoggedInUserTenantDomain())) {
+                    RestApiUtil.handleBadRequest("Invalid API Category name(s) defined", log);
+                }
+            }
             //adding the api
             apiProvider.addAPI(apiToAdd);
 
@@ -732,6 +739,15 @@ public Response apisApiIdPut(String apiId, APIDTO body, String ifMatch, MessageC
                 }
             }
             apiToUpdate.setWsdlUrl(body.getWsdlUrl());
+
+            //validate API categories
+            List<APICategory> apiCategories = apiToUpdate.getApiCategories();
+            if (apiCategories != null && apiCategories.size() >0) {
+                if (!APIUtil.validateAPICategories(apiCategories, RestApiUtil.getLoggedInUserTenantDomain())) {
+                    RestApiUtil.handleBadRequest("Invalid API Category name(s) defined", log);
+                }
+            }
+
             apiProvider.manageAPI(apiToUpdate);
 
             API updatedApi = apiProvider.getAPI(apiIdentifier);
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APICategoryMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APICategoryMappingUtil.java
new file mode 100644
index 00000000000..adaed3ea346
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APICategoryMappingUtil.java
@@ -0,0 +1,59 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.publisher.v1.utils.mappings;
+
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.publisher.v1.dto.APICategoryListDTO;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class APICategoryMappingUtil {
+
+    /**
+     * Convert list of API Categories to CategoryListDTO
+     *
+     * @param categories List of api categories
+     * @return CategoryListDTO list containing api category data
+     */
+    public static APICategoryListDTO fromCategoryListToCategoryListDTO(List<APICategory> categories) {
+        APICategoryListDTO categoryListDTO = new APICategoryListDTO();
+        categoryListDTO.setCount(categories.size());
+        categoryListDTO.setList(fromCategoryListToCategoryDTOList(categories));
+        return categoryListDTO;
+    }
+
+    /**
+     * Converts api category List to CategoryDTO List.
+     *
+     * @param categories List of api categories
+     * @return CategoryDTO list
+     */
+    private static List<APICategoryDTO> fromCategoryListToCategoryDTOList(List<APICategory> categories) {
+        List<APICategoryDTO> categoryDTOs = new ArrayList<>();
+        for (APICategory category : categories) {
+            APICategoryDTO categoryDTO = new APICategoryDTO();
+            categoryDTO.setId(category.getId());
+            categoryDTO.setName(category.getName());
+            categoryDTO.setDescription(category.getDescription());
+            categoryDTOs.add(categoryDTO);
+        }
+        return categoryDTOs;
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java
index f58d6775df9..04667204016 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/publisher/v1/utils/mappings/APIMappingUtil.java
@@ -33,6 +33,7 @@
 import org.wso2.carbon.apimgt.api.ExceptionCodes;
 import org.wso2.carbon.apimgt.api.WorkflowStatus;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
 import org.wso2.carbon.apimgt.api.model.APIProductIdentifier;
@@ -259,6 +260,10 @@ public static API fromDTOtoAPI(APIDTO dto, String provider) throws APIManagement
         setMaxTpsFromApiDTOToModel(dto, model);
         model.setAuthorizationHeader(dto.getAuthorizationHeader());
         model.setApiSecurity(getSecurityScheme(dto.getSecurityScheme()));
+
+        //attach api categories to API model
+        setAPICategoriesToModel(dto, model, provider);
+
         return model;
     }
 
@@ -922,6 +927,16 @@ public static APIDTO fromAPItoDTO(API model) throws APIManagementException {
             dto.setCreatedTime(String.valueOf(timeStamp));
         }
         dto.setWorkflowStatus(model.getWorkflowStatus());
+
+        List<APICategory> apiCategories = model.getApiCategories();
+        List<String> categoryNameList = new ArrayList<>();
+        if (apiCategories != null && !apiCategories.isEmpty()) {
+            for (APICategory category : apiCategories) {
+                categoryNameList.add(category.getName());
+            }
+        }
+        dto.setCategories(categoryNameList);
+
         return dto;
     }
 
@@ -1834,6 +1849,15 @@ public static APIProductDTO fromAPIProducttoDTO(APIProduct product) throws APIMa
             productDto.setSecurityScheme(Arrays.asList(product.getApiSecurity().split(",")));
         }
 
+        List<APICategory> apiCategories = product.getApiCategories();
+        List<String> categoryNameList = new ArrayList<>();
+        if (apiCategories != null && !apiCategories.isEmpty()) {
+            for (APICategory category : apiCategories) {
+                categoryNameList.add(category.getName());
+            }
+        }
+        productDto.setCategories(categoryNameList);
+
         if (null != product.getLastUpdated()) {
             Date lastUpdateDate = product.getLastUpdated();
             Timestamp timeStamp = new Timestamp(lastUpdateDate.getTime());
@@ -2045,6 +2069,9 @@ public static APIProduct fromDTOtoAPIProduct(APIProductDTO dto, String provider)
         product.setProductResources(productResources);
         product.setApiSecurity(getSecurityScheme(dto.getSecurityScheme()));
         product.setAuthorizationHeader(dto.getAuthorizationHeader());
+
+        //attach api categories to API model
+        setAPICategoriesToModel(dto, product, provider);
         return product;
     }
 
@@ -2379,4 +2406,34 @@ private static boolean getSharedStatus(String resourcePath, String policyName) {
 
         return null;
     }
+
+    /**
+     * Set API categories to API or APIProduct based on the instance type of the DTO object passes
+     * @param dto APIDTO or APIProductDTO
+     * @param model API or APIProduct
+     */
+    private static void setAPICategoriesToModel(Object dto, Object model, String provider) {
+        List<String> apiCategoryNames = new ArrayList<>();
+        if (dto instanceof APIDTO) {
+            APIDTO apiDTO = (APIDTO)dto;
+            apiCategoryNames = apiDTO.getCategories();
+        } else {
+            APIProductDTO apiProductDTO = (APIProductDTO)dto;
+            apiCategoryNames = apiProductDTO.getCategories();
+        }
+        String tenantDomain = MultitenantUtils.getTenantDomain(provider);
+        int tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);
+        List<APICategory> apiCategories = new ArrayList<>();
+        for (String categoryName : apiCategoryNames) {
+            APICategory category = new APICategory();
+            category.setName(categoryName);
+            category.setTenantID(tenantId);
+            apiCategories.add(category);
+        }
+        if (model instanceof API) {
+            ((API)model).setApiCategories(apiCategories);
+        } else {
+            ((APIProduct)model).setApiCategories(apiCategories);
+        }
+    }
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml
index f70397dba41..d8caa894cba 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/resources/publisher-api.yaml
@@ -6383,6 +6383,34 @@ paths:
           schema:
             $ref: '#/definitions/LabelList'
 
+######################################################
+# The "Category" resource API
+######################################################
+  /api-categories:
+
+#-----------------------------------------------------
+# Retrieve all categories
+#-----------------------------------------------------
+    get:
+      x-scope: apim:api_view
+      x-wso2-request: |
+              GET https://localhost:9443/api/am/publisher/v1.1/api-categories
+              Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8
+      x-wso2-curl: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/publisher/v1.1/api-categories\""
+      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
+      summary: Get all API categories
+      description: |
+        Get all API categories
+      tags:
+        - API Category (Collection)
+      responses:
+        200:
+          description: |
+            OK.
+            Categories returned
+          schema:
+            $ref: '#/definitions/APICategoryList'
+
 ######################################################
 # Parameters - required by some of the APIs above
 ######################################################
@@ -7135,6 +7163,13 @@ definitions:
                   type: string
                 priority:
                   type: integer
+      categories:
+        description: |
+          API categories
+        type: array
+        items:
+          type: string
+          example: ["Finance"]
 
   #-----------------------------------------------------
   # The Audit Report resource
@@ -7391,6 +7426,13 @@ definitions:
         type: array
         items:
           $ref: '#/definitions/Scope'
+      categories:
+        description: |
+          API categories
+        type: array
+        items:
+          type: string
+          example: ["Finance"]
   #-----------------------------------------------------
   # The API and its resources in a API Product resource
   #-----------------------------------------------------
@@ -9228,6 +9270,40 @@ definitions:
       applicationName: 'DefaultApplication'
       requestConunt: '12'
 
+  #-----------------------------------------------------
+  # The Category resource
+  #-----------------------------------------------------
+  APICategory:
+    title: API Category
+    required:
+    - name
+    properties:
+      id:
+        type: string
+        example: "01234567-0123-0123-0123-012345678901"
+      name:
+        type: string
+        example: "Finance"
+      description:
+        type: string
+        example: "Finance related APIs"
+
+  #-----------------------------------------------------
+  # The Category List resource
+  #-----------------------------------------------------
+  APICategoryList:
+    title: API Category List
+    properties:
+      count:
+        type: integer
+        description: |
+          Number of API categories returned.
+        example: 1
+      list:
+        type: array
+        items:
+          $ref: '#/definitions/APICategory'
+
 #-----------------------------------------------------
 # END-OF-FILE
 #-----------------------------------------------------
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/webapp/WEB-INF/beans.xml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/webapp/WEB-INF/beans.xml
index 9c89c5d2546..5d208aad307 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/webapp/WEB-INF/beans.xml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher.v1/src/main/webapp/WEB-INF/beans.xml
@@ -36,6 +36,7 @@
             <bean class="org.wso2.carbon.apimgt.rest.api.publisher.v1.TenantsApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.publisher.v1.LabelsApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.publisher.v1.ScopesApi"/>
+            <bean class="org.wso2.carbon.apimgt.rest.api.publisher.v1.ApiCategoriesApi"/>
 
         </jaxrs:serviceBeans>
         <jaxrs:providers>
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApi.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApi.java
new file mode 100644
index 00000000000..6a47ed52827
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApi.java
@@ -0,0 +1,52 @@
+package org.wso2.carbon.apimgt.rest.api.store.v1;
+
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryListDTO;
+import org.wso2.carbon.apimgt.rest.api.store.v1.ApiCategoriesApiService;
+import org.wso2.carbon.apimgt.rest.api.store.v1.impl.ApiCategoriesApiServiceImpl;
+import org.wso2.carbon.apimgt.api.APIManagementException;
+
+import javax.ws.rs.*;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.SecurityContext;
+import javax.inject.Inject;
+
+import io.swagger.annotations.*;
+import java.io.InputStream;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+import org.apache.cxf.jaxrs.ext.multipart.Multipart;
+
+import java.util.Map;
+import java.util.List;
+import javax.validation.constraints.*;
+@Path("/api-categories")
+
+@Api(description = "the api-categories API")
+@Consumes({ "application/json" })
+@Produces({ "application/json" })
+
+
+public class ApiCategoriesApi  {
+
+  @Context MessageContext securityContext;
+
+ApiCategoriesApiService delegate = new ApiCategoriesApiServiceImpl();
+
+
+    @GET
+    
+    @Consumes({ "application/json" })
+    @Produces({ "application/json" })
+    @ApiOperation(value = "Get all API categories", notes = "Get all API categories ", response = APICategoryListDTO.class, authorizations = {
+        @Authorization(value = "OAuth2Security", scopes = {
+            
+        })
+    }, tags={ "API Category (Collection)" })
+    @ApiResponses(value = { 
+        @ApiResponse(code = 200, message = "OK. Categories returned ", response = APICategoryListDTO.class) })
+    public Response apiCategoriesGet(@ApiParam(value = "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be   retirieved from. " )@HeaderParam("X-WSO2-Tenant") String xWSO2Tenant) throws APIManagementException{
+        return delegate.apiCategoriesGet(xWSO2Tenant, securityContext);
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApiService.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApiService.java
new file mode 100644
index 00000000000..71f6b170f20
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/ApiCategoriesApiService.java
@@ -0,0 +1,24 @@
+package org.wso2.carbon.apimgt.rest.api.store.v1;
+
+import org.wso2.carbon.apimgt.rest.api.store.v1.*;
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.*;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+import org.apache.cxf.jaxrs.ext.multipart.Attachment;
+import org.apache.cxf.jaxrs.ext.multipart.Multipart;
+
+import org.wso2.carbon.apimgt.api.APIManagementException;
+
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryListDTO;
+
+import java.util.List;
+
+import java.io.InputStream;
+
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.SecurityContext;
+
+
+public interface ApiCategoriesApiService {
+      public Response apiCategoriesGet(String xWSO2Tenant, MessageContext messageContext) throws APIManagementException;
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryDTO.java
new file mode 100644
index 00000000000..58a33b177e0
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryDTO.java
@@ -0,0 +1,117 @@
+package org.wso2.carbon.apimgt.rest.api.store.v1.dto;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import javax.validation.constraints.*;
+
+
+import io.swagger.annotations.*;
+import java.util.Objects;
+
+import javax.xml.bind.annotation.*;
+import org.wso2.carbon.apimgt.rest.api.util.annotations.Scope;
+
+
+
+public class APICategoryDTO   {
+  
+    private String id = null;
+    private String name = null;
+    private String description = null;
+
+  /**
+   **/
+  public APICategoryDTO id(String id) {
+    this.id = id;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "01234567-0123-0123-0123-012345678901", value = "")
+  @JsonProperty("id")
+  public String getId() {
+    return id;
+  }
+  public void setId(String id) {
+    this.id = id;
+  }
+
+  /**
+   **/
+  public APICategoryDTO name(String name) {
+    this.name = name;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "Finance", required = true, value = "")
+  @JsonProperty("name")
+  @NotNull
+  public String getName() {
+    return name;
+  }
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  /**
+   **/
+  public APICategoryDTO description(String description) {
+    this.description = description;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "Finance related APIs", value = "")
+  @JsonProperty("description")
+  public String getDescription() {
+    return description;
+  }
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+
+  @Override
+  public boolean equals(java.lang.Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    APICategoryDTO apICategory = (APICategoryDTO) o;
+    return Objects.equals(id, apICategory.id) &&
+        Objects.equals(name, apICategory.name) &&
+        Objects.equals(description, apICategory.description);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(id, name, description);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryDTO {\n");
+    
+    sb.append("    id: ").append(toIndentedString(id)).append("\n");
+    sb.append("    name: ").append(toIndentedString(name)).append("\n");
+    sb.append("    description: ").append(toIndentedString(description)).append("\n");
+    sb.append("}");
+    return sb.toString();
+  }
+
+  /**
+   * Convert the given object to string with each line indented by 4 spaces
+   * (except the first line).
+   */
+  private String toIndentedString(java.lang.Object o) {
+    if (o == null) {
+      return "null";
+    }
+    return o.toString().replace("\n", "\n    ");
+  }
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryListDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryListDTO.java
new file mode 100644
index 00000000000..e2002511e82
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APICategoryListDTO.java
@@ -0,0 +1,100 @@
+package org.wso2.carbon.apimgt.rest.api.store.v1.dto;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonCreator;
+import java.util.ArrayList;
+import java.util.List;
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryDTO;
+import javax.validation.constraints.*;
+
+
+import io.swagger.annotations.*;
+import java.util.Objects;
+
+import javax.xml.bind.annotation.*;
+import org.wso2.carbon.apimgt.rest.api.util.annotations.Scope;
+
+
+
+public class APICategoryListDTO   {
+  
+    private Integer count = null;
+    private List<APICategoryDTO> list = new ArrayList<>();
+
+  /**
+   * Number of API categories returned. 
+   **/
+  public APICategoryListDTO count(Integer count) {
+    this.count = count;
+    return this;
+  }
+
+  
+  @ApiModelProperty(example = "1", value = "Number of API categories returned. ")
+  @JsonProperty("count")
+  public Integer getCount() {
+    return count;
+  }
+  public void setCount(Integer count) {
+    this.count = count;
+  }
+
+  /**
+   **/
+  public APICategoryListDTO list(List<APICategoryDTO> list) {
+    this.list = list;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "")
+  @JsonProperty("list")
+  public List<APICategoryDTO> getList() {
+    return list;
+  }
+  public void setList(List<APICategoryDTO> list) {
+    this.list = list;
+  }
+
+
+  @Override
+  public boolean equals(java.lang.Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    APICategoryListDTO apICategoryList = (APICategoryListDTO) o;
+    return Objects.equals(count, apICategoryList.count) &&
+        Objects.equals(list, apICategoryList.list);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(count, list);
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder();
+    sb.append("class APICategoryListDTO {\n");
+    
+    sb.append("    count: ").append(toIndentedString(count)).append("\n");
+    sb.append("    list: ").append(toIndentedString(list)).append("\n");
+    sb.append("}");
+    return sb.toString();
+  }
+
+  /**
+   * Convert the given object to string with each line indented by 4 spaces
+   * (except the first line).
+   */
+  private String toIndentedString(java.lang.Object o) {
+    if (o == null) {
+      return "null";
+    }
+    return o.toString().replace("\n", "\n    ");
+  }
+}
+
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APIDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APIDTO.java
index 7cd34d3b139..114f86eea03 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APIDTO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/APIDTO.java
@@ -55,6 +55,7 @@
     private String avgRating = null;
     private AdvertiseInfoDTO advertiseInfo = null;
     private Boolean isSubscriptionAvailable = null;
+    private List<String> categories = new ArrayList<>();
 
   /**
    * UUID of the api 
@@ -556,6 +557,24 @@ public void setIsSubscriptionAvailable(Boolean isSubscriptionAvailable) {
     this.isSubscriptionAvailable = isSubscriptionAvailable;
   }
 
+  /**
+   * API categories 
+   **/
+  public APIDTO categories(List<String> categories) {
+    this.categories = categories;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "API categories ")
+  @JsonProperty("categories")
+  public List<String> getCategories() {
+    return categories;
+  }
+  public void setCategories(List<String> categories) {
+    this.categories = categories;
+  }
+
 
   @Override
   public boolean equals(java.lang.Object o) {
@@ -593,12 +612,13 @@ public boolean equals(java.lang.Object o) {
         Objects.equals(scopes, API.scopes) &&
         Objects.equals(avgRating, API.avgRating) &&
         Objects.equals(advertiseInfo, API.advertiseInfo) &&
-        Objects.equals(isSubscriptionAvailable, API.isSubscriptionAvailable);
+        Objects.equals(isSubscriptionAvailable, API.isSubscriptionAvailable) &&
+        Objects.equals(categories, API.categories);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(id, name, description, context, version, provider, apiDefinition, wsdlUri, lifeCycleStatus, isDefaultVersion, type, transport, operations, authorizationHeader, securityScheme, tags, tiers, hasThumbnail, additionalProperties, monetization, endpointURLs, businessInformation, labels, environmentList, scopes, avgRating, advertiseInfo, isSubscriptionAvailable);
+    return Objects.hash(id, name, description, context, version, provider, apiDefinition, wsdlUri, lifeCycleStatus, isDefaultVersion, type, transport, operations, authorizationHeader, securityScheme, tags, tiers, hasThumbnail, additionalProperties, monetization, endpointURLs, businessInformation, labels, environmentList, scopes, avgRating, advertiseInfo, isSubscriptionAvailable, categories);
   }
 
   @Override
@@ -634,6 +654,7 @@ public String toString() {
     sb.append("    avgRating: ").append(toIndentedString(avgRating)).append("\n");
     sb.append("    advertiseInfo: ").append(toIndentedString(advertiseInfo)).append("\n");
     sb.append("    isSubscriptionAvailable: ").append(toIndentedString(isSubscriptionAvailable)).append("\n");
+    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
     sb.append("}");
     return sb.toString();
   }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApiCategoriesApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApiCategoriesApiServiceImpl.java
new file mode 100644
index 00000000000..468eb058ba7
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApiCategoriesApiServiceImpl.java
@@ -0,0 +1,65 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.store.v1.impl;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.wso2.carbon.apimgt.api.APIAdmin;
+import org.wso2.carbon.apimgt.api.APIManagementException;
+import org.wso2.carbon.apimgt.api.ExceptionCodes;
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.impl.APIAdminImpl;
+import org.wso2.carbon.apimgt.impl.utils.APIUtil;
+import org.wso2.carbon.apimgt.rest.api.store.v1.*;
+
+import org.apache.cxf.jaxrs.ext.MessageContext;
+
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryListDTO;
+import org.wso2.carbon.apimgt.rest.api.store.v1.mappings.APICategoryMappingUtil;
+import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;
+import org.wso2.carbon.user.api.UserStoreException;
+import org.wso2.carbon.utils.multitenancy.MultitenantUtils;
+
+import java.util.List;
+
+import javax.ws.rs.core.Response;
+
+public class ApiCategoriesApiServiceImpl implements ApiCategoriesApiService {
+    private static final Log log = LogFactory.getLog(ApiCategoriesApiServiceImpl.class);
+
+    public Response apiCategoriesGet(String xWSO2Tenant, MessageContext messageContext) {
+        String requestedTenantDomain = RestApiUtil.getRequestedTenantDomain(xWSO2Tenant);
+        try {
+            if (!APIUtil.isTenantAvailable(requestedTenantDomain)) {
+                RestApiUtil.handleBadRequest("Provided tenant domain '" + xWSO2Tenant + "' is invalid",
+                        ExceptionCodes.INVALID_TENANT.getErrorCode(), log);
+            }
+
+            List<APICategory> categoryList = APIUtil.getAllAPICategoriesOfTenant(requestedTenantDomain);
+            APICategoryListDTO categoryListDTO = APICategoryMappingUtil.fromCategoryListToCategoryListDTO(categoryList);
+            return Response.ok().entity(categoryListDTO).build();
+        } catch (APIManagementException e) {
+            String errorMessage = "Error while retrieving API categories";
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        } catch (UserStoreException e) {
+            String errorMessage = "Error while checking availability of tenant " + requestedTenantDomain;
+            RestApiUtil.handleInternalServerError(errorMessage, e, log);
+        }
+        return null;
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APICategoryMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APICategoryMappingUtil.java
new file mode 100644
index 00000000000..267f6102dce
--- /dev/null
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APICategoryMappingUtil.java
@@ -0,0 +1,58 @@
+/*
+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+
+package org.wso2.carbon.apimgt.rest.api.store.v1.mappings;
+
+import org.wso2.carbon.apimgt.api.model.APICategory;
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryDTO;
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APICategoryListDTO;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class APICategoryMappingUtil {
+    /**
+     * Convert list of API Categories to CategoryListDTO
+     *
+     * @param categories List of api categories
+     * @return CategoryListDTO list containing api category data
+     */
+    public static APICategoryListDTO fromCategoryListToCategoryListDTO(List<APICategory> categories) {
+        APICategoryListDTO categoryListDTO = new APICategoryListDTO();
+        categoryListDTO.setCount(categories.size());
+        categoryListDTO.setList(fromCategoryListToCategoryDTOList(categories));
+        return categoryListDTO;
+    }
+
+    /**
+     * Converts api category List to CategoryDTO List.
+     *
+     * @param categories List of api categories
+     * @return CategoryDTO list
+     */
+    private static List<APICategoryDTO> fromCategoryListToCategoryDTOList(List<APICategory> categories) {
+        List<APICategoryDTO> categoryDTOs = new ArrayList<>();
+        for (APICategory category : categories) {
+            APICategoryDTO categoryDTO = new APICategoryDTO();
+            categoryDTO.setId(category.getId());
+            categoryDTO.setName(category.getName());
+            categoryDTO.setDescription(category.getDescription());
+            categoryDTOs.add(categoryDTO);
+        }
+        return categoryDTOs;
+    }
+}
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APIMappingUtil.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APIMappingUtil.java
index bd798b179fe..66a18e87f66 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APIMappingUtil.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/mappings/APIMappingUtil.java
@@ -24,6 +24,7 @@
 import org.wso2.carbon.apimgt.api.APIConsumer;
 import org.wso2.carbon.apimgt.api.APIManagementException;
 import org.wso2.carbon.apimgt.api.model.API;
+import org.wso2.carbon.apimgt.api.model.APICategory;
 import org.wso2.carbon.apimgt.api.model.APIIdentifier;
 import org.wso2.carbon.apimgt.api.model.APIProduct;
 import org.wso2.carbon.apimgt.api.model.APIProductIdentifier;
@@ -235,6 +236,16 @@ public static APIDTO fromAPItoDTO(API model, String tenantDomain) throws APIMana
         String subscriptionAllowedTenants = model.getSubscriptionAvailableTenants();
         dto.setIsSubscriptionAvailable(isSubscriptionAvailable(apiTenant, subscriptionAvailability,
                 subscriptionAllowedTenants));
+
+        List<APICategory> apiCategories = model.getApiCategories();
+        List<String> categoryNamesList = new ArrayList<>();
+        if (apiCategories != null && !apiCategories.isEmpty()) {
+            for (APICategory category : apiCategories) {
+                categoryNamesList.add(category.getName());
+            }
+        }
+        dto.setCategories(categoryNamesList);
+
         return dto;
     }
 
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/store-api.yaml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/store-api.yaml
index 56a1bc975ec..2a980553161 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/store-api.yaml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/store-api.yaml
@@ -3404,6 +3404,36 @@ paths:
           schema:
             $ref: '#/definitions/Error'
 
+######################################################
+# The "Category" resource API
+######################################################
+  /api-categories:
+
+#-----------------------------------------------------
+# Retrieve all categories
+#-----------------------------------------------------
+    get:
+      security:
+        - OAuth2Security: []
+      x-wso2-request: |
+              GET https://localhost:9443/api/am/store/v1.1/api-categories
+      x-wso2-curl: "curl -k \"https://localhost:9443/api/am/store/v1.1/api-categories\""
+      x-wso2-response: "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}"
+      summary: Get all API categories
+      description: |
+        Get all API categories
+      parameters:
+        - $ref : '#/parameters/requestedTenant'
+      tags:
+        - API Category (Collection)
+      responses:
+        200:
+          description: |
+            OK.
+            Categories returned
+          schema:
+            $ref: '#/definitions/APICategoryList'
+
 ######################################################
 # Parameters - required by some of the APIs above
 ######################################################
@@ -3961,6 +3991,13 @@ definitions:
       isSubscriptionAvailable:
         type: boolean
         example: false
+      categories:
+        description: |
+          API categories
+        type: array
+        items:
+          type: string
+          example: ["Finance"]
 
 #-----------------------------------------------------
 # The Label resource
@@ -5295,6 +5332,40 @@ definitions:
       applicationName: 'DefaultApplication'
       requestConunt: '12'
 
+  #-----------------------------------------------------
+  # The Category resource
+  #-----------------------------------------------------
+  APICategory:
+    title: API Category
+    required:
+    - name
+    properties:
+      id:
+        type: string
+        example: "01234567-0123-0123-0123-012345678901"
+      name:
+        type: string
+        example: "Finance"
+      description:
+        type: string
+        example: "Finance related APIs"
+
+  #-----------------------------------------------------
+  # The Category List resource
+  #-----------------------------------------------------
+  APICategoryList:
+    title: API Category List
+    properties:
+      count:
+        type: integer
+        description: |
+          Number of API categories returned.
+        example: 1
+      list:
+        type: array
+        items:
+          $ref: '#/definitions/APICategory'
+
 #-----------------------------------------------------
 # END-OF-FILE
 #-----------------------------------------------------
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/webapp/WEB-INF/beans.xml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/webapp/WEB-INF/beans.xml
index 4b58f99ec06..de6fbf8a62d 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/webapp/WEB-INF/beans.xml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/webapp/WEB-INF/beans.xml
@@ -28,6 +28,7 @@
             <bean class="org.wso2.carbon.apimgt.rest.api.store.v1.ThrottlingPoliciesApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.store.v1.SwaggerYamlApi"/>
             <bean class="org.wso2.carbon.apimgt.rest.api.store.v1.TenantsApi"/>
+            <bean class="org.wso2.carbon.apimgt.rest.api.store.v1.ApiCategoriesApi"/>
 
         </jaxrs:serviceBeans>
         <jaxrs:providers>
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/java/org/wso2/carbon/apimgt/rest/api/util/RestApiConstants.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/java/org/wso2/carbon/apimgt/rest/api/util/RestApiConstants.java
index 57b251582ee..ca75af377d1 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/java/org/wso2/carbon/apimgt/rest/api/util/RestApiConstants.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/java/org/wso2/carbon/apimgt/rest/api/util/RestApiConstants.java
@@ -63,6 +63,7 @@
     public static final String RESOURCE_WORKFLOW = "workflow";
     public static final String RESOURCE_COMMENTS = "comments";
     public static final String RESOURCE_MEDIATION_POLICY = "mediation-policy";
+    public static final String RESOURCE_API_CATEGORY = "API Category";
 
     public static final String API_ID_DELIMITER = "-";
     public static final String QUERY_PARAM = "{query}";
@@ -76,6 +77,7 @@
     public static final String APIPRODUCTID_PARAM = "{apiProductId}";
     public static final String APPLICATIONID_PARAM = "{applicationId}";
     public static final String DOCUMENTID_PARAM = "{documentId}";
+    public static final String APICATEGORYID_PARAM = "{apiCategoryId}";
     public static final String API_VERSION_PARAM="{version}";
     public static final String URL_ENCODED_API_ID_DELIMITER = "%2D";
     public static final String CHARSET = "UTF-8";
@@ -97,6 +99,7 @@
             + "/subscription";
     public static final String RESOURCE_PATH_THROTTLING_POLICIES_GLOBAL = RESOURCE_PATH_THROTTLING_POLICIES
             + "/custom";
+    public static final String RESOURCE_PATH_CATEGORY = "/categories";
 
     public static final String SERVER_URL = "/applications";
     public static final String SERVER_USER_NAME = "/applications";
@@ -122,6 +125,8 @@
     public static final String RESOURCE_PATH_RESOURCE_PATHS = "/resource-paths";
     public static final String RESOURCE_PATH_COMMENTS = "/comments";
     public static final String REST_API_STORE_VERSION_0 ="v0.16";
+    public static final String RESOURCE_PATH_API_CATEGORIES = "/api-categories";
+    public static final String RESOURCE_PATH_CATEGORY_THUMBNAIL = RESOURCE_PATH_API_CATEGORIES + "/" + APICATEGORYID_PARAM + "/thumbnail";
     public static final String REST_API_STORE_VERSION_1 ="v1";
     public static final String REST_API_STORE_CONTEXT="/api/am/store/";
     public static final String REST_API_STORE_CONTEXT_FULL_0 = REST_API_STORE_CONTEXT + REST_API_STORE_VERSION_0;
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json b/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json
index ee7ab6bb68e..633f4ea0c70 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.util/src/main/resources/admin-api.json
@@ -117,6 +117,12 @@
           "roles": "admin",
           "name": "apim:tenantInfo",
           "key": "apim:tenantInfo"
+        },
+        {
+          "description": "",
+          "roles": "admin",
+          "name": "apim:admin_operations",
+          "key": "apim:admin_operations"
         }
       ]
     }
@@ -2656,6 +2662,141 @@
           }
         }
       }
+    },
+    "/api-categories": {
+      "get": {
+        "x-scope": "apim:admin_operations",
+        "x-wso2-request": "GET https://localhost:9443/api/am/admin/v0.16/api-categories\nAuthorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n",
+        "x-wso2-curl": "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" \"https://localhost:9443/api/am/admin/v0.16/api-categories\"",
+        "x-wso2-response": "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}",
+        "summary": "Get all API categories",
+        "description": "Get all API categories\n",
+        "tags": [
+          "API Category (Collection)"
+        ],
+        "responses": {
+          "200": {
+            "description": "OK.\nCategories returned\n",
+            "schema": {
+              "$ref": "#/definitions/APICategoryList"
+            }
+          }
+        }
+      },
+      "post": {
+        "x-scope": "apim:admin_operations",
+        "x-wso2-curl": "curl -k -X POST -H \"Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\" -H \"Content-Type: application/json\" https://apis.wso2.com/api/am/admin/v0.16/api-categories -d @data.json",
+        "x-wso2-request": "POST https://localhost:9443/api/am/admin/v0.16/api-categories\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n -d  {\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n }",
+        "x-wso2-response": "HTTP/1.1 201 Created\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}",
+        "summary": "Add a new API Category",
+        "description": "Add a new API Category\n",
+        "parameters": [
+          {
+            "in": "body",
+            "name": "body",
+            "description": "API Category object that should to be added\n",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/APICategory"
+            }
+          }
+        ],
+        "tags": [
+          "API Category (Individual)"
+        ],
+        "responses": {
+          "201": {
+            "description": "Created.\nSuccessful response with the newly created object as entity in the body.\n",
+            "schema": {
+              "$ref": "#/definitions/APICategory"
+            }
+          },
+          "400": {
+            "description": "Bad Request.\nInvalid request or validation error\n",
+            "schema": {
+              "$ref": "#/definitions/Error"
+            }
+          }
+        }
+      }
+    },
+    "/api-categories/{apiCategoryId}": {
+      "put": {
+        "x-scope": "apim:admin_operations",
+        "x-wso2-curl": "curl -k -X PUT -H \"Authorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\" -H \"Content-Type: application/json\" https://localhost:9443/api/am/admin/v0.16/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779 -d @data.json",
+        "x-wso2-request": "PUT https://localhost:9443/api/am/admin/v0.16/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779\r\nAuthorization: Bearer 0d63e133-7ad6-3aeb-9ca9-9299e0708122\r\nContent-Type: application/json\r\n\r\n   {\r\n       \"name\":\"update_internal\",\r\n  \"description\":\"Updated label used for internal purpose\",\r\n  \"accessUrls\":[\r\n    \"https://localhost:9095\"\r\n         ]\r\n     }",
+        "x-wso2-response": "HTTP/1.1 200 Ok\r\nContent-Type: application/json\r\n\r\n{\r\n   \"count\":1,\r\n   \"list\":[\r\n      {\r\n         \"id\":\"463e2c9f-5e99-43c3-a66e-de7e0f367373\",\r\n         \"name\":\"Finance\",\r\n         \"description\":\"Finance related APIS\"\r\n      }\r\n   ]\r\n}",
+        "summary": "Update an API Category",
+        "description": "Update an API Category by category Id\n",
+        "parameters": [
+          {
+            "$ref": "#/parameters/apiCategoryId"
+          },
+          {
+            "in": "body",
+            "name": "body",
+            "description": "API Category object with updated information\n",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/APICategory"
+            }
+          }
+        ],
+        "tags": [
+          "API Category (Individual)"
+        ],
+        "responses": {
+          "200": {
+            "description": "OK.\nLabel updated.\n",
+            "schema": {
+              "$ref": "#/definitions/APICategory"
+            }
+          },
+          "400": {
+            "description": "Bad Request.\nInvalid request or validation error.\n",
+            "schema": {
+              "$ref": "#/definitions/Error"
+            }
+          },
+          "404": {
+            "description": "Not Found.\nThe resource to be updated does not exist.\n",
+            "schema": {
+              "$ref": "#/definitions/Error"
+            }
+          }
+        }
+      },
+      "delete": {
+        "x-scope": "apim:admin_operations",
+        "x-wso2-response": "HTTP/1.1 200 OK",
+        "summary": "Delete an API Category",
+        "description": "Delete an API Category by API Category Id\n",
+        "parameters": [
+          {
+            "$ref": "#/parameters/apiCategoryId"
+          },
+          {
+            "$ref": "#/parameters/If-Match"
+          },
+          {
+            "$ref": "#/parameters/If-Unmodified-Since"
+          }
+        ],
+        "tags": [
+          "API Category (Individual)"
+        ],
+        "responses": {
+          "200": {
+            "description": "OK.\nAPI Category successfully deleted.\n"
+          },
+          "404": {
+            "description": "Not Found.\nAPI Category to be deleted does not exist.\n",
+            "schema": {
+              "$ref": "#/definitions/Error"
+            }
+          }
+        }
+      }
     }
   },
   "parameters": {
@@ -2767,6 +2908,13 @@
       "description": "Workflow reference id\n",
       "required": true,
       "type": "string"
+    },
+    "apiCategoryId": {
+      "name": "apiCategoryId",
+      "in": "path",
+      "description": "API Category UUID\n",
+      "type": "string",
+      "required": true
     }
   },
   "definitions": {
@@ -3685,6 +3833,57 @@
           "example": -1234
         }
       }
+    },
+    "APICategory": {
+      "title": "API Category",
+      "required": [
+        "name"
+      ],
+      "properties": {
+        "id": {
+          "type": "string",
+          "example": "01234567-0123-0123-0123-012345678901"
+        },
+        "name": {
+          "type": "string",
+          "example": "Finance"
+        },
+        "description": {
+          "type": "string",
+          "example": "Finance related APIs"
+        }
+      }
+    },
+    "APICategoryList": {
+      "title": "API Category List",
+      "properties": {
+        "count": {
+          "type": "integer",
+          "description": "Number of API categories returned.\n",
+          "example": 1
+        },
+        "list": {
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/APICategory"
+          }
+        }
+      }
+    },
+    "FileInfo": {
+      "title": "File Information including meta data",
+      "properties": {
+        "relativePath": {
+          "type": "string",
+          "description": "relative location of the file (excluding the base context and host of the Admin API)",
+          "example": "api-categories/01234567-0123-0123-0123-012345678901/thumbnail"
+        },
+        "mediaType": {
+          "type": "string",
+          "description": "media-type of the file",
+          "example": "image/jpeg"
+        }
+      }
     }
   }
-}
+}
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2 b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2
index 12da981b91f..0a2a3fe3ca7 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/conf_templates/templates/repository/conf/api-manager.xml.j2
@@ -632,6 +632,10 @@
                 <URI>/api/am/publisher/{version}/settings</URI>
                 <HTTPMethods>GET</HTTPMethods>
             </WhiteListedURI>
+            <WhiteListedURI>
+                <URI>/api/am/store/{version}/api-categories</URI>
+                <HTTPMethods>GET</HTTPMethods>
+            </WhiteListedURI>
         </WhiteListedURIs>
         <ETagSkipList>
             <ETagSkipURI>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml
index 966cbc38082..2d590b36649 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/config/api-manager.xml
@@ -512,6 +512,10 @@
                 <URI>/api/am/store/{version}/api-products/{apiProductId}/thumbnail</URI>
                 <HTTPMethods>GET,HEAD</HTTPMethods>
             </WhiteListedURI>
+            <WhiteListedURI>
+                <URI>/api/am/store/{version}/api-categories</URI>
+                <HTTPMethods>GET</HTTPMethods>
+            </WhiteListedURI>
         </WhiteListedURIs>
         <ETagSkipList>
             <ETagSkipURI>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/rxts/api.rxt b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/rxts/api.rxt
index c27de4ec102..7b9f8d22946 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/rxts/api.rxt
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/rxts/api.rxt
@@ -274,6 +274,14 @@
                 <name label="Label Name">labelName</name>
             </field>
         </table>
+        <table name="API Categories" columns="1"  maxoccurs="unbounded">
+            <subheading>
+                <heading>Category Name</heading>
+            </subheading>
+            <field type="text">
+                <name label="Category Name">categoryName</name>
+            </field>
+        </table>
 </content>
 
 </artifactType>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql
index 4a8caa81d1e..22bc760050b 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/db2.sql
@@ -2435,6 +2435,15 @@ CREATE TABLE AM_REVOKED_JWT (
     TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (UUID)
 ); /
+
+CREATE TABLE AM_API_CATEGORIES (
+  UUID VARCHAR(50) NOT NULL,
+  NAME VARCHAR(255) NOT NULL,
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+) /
 -- End of API-MGT Tables --
 
 -- Performance indexes start--
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
index 9c1b48adc4f..03226aa1815 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
@@ -1725,4 +1725,13 @@ CREATE TABLE IF NOT EXISTS AM_REVOKED_JWT (
     TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (UUID)
 );
+
+CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (
+  UUID VARCHAR(50),
+  NAME VARCHAR(255),
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+);
 -- End of API-MGT Tables --
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql
index ea8bae06f4a..fe5a9355ccc 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mssql.sql
@@ -1905,6 +1905,16 @@ CREATE TABLE AM_REVOKED_JWT (
     TIME_CREATED DATETIME DEFAULT GETDATE(),
     PRIMARY KEY (UUID)
 );
+
+IF NOT  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[DBO].[AM_API_CATEGORIES]') AND TYPE IN (N'U'))
+CREATE TABLE AM_API_CATEGORIES (
+  UUID VARCHAR(50),
+  NAME VARCHAR(255),
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+);
 -- End of API-MGT Tables --
 
 
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
index 7056b5036b9..db9b11bd740 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
@@ -1688,6 +1688,15 @@ CREATE TABLE IF NOT EXISTS AM_REVOKED_JWT (
     TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (UUID)
 ) ENGINE=InnoDB;
+
+CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (
+  UUID VARCHAR(50),
+  NAME VARCHAR(255),
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+) ENGINE=InnoDB;
 -- End of API-MGT Tables --
 
 -- UMA tables --
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql
index d4113cc2ccb..b2ebfde5a6a 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql_cluster.sql
@@ -1844,6 +1844,15 @@ CREATE TABLE IF NOT EXISTS AM_SYSTEM_APPS (
     PRIMARY KEY (ID)
  ) ENGINE=InnoDB;
 
+ CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (
+   UUID VARCHAR(50),
+   NAME VARCHAR(255),
+   DESCRIPTION VARCHAR(1024),
+   TENANT_ID INTEGER,
+   UNIQUE (NAME,TENANT_ID),
+   PRIMARY KEY (UUID)
+ ) ENGINE=NDB;
+
 -- BotDATA Email table --
 CREATE TABLE IF NOT EXISTS AM_NOTIFICATION_SUBSCRIBER (
     UUID VARCHAR(255),
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql
index 415dd2879c4..0842469d338 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle.sql
@@ -2788,6 +2788,16 @@ CREATE TABLE AM_REVOKED_JWT (
     PRIMARY KEY (UUID)
 )
 /
+
+CREATE TABLE AM_API_CATEGORIES (
+  UUID VARCHAR2(50),
+  NAME VARCHAR2(255) NOT NULL,
+  DESCRIPTION VARCHAR2(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+)
+/
 -- End of API-MGT Tables --
 
 --permance indexes start--
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql
index c6b2cd37c71..ce34d34b848 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/oracle_rac.sql
@@ -2626,6 +2626,16 @@ CREATE TABLE AM_REVOKED_JWT (
     PRIMARY KEY (UUID)
 );
 /
+
+CREATE TABLE AM_API_CATEGORIES (
+  UUID VARCHAR2(50),
+  NAME VARCHAR2(255) NOT NULL,
+  DESCRIPTION VARCHAR2(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+)
+/
 -- End of API-MGT Tables --
 
 --permance indexes start--
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql
index 31b4ad1eaeb..d4442be77de 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/postgresql.sql
@@ -2014,6 +2014,16 @@ CREATE TABLE IF NOT EXISTS AM_REVOKED_JWT (
     TIME_CREATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PRIMARY KEY (UUID)
 );
+
+DROP TABLE IF EXISTS AM_API_CATEGORIES;
+CREATE TABLE IF NOT EXISTS AM_API_CATEGORIES (
+  UUID VARCHAR(50),
+  NAME VARCHAR(255),
+  DESCRIPTION VARCHAR(1024),
+  TENANT_ID INTEGER DEFAULT -1,
+  UNIQUE (NAME,TENANT_ID),
+  PRIMARY KEY (UUID)
+);
 -- End of API-MGT Tables --
 
 -- Performance indexes start--
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/tenant/tenant-conf.json b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/tenant/tenant-conf.json
index 5b61e960695..8bd306abb64 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/tenant/tenant-conf.json
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/tenant/tenant-conf.json
@@ -191,6 +191,10 @@
       {
         "Name": "apim:tenantInfo",
         "Roles": "admin"
+      },
+      {
+        "Name": "apim:admin_operations",
+        "Roles": "admin"
       }
     ]
   },
diff --git a/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx
index 8482cc19d4f..5ccabcc8204 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx
+++ b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx
@@ -37,6 +37,7 @@ import Description from './components/Description';
 import AccessControl from './components/AccessControl';
 import StoreVisibility from './components/StoreVisibility';
 import Tags from './components/Tags';
+import APICategories from './components/APICategories';
 
 const useStyles = makeStyles((theme) => ({
     root: {
@@ -128,6 +129,7 @@ function copyAPIConfig(api) {
         transport: [...api.transport],
         wsdlUrl: api.wsdlUrl,
         securityScheme: [...api.securityScheme],
+        categories: [...api.categories],
         corsConfiguration: {
             corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,
             accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,
@@ -164,6 +166,7 @@ export default function DesignConfigurations() {
             case 'enableSchemaValidation':
             case 'visibility':
             case 'maxTps':
+            case 'categories':
             case 'tags':
                 nextState[action] = value;
                 return nextState;
@@ -252,6 +255,13 @@ export default function DesignConfigurations() {
                                     <Box py={1}>
                                         <Tags api={apiConfig} configDispatcher={configDispatcher} />
                                     </Box>
+                                    <Box py={1}>
+                                        <APICategories
+                                            api={apiConfig}
+                                            configDispatcher={configDispatcher}
+                                            categories={api.categories}
+                                        />
+                                    </Box>
                                     <Box py={1}>
                                         {api.apiType !== 'APIProduct' && (
                                             <DefaultVersion api={apiConfig} configDispatcher={configDispatcher} />
diff --git a/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx
new file mode 100644
index 00000000000..352ca46b8f7
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ * WSO2 Inc. licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import React, { useState, useEffect } from 'react';
+import PropTypes from 'prop-types';
+import TextField from '@material-ui/core/TextField';
+import { FormattedMessage } from 'react-intl';
+import MenuItem from '@material-ui/core/MenuItem';
+import ListItemText from '@material-ui/core/ListItemText';
+import Checkbox from '@material-ui/core/Checkbox';
+import Box from '@material-ui/core/Box';
+
+import API from 'AppData/api';
+import { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';
+
+function APICategories(props) {
+    const [categories, setCategories] = useState({});
+    const { api, configDispatcher } = props;
+
+    console.log(api.selectedCategories);
+
+    useEffect(() => {
+        API.apiCategories().then((response) => setCategories(response.body));
+    }, []);
+
+    // const handleValidateAndChange = ({ target: { value, name } }) => {
+    //     onChange({ target: { name, value } });
+    // };
+
+    if (!categories.list) {
+        return null;
+    } else {
+        return (
+            <Box style={{ marginTop: 10 }}>
+                <TextField
+                    fullWidth
+                    select
+                    label={(
+                        <>
+                            <FormattedMessage
+                                id='Apis.Details.Configurations.api.categories'
+                                defaultMessage='API Categories'
+                            />
+                        </>
+                    )}
+                    name='categories'
+                    margin='normal'
+                    variant='outlined'
+                    value={api.categories}
+                    SelectProps={{
+                        multiple: true,
+                        renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),
+                    }}
+                    onChange={(e) => configDispatcher({ action: 'categories', value: e.target.value })}
+                    InputProps={{
+                        id: 'itest-id-categories-input',
+                    }}
+                    helperText='Select API Categories for the API'
+                >
+                    {categories.list.map((category) => (
+                        <MenuItem
+                            dense
+                            disableGutters
+                            id={category.id}
+                            key={category.name}
+                            value={category.name}
+                        >
+                            <Checkbox color='primary' checked={api.categories.includes(category.name)} />
+                            <ListItemText primary={category.name} secondary={category.description} />
+                        </MenuItem>
+                    ))}
+                </TextField>
+            </Box>
+        );
+    }
+}
+
+APICategories.defaultProps = {
+    categories: [],
+    api: PropTypes.shape({}).isRequired,
+    configDispatcher: PropTypes.func.isRequired,
+};
+
+export default withAPI(APICategories);
diff --git a/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/data/api.js b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/data/api.js
index 605944e0f6d..88cd90a85f3 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/data/api.js
+++ b/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/data/api.js
@@ -2207,6 +2207,20 @@ class API extends Resource {
             );
         });
     }
+
+    /**
+     * @static
+     * Get all API Categories of the given tenant
+     * @return {Promise}
+     * */
+    static apiCategories() {
+        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment()).client;
+        return apiClient.then(client => {
+            return client.apis["API Category (Collection)"].get_api_categories(
+                this._requestMetaData(),
+            );
+        });
+    }
 }
 
 
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/jaggery.conf b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/jaggery.conf
index 2a59ffb4d70..c45dd5c5e93 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/jaggery.conf
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/jaggery.conf
@@ -175,6 +175,14 @@
         {
             "url":"/bot-detection-email-configuration",
             "path":"/site/pages/bot-detection-email-configuration.jag"
+        },
+        {
+            "url":"/api-category-add",
+            "path":"/site/pages/api-category-add.jag"
+        },
+        {
+            "url":"/api-category-list",
+            "path":"/site/pages/api-category-list.jag"
         }
     ],
 
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-add.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-add.jag
new file mode 100644
index 00000000000..72a601415d1
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-add.jag
@@ -0,0 +1,69 @@
+<%
+var log = new Log();
+var addAPICategory = function (action, uuid, categoryName, description) {
+    try {
+        var username = jagg.getUser().username;
+        var APIAdminImpl = Packages.org.wso2.carbon.apimgt.impl.APIAdminImpl;
+        var apiAdmin = new APIAdminImpl();
+
+        var APICategory = Packages.org.wso2.carbon.apimgt.api.model.APICategory;
+        var category = new APICategory();
+
+        category.setId(uuid);
+        category.setName(categoryName);
+        category.setDescription(description);
+
+        if (action == "categoryAction") {
+            var category = constructCategoryObject(uuid, categoryName, description);
+            apiAdmin.addCategory(category, username);
+        } else if (action == "update") {
+            var category = constructCategoryObject(uuid, categoryName, description);
+            apiAdmin.updateCategory(category);
+        }
+        return {
+            error: false
+        };
+    } catch (ex) {
+        var errorMessage = "Error occurred while saving API Category (Cause:" + ex.message + ")";
+        log.error(errorMessage);
+        return {
+            error: true,
+            message: errorMessage
+        };
+    }
+};
+
+var isCategoryNameExists = function(categoryName, uuid, tenantId) {
+    try {
+        var exists;
+        var APIAdminImpl = Packages.org.wso2.carbon.apimgt.impl.APIAdminImpl;
+        var apiAdmin = new APIAdminImpl();
+
+        exists = apiAdmin.isCategoryNameExists(categoryName, uuid, tenantId);
+        if (log.isDebugEnabled()) {
+            log.debug("isAPICategoryNameExists exist for : " + categoryName + " : " + exists);
+        }
+        return {
+            error:false,
+            exist:exists
+        };
+    } catch (e) {
+        log.error(e.message);
+        return {
+            error:e
+        };
+    }
+}
+
+var constructCategoryObject  = function(categoryId, categoryName, description){
+    var APICategory = Packages.org.wso2.carbon.apimgt.api.model.APICategory;
+    var category = new APICategory();
+
+    category.setId(categoryId);
+    category.setName(categoryName);
+    category.setDescription(description);
+
+    return category;
+}
+
+%>
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-list.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-list.jag
new file mode 100644
index 00000000000..35fda8feffb
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/api-category-list.jag
@@ -0,0 +1,44 @@
+<%
+var log = new Log();
+
+var getAllAPICategories = function() {
+    try {
+        var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
+        var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
+        var APIAdminImpl = Packages.org.wso2.carbon.apimgt.impl.APIAdminImpl;
+        var apiAdmin = new APIAdminImpl();
+
+        var categoryList = apiAdmin.getAllAPICategoriesOfTenantForAdminListing(jagg.getUser().username);
+        return {
+            error: false,
+            categoryList:categoryList
+        };
+    } catch (e) {
+        var errorMessage = "Error occurred while getting API Categories. (Cause:" + e.message + ")";
+        log.error(errorMessage);
+        return {
+            error: true,
+            message: errorMessage
+        };
+    }
+};
+
+var deleteAPICategory = function (uuid) {
+    try {
+        var APIAdminImpl = Packages.org.wso2.carbon.apimgt.impl.APIAdminImpl;
+        var apiAdmin = new APIAdminImpl();
+        apiAdmin.deleteCategory(uuid, jagg.getUser().username);
+        if (log.isDebugEnabled()) {
+            log.debug("API Category " + uuid + " was deleted successfully.");
+        }
+        return {
+            error: false
+        };
+    } catch (e) {
+        return {
+            error: true,
+            message: e.message.split(":")[1]
+        };
+    }
+};
+%>
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/module.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/module.jag
new file mode 100644
index 00000000000..e1e79a926e6
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/modules/api-category/module.jag
@@ -0,0 +1,16 @@
+<%
+jagg.module("api-category", {
+    getAllAPICategories:function () {
+        return jagg.require(jagg.getModulesDir() + "api-category/api-category-list.jag").getAllAPICategories.apply(this, arguments);
+    },
+    deleteAPICategory:function () {
+        return jagg.require(jagg.getModulesDir() + "api-category/api-category-list.jag").deleteAPICategory.apply(this, arguments);
+    },
+    addAPICategory:function () {
+        return jagg.require(jagg.getModulesDir() + "api-category/api-category-add.jag").addAPICategory.apply(this, arguments);
+    },
+    isCategoryNameExists:function () {
+        return jagg.require(jagg.getModulesDir() + "api-category/api-category-add.jag").isCategoryNameExists.apply(this, arguments);
+    },
+});
+%>
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/ajax/api-category-edit.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/ajax/api-category-edit.jag
new file mode 100644
index 00000000000..66a4ae442b3
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/ajax/api-category-edit.jag
@@ -0,0 +1,74 @@
+<%
+include("/jagg/jagg.jag");
+
+(function () {
+    response.contentType = "application/json; charset=UTF-8";
+    var mod, result, obj, permissionResult,
+    action = request.getParameter("action"),
+    uuid = request.getParameter("uuid"),
+    site = require("/site/conf/site.json"),
+    msg = require("/site/conf/ui-messages.jag");
+
+    if(uuid == null) {
+        uuid = -1;
+    }
+    if (jagg.getUser() == null) {
+        print({
+            error:true,
+            message:'timeout'
+        });
+    } else if (request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()) {
+        print({
+            error:true,
+            message: msg.error.csrfError
+        });
+    } else if (request.getMethod() == 'POST') {
+        if (action == "categoryAction" || action == "update" ) {
+            var categoryName =  request.getParameter("categoryName", "UTF-8");
+            var description =  request.getParameter("description", "UTF-8");
+
+            mod = jagg.module("api-category");
+
+            result = mod.addAPICategory(action, uuid, categoryName, description);
+
+            if (result.error) {
+                obj = {
+                    error:true,
+                    message:result.message
+                };
+            } else {
+                obj = {
+                    error:false,
+                    response:result.valid
+                }
+            }
+            print(obj);
+        } else if (action = "isAPICategoryNameExists") {
+            mod = jagg.module("api-category");
+            var categoryName =  request.getParameter("categoryName", "UTF-8");
+            var uuid =  request.getParameter("uuid", "UTF-8");
+
+            var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
+            var APIUtil = Packages.org.wso2.carbon.apimgt.impl.utils.APIUtil;
+            var username = jagg.getUser().username;
+            var tenantDomain = MultitenantUtils.getTenantDomain(username);
+            var tenantId = APIUtil.getTenantIdFromTenantDomain(tenantDomain);
+
+            result = mod.isCategoryNameExists(categoryName, uuid, tenantId);
+            if (result.error) {
+                obj = {
+                    error:true,
+                    message:msg.error.backendError(action)
+                };
+            } else {
+                obj = {
+                    error:false,
+                    exist:result.exist
+                }
+            }
+
+            print(obj);
+        }
+    }
+ }());
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/block.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/block.jag
new file mode 100644
index 00000000000..614f67a8c27
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-add/block.jag
@@ -0,0 +1,22 @@
+<%
+jagg.block("api-category/api-category-add", {
+    initializer:function (data) {},
+
+    getInputs:function () {
+        return {};
+    },
+
+    getOutputs:function (inputs) {
+        var labelList, result;
+        result = jagg.module("label").getAllLabels();
+        labelList = result.labelList;
+
+        // we put results to the session.
+        session.put("labelList", labelList);
+     
+        return {
+            "labelList":labelList
+        };
+    }
+});
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/ajax/api-category-list.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/ajax/api-category-list.jag
new file mode 100644
index 00000000000..e6376a2dd1c
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/ajax/api-category-list.jag
@@ -0,0 +1,35 @@
+<%
+include("/jagg/jagg.jag");
+
+(function () {
+    response.contentType = "application/json; charset=UTF-8";
+    var mod, result, obj,
+    action = request.getParameter("action"),
+    site = require("/site/conf/site.json"),
+    msg = require("/site/conf/ui-messages.jag");
+    if (jagg.getUser() == null) {
+        print({
+            error:true,
+            message:'timeout'
+        });
+
+    } else if (request.getMethod() == 'POST') {
+        if (action == "deleteAPICategory" )  {
+            mod = jagg.module("api-category");
+            result = mod.deleteAPICategory(request.getParameter("uuid"));
+            if (result.error) {
+                obj = {
+                    error:true,
+                    message:msg.error.backendError(action) + ". Reason : " + result.message
+                };
+            } else {
+                obj = {
+                    error:false,
+                    response:result.valid
+                }
+            }
+            print(obj);
+        }
+    }
+ }());
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/block.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/block.jag
new file mode 100644
index 00000000000..e8b5bfb1f39
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/blocks/api-category/api-category-list/block.jag
@@ -0,0 +1,23 @@
+<%
+jagg.block("api-category/api-category-list", {
+    initializer:function (data) {},
+
+    getInputs:function () {
+        return {};
+    },
+
+    getOutputs:function (inputs) {
+        var categoryList, result;
+        var log = new Log();
+        result = jagg.module("api-category").getAllAPICategories();
+        categoryList = result.categoryList;
+
+        // we put results to the session.
+        session.put("categoryList", categoryList);
+
+        return {
+            "categoryList":categoryList
+        };
+    }
+});
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_default.json b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_default.json
index 26aa5317e29..166b19778af 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_default.json
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_default.json
@@ -318,5 +318,12 @@
     "Application Name" : "Application Name",
     "Owner" : "Owner",
     "Change Application Owner" : "Change Application Owner",
-    "Invalid role name" : "Invalid role name"
+    "Invalid role name" : "Invalid role name",
+    "API Categories": "API Categories",
+    "Category Name": "Category Name",
+    "API Categories are not defined": "API Categories are not defined",
+    "API Category contains one or more illegal characters": "API Category contains one or more illegal characters",
+    "API Category name already Exists": "API Category name already Exists",
+    "Categories": "Categories",
+    "API Categories": "API Categories"
 }
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_en.json b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_en.json
index de7fcd50bde..cfc7ad8fb67 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_en.json
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/conf/locales/jaggery/locale_en.json
@@ -309,5 +309,17 @@
     "No Alert triggered" : "No Alert triggered",
     "Configure Emails": "Configure Emails",
     "Bot Detection": "Bot Detection",
-    "Bot Detection Data": "Bot Detection Data"
+    "Bot Detection Data": "Bot Detection Data",
+    "API Categories": "API Categories",
+    "Category Name": "Category Name",
+    "API Categories are not defined": "API Categories are not defined",
+    "Add API Category": "Add API Category",
+    "Edit API Category": "Edit API Category",
+    "API Category": "API Category",
+    "API Category contains one or more illegal characters": "API Category contains one or more illegal characters",
+    "API Category name already Exists": "API Category name already Exists",
+    "Categories": "Categories",
+    "Number of APIs": "Number of APIs",
+    "API Categories": "API Categories"
+
 }
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-add.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-add.jag
new file mode 100644
index 00000000000..7584a583b5d
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-add.jag
@@ -0,0 +1,46 @@
+<%
+include("/jagg/jagg.jag");
+include("header.jag");
+var site = require("/site/conf/site.json");
+
+var i18n = require("i18n");
+var localeResourcesBasePath="/site/conf/locales/jaggery/";
+i18n.init(request,localeResourcesBasePath);
+
+(function () {
+    var user = jagg.getUser();
+    if (!user && site.ssoConfiguration.enabled == "true" && site.ssoConfiguration.idpInit == "true") {
+        //There is already a redirection applied to idpInitSSOURL (in site.conf) from sso/fiter.
+        //So we should not do another redirection; just return from this.
+        return;
+    }
+    if (!user) {
+        response.sendRedirect(getRedirectPathForNonAuthenticatedUser());
+        return;
+    }
+    jagg.render({
+        "name":"page/base",
+        "inputs":{
+            "title":"Add API Category",
+             "header":{
+                "name":"menu/primary"
+            },
+            "body":[
+                {
+                    "name":"layout/extended",
+                    "inputs":{
+                        "middle":{
+                            "name":"api-category/api-category-add"
+                        }
+                    }
+                }
+            ],"footer":[
+                {
+                    "name":"footer"
+                }
+            ]
+        }
+    });
+}());
+
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-list.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-list.jag
new file mode 100644
index 00000000000..bf2868f313d
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/pages/api-category-list.jag
@@ -0,0 +1,46 @@
+<%
+include("/jagg/jagg.jag");
+include("header.jag");
+var site = require("/site/conf/site.json");
+
+var i18n = require("i18n");
+var localeResourcesBasePath="/site/conf/locales/jaggery/";
+i18n.init(request,localeResourcesBasePath);
+
+(function () {
+    var user = jagg.getUser();
+    if (!user && site.ssoConfiguration.enabled == "true" && site.ssoConfiguration.idpInit == "true") {
+        //There is already a redirection applied to idpInitSSOURL (in site.conf) from sso/fiter.
+        //So we should not do another redirection; just return from this.
+        return;
+    }
+    if (!user) {
+        response.sendRedirect(getRedirectPathForNonAuthenticatedUser());
+        return;
+    }
+    jagg.render({
+        "name":"page/base",
+        "inputs":{
+            "title":"API Category",
+             "header":{
+                "name":"menu/primary"
+            },
+            "body":[
+                {
+                    "name":"layout/extended",
+                    "inputs":{
+                        "middle":{
+                            "name":"api-category/api-category-list"
+                        }
+                    }
+                }
+            ],"footer":[
+                {
+                    "name":"footer"
+                }
+            ]
+        }
+    });
+}());
+
+%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/initializer.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/initializer.jag
new file mode 100644
index 00000000000..8b7d8184f1f
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/initializer.jag
@@ -0,0 +1,8 @@
+<%
+jagg.initializer("api-category/api-category-add", {
+      preInitialize:function () {
+        jagg.addHeaderJS("api-category/api-category-add", "jagg", "templates/api-category/api-category-add/js/add.js");
+    }
+});
+%>
+
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/js/add.js b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/js/add.js
new file mode 100644
index 00000000000..3198183e9ef
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/js/add.js
@@ -0,0 +1,150 @@
+var attributeCount = 0;
+
+var addAPICategory = function () {
+    if (!validateInputs()) {
+        return;
+    }
+
+    $('#add-api-category-btn').buttonLoader('start');
+    jagg.post("/site/blocks/api-category/api-category-add/ajax/api-category-edit.jag", {
+        action: $('#action').val(),
+        categoryName: $('#categoryName').val().trim(),
+        uuid: $('#uuid').val(),
+        description: htmlEscape($('#description').val()),
+    }, function (result) {
+        if (result.error == false) {
+            location.href = 'api-category-list'
+        } else {
+            $('#add-api-category-btn').buttonLoader('stop');
+            jagg.message({ content: result.message, type: "error" });
+        }
+    },
+        "json");
+
+};
+
+function htmlEscape(str) {
+    if (str == null || str == "") {
+        return "";
+    }
+    return String(str)
+        .replace(/&/g, '&amp;')
+        .replace(/"/g, '&quot;')
+        .replace(/'/g, '&#39;')
+        .replace(/</g, '&lt;')
+        .replace(/>/g, '&gt;');
+}
+
+function validateInputs() {
+    //validate name
+    var requiredMsg = $('#errorMsgRequired').val();
+    var invalidErrorMsg = $('#errorMessageInvalid').val();
+    var illegalChars = $('#errorMessageIllegalChar').val();
+    var errorHasSpacesMsg = $('#errorMessageSpaces').val();
+    var lengthIsTooLong = $('#errorMessageTooLengthy').val();
+    var categoryNameAlreadyExists = $('#categoryNameExists').val();
+    var categoryName = $('#categoryName');
+    var categoryNameTxt = categoryName.val();
+
+    if (!validateInput(categoryNameTxt, categoryName, requiredMsg)) {
+        return false;
+    }
+    if (!validateLength(categoryNameTxt, categoryName, lengthIsTooLong)) {
+        return false;
+    }
+    if (!validateInputCharacters(categoryNameTxt, categoryName, illegalChars)) {
+        return false;
+    }
+    if (!validateForSpaces(categoryNameTxt, categoryName, errorHasSpacesMsg)) {
+        return false;
+    }
+    if (validateForNameAlreadyExists(categoryNameTxt, categoryName, categoryNameAlreadyExists)) {
+        return false;
+    }
+    return true;
+}
+
+function validateInput(text, element, errorMsg) {
+    var elementId = element.attr('id');
+    text = text.trim();
+    if (text == "") {
+        element.css("border", "1px solid red");
+        $('#category' + elementId).remove();
+        element.parent().append('<label class="error" id="label' + elementId + '" >' + errorMsg + '</label>');
+        return false;
+    } else {
+        $('#label' + elementId).remove();
+        element.css("border", "1px solid #cccccc");
+        return true;
+    }
+}
+
+function validateLength(text, element, errorMsg) {
+    var elementId = element.attr('id');
+    text = text.trim();
+    if (text.length > 255) {
+        element.css("border", "1px solid red");
+        $('#label' + elementId).remove();
+        element.parent().append('<label class="error" id="label' + elementId + '" >' + errorMsg + '</label>');
+        return false;
+    } else {
+        $('#label' + elementId).remove();
+        element.css("border", "1px solid #cccccc");
+        return true;
+    }
+}
+
+function validateInputCharacters(text, element, errorMsg) {
+    var elementId = element.attr('id');
+    var illegalChars = /([~!&@#;%^*+={}$\|\\<>\"\',])/;
+    text = text.trim();
+    if (illegalChars.test(text)) {
+        element.css("border", "1px solid red");
+        $('#label' + elementId).remove();
+        element.parent().append('<label class="error" id="label' + elementId + '" >' + errorMsg + '</label>');
+        return false;
+    } else {
+        $('#label' + elementId).remove();
+        element.css("border", "1px solid #cccccc");
+        return true;
+    }
+}
+
+function validateForSpaces(text, element, errorMsg) {
+    var elementId = element.attr('id');
+    text = text.trim();
+    if (text.indexOf(' ') >= 0) {
+        element.css("border", "1px solid red");
+        $('#label'+elementId).remove();
+        element.parent().append('<label class="error" id="label'+elementId+'" >' + errorMsg + '</label>');
+        return false;
+    } else {
+        $('#label'+elementId).remove();
+        element.css("border", "1px solid #cccccc");
+        return true;
+    }
+}
+
+function validateForNameAlreadyExists(text, element, errorMsg) {
+    var elementId = element.attr('id');
+    var apiCategoryNameExist = false;
+    jagg.syncPost("/site/blocks/api-category/api-category-add/ajax/api-category-edit.jag", {
+        action: "isAPICategoryNameExists",
+        categoryName: $('#categoryName').val().trim(),
+        uuid: $('#uuid').val(),
+    }, function (result) {
+        if (!result.error) {
+            apiCategoryNameExist = result.exist;
+        }
+    });
+    if(apiCategoryNameExist) {
+        element.css("border", "1px solid red");
+        $('#label' + elementId).remove();
+        element.parent().append('<label class="error" id="label' + elementId + '" >' + errorMsg + '</label>');
+        return true;
+    } else {
+        $('#label' + elementId).remove();
+        element.css("border", "1px solid #cccccc");
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/template.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/template.jag
new file mode 100644
index 00000000000..290810dfa17
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-add/template.jag
@@ -0,0 +1,97 @@
+<% jagg.template("api-category/api-category-add", function(inputs, outputs, jagg) { %>
+
+    <%
+    var uuid = request.getParameter("uuid");
+    var action = request.getParameter("action");
+    var pageTitle = i18n.localize("Add API Category");
+    var nameFieldDisableStatus = "";
+
+    if (action == null) {
+        action = "categoryAction";
+    }
+    if (uuid != null) {
+        nameFieldDisableStatus = "readonly";
+        pageTitle = i18n.localize("Edit API Category");
+        var categories = session.get("categoryList");
+    	var APICategory = Packages.org.wso2.carbon.apimgt.api.model.APICategory;
+  		var category = new APICategory();
+
+        for (i=0; i < categories.size(); i++) {
+        	if (uuid.equalsIgnoreCase(categories.get(i).getId())) {
+                category = categories.get(i);
+                break;
+            }
+	    }
+		var name = category.getName();
+        var description = category.getDescription() == null ? "" : category.getDescription();
+   	}
+%>
+
+ <form class="apim-form form-horizontal">
+    <div class="page-header">
+        <h2 id="tierTopic"><%=pageTitle%></h2>
+        <p class="lead"></p>
+    </div>
+    <input type='hidden' id='errorMessageTooLengthy' name='errorMessageTooLengthy'
+                value='<%=i18n.localize("Maximum length is 255")%>'/>
+    <input type='hidden' id='errorMsgRequired' name='errorMsgRequired'
+                value='<%=i18n.localize("Required")%>'/>
+    <input type='hidden' id='errorMessageInvalid' name='errorMessageInvalid'
+                value='<%=i18n.localize("Invalid")%>'/>
+    <input type='hidden' id='errorMessageIllegalChar' name='errorMessageIllegalChar'
+                value='<%=i18n.localize("API Category contains one or more illegal characters")%> ( [ ~ ! $ & @ # ; % ^ & * + = { } | <> \"  , ] ). '/>
+    <input type="hidden" id="uuid" name="uuid" value="<%=encode.forHtmlAttribute(uuid)%>" />
+    <input type="hidden" id="action" name="action" value="<%=encode.forHtmlAttribute(action)%>"/>
+    <input type='hidden' id='errorMessageSpaces' name='errorMessageSpaces' value='<%=i18n.localize("API Category name contains spaces")%>'/>
+    <input type='hidden' id='categoryNameExists' name='categoryNameExists' value='<%=i18n.localize("API Category name already Exists")%>'/>
+    <div class="page-header">
+	    <h2><br></h2>
+	    <p class="lead"><%=i18n.localize("General Details")%></p>
+	</div>
+    <div class="form-group">
+		<label class="control-label col-sm-3"><%=i18n.localize("API Category")%>  <span class="requiredAstrix">*</span></label>
+		<div class="col-md-9">
+		    <input class="form-control" type="text" id="categoryName" name="categoryName" <%=nameFieldDisableStatus%>/>
+		</div>
+	</div>
+    <div class="form-group">
+		<label class="control-label col-sm-3"><%=i18n.localize("Description")%></label>
+		<div class="col-md-9">
+			<textarea class="form-control" id="description" class="text" name="description" ></textarea>
+		</div>
+	</div>
+
+    <div class="form-group">
+		<button type="button" id="add-api-category-btn" onclick="addAPICategory()" name="save-api-category-btn" class="btn btn-primary has-spinner">
+			<span class="icon fw-stack">
+			    <i class="fw fw-save fw-stack-1x"></i>
+				<i class="fw fw-circle-outline fw-stack-2x"></i>
+			</span>
+			<%=i18n.localize("Save")%>
+		</button>
+		<button type="button" id="cancel-api-category-btn" class="btn btn-secondary">
+			<span class="icon fw-stack">
+				<i class="fw fw-cancel fw-stack-1x"></i>
+				<i class="fw fw-circle-outline fw-stack-2x"></i>
+			</span>
+			<%=i18n.localize("Cancel")%>
+		</button>
+	</div>
+</form>
+
+<script>
+   $(document).ready(function() {
+    	$('#cancel-api-category-btn').on('click',function(){
+            location.href = "<%= jagg.url('/api-category-list')%>";
+       });
+        var isNewAPICategory = true;
+        if ('<%=encode.forHtmlAttribute(uuid)%>' != 'null') {
+            isNewAPICategory = false;
+        }
+        if(!isNewAPICategory){
+            $('#categoryName').val("<%=name%>");
+            $('#description').val("<%=description%>");
+        }
+   });
+</script>
+<%});%>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/initializer.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/initializer.jag
new file mode 100644
index 00000000000..732b47a8d35
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/initializer.jag
@@ -0,0 +1,8 @@
+<%
+jagg.initializer("api-category/api-category-list", {
+      preInitialize:function () {
+        jagg.addHeaderJS("api-category/api-category-list", "jagg", "templates/api-category/api-category-list/js/manage.js");
+    }
+});
+%>
+
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/js/manage.js b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/js/manage.js
new file mode 100644
index 00000000000..e0f634c96e1
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/js/manage.js
@@ -0,0 +1,23 @@
+var deleteAPICategory = function (uuid) {
+    $("#messageModal div.modal-footer").html("");
+    jagg.message({
+        content:i18n.t('Are you sure you want to delete this API Category?'),
+        title:i18n.t('Confirm Deletion'),
+        type:'confirm',
+        anotherDialog:true,
+        okCallback:function(){
+            jagg.post("/site/blocks/api-category/api-category-list/ajax/api-category-list.jag", {
+                    action:"deleteAPICategory",
+                    uuid:uuid
+                }, function (result) {
+                    if (result.error == false) {
+                        window.location.reload(true);
+                    } else {
+                        jagg.message({content:result.message,type:"error"});
+                    }
+                },
+                "json"
+            );
+        }
+    });
+};
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/template.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/template.jag
new file mode 100644
index 00000000000..847bfde903a
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/api-category/api-category-list/template.jag
@@ -0,0 +1,73 @@
+<% jagg.template("api-category/api-category-list", function(inputs, outputs, jagg) { %>
+
+<div id="category-listing">
+    <div class="page-header">
+        <h2><%= i18n.localize("API Categories")%></h2>
+    </div>
+    <div class="content-section shadow-up">
+        <div class="content-data" style="overflow-x:auto;">
+            <%if (outputs.categoryList.size()) { %>
+                <table class="table table-responsive table-striped" >
+                    <thead>
+                        <tr>
+                            <th class=""><%= i18n.localize("Category Name")%></th>
+                            <th class=""><%= i18n.localize("Description")%></th>
+                            <th class=""><%= i18n.localize("Number of APIs")%></th>
+                            <th class=""></th>
+                            <th class=""></th>
+                        </tr>
+                    </thead>
+
+                    <%
+                        var categories = outputs.categoryList;
+                        var APICategory = Packages.org.wso2.carbon.apimgt.api.model.APICategory;
+
+                        var apiCount;
+                        for (i = 0; i < categories.size(); i++) {
+                            var category = new APICategory();
+                            category = categories.get(i);
+                    %>
+                            <tr>
+                                <td><%=category.getName()%></td>
+                                <td><%=category.getDescription()%></td>
+                                <td><%=category.getNumberOfAPIs()%></td>
+                                <td class="text-right">
+                                    <a id="editCategoryButton" onClick="updateAPICategory('<%=category.getId()%>')" class="btn padding-reduce-on-grid-view">
+                                        <span class="fw-stack">
+                                            <i class="fw fw-circle-outline fw-stack-2x"></i>
+                                            <i class="fw fw-edit fw-stack-1x"></i>
+                                        </span>
+                                        <span class="hidden-xs"><%=i18n.localize("Edit")%></span>
+                                    </a>
+                                </td>
+                                <td class="text-right">
+                                    <a id="deleteCategoryButton" onclick="deleteAPICategory('<%=category.getId()%>')" class="btn padding-reduce-on-grid-view">
+                                        <span class="fw-stack">
+                                            <i class="fw fw-circle-outline fw-stack-2x"></i>
+                                            <i class="fw fw-delete fw-stack-1x"></i>
+                                        </span>
+                                        <span class="hidden-xs"><%=i18n.localize("Delete")%></span>
+                                    </a>
+                                </td>
+                            </tr>
+                        <% } %>
+                </table>
+            <% } else { %>
+               	<div class="message message-info">
+               	    <h4><i class="icon fw fw-info"></i><%=i18n.localize("API Categories are not defined")%></h4>
+               		<p><%=i18n.localize("API Categories are not defined")%></p>
+               	</div>
+            <% } %>
+        </div>
+    </div>
+</div>
+
+<script>
+    function updateAPICategory(uuid){
+        location.href = "<%= jagg.url('/api-category-add')%>?uuid="+uuid+"&action=update";
+    }
+</script>
+
+<% }); %>
+
+
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/actions/template.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/actions/template.jag
index 157989eae48..2784d30107c 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/actions/template.jag
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/actions/template.jag
@@ -44,7 +44,13 @@
     var labelAddMappedUrl = "/label-add";
 
     var changeOwnerUrl = "/changeOwner";
-    var changeOwnerMappedUrl = "/changeOwner";   
+    var changeOwnerMappedUrl = "/changeOwner";
+
+    var categoryListUrl = "/api-category-list";
+    var categoryListMappedUrl = "/api-category-list";
+
+    var categoryAddUrl = "/api-category-add";
+    var categoryAddMappedUrl = "/api-category-add";
     %>
 
 
@@ -221,6 +227,28 @@
                                 </a>
                             </li>
                         <%} %>
+                        <% if(reqUrl.indexOf(categoryListUrl)>=0 ||reqUrl.indexOf(categoryListMappedUrl)>=0){ %>
+                            <li>
+                                <a href="<%= jagg.url('/api-category-add')%>">
+                                    <span class="icon fw-stack">
+                                         <i class="fw fw-add fw-stack-1x"></i>
+                                         <i class="fw fw-circle-outline fw-stack-2x"></i>
+                                    </span>
+                                    <%=i18n.localize("Add API Category")%>
+                                </a>
+                            </li>
+                        <%} %>
+                        <% if(reqUrl.indexOf(categoryAddUrl)>=0 ||reqUrl.indexOf(categoryAddMappedUrl)>=0){ %>
+                            <li>
+                                <a href="<%= jagg.url('/api-category-list') %>" title="<%=i18n.localize("Go Back")%>">
+                                    <span class="icon fw-stack">
+                                        <i class="fw fw-left fw-stack-1x" title="<%=i18n.localize("Go Back")%>"></i>
+                                        <i class="fw fw-circle-outline fw-stack-2x" title="<%=i18n.localize("Go Back")%>"></i>
+                                    </span>
+                                    <%=i18n.localize("Go Back")%>
+                                </a>
+                            </li>
+                        <%} %>
                         <% if(reqUrl.indexOf(changeOwnerUrl)>=0 ||reqUrl.indexOf(changeOwnerMappedUrl)>=0){ %>
                             <li>
                                 <a href="<%= jagg.url('/applicationOwner') %>" title="<%=i18n.localize("Go Back")%>">
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/left/template.jag b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/left/template.jag
index fe08b7dd79e..f112accec10 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/left/template.jag
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/admin/site/themes/wso2/templates/menu/left/template.jag
@@ -143,6 +143,16 @@
               %>
             </ul>
         </li>
+        <li class="nav-header">
+          <a href="#"><i class="fw fw-folder fw-2x" style="font-size:22px;"></i><%=i18n.localize("Categories")%><i class="fw fw-down fw-stack-1x toggle-icon-down toggle-caret remove-float"></i></a>
+            <ul class="nav nav-pills secondary-nav collapse">
+              <li <%if (reqUrl.match("api-category-list")){%> class="active" <% } %>><a
+                href="<%= jagg.url("/api-category-list") %>"
+                onclick="jagg.sessionAwareJS({redirect:'<%=listMappedUrl%>',e:event,ssoEnabled:<%=ssoEnabled%>})">
+                <i class="fw fw-file-browse"></i><%= i18n.localize("API Categories")%></a>
+              </li>
+            </ul>
+        </li>
         <li class="nav-header">
           <a href="#"><i class="fw fw-throttling-policy fw-2x" style="font-size:22px;"></i><%=i18n.localize("Throttle Policies")%><i class="fw fw-down fw-stack-1x toggle-icon-down toggle-caret remove-float"></i></a>
           <ul class="nav nav-pills secondary-nav collapse">
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/site/public/locales/en.json b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/site/public/locales/en.json
index e03288d138d..bfc0cc8032b 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/site/public/locales/en.json
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/site/public/locales/en.json
@@ -474,5 +474,7 @@
   "grant.types": "Grant Types",
   "micro.gateways": "Microgateways",
   "notice": "Notice",
-  "subscription.pending": "Your subscription request has been submitted and is now awaiting approval."
+  "subscription.pending": "Your subscription request has been submitted and is now awaiting approval.",
+  "Apis.Listing.CategoryListingCategories.title": "API Categories",
+  "Apis.Listing.CategoryListingCategories.categoriesNotFound": "Categories cannot be found"
 }
\ No newline at end of file
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/APICategoryThumb.jsx b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/APICategoryThumb.jsx
new file mode 100644
index 00000000000..12abbdbfccd
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/APICategoryThumb.jsx
@@ -0,0 +1,154 @@
+/*
+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ * WSO2 Inc. licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+import React from 'react';
+import Typography from '@material-ui/core/Typography';
+import { withStyles } from '@material-ui/core/styles';
+import ListItem from '@material-ui/core/ListItem';
+import ListItemIcon from '@material-ui/core/ListItemIcon';
+import ListItemText from '@material-ui/core/ListItemText';
+import Icon from '@material-ui/core/Icon';
+import { Link } from 'react-router-dom';
+import PropTypes from 'prop-types';
+import classNames from 'classnames';
+import { app } from 'Settings';
+
+/**
+ * @inheritdoc
+ * @param {*} theme theme object
+ */
+const styles = theme => ({
+    thumbContent: {
+        width: theme.custom.tagWise.thumbnail.width - theme.spacing(1),
+        backgroundColor: theme.palette.background.paper,
+        padding: theme.spacing(1),
+    },
+    thumbLeft: {
+        alignSelf: 'flex-start',
+        flex: 1,
+    },
+    thumbRight: {
+        alignSelf: 'flex-end',
+    },
+    thumbInfo: {
+        display: 'flex',
+    },
+    thumbHeader: {
+        width: theme.custom.tagWise.thumbnail.width - theme.spacing(1),
+        whiteSpace: 'nowrap',
+        overflow: 'hidden',
+        textOverflow: 'ellipsis',
+        cursor: 'pointer',
+        justifyContent: 'center',
+        margin: 0,
+    },
+    contextBox: {
+        // eslint-disable-next-line radix
+        width: parseInt(150 - theme.spacing(0.5)),
+        whiteSpace: 'nowrap',
+        overflow: 'hidden',
+        textOverflow: 'ellipsis',
+        cursor: 'pointer',
+        margin: 0,
+        display: 'inline-block',
+        lineHeight: '1em',
+    },
+    thumbWrapper: {
+        position: 'relative',
+        paddingTop: 20,
+        marginRight: theme.spacing(2),
+    },
+    deleteIcon: {
+        fill: 'red',
+    },
+    textWrapper: {
+        color: theme.custom.tagCloud.leftMenu.color,
+        '& .material-icons': {
+            color: theme.custom.tagCloud.leftMenu.color,
+        },
+    },
+    image: {
+        width: theme.custom.tagWise.thumbnail.width,
+    },
+    imageWrapper: {
+        color: theme.palette.text.secondary,
+        backgroundColor: theme.palette.background.paper,
+        width: theme.custom.tagWise.thumbnail.width + theme.spacing(1),
+        display: 'flex',
+        alignItems: 'center',
+        justifyContent: 'center',
+    },
+    imageOverlap: {
+        position: 'absolute',
+        bottom: 1,
+        backgroundColor: theme.custom.thumbnail.contentBackgroundColor,
+    },
+});
+
+/**
+ * Get APICategoryThumb
+ * @param {*} props properties
+ * @returns {*}
+ */
+function APICategoryThumb(props) {
+    const {
+        category, path, classes, theme,
+    } = props;
+    const categoryLink = path + ':' + category.name;
+    const {
+        tagWise: {
+            thumbnail: { image },
+        },
+    } = theme.custom;
+
+    return (
+        <Link to={categoryLink} className={classes.textWrapper}>
+            <ListItem button>
+                <ListItemIcon>
+                    <Icon>label</Icon>
+                </ListItemIcon>
+                <ListItemText primary={category.name} />
+            </ListItem>
+        </Link>
+    );
+
+}
+
+APICategoryThumb.propTypes = {
+    classes: PropTypes.shape({
+        thumbWrapper: PropTypes.shape({}).isRequired,
+        imageWrapper: PropTypes.shape({}).isRequired,
+        thumbContent: PropTypes.shape({}).isRequired,
+        imageOverlap: PropTypes.shape({}).isRequired,
+        textWrapper: PropTypes.shape({}).isRequired,
+        thumbHeader: PropTypes.shape({}).isRequired,
+        image: PropTypes.shape({}).isRequired,
+    }).isRequired,
+    theme: PropTypes.shape({
+        custom: PropTypes.shape({
+            tagWise: PropTypes.shape({}).isRequired,
+        }).isRequired,
+    }).isRequired,
+    category: PropTypes.shape({
+        name: PropTypes.string.isRequired,
+    }).isRequired,
+    path: PropTypes.shape({}).isRequired,
+    style: PropTypes.string.isRequired,
+};
+
+export default withStyles(styles, { withTheme: true })(APICategoryThumb);
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CategoryListingCategories.jsx b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CategoryListingCategories.jsx
new file mode 100644
index 00000000000..5fc95d9bee6
--- /dev/null
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CategoryListingCategories.jsx
@@ -0,0 +1,122 @@
+/*
+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
+ *
+ * WSO2 Inc. licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+import React from 'react';
+import PropTypes from 'prop-types';
+import { useTheme, makeStyles } from '@material-ui/core/styles';
+import { Link, useHistory } from 'react-router-dom';
+import Typography from '@material-ui/core/Typography';
+import List from '@material-ui/core/List';
+import Divider from '@material-ui/core/Divider';
+import ListItem from '@material-ui/core/ListItem';
+import ListItemIcon from '@material-ui/core/ListItemIcon';
+import ListItemText from '@material-ui/core/ListItemText';
+import Icon from '@material-ui/core/Icon';
+import { FormattedMessage } from 'react-intl';
+import APICategoryThumb from './APICategoryThumb';
+
+const useStyles = makeStyles(theme => ({
+    mainTitle: {
+        paddingTop: 10,
+    },
+    mainTitleWrapper: {
+        flexGrow: 1,
+    },
+    listContentWrapper: {
+        padding: `0 ${theme.spacing(3)}px`,
+    },
+    textWrapper: {
+        color: theme.custom.tagCloud.leftMenu.color,
+        '& .material-icons': {
+            color: theme.custom.tagCloud.leftMenu.color,
+        },
+    },
+    tagWiseThumbWrapper: {
+        display: 'flex',
+    },
+    filterTitle: {
+        fontWeight: 200,
+        paddingLeft: theme.spacing(2),
+        background: theme.custom.tagCloud.leftMenu.titleBackground,
+        color: theme.palette.getContrastText(theme.custom.tagCloud.leftMenu.titleBackground),
+        height: theme.custom.infoBar.height,
+        alignItems: 'center',
+        display: 'flex',
+    },
+}));
+
+/**
+ * Shared listing page
+ *
+ * @class CategoryListingCategories
+ * @extends {Component}
+ */
+function CategoryListingCategories(props) {
+    const classes = useStyles();
+    const theme = useTheme();
+    const history = useHistory();
+    const {
+        custom: {
+            tagWise: {
+                key, active, style, showAllApis,
+            },
+        },
+    } = theme;
+
+
+    const tagWiseURL = '/apis?offset=0&query=api-category';
+    const { allCategories } = props;
+
+    /**
+     *
+     * @inheritdoctheme
+     * @returns {React.Component} @inheritdoc
+     * @memberof TagCloudListing
+     */
+
+    return allCategories && allCategories.length > 0 ? (
+        (
+            <React.Fragment>
+                <Typography variant='h6' gutterBottom className={classes.filterTitle}>
+                    <FormattedMessage defaultMessage='API Categories' id='Apis.Listing.CategoryListingCategories.title' />
+                </Typography>
+                <List component='nav' aria-label='main mailbox folders'>
+                    {Object.keys(allCategories).map((key) => {
+                        return <APICategoryThumb key={key} category={allCategories[key]} path={tagWiseURL} style={style} />;
+                    })}
+                </List>
+            </React.Fragment>
+        )
+    ) : (
+        <div className={classes.mainTitle}>
+            <Typography variant='subtitle1' gutterBottom align='center'>
+                <FormattedMessage
+                    defaultMessage='Categories cannot be found'
+                    id='Apis.Listing.CategoryListingCategories.categoriesNotFound'
+                />
+            </Typography>
+        </div>
+    );
+}
+
+CategoryListingCategories.propTypes = {
+    classes: PropTypes.shape({}).isRequired,
+    theme: PropTypes.shape({}).isRequired,
+    allTags: PropTypes.shape({}).isRequired,
+};
+
+export default CategoryListingCategories;
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CommonListing.jsx b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CommonListing.jsx
index d6535581bd6..2960e93ba57 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CommonListing.jsx
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/components/Apis/Listing/CommonListing.jsx
@@ -30,6 +30,7 @@ import ApiBreadcrumbs from './ApiBreadcrumbs';
 import ApiTableView from './ApiTableView';
 import { ApiContext } from '../Details/ApiContext';
 import TagCloudListingTags from './TagCloudListingTags';
+import CategoryListingCategories from './CategoryListingCategories';
 import ApiTagCloud from './ApiTagCloud';
 
 const styles = (theme) => ({
@@ -193,6 +194,14 @@ class CommonListing extends React.Component {
             .catch((error) => {
                 console.log(error);
             });
+        const promisedCategories = restApiClient.apiCategories();
+            promisedCategories
+                .then((response) => {
+                    this.setState({ allCategories: response.body.list });
+                })
+                .catch((error) => {
+                    console.log(error);
+                });
         this.isMonetizationEnabled();
     }
 
@@ -228,7 +237,7 @@ class CommonListing extends React.Component {
             },
         } = theme;
         const {
-            listType, allTags, showLeftMenu, isMonetizationEnabled,
+            listType, allTags, showLeftMenu, isMonetizationEnabled, allCategories,
         } = this.state;
         const strokeColorMain = theme.palette.getContrastText(theme.custom.infoBar.background);
         const searchParam = new URLSearchParams(search);
@@ -249,18 +258,20 @@ class CommonListing extends React.Component {
             }
         }
         const tagPaneVisible = allTags && allTags.length > 0 && (tagCloudActive || active);
+        const categoryPaneVisible = allCategories && allCategories.length > 0;
         return (
             <>
-                {tagPaneVisible && showLeftMenu && (
+                {(categoryPaneVisible || tagPaneVisible) && showLeftMenu && (
                     <div className={classes.LeftMenu}>
                         <div className={classes.sliderButton} onClick={this.toggleLeftMenu}>
                             <Icon>keyboard_arrow_left</Icon>
                         </div>
-                        {active && <TagCloudListingTags allTags={allTags} />}
-                        {tagCloudActive && <ApiTagCloud allTags={allTags} />}
+                        {categoryPaneVisible && <CategoryListingCategories allCategories={allCategories} />}
+                        {tagPaneVisible && active && <TagCloudListingTags allTags={allTags} />}
+                        {tagPaneVisible && tagCloudActive && <ApiTagCloud allTags={allTags} />}
                     </div>
                 )}
-                {tagPaneVisible && !showLeftMenu && (
+                {(categoryPaneVisible || tagPaneVisible) && !showLeftMenu && (
                     <div className={classes.LeftMenuForSlider}>
                         <div className={classes.sliderButton} onClick={this.toggleLeftMenu}>
                             <Icon>keyboard_arrow_right</Icon>
diff --git a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/data/api.jsx b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/data/api.jsx
index 3185860c58a..919a37a34ca 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/data/api.jsx
+++ b/features/apimgt/org.wso2.carbon.apimgt.store.feature/src/main/resources/devportal/source/src/app/data/api.jsx
@@ -775,4 +775,16 @@ export default class API extends Resource {
             );
         });
     }
+
+    /**
+     * @static
+     * Get all API Categories of the given tenant
+     * @return {Promise}
+     * */
+    apiCategories(params) {
+        return this.client.then((client) => {
+            return client.apis['API Category (Collection)'].get_api_categories(
+                params, this._requestMetaData());
+        });
+    }
 }
