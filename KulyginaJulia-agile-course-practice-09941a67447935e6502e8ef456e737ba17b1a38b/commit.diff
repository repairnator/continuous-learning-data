diff --git a/code/arabic-roman-converter/Infrastructure/build.gradle b/code/arabic-roman-converter/Infrastructure/build.gradle
new file mode 100644
index 000000000..de5cc6329
--- /dev/null
+++ b/code/arabic-roman-converter/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':arabic-roman-converter-ViewModel')
+    testCompile project(':arabic-roman-converter-ViewModel').sourceSets.test.output
+}
diff --git a/code/arabic-roman-converter/Infrastructure/src/main/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLogger.java b/code/arabic-roman-converter/Infrastructure/src/main/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLogger.java
new file mode 100644
index 000000000..7d047d4b7
--- /dev/null
+++ b/code/arabic-roman-converter/Infrastructure/src/main/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLogger.java
@@ -0,0 +1,73 @@
+package ru.unn.agile.arabicromanconverter.infrastructure;
+
+import ru.unn.agile.arabicromanconverter.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class FileLogger implements ILogger {
+
+    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
+    private final String filename;
+    private final BufferedWriter writer;
+
+    private static String now() {
+        Calendar calendar = Calendar.getInstance();
+        return new SimpleDateFormat(DATE_FORMAT, Locale.ENGLISH).format(calendar.getTime());
+    }
+
+    public FileLogger(final String filename) {
+        BufferedWriter logWriter = null;
+        this.filename = filename;
+
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        writer = logWriter;
+    }
+
+    @Override
+    public void log(final String logMessage) {
+        try {
+            writer.write(now() + " ~ " + logMessage);
+
+            writer.newLine();
+
+            writer.flush();
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+    }
+
+    @Override
+    public List<String> readLog() {
+        BufferedReader reader;
+        ArrayList<String> logs = new ArrayList<String>();
+
+        try {
+            reader = new BufferedReader(new FileReader(filename));
+            String line = reader.readLine();
+
+            while (line != null) {
+                logs.add(line);
+                line = reader.readLine();
+            }
+
+        } catch (Exception exception) {
+            exception.printStackTrace();
+        }
+
+        return logs;
+    }
+
+}
diff --git a/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLoggerTest.java b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLoggerTest.java
new file mode 100644
index 000000000..acd84c63d
--- /dev/null
+++ b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/FileLoggerTest.java
@@ -0,0 +1,70 @@
+package ru.unn.agile.arabicromanconverter.infrastructure;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static ru.unn.agile.arabicromanconverter.infrastructure.RegexpMatcher.matches;
+import org.junit.Test;
+import ru.unn.agile.arabicromanconverter.viewmodel.ILogger;
+import static org.junit.Assert.fail;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+
+public class FileLoggerTest {
+    private static final String FILENAME = "./FileLogger_Tests-lab3.log";
+
+    @Test
+    public void canCreateLogger() {
+        ILogger logger = new FileLogger(FILENAME);
+        assertNotNull(logger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        ILogger logger = new FileLogger(FILENAME);
+        try {
+            new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        ILogger logger = new FileLogger(FILENAME);
+        String testMessage = "Test message";
+
+        logger.log(testMessage);
+
+        String message = logger.readLog().get(0);
+        assertThat(message, matches(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        ILogger logger = new FileLogger(FILENAME);
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        logger.log(messages[0]);
+        logger.log(messages[1]);
+
+        List<String> actualMessages = logger.readLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertThat(actualMessages.get(i), matches(".*" + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void canWriteLogWithDateAndTime() {
+        ILogger logger = new FileLogger(FILENAME);
+        String logMessage = "hello";
+
+        logger.log(logMessage);
+
+        String message = logger.readLog().get(0);
+        assertThat(message, matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} ~ .*"));
+    }
+}
diff --git a/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/RegexpMatcher.java b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/RegexpMatcher.java
new file mode 100644
index 000000000..42ea1b679
--- /dev/null
+++ b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/RegexpMatcher.java
@@ -0,0 +1,29 @@
+package ru.unn.agile.arabicromanconverter.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class RegexpMatcher extends BaseMatcher {
+    private final String regexp;
+
+    public RegexpMatcher(final String regexp) {
+        this.regexp = regexp;
+    }
+
+    public void describeTo(final Description description) {
+        description.appendText("matches regexp = ");
+        description.appendText(regexp);
+    }
+
+    public boolean matches(final Object o) {
+        return ((String) o).matches(regexp);
+    }
+
+    public static Matcher<? super String> matches(final String regex) {
+        RegexpMatcher matcher = new RegexpMatcher(regex);
+        @SuppressWarnings (value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>)   matcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/ViewModelWithFileLoggerTest.java b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/ViewModelWithFileLoggerTest.java
new file mode 100644
index 000000000..70d7ea5d5
--- /dev/null
+++ b/code/arabic-roman-converter/Infrastructure/src/test/java/ru/unn/agile/arabicromanconverter/infrastructure/ViewModelWithFileLoggerTest.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.arabicromanconverter.infrastructure;
+
+import ru.unn.agile.arabicromanconverter.viewmodel.ViewModel;
+import ru.unn.agile.arabicromanconverter.viewmodel.ArabicRomanConverterViewModelTests;
+
+public class ViewModelWithFileLoggerTest extends ArabicRomanConverterViewModelTests {
+    @Override
+    public void setUp() {
+        FileLogger realLogger =
+                new FileLogger("./ViewModel_with_FileLogger_Tests-lab3.log");
+        super.setExternalViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/ArabicToRomanConverter.java b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/ArabicToRomanConverter.java
similarity index 62%
rename from code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/ArabicToRomanConverter.java
rename to code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/ArabicToRomanConverter.java
index 88350fce6..8f0800919 100644
--- a/code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/ArabicToRomanConverter.java
+++ b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/ArabicToRomanConverter.java
@@ -1,6 +1,6 @@
-package ru.unn.agile.arabicromanconverter;
+package ru.unn.agile.arabicromanconverter.model;
 
-public class ArabicToRomanConverter {
+public class ArabicToRomanConverter implements Converter {
 
     private static final int[] ARABIC_NUMERALS = {1000, 900, 500, 400,
             100, 90, 50, 40, 10, 9, 5, 4, 1};
@@ -9,9 +9,21 @@
     private static final int MIN_ARABIC_VALUE = 1;
     private static final int MAX_ARABIC_VALUE = 3999;
 
-    public ArabicToRomanConverter() { };
+    public ArabicToRomanConverter() {
+    }
+
+    public boolean validate(final String number) {
+        return number.matches("-?\\d+(\\.\\d+)?")
+                && Integer.parseInt(number) <= MAX_ARABIC_VALUE
+                && Integer.parseInt(number) >= MIN_ARABIC_VALUE;
+    }
+
+    @Override
+    public String convertValue(final String number) {
+        return convert(Integer.parseInt(number));
+    }
 
-    public String convert(final int arabicNumber) {
+    public String convert(final Integer arabicNumber) {
         if (arabicNumber < MIN_ARABIC_VALUE || arabicNumber > MAX_ARABIC_VALUE) {
             throw new IllegalArgumentException("Roman Number"
                     + "doesn't exist for Arabic" + arabicNumber);
diff --git a/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/Converter.java b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/Converter.java
new file mode 100644
index 000000000..625e7e120
--- /dev/null
+++ b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/Converter.java
@@ -0,0 +1,7 @@
+package ru.unn.agile.arabicromanconverter.model;
+
+public interface Converter {
+    String convertValue(String number);
+
+    boolean validate(String number);
+}
diff --git a/code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/RomanToArabicConverter.java b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/RomanToArabicConverter.java
similarity index 82%
rename from code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/RomanToArabicConverter.java
rename to code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/RomanToArabicConverter.java
index 7757774b5..e72b59fe5 100644
--- a/code/lab1-tdd-arabic-roman-converter/src/main/java/ru/unn/agile/arabicromanconverter/RomanToArabicConverter.java
+++ b/code/arabic-roman-converter/Model/src/main/java/ru/unn/agile/arabicromanconverter/model/RomanToArabicConverter.java
@@ -1,10 +1,10 @@
-package ru.unn.agile.arabicromanconverter;
+package ru.unn.agile.arabicromanconverter.model;
 
 import java.util.Hashtable;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-public class RomanToArabicConverter {
+public class RomanToArabicConverter implements Converter {
 
     private static final int[] ARABIC_NUMERALS = {1, 5, 10, 50,
             100, 500, 1000};
@@ -19,6 +19,10 @@ public RomanToArabicConverter() {
         }
     }
 
+    public boolean validate(final String number) {
+        return this.validateRomanNumber(number);
+    }
+
     private boolean validateRomanNumber(final String romanNumber) {
         Pattern regexRoman = Pattern.compile("^M{0,3}(CM|CD|D?C{0,3})"
                 + "(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$");
@@ -26,6 +30,11 @@ private boolean validateRomanNumber(final String romanNumber) {
         return matcher.matches();
     }
 
+    @Override
+    public String convertValue(final String number) {
+        return String.valueOf(convert(number));
+    }
+
     public int convert(final String romanNumber) {
         if (!validateRomanNumber(romanNumber)) {
             throw new IllegalArgumentException(romanNumber
@@ -42,6 +51,7 @@ public int convert(final String romanNumber) {
             }
             prevSymbol = currentSymbol;
         }
+
         return arabicNumber;
     }
 }
diff --git a/code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java b/code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java
similarity index 98%
rename from code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java
rename to code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java
index 86097bb78..bcd7fe205 100644
--- a/code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java
+++ b/code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/ArabicToRomanTest.java
@@ -1,6 +1,7 @@
 package ru.unn.agile.arabicromanconverter;
 
 import org.junit.Test;
+import ru.unn.agile.arabicromanconverter.model.ArabicToRomanConverter;
 
 import static org.junit.Assert.assertEquals;
 
@@ -163,6 +164,4 @@ public void canConvertNegativeNumber() {
     public void canConvertIllegalNumber() {
         String romanNumber = convertToRoman(4000);
     }
-
-
 }
diff --git a/code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java b/code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java
similarity index 98%
rename from code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java
rename to code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java
index 9a9e2db7d..3fd83f5c9 100644
--- a/code/lab1-tdd-arabic-roman-converter/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java
+++ b/code/arabic-roman-converter/Model/src/test/java/ru/unn/agile/arabicromanconverter/RomanToArabicTest.java
@@ -1,6 +1,7 @@
 package ru.unn.agile.arabicromanconverter;
 
 import org.junit.Test;
+import ru.unn.agile.arabicromanconverter.model.RomanToArabicConverter;
 
 import static org.junit.Assert.assertEquals;
 
diff --git a/code/arabic-roman-converter/View/build.gradle b/code/arabic-roman-converter/View/build.gradle
new file mode 100644
index 000000000..3d1dbeebf
--- /dev/null
+++ b/code/arabic-roman-converter/View/build.gradle
@@ -0,0 +1,18 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.arabicromanconverter.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':arabic-roman-converter-ViewModel')
+    compile project(':arabic-roman-converter-Infrastructure')
+}
diff --git a/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.java b/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.java
new file mode 100644
index 000000000..e9611fcb3
--- /dev/null
+++ b/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.java
@@ -0,0 +1,38 @@
+package ru.unn.agile.arabicromanconverter.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Label;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+import ru.unn.agile.arabicromanconverter.infrastructure.FileLogger;
+import ru.unn.agile.arabicromanconverter.viewmodel.ViewModel;
+
+public class ArabicRomanConverter {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField inputField;
+    @FXML
+    private TextField outputField;
+    @FXML
+    private Label lblError;
+    @FXML
+    private Label lblConvert;
+    @FXML
+    private Button btnConvert;
+    @FXML
+    private Button btnSwap;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(new FileLogger("./TxtLogger-lab3.log"));
+        inputField.textProperty().bindBidirectional(viewModel.getInput());
+        outputField.textProperty().bindBidirectional(viewModel.getOutput());
+        lblConvert.textProperty().bindBidirectional(viewModel.getConvert());
+        lblError.textProperty().bindBidirectional(viewModel.getError());
+        btnConvert.disableProperty().bindBidirectional(viewModel.isConvertButtonDisabled());
+        btnConvert.setOnAction(event -> viewModel.convert());
+        btnSwap.setOnAction(event -> viewModel.swap());
+
+    }
+}
diff --git a/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/Main.java b/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/Main.java
new file mode 100644
index 000000000..55ff72e06
--- /dev/null
+++ b/code/arabic-roman-converter/View/src/main/java/ru/unn/agile/arabicromanconverter/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.arabicromanconverter.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("ArabicRomanConverter.fxml"));
+        primaryStage.setTitle("ArabicRomanConverter");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/arabic-roman-converter/View/src/main/resources/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.fxml b/code/arabic-roman-converter/View/src/main/resources/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.fxml
new file mode 100644
index 000000000..5e5d77107
--- /dev/null
+++ b/code/arabic-roman-converter/View/src/main/resources/ru/unn/agile/arabicromanconverter/view/ArabicRomanConverter.fxml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+
+<?import ru.unn.agile.arabicromanconverter.viewmodel.ViewModel?>
+<AnchorPane prefHeight="222.0" prefWidth="370.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.arabicromanconverter.view.ArabicRomanConverter">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+    <TextField fx:id="inputField" layoutX="15.0" layoutY="66.0" prefHeight="35.0" prefWidth="215.0" />
+    <TextField fx:id="outputField" editable="false" layoutX="270.0" layoutY="66.0" prefHeight="35.0" prefWidth="215.0" />
+    <Label layoutX="245.0" layoutY="74.0" text="=">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Button fx:id="btnConvert" layoutX="15.0" layoutY="136.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="470.0" text="Конвертировать" />
+    <Label fx:id="lblError" layoutX="15.0" layoutY="1.0" text="Label" textFill="RED" />
+    <Label fx:id="lblConvert" layoutX="15.0" layoutY="40.0" text="Label" textFill="BLACK" />
+    <Button fx:id="btnSwap" graphicTextGap="40.0" layoutX="240.0" layoutY="105.0" mnemonicParsing="false" prefHeight="4.0" prefWidth="21.0" text="⇄">
+        <font>
+            <Font size="24.0" />
+        </font>
+        <padding>
+            <Insets bottom="-7.0" top="-7.0" />
+        </padding></Button>
+    <TextArea fx:id="areaLog" text="${viewModel.logs}" prefWidth="500" layoutY="165.0"  editable="false"  VBox.vgrow="ALWAYS" />
+</AnchorPane>
\ No newline at end of file
diff --git a/code/arabic-roman-converter/View/src/test/java/ru/unn/agile/arabicromanconverter/view/FakeViewTests.java b/code/arabic-roman-converter/View/src/test/java/ru/unn/agile/arabicromanconverter/view/FakeViewTests.java
new file mode 100644
index 000000000..489f4190b
--- /dev/null
+++ b/code/arabic-roman-converter/View/src/test/java/ru/unn/agile/arabicromanconverter/view/FakeViewTests.java
@@ -0,0 +1,14 @@
+package ru.unn.agile.arabicromanconverter.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore
+    @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/arabic-roman-converter/ViewModel/build.gradle b/code/arabic-roman-converter/ViewModel/build.gradle
new file mode 100644
index 000000000..7f56f78bf
--- /dev/null
+++ b/code/arabic-roman-converter/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':arabic-roman-converter-Model')
+}
\ No newline at end of file
diff --git a/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ILogger.java b/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ILogger.java
new file mode 100644
index 000000000..bb20714ef
--- /dev/null
+++ b/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.arabicromanconverter.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void log(String s);
+
+    List<String> readLog();
+}
diff --git a/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ViewModel.java b/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ViewModel.java
new file mode 100644
index 000000000..b5350f602
--- /dev/null
+++ b/code/arabic-roman-converter/ViewModel/src/main/java/ru/unn/agile/arabicromanconverter/viewmodel/ViewModel.java
@@ -0,0 +1,187 @@
+package ru.unn.agile.arabicromanconverter.viewmodel;
+
+import javafx.beans.property.*;
+import ru.unn.agile.arabicromanconverter.model.*;
+
+import java.util.List;
+
+public class ViewModel {
+
+    private final StringProperty logs = new SimpleStringProperty();
+    private StringProperty input = new SimpleStringProperty();
+    private StringProperty output = new SimpleStringProperty();
+    private StringProperty error = new SimpleStringProperty();
+    private StringProperty convert = new SimpleStringProperty();
+    private BooleanProperty btnDisabled = new SimpleBooleanProperty();
+    private ConverterType selector = ConverterType.ARABICTOROMAN;
+    private ILogger logger;
+
+    public ViewModel() {
+        init();
+    }
+
+    public ViewModel(final ILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    private void init() {
+        refresh();
+        convert.set("Arabic to Roman");
+        btnDisabled.set(true);
+
+        input.addListener((observable, oldValue, newValue) -> {
+            onInput(newValue);
+        });
+    }
+
+    public final void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    public void convert() {
+        String value = input.get();
+        Converter converter = selector.getConverter();
+        String result = converter.convertValue(value);
+        output.set(result);
+        StringBuilder message = new StringBuilder(LogMessages.CONVERT_WAS_PRESSED);
+        message.append("from number: ")
+                .append(getInput().getValue())
+                .append(" to number: ")
+                .append(getOutput().getValue())
+                .append(".");
+        logger.log(message.toString());
+        updateLogs();
+    }
+
+    public void swap() {
+        StringBuilder message = new StringBuilder(LogMessages.CONVERTER_WAS_CHANGED);
+        if (selector == ConverterType.ARABICTOROMAN) {
+            message.append("from type: ")
+                    .append(selector.toString());
+            selector = ConverterType.ROMANTOARABIC;
+            message.append(" to type: ")
+                    .append(selector.toString())
+                    .append(".");
+        } else {
+            message.append("from type: ")
+                    .append(selector.toString());
+            selector = ConverterType.ARABICTOROMAN;
+            message.append(" to type: ")
+                    .append(selector.toString())
+                    .append(".");
+        }
+        refresh();
+        logger.log(message.toString());
+        updateLogs();
+    }
+
+    public void refresh() {
+        input.set("");
+        output.set("");
+        error.set("");
+        convert.set(selector.toString());
+    }
+
+    public final List<String> getLog() {
+        return logger.readLog();
+    }
+
+    public StringProperty getInput() {
+        return input;
+    }
+
+    public StringProperty getOutput() {
+        return output;
+    }
+
+    public StringProperty getConvert() {
+        return convert;
+    }
+
+    public StringProperty getError() {
+        return error;
+    }
+
+    public BooleanProperty isConvertButtonDisabled() {
+        return btnDisabled;
+    }
+
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    private void onInput(final String newValue) {
+        boolean isValid = selector.getConverter().validate(newValue);
+        if (isValid || newValue.isEmpty()) {
+            error.set("");
+            StringBuilder message = new StringBuilder(LogMessages.EDITING_FINISHED);
+            message.append(getInput().getValue())
+                    .append(".");
+            logger.log(message.toString());
+            updateLogs();
+        } else {
+            error.set(selector.getErrorMessage());
+            StringBuilder message = new StringBuilder(LogMessages.INCORRECT_INPUT);
+            message.append(newValue)
+                    .append(".");
+            logger.log(message.toString());
+            updateLogs();
+        }
+        btnDisabled.set(newValue.isEmpty() || !isValid);
+        output.set("");
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.readLog();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
+}
+
+enum ConverterType {
+    ARABICTOROMAN("Arabic to Roman", new ArabicToRomanConverter(), "Insert correct arabic number"),
+    ROMANTOARABIC("Roman to Arabic", new RomanToArabicConverter(), "Insert correct roman number");
+
+    private final String lblConvertingType;
+    private final Converter converter;
+    private final String errorMessage;
+
+    ConverterType(final String label, final Converter converter, final String errorMessage) {
+        this.lblConvertingType = label;
+        this.converter = converter;
+        this.errorMessage = errorMessage;
+    }
+
+    public String toString() {
+        return lblConvertingType;
+    }
+
+    public Converter getConverter() {
+        return converter;
+    }
+
+    public String getErrorMessage() {
+        return errorMessage;
+    }
+}
+
+final class LogMessages {
+    public static final String CONVERT_WAS_PRESSED = "Converting following: ";
+    public static final String CONVERTER_WAS_CHANGED = "Converter was changed to ";
+    public static final String EDITING_FINISHED = "Updated input to ";
+    public static final String INCORRECT_INPUT = "Incorrect input: ";
+
+    private LogMessages() {
+    }
+}
diff --git a/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/ArabicRomanConverterViewModelTests.java b/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/ArabicRomanConverterViewModelTests.java
new file mode 100644
index 000000000..cab6de98e
--- /dev/null
+++ b/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/ArabicRomanConverterViewModelTests.java
@@ -0,0 +1,326 @@
+package ru.unn.agile.arabicromanconverter.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.arabicromanconverter.model.*;
+
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+public class ArabicRomanConverterViewModelTests {
+
+    private ViewModel viewModel;
+
+    public void setExternalViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        if (viewModel == null) {
+            viewModel = new ViewModel(new FakeLogger());
+        }
+    }
+
+    public void setCorrectInput() {
+        viewModel.getInput().set("1");
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotCreateViewModelWithNullLogger() {
+        new ViewModel(null);
+    }
+
+    @Test
+    public void logIsEmptyInTheBeginning() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterSetInput() {
+        setCorrectInput();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.EDITING_FINISHED + ".*"));
+    }
+
+    @Test
+    public void logContainsNewValueAfterSetInput() {
+        String newValue = "1";
+        viewModel.getInput().set(newValue);
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.EDITING_FINISHED + newValue + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterConvertion() {
+        setCorrectInput();
+        viewModel.convert();
+        String message = viewModel.getLog().get(1);
+
+        assertTrue(message.matches(".*" + LogMessages.CONVERT_WAS_PRESSED + ".*"));
+    }
+
+    @Test
+    public void logContainsInputAfterConvertion() {
+        String input = "1";
+        viewModel.getInput().set(input);
+        viewModel.convert();
+        String message = viewModel.getLog().get(1);
+
+        assertTrue(message.matches(".*" + "from number: " + input + ".*"));
+    }
+
+    @Test
+    public void logContainsOutputAfterConvertion() {
+        String output = "I";
+        setCorrectInput();
+        viewModel.convert();
+        String message = viewModel.getLog().get(1);
+
+        assertTrue(message.matches(".*" + "to number: " + output + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterSwapConverterType() {
+        viewModel.swap();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.CONVERTER_WAS_CHANGED + ".*"));
+    }
+
+    @Test
+    public void logContainsOldConverterTypeAfterSwap() {
+        String oldConverterType = ConverterType.ARABICTOROMAN.toString();
+        viewModel.swap();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + "from type: " + oldConverterType + ".*"));
+    }
+
+    @Test
+    public void logContainsNewConverterTypeAfterSwap() {
+        String newConverterType = ConverterType.ROMANTOARABIC.toString();
+        viewModel.swap();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + "to type: " + newConverterType + ".*"));
+    }
+
+    @Test
+    public void logContainsOldConverterTypeAfterSecondSwap() {
+        String oldConverterType = ConverterType.ROMANTOARABIC.toString();
+        viewModel.swap();
+        viewModel.swap();
+        String message = viewModel.getLog().get(1);
+
+        assertTrue(message.matches(".*" + "from type: " + oldConverterType + ".*"));
+    }
+
+    @Test
+    public void logContainsNewConverterTypeAfterSecondSwap() {
+        String newConverterType = ConverterType.ARABICTOROMAN.toString();
+        viewModel.swap();
+        viewModel.swap();
+        String message = viewModel.getLog().get(1);
+
+        assertTrue(message.matches(".*" + "to type: " + newConverterType + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterIncorrectInput() {
+        viewModel.getInput().set("bag");
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.INCORRECT_INPUT + ".*"));
+    }
+
+    @Test
+    public void logContainsIncorrectValueAfterIncorrectInput() {
+        String incorrectValue = "bag";
+
+        viewModel.getInput().set(incorrectValue);
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.INCORRECT_INPUT + incorrectValue + ".*"));
+    }
+
+    @Test
+    public void logDoesntContainMessagesIfInputNotChanged() {
+        viewModel.getInput().set("1");
+        viewModel.getInput().set("1");
+
+        assertEquals(1, viewModel.getLog().size());
+    }
+
+    @Test
+    public void logContainsAllTypesOfMessages() {
+        viewModel.swap();
+        viewModel.getInput().set("1");
+        viewModel.getInput().set("I");
+        viewModel.convert();
+
+        assertEquals(4, viewModel.getLog().size());
+    }
+
+    @Test
+    public void canSetEmptyInputField() {
+        assertEquals("", viewModel.getInput().get());
+    }
+
+    @Test
+    public void canSetEmptyOutputField() {
+        assertEquals("", viewModel.getOutput().get());
+    }
+
+    @Test
+    public void canSetEmptyErrorField() {
+        assertEquals("", viewModel.getError().get());
+    }
+
+    @Test
+    public void canRefreshField() {
+        viewModel.getInput().set("test_input");
+        viewModel.getOutput().set("test_output");
+        viewModel.getError().set("test_error");
+
+        viewModel.refresh();
+
+        String result = viewModel.getInput().get()
+                + viewModel.getOutput().get()
+                + viewModel.getError().get();
+        assertEquals("", result);
+    }
+
+    @Test
+    public void isConvertLabelArabicByDefault() {
+        assertEquals("Arabic to Roman", viewModel.getConvert().get());
+    }
+
+    @Test
+    public void isConvertButtonDisabledByDefault() {
+        assertEquals(true, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void isConvertButtonNotDisabledAfterInsertingValue() {
+        setCorrectInput();
+
+        assertEquals(false, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void isConvertButtonDisabledAfterDeletingValue() {
+        setCorrectInput();
+        viewModel.getInput().set("");
+
+        assertEquals(true, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void cantEnterNanWhileArabicSelected() {
+        viewModel.getInput().set("I");
+
+        assertEquals("Insert correct arabic number", viewModel.getError().get());
+    }
+
+    @Test
+    public void canConvertFromArabicToRoman() {
+        setCorrectInput();
+        viewModel.convert();
+
+        assertEquals("I", viewModel.getOutput().get());
+    }
+
+    @Test
+    public void isConvertLabelRomanAfterSwap() {
+        viewModel.swap();
+
+        assertEquals("Roman to Arabic", viewModel.getConvert().get());
+    }
+
+    @Test
+    public void cantEnterNanWhileRomanSelected() {
+        viewModel.swap();
+        setCorrectInput();
+
+        assertEquals("Insert correct roman number", viewModel.getError().get());
+    }
+
+    @Test
+    public void cantEnterNegativeWhileArabicSelected() {
+        viewModel.getInput().set("-1");
+
+        assertEquals("Insert correct arabic number", viewModel.getError().get());
+    }
+
+    @Test
+    public void cantEnterNumberMoreThanMaxWhileArabicSelected() {
+        viewModel.getInput().set("4000");
+
+        assertEquals("Insert correct arabic number", viewModel.getError().get());
+    }
+
+    @Test
+    public void canConvertFromRomanToArabic() {
+        viewModel.swap();
+        viewModel.getInput().set("I");
+
+        viewModel.convert();
+
+        assertEquals("1", viewModel.getOutput().get());
+    }
+
+    @Test
+    public void canConvertWhileNonValidationError() {
+        setCorrectInput();
+
+        assertEquals(false, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void cantConvertWhileGettingValidationError() {
+        viewModel.getInput().set("I");
+
+        assertEquals(true, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void canConvertWhileNonValidationErrorRomanToArabic() {
+        viewModel.swap();
+        viewModel.getInput().set("I");
+
+        assertEquals(false, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void cantConvertWhileGettingValidationErrorRomanToArabic() {
+        viewModel.swap();
+        setCorrectInput();
+
+        assertEquals(true, viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void isCleanFieldsAfterSwap() {
+        viewModel.getInput().set("10");
+        viewModel.convert();
+
+        viewModel.swap();
+
+        String result = viewModel.getInput().get()
+                + viewModel.getOutput().get()
+                + viewModel.getError().get();
+        assertEquals("", result);
+    }
+}
diff --git a/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/FakeLogger.java b/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..25aa01200
--- /dev/null
+++ b/code/arabic-roman-converter/ViewModel/src/test/java/ru/unn/agile/arabicromanconverter/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.arabicromanconverter.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements ILogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> readLog() {
+        return log;
+    }
+}
diff --git a/code/binary-search/Infrastructure/build.gradle b/code/binary-search/Infrastructure/build.gradle
new file mode 100644
index 000000000..c5d7e5b52
--- /dev/null
+++ b/code/binary-search/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':binary-search-ViewModel')
+    testCompile project(':binary-search-ViewModel').sourceSets.test.output
+}
diff --git a/code/binary-search/Infrastructure/src/main/java/ru/unn/agile/binarysearch/infrastructure/TxtLogger.java b/code/binary-search/Infrastructure/src/main/java/ru/unn/agile/binarysearch/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..997b80cfe
--- /dev/null
+++ b/code/binary-search/Infrastructure/src/main/java/ru/unn/agile/binarysearch/infrastructure/TxtLogger.java
@@ -0,0 +1,67 @@
+package ru.unn.agile.binarysearch.infrastructure;
+
+import ru.unn.agile.binarysearch.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class TxtLogger implements ILogger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private final String filename;
+
+    public TxtLogger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception error) {
+            error.printStackTrace();
+        }
+        writer = logWriter;
+    }
+
+    @Override
+    public void log(final String logMessage) {
+        try {
+            writer.write(now() + " > " + logMessage);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception error) {
+            System.out.println(error.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLogList() {
+
+        ArrayList<String> log = new ArrayList<String>();
+        BufferedReader reader;
+
+        try {
+            reader = new BufferedReader(new FileReader(filename));
+            String line = reader.readLine();
+            while (line != null) {
+                log.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception error) {
+            System.out.println(error.getMessage());
+        }
+        return log;
+    }
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+}
diff --git a/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/TxtLoggerTests.java b/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/TxtLoggerTests.java
new file mode 100644
index 000000000..67c6c4d62
--- /dev/null
+++ b/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/TxtLoggerTests.java
@@ -0,0 +1,70 @@
+package ru.unn.agile.binarysearch.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.*;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.*;
+
+public class TxtLoggerTests {
+    private static final String FILE_NAME = "./TxtLoggerTests.log";
+
+    private TxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TxtLogger(FILE_NAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(FILE_NAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILE_NAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void dateAndTimeContainInLog() {
+        String testMessage = "Test message for check";
+
+        txtLogger.log(testMessage);
+
+        String logMessage = txtLogger.getLogList().get(0);
+        assertTrue(logMessage.matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*"));
+    }
+
+    @Test
+    public void canWriteOneLogMessage() {
+        String testMessage = "Test message #1";
+
+        txtLogger.log(testMessage);
+
+        String logMessage = txtLogger.getLogList().get(0);
+        assertTrue(logMessage.matches(".*" + logMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessages() {
+        String[] testMessagesString = {"Test message #1, Test message #2"};
+
+        for (String testMessage : testMessagesString) {
+            txtLogger.log(testMessage);
+        }
+
+        List<String> logMessages = txtLogger.getLogList();
+        for (int i = 0; i < logMessages.size(); i++) {
+            String logMessage = logMessages.get(i);
+            assertTrue(logMessage.matches(".*" + logMessage + "$"));
+        }
+    }
+}
diff --git a/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/ViewModelWithTxtLoggerTests.java b/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..25177c60f
--- /dev/null
+++ b/code/binary-search/Infrastructure/src/test/java/ru/unn/agile/binarysearch/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,12 @@
+package ru.unn.agile.binarysearch.infrastructure;
+
+import ru.unn.agile.binarysearch.viewmodel.ViewModel;
+import ru.unn.agile.binarysearch.viewmodel.ViewModelTests;
+
+public class ViewModelWithTxtLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        TxtLogger realLogger = new TxtLogger("./ViewModelWithTxtLoggerTests.log");
+        super.setOuterViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/binary-search/src/main/java/ru/unn/agile/binarysearch/model/BinarySearch.java b/code/binary-search/Model/src/main/java/ru/unn/agile/binarysearch/model/BinarySearch.java
similarity index 100%
rename from code/binary-search/src/main/java/ru/unn/agile/binarysearch/model/BinarySearch.java
rename to code/binary-search/Model/src/main/java/ru/unn/agile/binarysearch/model/BinarySearch.java
diff --git a/code/binary-search/src/test/java/ru/unn/agile/binarysearch/model/BinarySearchTest.java b/code/binary-search/Model/src/test/java/ru/unn/agile/binarysearch/model/BinarySearchTest.java
similarity index 100%
rename from code/binary-search/src/test/java/ru/unn/agile/binarysearch/model/BinarySearchTest.java
rename to code/binary-search/Model/src/test/java/ru/unn/agile/binarysearch/model/BinarySearchTest.java
diff --git a/code/binary-search/View/build.gradle b/code/binary-search/View/build.gradle
new file mode 100644
index 000000000..210c39987
--- /dev/null
+++ b/code/binary-search/View/build.gradle
@@ -0,0 +1,17 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.binarysearch.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':binary-search-ViewModel')
+    compile project(':binary-search-Infrastructure')
+}
diff --git a/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Main.java b/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Main.java
new file mode 100644
index 000000000..f8d23f7c2
--- /dev/null
+++ b/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.binarysearch.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("Search.fxml"));
+        primaryStage.setTitle("Binary Search");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Search.java b/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Search.java
new file mode 100644
index 000000000..0161c8602
--- /dev/null
+++ b/code/binary-search/View/src/main/java/ru/unn/agile/binarysearch/view/Search.java
@@ -0,0 +1,62 @@
+package ru.unn.agile.binarysearch.view;
+
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import ru.unn.agile.binarysearch.infrastructure.TxtLogger;
+import ru.unn.agile.binarysearch.viewmodel.ViewModel;
+
+public class Search {
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField arrayInput;
+    @FXML
+    private TextField elementInput;
+    @FXML
+    private Button buttonSearch;
+    @FXML
+    private Label labelStatus;
+    @FXML
+    private Label labelResult;
+    @FXML
+    private TextArea textArea;
+
+    @FXML
+    void initialize() {
+
+        viewModel.setLogger(new TxtLogger("./TxtLogger-lab3.log"));
+
+        final ChangeListener<Boolean> focusChangeListener = new ChangeListener<Boolean>() {
+            @Override
+            public void changed(final ObservableValue<? extends Boolean> observable,
+                                final Boolean oldValue, final Boolean newValue) {
+                viewModel.onFocusChanged(oldValue, newValue);
+            }
+        };
+
+        arrayInput.textProperty().bindBidirectional(viewModel.arrayInputProperty());
+        arrayInput.focusedProperty().addListener(focusChangeListener);
+
+        elementInput.textProperty().bindBidirectional(viewModel.elementInputProperty());
+        elementInput.focusedProperty().addListener(focusChangeListener);
+
+        labelStatus.textProperty().bindBidirectional(viewModel.statusProperty());
+        labelResult.textProperty().bindBidirectional(viewModel.resultProperty());
+        textArea.textProperty().bindBidirectional(viewModel.logProperty());
+
+        buttonSearch.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.search();
+            }
+        });
+    }
+}
diff --git a/code/binary-search/View/src/main/resources/ru/unn/agile/binarysearch/view/Search.fxml b/code/binary-search/View/src/main/resources/ru/unn/agile/binarysearch/view/Search.fxml
new file mode 100644
index 000000000..68627343e
--- /dev/null
+++ b/code/binary-search/View/src/main/resources/ru/unn/agile/binarysearch/view/Search.fxml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.ColumnConstraints?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.RowConstraints?>
+<?import ru.unn.agile.binarysearch.viewmodel.ViewModel?>
+<?import javafx.scene.control.TextArea?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/8.0.121" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.binarysearch.view.Search">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+<children>
+    <GridPane layoutX="0.0" layoutY="4.0" prefHeight="200.0" prefWidth="566.0">
+        <children>
+            <Label alignment="CENTER" prefHeight="17.0" prefWidth="69.0" text="Input Array" textAlignment="CENTER" GridPane.columnIndex="0" GridPane.halignment="CENTER" GridPane.rowIndex="0" GridPane.valignment="CENTER" />
+            <TextField fx:id="arrayInput" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+            <TextField fx:id="elementInput" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <Label alignment="CENTER" prefHeight="17.0" prefWidth="75.0" text="Desired Value" textAlignment="CENTER" textOverrun="ELLIPSIS" wrapText="false" GridPane.columnIndex="0" GridPane.halignment="CENTER" GridPane.hgrow="ALWAYS" GridPane.rowIndex="1" GridPane.valignment="CENTER" GridPane.vgrow="ALWAYS" />
+            <GridPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" GridPane.columnIndex="2" GridPane.rowIndex="2">
+                <children>
+                    <Label prefWidth="35.0" text="Result" textAlignment="CENTER" GridPane.columnIndex="0" GridPane.halignment="CENTER" GridPane.rowIndex="0" GridPane.valignment="CENTER" />
+                    <Label fx:id="labelResult" prefWidth="143.0" text="" GridPane.columnIndex="1" GridPane.rowIndex="0" GridPane.valignment="CENTER" />
+                </children>
+                <columnConstraints>
+                    <ColumnConstraints hgrow="SOMETIMES" maxWidth="136.0" minWidth="10.0" prefWidth="37.0" />
+                    <ColumnConstraints hgrow="SOMETIMES" maxWidth="202.0" minWidth="10.0" prefWidth="202.0" />
+                </columnConstraints>
+                <rowConstraints>
+                    <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                </rowConstraints>
+            </GridPane>
+            <Button fx:id="buttonSearch" alignment="CENTER" defaultButton="true" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" mnemonicParsing="false" prefHeight="50.0" prefWidth="155.0" text="Search" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <Label fx:id="labelStatus" alignment="TOP_LEFT" prefHeight="53.0" prefWidth="180.0" text="Enter array and key to search" textAlignment="CENTER" GridPane.columnIndex="2" GridPane.halignment="CENTER" GridPane.rowIndex="2" GridPane.valignment="BASELINE" />
+            <Label prefHeight="17.0" prefWidth="44.0" text="Status:" textAlignment="CENTER" GridPane.columnIndex="2" GridPane.rowIndex="2" GridPane.valignment="BASELINE" />
+        </children>
+        <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="124.0" minWidth="10.0" prefWidth="124.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="191.0" minWidth="10.0" prefWidth="167.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="283.0" minWidth="10.0" prefWidth="206.0" />
+        </columnConstraints>
+        <rowConstraints>
+            <RowConstraints maxHeight="135.0" minHeight="10.0" prefHeight="40.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="135.0" minHeight="10.0" prefHeight="40.0" vgrow="SOMETIMES" />
+            <RowConstraints maxHeight="123.0" minHeight="10.0" prefHeight="123.0" vgrow="SOMETIMES" />
+        </rowConstraints>
+    </GridPane>
+    <TextArea fx:id="textArea"  layoutX="16.0" layoutY="176.0" prefHeight="250.0" prefWidth="540.0" wrapText="true" />
+</children>
+</AnchorPane>
diff --git a/code/binary-search/View/src/test/java/ru/unn/agile/binarysearch/view/FakeViewTests.java b/code/binary-search/View/src/test/java/ru/unn/agile/binarysearch/view/FakeViewTests.java
new file mode 100644
index 000000000..62328f2c8
--- /dev/null
+++ b/code/binary-search/View/src/test/java/ru/unn/agile/binarysearch/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.binarysearch.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/binary-search/ViewModel/build.gradle b/code/binary-search/ViewModel/build.gradle
new file mode 100644
index 000000000..d8fe0ef8d
--- /dev/null
+++ b/code/binary-search/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':binary-search-Model')
+}
\ No newline at end of file
diff --git a/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ILogger.java b/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ILogger.java
new file mode 100644
index 000000000..ed7e47d69
--- /dev/null
+++ b/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.binarysearch.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void log(String logMessage);
+
+    List<String> getLogList();
+}
diff --git a/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ViewModel.java b/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ViewModel.java
new file mode 100644
index 000000000..2c8fc3981
--- /dev/null
+++ b/code/binary-search/ViewModel/src/main/java/ru/unn/agile/binarysearch/viewmodel/ViewModel.java
@@ -0,0 +1,229 @@
+package ru.unn.agile.binarysearch.viewmodel;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.binarysearch.model.BinarySearch;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+
+    private final StringProperty arrayInput = new SimpleStringProperty();
+    private final StringProperty elementInput = new SimpleStringProperty();
+    private final StringProperty status = new SimpleStringProperty();
+    private final StringProperty result = new SimpleStringProperty();
+    private boolean arrayCorrect;
+    private boolean elementCorrect;
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+    private int key;
+    private BinarySearch binarySearch;
+    private final StringProperty log = new SimpleStringProperty();
+
+    private ILogger logger;
+
+    public ViewModel() {
+       init();
+    }
+
+    public ViewModel(final ILogger logger) {
+
+        setLogger(logger);
+
+        this.logger = logger;
+
+        init();
+    }
+
+    public void init() {
+        arrayInput.set("");
+        elementInput.set("");
+        status.set("");
+        result.set("");
+        log.set("");
+        arrayCorrect = false;
+        elementCorrect = false;
+
+        final List<StringProperty> fields = new ArrayList<StringProperty>() {
+            {
+                add(arrayInput);
+                add(elementInput);
+            }
+        };
+        for (StringProperty field : fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    public final List<String> getLog() {
+        return logger.getLogList();
+    }
+
+    public StringProperty arrayInputProperty() {
+        return arrayInput;
+    }
+
+    public StringProperty elementInputProperty() {
+        return elementInput;
+    }
+
+    public StringProperty statusProperty() {
+        return status;
+    }
+
+    public StringProperty resultProperty() {
+        return result;
+    }
+
+    public String getArrayInputProperty() {
+        return arrayInput.get();
+    }
+
+    public String getElementInputProperty() {
+        return elementInput.get();
+    }
+
+    public String getStatusProperty() {
+        return status.get();
+    }
+
+    public String getResultProperty() {
+        return result.get();
+    }
+
+    public int[] getBinarySearchArray() {
+        return binarySearch.getArray();
+    }
+
+    public StringProperty logProperty() {
+        return log;
+    }
+
+    public void setArrayInputProperty(final String input) {
+        logger.log("Update Input, array: " + input);
+        log.set(String.join(";\n", logger.getLogList()));
+        arrayInput.set(input);
+    }
+
+    public void setElementInputProperty(final String input) {
+        logger.log("Update Input, element: " + input);
+        log.set(String.join(";\n", logger.getLogList()));
+        elementInput.set(input);
+    }
+    private void setResultProperty(final String res) {
+        logger.log("Result: " + res);
+        log.set(String.join(";\n", logger.getLogList()));
+        result.set(res);
+    }
+
+    public final void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    public void search() {
+        int index = binarySearch.search(key);
+        if (index == binarySearch.NOT_FOUND) {
+            setResultProperty("Key not found ;");
+        } else if (index == binarySearch.NOT_SORTED) {
+            setResultProperty("Array not sorted ;");
+        } else {
+            setResultProperty("Found key, index " + Integer.toString(index) + " ;");
+        }
+    }
+
+    public Status getStatus() {
+        Status status = Status.READY;
+        try {
+            String[] split = arrayInput.get().split(",");
+            int[] arr = new int[split.length];
+            for (int i = 0; i < split.length; i++) {
+                arr[i] = Integer.parseInt(split[i]);
+            }
+            arrayCorrect = true;
+            binarySearch = new BinarySearch(arr);
+        } catch (NumberFormatException nfe) {
+            status = Status.BAD_ARRAY_FORMAT;
+        }
+        try {
+            key = Integer.parseInt(elementInput.get());
+            elementCorrect = true;
+        } catch (NumberFormatException nfe) {
+            status = Status.BAD_ELEMENT_FORMAT;
+        }
+        if ((getArrayInputProperty() == "") || (getElementInputProperty() == "")) {
+            status = Status.WAITING;
+        }
+        return status;
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.getLogList();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        log.set(record);
+    }
+
+    public void onFocusChanged(final Boolean oldValue, final Boolean newValue) {
+        if (!oldValue && newValue) {
+            return;
+        }
+
+        for (ValueChangeListener listener : valueChangedListeners) {
+            if (listener.isChanged()) {
+                StringBuilder message = new StringBuilder("Update Input: ");
+                message.append("Input arguments are: [")
+                        .append(arrayInput.get()).append("; ")
+                        .append(elementInput.get()).append("] ");
+                logger.log(message.toString());
+                updateLogs();
+                break;
+            }
+        }
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        private String prevValue = new String("");
+        private String curValue = new String("");
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            if (oldValue.equals(newValue)) {
+                return;
+            }
+            status.set(getStatus().toString());
+            curValue = newValue;
+        }
+        public boolean isChanged() {
+            return !prevValue.equals(curValue);
+        }
+        public void cache() {
+            prevValue = curValue;
+        }
+    }
+}
+
+enum Status {
+    WAITING("Waiting for input"),
+    READY("Press Search"),
+    BAD_ARRAY_FORMAT("Bad array format, please enter \n array of ints, comma separated"),
+    BAD_ELEMENT_FORMAT("Bad element format, please enter \n the key to search");
+
+    private final String name;
+
+    Status(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/FakeLogger.java b/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..b08729e17
--- /dev/null
+++ b/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.binarysearch.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements ILogger {
+    private List<String> log = new ArrayList<String>();
+
+    @Override
+    public void log(final String logMessage) {
+        log.add(logMessage);
+    }
+
+    @Override
+    public List<String> getLogList() {
+        return log;
+    }
+}
diff --git a/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/ViewModelTests.java b/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..aab244670
--- /dev/null
+++ b/code/binary-search/ViewModel/src/test/java/ru/unn/agile/binarysearch/viewmodel/ViewModelTests.java
@@ -0,0 +1,248 @@
+package ru.unn.agile.binarysearch.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    public void setOuterViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel(new FakeLogger());
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canInittArrayValue() {
+
+        assertEquals("", viewModel.getArrayInputProperty());
+    }
+
+    @Test
+    public void canInitElementValue() {
+
+        assertEquals("", viewModel.getElementInputProperty());
+    }
+
+    @Test
+    public void canInitStatus() {
+
+        assertEquals("", viewModel.getStatusProperty());
+    }
+
+    @Test
+    public void canInitResult() {
+
+        assertEquals("", viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canSetArrayInputValue() {
+
+        int[] expected = new int[] {1, 2, 3};
+
+        viewModel.setArrayInputProperty("1,2,3");
+
+        assertArrayEquals(expected, viewModel.getBinarySearchArray());
+    }
+
+    @Test
+    public void canSetElementInputValue() {
+
+        String expected = "2";
+
+        viewModel.setElementInputProperty("2");
+
+        assertEquals(expected, viewModel.getElementInputProperty());
+    }
+
+    @Test
+    public void canGetArrayInputProperty() {
+
+        viewModel.setArrayInputProperty("1,2,3");
+
+        assertEquals(viewModel.getArrayInputProperty(), viewModel.arrayInputProperty().get());
+    }
+
+    @Test
+    public void canGetElementInputProperty() {
+
+        viewModel.setElementInputProperty("1");
+
+        assertEquals(viewModel.getElementInputProperty(), viewModel.elementInputProperty().get());
+    }
+
+    @Test
+    public void canGetResultProperty() {
+
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("3");
+        viewModel.search();
+
+        assertEquals(viewModel.getResultProperty(), viewModel.resultProperty().get());
+    }
+
+    @Test
+    public void canSearchExistingKey() {
+
+        String expected = "Found key, index 1 ;";
+
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("2");
+        viewModel.search();
+
+        assertEquals(expected, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canSearchNonExistingKey() {
+
+        String expected = "Key not found ;";
+
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("4");
+        viewModel.search();
+
+        assertEquals(expected, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canSearchKeyWithNonSortedArray() {
+
+        String expected = "Array not sorted ;";
+
+        viewModel.setArrayInputProperty("3,2,1");
+        viewModel.setElementInputProperty("3");
+        viewModel.search();
+
+        assertEquals(expected, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void isStatusSetToBadArrayFormatWithIncorrectArrayInput() {
+        viewModel.setArrayInputProperty("p,2,!,2_w");
+        viewModel.setElementInputProperty("2");
+
+        assertEquals(Status.BAD_ARRAY_FORMAT.toString(), viewModel.getStatusProperty());
+    }
+
+    @Test
+    public void isStatusSetToBadElementFormatWithIncorrectElementInput() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("`");
+
+        assertEquals(Status.BAD_ELEMENT_FORMAT.toString(), viewModel.getStatusProperty());
+    }
+
+    @Test
+    public void isStatusSetToReadyWithCorrectElementInput() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("1");
+
+        assertEquals(Status.READY.toString(), viewModel.getStatusProperty());
+    }
+
+    @Test
+    public void isStatusSetToWaitingWithCorrectArrayAndEmptyElementInput() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("");
+
+        assertEquals(Status.WAITING.toString(), viewModel.getStatusProperty());
+    }
+
+    @Test
+    public void canCreateViewModelWithLogger() {
+        var fakeLogger = new FakeLogger();
+        ViewModel newViewModel = new ViewModel(fakeLogger);
+
+        assertNotNull(newViewModel);
+    }
+
+    @Test
+    public void canCreateEmptyViewModel() {
+        ViewModel viewModel = new ViewModel();
+
+        assertNotNull(viewModel);
+    }
+
+    @Test
+    public void canSetDefaultLog() {
+        assertEquals(0, viewModel.getLog().size());
+    }
+
+    @Test
+    public void correctLogWhenSearchUnexistKey() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("4");
+
+        viewModel.search();
+        String message = viewModel.getLog().get(2);
+
+        assertTrue(message.matches(".*" + "Result: Key not found" + ".*"));
+    }
+
+    @Test
+    public void correctLogWhenSearchKeyInUnsortedArray() {
+        viewModel.setArrayInputProperty("3,2,1");
+        viewModel.setElementInputProperty("2");
+
+        viewModel.search();
+        String message = viewModel.getLog().get(2);
+
+        assertTrue(message.matches(".*" + "Result: Array not sorted" + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterSearch() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("3");
+
+        viewModel.search();
+        String message = viewModel.getLog().get(2);
+
+        assertTrue(message.matches(".*" + "Result: " + ".*"));
+    }
+
+    @Test
+    public void logContainsInputArrayAfterSearch() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("3");
+
+        viewModel.search();
+        String message = viewModel.getLog().get(0);
+        assertTrue(message.matches(".*" + viewModel.arrayInputProperty().get() + ".*"));
+    }
+
+    @Test
+    public void logContainsInputElementAfterSearch() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("3");
+
+        viewModel.search();
+        String message = viewModel.getLog().get(1);
+        assertTrue(message.matches(".*" + viewModel.elementInputProperty().get() + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        viewModel.setArrayInputProperty("1,2,3");
+        viewModel.setElementInputProperty("3");
+
+        viewModel.search();
+        viewModel.search();
+        viewModel.search();
+
+        assertEquals(5, viewModel.getLog().size());
+    }
+}
diff --git a/code/binary-tree/src/main/java/ru/unn/agile/binarytree/model/BinaryTree.java b/code/binary-tree/Model/src/main/java/ru/unn/agile/binarytree/model/BinaryTree.java
similarity index 100%
rename from code/binary-tree/src/main/java/ru/unn/agile/binarytree/model/BinaryTree.java
rename to code/binary-tree/Model/src/main/java/ru/unn/agile/binarytree/model/BinaryTree.java
diff --git a/code/binary-tree/src/main/java/ru/unn/agile/binarytree/model/Node.java b/code/binary-tree/Model/src/main/java/ru/unn/agile/binarytree/model/Node.java
similarity index 100%
rename from code/binary-tree/src/main/java/ru/unn/agile/binarytree/model/Node.java
rename to code/binary-tree/Model/src/main/java/ru/unn/agile/binarytree/model/Node.java
diff --git a/code/binary-tree/src/test/java/ru/unn/agile/binaryTree/model/BinaryTreeTests.java b/code/binary-tree/Model/src/test/java/ru/unn/agile/binaryTree/model/BinaryTreeTests.java
similarity index 100%
rename from code/binary-tree/src/test/java/ru/unn/agile/binaryTree/model/BinaryTreeTests.java
rename to code/binary-tree/Model/src/test/java/ru/unn/agile/binaryTree/model/BinaryTreeTests.java
diff --git a/code/binary-tree/View/build.gradle b/code/binary-tree/View/build.gradle
new file mode 100644
index 000000000..b480b9605
--- /dev/null
+++ b/code/binary-tree/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.binarytree.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':binary-tree-ViewModel')
+}
diff --git a/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/BinaryTree.java b/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/BinaryTree.java
new file mode 100644
index 000000000..8e353d609
--- /dev/null
+++ b/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/BinaryTree.java
@@ -0,0 +1,40 @@
+package ru.unn.agile.binarytree.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+import ru.unn.agile.binarytree.viewmodel.ViewModel;
+
+public class BinaryTree {
+    @FXML
+    private ViewModel viewModel;
+
+    @FXML
+    private TextField txtFindKey;
+    @FXML
+    private TextField txtAddKey;
+    @FXML
+    private TextField txtAddValue;
+    @FXML
+    private TextField txtRemoveKey;
+    @FXML
+    private Button btnFind;
+    @FXML
+    private Button btnAdd;
+    @FXML
+    private Button btnRemove;
+
+    @FXML
+    void initialize() {
+
+        // Two-way binding hasn't supported by FXML yet, so place it in code-behind
+        txtFindKey.textProperty().bindBidirectional(viewModel.findKeyProperty());
+        txtAddKey.textProperty().bindBidirectional(viewModel.addKeyProperty());
+        txtAddValue.textProperty().bindBidirectional(viewModel.addValueProperty());
+        txtRemoveKey.textProperty().bindBidirectional(viewModel.removeKeyProperty());
+
+        btnFind.setOnAction(event -> viewModel.find());
+        btnAdd.setOnAction(event -> viewModel.add());
+        btnRemove.setOnAction(event -> viewModel.remove());
+    }
+}
diff --git a/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/Main.java b/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/Main.java
new file mode 100644
index 000000000..fb655204b
--- /dev/null
+++ b/code/binary-tree/View/src/main/java/ru/unn/agile/binarytree/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.binarytree.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("binarytree.fxml"));
+        primaryStage.setTitle("BinaryTree");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/binary-tree/View/src/main/resources/ru/unn/agile/binarytree/view/binarytree.fxml b/code/binary-tree/View/src/main/resources/ru/unn/agile/binarytree/view/binarytree.fxml
new file mode 100644
index 000000000..86fb2deb0
--- /dev/null
+++ b/code/binary-tree/View/src/main/resources/ru/unn/agile/binarytree/view/binarytree.fxml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<?import ru.unn.agile.binarytree.viewmodel.*?>
+<AnchorPane maxHeight="200.0" maxWidth="400.0" minHeight="200.0" minWidth="200.0" prefHeight="200.0" prefWidth="400.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.binarytree.view.BinaryTree">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+    <Button fx:id="btnFind" mnemonicParsing="false" text="Find" AnchorPane.leftAnchor="300.0" AnchorPane.topAnchor="15.0" />
+    <Button fx:id="btnAdd" mnemonicParsing="false" text="Add" AnchorPane.leftAnchor="300.0" AnchorPane.topAnchor="85.0" />
+    <Button fx:id="btnRemove" mnemonicParsing="false" text="Remove" AnchorPane.leftAnchor="300.0" AnchorPane.topAnchor="145.0" />
+    <TextField fx:id="txtFindKey" AnchorPane.leftAnchor="10.0" AnchorPane.topAnchor="15.0" />
+    <TextField fx:id="txtAddKey" prefWidth="60.0" AnchorPane.leftAnchor="10.0" AnchorPane.topAnchor="85.0" />
+    <TextField fx:id="txtAddValue" prefWidth="100.0" AnchorPane.leftAnchor="100.0" AnchorPane.topAnchor="85.0" />
+    <TextField fx:id="txtRemoveKey" AnchorPane.leftAnchor="10.0" AnchorPane.topAnchor="145.0" />
+    <Label text="${viewModel.findResult}" AnchorPane.leftAnchor="210.0" AnchorPane.topAnchor="20.0" />
+    <Label text="${viewModel.removeResult}" AnchorPane.leftAnchor="210.0" AnchorPane.topAnchor="150.0" />
+    <Label text="${viewModel.findStatus}" AnchorPane.leftAnchor="80.0" AnchorPane.topAnchor="55.0" />
+    <Label text="${viewModel.addStatus}" AnchorPane.leftAnchor="80.0" AnchorPane.topAnchor="120.0" />
+    <Label text="${viewModel.removeStatus}" AnchorPane.leftAnchor="80.0" AnchorPane.topAnchor="175.0" />
+    <Label text="Status:" AnchorPane.leftAnchor="25.0" AnchorPane.topAnchor="55.0" />
+    <Label text="Status:" AnchorPane.leftAnchor="25.0" AnchorPane.topAnchor="120.0" />
+    <Label text="Status:" AnchorPane.leftAnchor="25.0" AnchorPane.topAnchor="175.0" />
+</AnchorPane>
diff --git a/code/binary-tree/View/src/test/java/ru/unn/agile/binarytree/view/FakeViewTests.java b/code/binary-tree/View/src/test/java/ru/unn/agile/binarytree/view/FakeViewTests.java
new file mode 100644
index 000000000..161ea5fef
--- /dev/null
+++ b/code/binary-tree/View/src/test/java/ru/unn/agile/binarytree/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.binarytree.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/binary-tree/ViewModel/build.gradle b/code/binary-tree/ViewModel/build.gradle
new file mode 100644
index 000000000..fc50df4da
--- /dev/null
+++ b/code/binary-tree/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':binary-tree-Model')
+}
diff --git a/code/binary-tree/ViewModel/src/main/java/ru/unn/agile/binarytree/viewmodel/ViewModel.java b/code/binary-tree/ViewModel/src/main/java/ru/unn/agile/binarytree/viewmodel/ViewModel.java
new file mode 100644
index 000000000..d5945b473
--- /dev/null
+++ b/code/binary-tree/ViewModel/src/main/java/ru/unn/agile/binarytree/viewmodel/ViewModel.java
@@ -0,0 +1,221 @@
+package ru.unn.agile.binarytree.viewmodel;
+
+import javafx.beans.property.*;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+
+import ru.unn.agile.binarytree.model.BinaryTree;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+    private BinaryTree storage = new BinaryTree();
+
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+
+    private final StringProperty addKey = new SimpleStringProperty();
+    private final StringProperty addValue = new SimpleStringProperty();
+    private final StringProperty findKey = new SimpleStringProperty();
+    private final StringProperty removeKey = new SimpleStringProperty();
+
+    private final StringProperty addStatus = new SimpleStringProperty();
+
+    private final StringProperty findResult = new SimpleStringProperty();
+    private final StringProperty findStatus = new SimpleStringProperty();
+
+    private final StringProperty removeResult = new SimpleStringProperty();
+    private final StringProperty removeStatus = new SimpleStringProperty();
+
+    public ViewModel() {
+        addKey.set("");
+        addValue.set("");
+        addStatus.set(Status.WAITING.toString());
+
+        findKey.set("");
+        findResult.set("");
+        findStatus.set(Status.WAITING.toString());
+
+        removeKey.set("");
+        removeResult.set("");
+        removeStatus.set(Status.WAITING.toString());
+
+        final List<StringProperty> fields = new ArrayList<>() {
+            {
+                add(addKey);
+                add(addValue);
+                add(findKey);
+                add(removeKey);
+            }
+        };
+
+        for (StringProperty field : fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    public StringProperty addKeyProperty() {
+        return addKey;
+    }
+
+    public StringProperty addValueProperty() {
+        return addValue;
+    }
+
+    public StringProperty addStatusProperty() {
+        return addStatus;
+    }
+
+    public StringProperty findKeyProperty() {
+        return findKey;
+    }
+
+    public StringProperty findResultProperty() {
+        return findResult;
+    }
+
+    public StringProperty findStatusProperty() {
+        return findStatus;
+    }
+
+    public StringProperty removeKeyProperty() {
+        return removeKey;
+    }
+
+    public StringProperty removeResultProperty() {
+        return removeResult;
+    }
+
+    public StringProperty removeStatusProperty() {
+        return removeStatus;
+    }
+
+    public String getAddStatus() {
+        return addStatus.get();
+    }
+
+    public String getFindResult() {
+        return findResult.get();
+    }
+
+    public String getFindStatus() {
+        return findStatus.get();
+    }
+
+    public String getRemoveResult() {
+        return removeResult.get();
+    }
+
+    public String getRemoveStatus() {
+        return removeStatus.get();
+    }
+
+    public void add() {
+        final int key = Integer.parseInt(addKey.get());
+        final String value = addValue.get();
+
+        storage.add(key, value);
+
+        addStatus.set(Status.SUCCESS.toString());
+    }
+
+    public void find() {
+        final int key = Integer.parseInt(findKey.get());
+
+        String result = storage.find(key);
+
+        if (result == null) {
+            result = ">NOT FOUND<";
+        }
+
+        findResult.set(result);
+        findStatus.set(Status.SUCCESS.toString());
+    }
+
+    public void remove() {
+        final int key = Integer.parseInt(removeKey.get());
+
+        final boolean result = storage.remove(key);
+
+        removeResult.set(Boolean.toString(result));
+        removeStatus.set(Status.SUCCESS.toString());
+    }
+
+    private Status getAddInputStatus() {
+        Status addStatus = Status.READY;
+        if (addKey.get().isEmpty() || addValue.get().isEmpty()) {
+            addStatus = Status.WAITING;
+        }
+        try {
+            if (!addKey.get().isEmpty()) {
+                Integer.parseInt(addKey.get());
+            }
+            if (!addValue.get().isEmpty()) {
+                addValue.get();
+            }
+        } catch (NumberFormatException nfe) {
+            addStatus = Status.BAD_FORMAT;
+        }
+
+        return addStatus;
+    }
+
+    private Status getFindInputStatus() {
+        Status findStatus = Status.READY;
+        if (findKey.get().isEmpty()) {
+            findStatus = Status.WAITING;
+        }
+        try {
+            if (!findKey.get().isEmpty()) {
+                Integer.parseInt(findKey.get());
+            }
+        } catch (NumberFormatException nfe) {
+            findStatus = Status.BAD_FORMAT;
+        }
+
+        return findStatus;
+    }
+
+    private Status getRemoveInputStatus() {
+        Status removeStatus = Status.READY;
+        if (removeKey.get().isEmpty()) {
+            removeStatus = Status.WAITING;
+        }
+        try {
+            if (!removeKey.get().isEmpty()) {
+                Integer.parseInt(removeKey.get());
+            }
+        } catch (NumberFormatException nfe) {
+            removeStatus = Status.BAD_FORMAT;
+        }
+
+        return removeStatus;
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            addStatus.set(getAddInputStatus().toString());
+            findStatus.set(getFindInputStatus().toString());
+            removeStatus.set(getRemoveInputStatus().toString());
+        }
+    }
+}
+
+enum Status {
+    WAITING("Please provide full input data"),
+    READY("Press button"),
+    BAD_FORMAT("Bad format"),
+    SUCCESS("Success");
+
+    private final String name;
+    Status(final String name) {
+        this.name = name;
+    }
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/binary-tree/ViewModel/src/test/java/ru/unn/agile/binarytree/viewmodel/ViewModelTests.java b/code/binary-tree/ViewModel/src/test/java/ru/unn/agile/binarytree/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..90a3c0f94
--- /dev/null
+++ b/code/binary-tree/ViewModel/src/test/java/ru/unn/agile/binarytree/viewmodel/ViewModelTests.java
@@ -0,0 +1,164 @@
+package ru.unn.agile.binarytree.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canSetDefaultValues() {
+        assertEquals("", viewModel.addKeyProperty().get());
+        assertEquals("", viewModel.addValueProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.addStatusProperty().get());
+
+        assertEquals("", viewModel.findKeyProperty().get());
+        assertEquals("", viewModel.findResultProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.findStatusProperty().get());
+
+        assertEquals("", viewModel.removeKeyProperty().get());
+        assertEquals("", viewModel.removeResultProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.removeStatusProperty().get());
+    }
+
+    @Test
+    public void addStatusIsWaitingWhenOnlyKeyInserted() {
+        viewModel.addKeyProperty().set("18");
+        assertEquals(Status.WAITING.toString(), viewModel.getAddStatus());
+    }
+
+    @Test
+    public void addStatusIsWaitingWhenOnlyValuesInserted() {
+        viewModel.addValueProperty().set("FOO");
+        assertEquals(Status.WAITING.toString(), viewModel.getAddStatus());
+    }
+
+    @Test
+    public void addStatusIsReadyWhenInsertedBoth() {
+        viewModel.addKeyProperty().set("18");
+        viewModel.addValueProperty().set("FOO");
+        assertEquals(Status.READY.toString(), viewModel.getAddStatus());
+    }
+
+    @Test
+    public void addStatusIsBadWhenInsertKeyNotInteger() {
+        viewModel.addKeyProperty().set("PASS");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.getAddStatus());
+    }
+
+    @Test
+    public void findStatusIsReadyWhenIntegerInserted() {
+        viewModel.findKeyProperty().set("18");
+        assertEquals(Status.READY.toString(), viewModel.getFindStatus());
+    }
+
+    @Test
+    public void findStatusIsBadWhenNotIntegerInserted() {
+        viewModel.findKeyProperty().set("PASS");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.getFindStatus());
+    }
+
+    @Test
+    public void removeStatusIsReadyWhenIntegerInserted() {
+        viewModel.removeKeyProperty().set("18");
+        assertEquals(Status.READY.toString(), viewModel.getRemoveStatus());
+    }
+
+    @Test
+    public void removeStatusIsBadWhenNotIntegerInserted() {
+        viewModel.removeKeyProperty().set("PASS");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.getRemoveStatus());
+    }
+
+    @Test
+    public void addStatusIsSuccessWhenInputCorrect() {
+        viewModel.addKeyProperty().set("2");
+        viewModel.addValueProperty().set("PASS");
+
+        viewModel.add();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.addStatusProperty().get());
+    }
+
+    @Test
+    public void findStatusIsSuccessWhenInputCorrect() {
+        viewModel.findKeyProperty().set("3");
+
+        viewModel.find();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.findStatusProperty().get());
+    }
+
+    @Test
+    public void removeStatusIsSuccessWhenInputCorrect() {
+        viewModel.removeKeyProperty().set("3");
+
+        viewModel.remove();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.removeStatusProperty().get());
+    }
+
+    @Test
+    public void findResultIsNullForNonAddedKey() {
+        viewModel.findKeyProperty().set("3");
+
+        viewModel.find();
+
+        assertEquals(">NOT FOUND<", viewModel.findResultProperty().get());
+    }
+
+    @Test
+    public void findResultIsExpectedForAddedKey() {
+        final String key = "3";
+        final String value = "PASS";
+
+        viewModel.addKeyProperty().set(key);
+        viewModel.addValueProperty().set(value);
+
+        viewModel.add();
+
+        viewModel.findKeyProperty().set(key);
+
+        viewModel.find();
+
+        assertEquals(value, viewModel.findResultProperty().get());
+    }
+
+    @Test
+    public void removeResultIsNullForNonAddedKey() {
+        viewModel.removeKeyProperty().set("3");
+
+        viewModel.remove();
+
+        assertFalse(Boolean.parseBoolean(viewModel.removeResultProperty().get()));
+    }
+
+    @Test
+    public void removeResultIsExpectedForAddedKey() {
+        final String key = "3";
+
+        viewModel.addKeyProperty().set(key);
+        viewModel.addValueProperty().set("PASS");
+
+        viewModel.add();
+
+        viewModel.removeKeyProperty().set(key);
+
+        viewModel.remove();
+
+        assertTrue(Boolean.parseBoolean(viewModel.removeResultProperty().get()));
+    }
+}
diff --git a/code/bit-array/Model/src/main/java/ru/unn/agile/bitarray/model/BitArray.java b/code/bit-array/Model/src/main/java/ru/unn/agile/bitarray/model/BitArray.java
new file mode 100644
index 000000000..532f84373
--- /dev/null
+++ b/code/bit-array/Model/src/main/java/ru/unn/agile/bitarray/model/BitArray.java
@@ -0,0 +1,105 @@
+package ru.unn.agile.bitarray.model;
+
+
+import java.util.Arrays;
+import java.util.Objects;
+
+public class BitArray {
+    private byte[] rawArray;
+    private final int sizeByte = 8;
+    private int countBit;
+
+    public BitArray(final int quantityOfBits) {
+        countBit = quantityOfBits;
+        int lengthRawArray = -1;
+        if (quantityOfBits > 0) {
+            lengthRawArray = getNumElem(quantityOfBits);
+        }
+        rawArray = new byte[lengthRawArray];
+
+        Arrays.fill(rawArray, (byte) 0);
+    }
+
+    public BitArray(final BitArray rawArray) {
+        this.rawArray = rawArray.getRawArray();
+        this.countBit = rawArray.getCountBit();
+    }
+
+    public byte[] getRawArray() {
+        return rawArray.clone();
+    }
+
+    public int getCountBit() {
+        return countBit;
+    }
+
+    private int getNumElem(final int bit) {
+        int numRawArray = bit / sizeByte;
+        if (bit % sizeByte != 0) {
+            numRawArray++;
+        }
+        return numRawArray;
+    }
+
+    @Override
+    public boolean equals(final Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (!(obj instanceof BitArray)) {
+            return false;
+        }
+        BitArray bitArray = (BitArray) obj;
+        return Arrays.equals(getRawArray(), bitArray.getRawArray());
+    }
+
+    @Override
+    public int hashCode() {
+        int result = Objects.hash(sizeByte);
+        final int hashConst = 31;
+        result = hashConst * result + Arrays.hashCode(getRawArray());
+        return result;
+    }
+
+    public boolean isBit(final int bit) {
+        if (bit == 0) {
+            return (byte) (rawArray[0] & 1) > 0;
+        }
+
+        int numElem = -1;
+        if (bit > 0) {
+            numElem = getNumElem(bit);
+        }
+
+        byte mask = 0;
+        mask |= 1 << (bit % sizeByte);
+        byte answer = (byte) (rawArray[numElem - 1] & mask);
+        return answer > 0;
+    }
+
+    public void setBit(final int bit) {
+        if (bit != 0) {
+            int numElem = getNumElem(bit);
+            rawArray[numElem - 1] |= 1 << (bit % sizeByte);
+        } else {
+            rawArray[0] |= 1;
+        }
+    }
+
+    public void unsetBit(final int bit) {
+        if (bit != 0) {
+            int numElem = getNumElem(bit);
+            rawArray[numElem - 1] &= ~(1 << (bit % sizeByte));
+        } else {
+            rawArray[0] &= ~1;
+        }
+    }
+
+    public BitArray union(final BitArray invBtr) {
+        BitArray res = new BitArray(countBit);
+        for (int i = 0; i < getNumElem(countBit); i++) {
+            res.rawArray[i] = (byte) (rawArray[i] + invBtr.rawArray[i]);
+        }
+        return res;
+    }
+}
diff --git a/code/bit-array/Model/src/test/java/ru/unn/agile/bitarray/model/BitArrayTest.java b/code/bit-array/Model/src/test/java/ru/unn/agile/bitarray/model/BitArrayTest.java
new file mode 100644
index 000000000..da24308df
--- /dev/null
+++ b/code/bit-array/Model/src/test/java/ru/unn/agile/bitarray/model/BitArrayTest.java
@@ -0,0 +1,250 @@
+package ru.unn.agile.bitarray.model;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class BitArrayTest {
+
+    @Test
+    public void canInitBitArray() {
+        // arrange
+        BitArray btr = new BitArray(10);
+
+        // act
+        byte[] btrRawArray = btr.getRawArray();
+
+        // assert
+        assertEquals(btrRawArray.length, 2);
+    }
+
+    @Test(expected = NegativeArraySizeException.class)
+    public void throwInitBitArrayWithNegative() {
+        new BitArray(-10);
+    }
+
+    @Test
+    public void isZeroAfterInitBitArray() {
+        // arrange
+        BitArray btr = new BitArray(101);
+
+        // act
+        byte[] btrRawArray = btr.getRawArray();
+
+        // assert
+        for (byte elem : btrRawArray) {
+            assertEquals(elem, 0);
+        }
+    }
+
+    @Test
+    public void canUseGetCountBitFunc() {
+        // arrange
+        final int countElements = 279;
+        BitArray btr = new BitArray(countElements);
+
+        // act
+        int countBit = btr.getCountBit();
+
+        // assert
+        assertEquals(countBit, countElements);
+    }
+
+    @Test
+    public void canSetBitInBitArray() {
+        // arrange
+        final int countBits = 41;
+        final int sizeByte = 8;
+        BitArray btr = new BitArray(countBits);
+
+        // act
+        final int actualBit = 19;
+        btr.setBit(actualBit);
+
+        // assert
+        final byte reference = 1 << (actualBit % sizeByte);
+        byte actual = btr.getRawArray()[actualBit / sizeByte];
+        assertEquals(reference, actual);
+    }
+
+    @Test
+    public void canSetZeroBit() {
+        // arrange
+        BitArray btr = new BitArray(8);
+
+        // act
+        btr.setBit(0);
+
+        // assert
+        byte[] actual = btr.getRawArray();
+        byte[] reference = {1};
+        assertArrayEquals(reference, actual);
+    }
+
+    @Test(expected = ArrayIndexOutOfBoundsException.class)
+    public void canSetNegativeBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act & assert
+        btr.setBit(-31);
+    }
+
+    @Test
+    public void canUnsetBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act
+        btr.setBit(25); btr.unsetBit(25);
+
+        // assert
+        for (byte elem : btr.getRawArray()) {
+            assertEquals(elem, 0);
+        }
+    }
+
+    @Test
+    public void canUnsetZeroBit() {
+        // arrange
+        BitArray btr = new BitArray(8);
+
+        // act
+        btr.setBit(0);
+        btr.unsetBit(0);
+
+        // assert
+        byte[] actual = btr.getRawArray();
+        byte[] reference = {0};
+        assertArrayEquals(reference, actual);
+    }
+
+    @Test(expected = ArrayIndexOutOfBoundsException.class)
+    public void canUnsetNegativeBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act & assert
+        btr.unsetBit(-31);
+    }
+
+    @Test
+    public void isSetBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act
+        btr.setBit(29);
+
+        // assert
+        assertTrue(btr.isBit(29));
+    }
+
+    @Test
+    public void isSetBitEqualZeroInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act
+        btr.setBit(0);
+
+        // assert
+        assertTrue(btr.isBit(0));
+    }
+
+    @Test
+    public void isUnsetBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act
+        btr.setBit(29);
+
+        // assert
+        assertFalse(btr.isBit(28));
+    }
+
+    @Test(expected = ArrayIndexOutOfBoundsException.class)
+    public void isSetNegativeBitInBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        // act & assert
+        btr.unsetBit(-31);
+    }
+
+    @Test
+    public void isEqualBitArrays() {
+        // arrange
+        BitArray bitArray1 = new BitArray(41);
+        BitArray bitArray2 = new BitArray(41);
+
+        bitArray1.setBit(7);   bitArray2.setBit(7);
+        bitArray1.setBit(11);  bitArray2.setBit(11);
+        bitArray1.setBit(19);  bitArray2.setBit(19);
+        bitArray1.setBit(26);  bitArray2.setBit(26);
+        bitArray1.setBit(34);  bitArray2.setBit(34);
+        bitArray1.setBit(40);  bitArray2.setBit(40);
+
+        // act && assert
+        assertEquals(bitArray1, bitArray2);
+    }
+
+    @Test
+    public void isNotEqualBitArrays() {
+        // arrange
+        BitArray btr1 = new BitArray(41);
+        BitArray btr2 = new BitArray(41);
+
+        btr1.setBit(7);   btr2.setBit(7);
+        btr1.setBit(11);  btr2.setBit(11);
+        btr1.setBit(19);  btr2.setBit(19);
+        btr1.setBit(26);  btr2.setBit(27);
+        btr1.setBit(34);  btr2.setBit(34);
+        btr1.setBit(40);  btr2.setBit(40);
+
+        // act && assert
+        assertNotEquals(btr1, btr2);
+    }
+
+    @Test
+    public void canCopyBitArray() {
+        // arrange
+        BitArray btr = new BitArray(41);
+
+        btr.setBit(4);
+        btr.setBit(13);
+        btr.setBit(19);
+        btr.setBit(25);
+        btr.setBit(34);
+        btr.setBit(41);
+
+        // act
+        BitArray actualBtr = new BitArray(btr);
+
+        // assert
+        assertEquals(btr, actualBtr);
+    }
+
+    @Test
+    public void canUseUnionBitArrays() {
+        // arrange
+        BitArray btr = new BitArray(8);
+        BitArray invBtr = new BitArray(btr.getCountBit());
+        btr.setBit(0); invBtr.setBit(1);
+        btr.setBit(2); invBtr.setBit(3);
+        btr.setBit(4); invBtr.setBit(5);
+        btr.setBit(6); invBtr.setBit(7);
+        btr.setBit(8);
+
+        // act
+        BitArray actualBtr = btr.union(invBtr);
+
+        // assert
+        BitArray ref = new BitArray(btr.getCountBit());
+        for (int i = 0; i < ref.getCountBit(); i++) {
+            ref.setBit(i);
+        }
+        assertEquals(ref, actualBtr);
+    }
+}
diff --git a/code/bit-array/View/build.gradle b/code/bit-array/View/build.gradle
new file mode 100644
index 000000000..35a2b7310
--- /dev/null
+++ b/code/bit-array/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.bitarray.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':bit-array-ViewModel')
+}
diff --git a/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/BitArray.java b/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/BitArray.java
new file mode 100644
index 000000000..8e4e37e4b
--- /dev/null
+++ b/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/BitArray.java
@@ -0,0 +1,46 @@
+package ru.unn.agile.bitarray.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.bitarray.viewmodel.ViewModel;
+
+public class BitArray {
+    @FXML
+    private ViewModel viewModel;
+
+    @FXML
+    private TextField inputBitArray;
+    @FXML
+    private TextField inputBit;
+
+    @FXML
+    private Label labelStatusArray;
+    @FXML
+    private Label labelStatusBit;
+    @FXML
+    private Label labelBitArray;
+
+    @FXML
+    private Button btnCreateBitArray;
+    @FXML
+    private Button btnSetBit;
+    @FXML
+    private Button btnUnsetBit;
+
+    @FXML
+    void initialize() {
+        labelStatusArray.textProperty().bind(viewModel.fieldInputArrayStatusProperty());
+        labelStatusBit.textProperty().bind(viewModel.fieldInputBitStatusProperty());
+
+        labelBitArray.textProperty().bind(viewModel.fieldBitArrayProperty());
+
+        inputBitArray.textProperty().bindBidirectional(viewModel.inputBitArrayProperty());
+        inputBit.textProperty().bindBidirectional(viewModel.inputBitProperty());
+
+        btnCreateBitArray.setOnAction(event -> viewModel.create());
+        btnSetBit.setOnAction(event -> viewModel.setBit());
+        btnUnsetBit.setOnAction(event -> viewModel.unsetBit());
+    }
+}
diff --git a/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/Main.java b/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/Main.java
new file mode 100644
index 000000000..de9c9c989
--- /dev/null
+++ b/code/bit-array/View/src/main/java/ru/unn/agile/bitarray/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.bitarray.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("BitArray.fxml"));
+        primaryStage.setTitle("Bit Array");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/bit-array/View/src/main/resources/ru/unn/agile/bitarray/view/BitArray.fxml b/code/bit-array/View/src/main/resources/ru/unn/agile/bitarray/view/BitArray.fxml
new file mode 100644
index 000000000..236c52a7b
--- /dev/null
+++ b/code/bit-array/View/src/main/resources/ru/unn/agile/bitarray/view/BitArray.fxml
@@ -0,0 +1,139 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<?import ru.unn.agile.bitarray.viewmodel.ViewModel?>
+<AnchorPane id="AnchorPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="181.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.bitarray.view.BitArray">
+  <fx:define>
+    <ViewModel fx:id="viewModel" />
+  </fx:define>
+  <children>
+    <GridPane prefHeight="272.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
+      <children>
+        <GridPane GridPane.columnIndex="0" GridPane.rowIndex="0">
+          <children>
+            <TextField fx:id="inputBitArray" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <GridPane GridPane.columnIndex="1" GridPane.rowIndex="2">
+              <children>
+                <Label prefHeight="-1.0" prefWidth="-1.0" text="Input status:" GridPane.columnIndex="0" GridPane.rowIndex="0" />
+                <Label fx:id="labelStatusArray" prefHeight="30.0" prefWidth="196.0" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+              </children>
+              <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" maxWidth="192.0" minWidth="10.0" prefWidth="76.0" />
+                <ColumnConstraints hgrow="SOMETIMES" maxWidth="317.0" minWidth="10.0" prefWidth="317.0" />
+              </columnConstraints>
+              <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+              </rowConstraints>
+            </GridPane>
+          </children>
+          <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="147.0" minWidth="10.0" prefWidth="29.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="393.0" minWidth="10.0" prefWidth="393.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="148.0" minWidth="10.0" prefWidth="22.0" />
+          </columnConstraints>
+          <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          </rowConstraints>
+        </GridPane>
+        <GridPane minHeight="-Infinity" GridPane.columnIndex="1" GridPane.rowIndex="0">
+          <children>
+            <Button fx:id="btnCreateBitArray" contentDisplay="CENTER" mnemonicParsing="false" prefWidth="132.0" text="Create BitArray" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+          </children>
+          <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="147.0" minWidth="10.0" prefWidth="10.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="393.0" minWidth="10.0" prefWidth="136.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="148.0" minWidth="10.0" prefWidth="10.0" />
+          </columnConstraints>
+          <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          </rowConstraints>
+        </GridPane>
+        <GridPane GridPane.columnIndex="0" GridPane.rowIndex="2">
+          <children>
+            <Label fx:id="labelBitArray" alignment="CENTER" contentDisplay="CENTER" minHeight="9.0" prefHeight="30.0" prefWidth="379.0" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <Label prefHeight="37.0" prefWidth="101.0" text="Current BitArray:" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+          </children>
+          <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="147.0" minWidth="10.0" prefWidth="30.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="147.0" minWidth="10.0" prefWidth="112.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="393.0" minWidth="10.0" prefWidth="269.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="148.0" minWidth="10.0" prefWidth="33.0" />
+          </columnConstraints>
+          <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          </rowConstraints>
+        </GridPane>
+        <GridPane id="GridPane" GridPane.columnIndex="1" GridPane.rowIndex="1">
+          <children>
+            <GridPane minHeight="-Infinity" GridPane.columnIndex="0" GridPane.rowIndex="0">
+              <children>
+                <Button fx:id="btnSetBit" contentDisplay="CENTER" mnemonicParsing="false" prefWidth="132.0" text="Set Bit" GridPane.columnIndex="1" GridPane.rowIndex="0" />
+                <Button fx:id="btnUnsetBit" contentDisplay="CENTER" mnemonicParsing="false" prefWidth="132.0" text="Unset Bit" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+              </children>
+              <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" maxWidth="147.0" minWidth="10.0" prefWidth="10.0" />
+                <ColumnConstraints hgrow="SOMETIMES" maxWidth="393.0" minWidth="10.0" prefWidth="136.0" />
+                <ColumnConstraints hgrow="SOMETIMES" maxWidth="148.0" minWidth="10.0" prefWidth="10.0" />
+              </columnConstraints>
+              <rowConstraints>
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+              </rowConstraints>
+            </GridPane>
+          </children>
+          <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" />
+          </columnConstraints>
+          <rowConstraints>
+            <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+          </rowConstraints>
+        </GridPane>
+        <GridPane GridPane.columnIndex="0" GridPane.rowIndex="1">
+          <children>
+            <Label prefHeight="37.0" prefWidth="101.0" text="Bit" GridPane.columnIndex="2" />
+            <TextField fx:id="inputBit" prefWidth="200.0" GridPane.columnIndex="3" />
+                  <GridPane GridPane.columnIndex="1" GridPane.rowIndex="1">
+                    <columnConstraints>
+                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="165.0" minWidth="10.0" prefWidth="67.0" />
+                      <ColumnConstraints hgrow="SOMETIMES" maxWidth="284.0" minWidth="10.0" prefWidth="284.0" />
+                    </columnConstraints>
+                    <rowConstraints>
+                      <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                    </rowConstraints>
+                     <children>
+                        <Label prefHeight="35.0" prefWidth="77.0" text="Input status:" />
+                        <Label fx:id="labelStatusBit" prefHeight="30.0" prefWidth="275.0" GridPane.columnIndex="1" />
+                     </children>
+                  </GridPane>
+          </children>
+          <columnConstraints>
+                  <ColumnConstraints hgrow="SOMETIMES" maxWidth="340.0" minWidth="10.0" prefWidth="47.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="400.0" minWidth="10.0" prefWidth="367.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="374.0" minWidth="10.0" prefWidth="38.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="393.0" minWidth="10.0" prefWidth="45.0" />
+            <ColumnConstraints hgrow="SOMETIMES" maxWidth="261.0" minWidth="10.0" prefWidth="21.0" />
+          </columnConstraints>
+          <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                  <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          </rowConstraints>
+        </GridPane>
+      </children>
+      <columnConstraints>
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="540.0" minWidth="10.0" prefWidth="444.0" />
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="299.0" minWidth="10.0" prefWidth="156.0" />
+      </columnConstraints>
+      <rowConstraints>
+        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+      </rowConstraints>
+    </GridPane>
+  </children>
+</AnchorPane>
diff --git a/code/bit-array/View/src/test/java/ru/unn/agile/bitarray/view/FakeViewTests.java b/code/bit-array/View/src/test/java/ru/unn/agile/bitarray/view/FakeViewTests.java
new file mode 100644
index 000000000..11b925d8f
--- /dev/null
+++ b/code/bit-array/View/src/test/java/ru/unn/agile/bitarray/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.bitarray.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/bit-array/ViewModel/build.gradle b/code/bit-array/ViewModel/build.gradle
new file mode 100644
index 000000000..bcbdffc67
--- /dev/null
+++ b/code/bit-array/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':bit-array-Model')
+}
diff --git a/code/bit-array/ViewModel/src/main/java/ru/unn/agile/bitarray/viewmodel/ViewModel.java b/code/bit-array/ViewModel/src/main/java/ru/unn/agile/bitarray/viewmodel/ViewModel.java
new file mode 100644
index 000000000..fc3e4a820
--- /dev/null
+++ b/code/bit-array/ViewModel/src/main/java/ru/unn/agile/bitarray/viewmodel/ViewModel.java
@@ -0,0 +1,178 @@
+package ru.unn.agile.bitarray.viewmodel;
+
+import javafx.beans.property.*;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.bitarray.model.BitArray;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class ViewModel {
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+
+    private final StringProperty inputBitArray = new SimpleStringProperty();
+    private final StringProperty inputBit = new SimpleStringProperty();
+
+    private final StringProperty fieldInputArrayStatus = new SimpleStringProperty();
+    private final StringProperty fieldInputBitStatus   = new SimpleStringProperty();
+
+    private final StringProperty fieldBitArray = new SimpleStringProperty();
+
+    private String patternArrayInput = "[0,1]+";
+    private String patternBitInput = "[0-9]+";
+
+    private BitArray bitArray;
+
+    public ViewModel() {
+        inputBit.set("");
+        inputBitArray.set("");
+        fieldBitArray.set("");
+
+        fieldInputArrayStatus.set(Status.WAITING.toString());
+        fieldInputBitStatus.set(Status.WAITING.toString());
+
+        final List<StringProperty> triggers = new ArrayList<>() {
+            {
+                add(inputBitArray);
+                add(inputBit);
+            }
+        };
+
+        for (StringProperty trigger : triggers) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            trigger.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    public StringProperty inputBitArrayProperty() {
+        return inputBitArray;
+    }
+
+    public StringProperty inputBitProperty() {
+        return inputBit;
+    }
+
+    public StringProperty fieldBitArrayProperty() {
+        if (bitArray != null) {
+            StringBuilder stringBuilder = new StringBuilder();
+            for (int index = 0; index < bitArray.getCountBit(); ++index) {
+                if (bitArray.isBit(index)) {
+                    stringBuilder.append(1);
+                } else {
+                    stringBuilder.append(0);
+                }
+            }
+            fieldBitArray.set(stringBuilder.toString());
+        }
+        return fieldBitArray;
+    }
+
+    public StringProperty fieldInputArrayStatusProperty() {
+        return fieldInputArrayStatus;
+    }
+
+    public StringProperty fieldInputBitStatusProperty() {
+        return fieldInputBitStatus;
+    }
+
+    private boolean patternMatch(final String inputString, final String patternString) {
+        Pattern pattern = Pattern.compile(patternString);
+        Matcher matcher = pattern.matcher(inputString);
+        return matcher.matches();
+    }
+
+    private Status getFieldInputArrayStatus() {
+        Status inputStatus = Status.READY;
+        final String arrayInputStr = inputBitArray.get();
+        boolean matchArrayInput = patternMatch(arrayInputStr, patternArrayInput);
+        if (!matchArrayInput) {
+            inputStatus = Status.BAD_FORMAT_ARRAY;
+            return inputStatus;
+        }
+        return inputStatus;
+    }
+
+    private Status getFieldInputBitStatus() {
+        Status inputStatus = Status.READY;
+        final String bitInputStr = inputBit.get();
+        boolean matchArrayInput = patternMatch(bitInputStr, patternBitInput);
+        if (!matchArrayInput) {
+            inputStatus = Status.BAD_FORMAT_BIT;
+            return inputStatus;
+        }
+        if (bitArray == null) {
+            inputStatus = Status.NOT_CREATED;
+            return inputStatus;
+        }
+        return inputStatus;
+    }
+
+    public void create() {
+        if (getFieldInputArrayStatus() != Status.READY) {
+            return;
+        }
+        final String arrayInputStr = inputBitArray.get();
+        bitArray = new BitArray(arrayInputStr.length());
+        for (int index = 0; index < arrayInputStr.length(); ++index) {
+            if (arrayInputStr.charAt(index) == '1') {
+                bitArray.setBit(index);
+            }
+        }
+        fieldBitArrayProperty();
+        fieldInputArrayStatus.set(Status.SUCCESS.toString());
+    }
+
+    public void setBit() {
+        if (getFieldInputBitStatus() != Status.READY) {
+            return;
+        }
+        final String bitInputStr = inputBit.get();
+        final int index = Integer.parseInt(bitInputStr);
+        bitArray.setBit(index);
+
+        fieldBitArrayProperty();
+        fieldInputBitStatus.set(Status.SUCCESS.toString());
+    }
+
+    public void unsetBit() {
+        if (getFieldInputBitStatus() != Status.READY) {
+            return;
+        }
+        final String bitInputStr = inputBit.get();
+        final int index = Integer.parseInt(bitInputStr);
+        bitArray.unsetBit(index);
+
+        fieldBitArrayProperty();
+        fieldInputBitStatus.set(Status.SUCCESS.toString());
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            fieldInputArrayStatus.set(getFieldInputArrayStatus().toString());
+            fieldInputBitStatus.set(getFieldInputBitStatus().toString());
+        }
+    }
+}
+
+enum Status {
+    WAITING("Please provide input data"),
+    READY("Press button or Enter"),
+    BAD_FORMAT_ARRAY("Incorrect format. Required: [0-1]+"),
+    BAD_FORMAT_BIT("Incorrect format. Index required."),
+    NOT_CREATED("Bit array is not created to change it."),
+    SUCCESS("Success");
+
+    private final String name;
+    Status(final String name) {
+        this.name = name;
+    }
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/bit-array/ViewModel/src/test/java/ru/unn/agile/bitarray/viewmodel/ViewModelTests.java b/code/bit-array/ViewModel/src/test/java/ru/unn/agile/bitarray/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..f59776b73
--- /dev/null
+++ b/code/bit-array/ViewModel/src/test/java/ru/unn/agile/bitarray/viewmodel/ViewModelTests.java
@@ -0,0 +1,176 @@
+package ru.unn.agile.bitarray.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    // Constructor tests
+    @Test
+    public void constructorDefaultSetAllStringsEmpty() {
+        assertEquals("", viewModel.inputBitArrayProperty().get());
+        assertEquals("", viewModel.inputBitProperty().get());
+        assertEquals("", viewModel.fieldBitArrayProperty().get());
+    }
+
+    @Test
+    public void constructorDefaultSetStatusWaiting() {
+        assertEquals(Status.WAITING.toString(), viewModel.fieldInputArrayStatusProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    // Array status field tests - fieldInputArrayStatusProperty
+    @Test
+    public void statusArrayFieldOnInputFieldIsEmptyIsWaiting() {
+        viewModel.inputBitArrayProperty().set("");
+
+        assertEquals(Status.WAITING.toString(), viewModel.fieldInputArrayStatusProperty().get());
+    }
+
+    @Test
+    public void statusArrayFieldOnIncorrectBitArrayInputIsBadArrayFormat() {
+        viewModel.inputBitArrayProperty().set("0142");
+
+        assertEquals(Status.BAD_FORMAT_ARRAY.toString(),
+                viewModel.fieldInputArrayStatusProperty().get());
+    }
+
+    @Test
+    public void statusArrayFieldOnCorrectInputIsReady() {
+        viewModel.inputBitArrayProperty().set("01");
+
+        assertEquals(Status.READY.toString(), viewModel.fieldInputArrayStatusProperty().get());
+    }
+
+    @Test
+    public void statusArrayFieldAfterCreatingIsSUCCESS() {
+        viewModel.inputBitArrayProperty().set("01");
+        viewModel.create();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.fieldInputArrayStatusProperty().get());
+    }
+
+    // Bit status field tests - fieldInputBitStatusProperty
+    @Test
+    public void statusBitFieldOnInputFieldIsEmptyIsWaiting() {
+        viewModel.inputBitProperty().set("");
+
+        assertEquals(Status.WAITING.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnIncorrectBitInputIsBadBitFormat() {
+        viewModel.inputBitProperty().set("a");
+
+        assertEquals(Status.BAD_FORMAT_BIT.toString(),
+                viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnCorrectInputBitArrayCreatedIsReady() {
+        viewModel.inputBitArrayProperty().set("0101");
+        viewModel.create();
+
+        viewModel.inputBitProperty().set("3");
+
+        assertEquals(Status.READY.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnNotCreatedBitArrayUnsetCallIsNOTCREATED() {
+        viewModel.inputBitProperty().set("1");
+        viewModel.unsetBit();
+
+        assertEquals(Status.NOT_CREATED.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnNotCreatedBitArraySetCallIsNOTCREATED() {
+        viewModel.inputBitProperty().set("1");
+        viewModel.setBit();
+
+        assertEquals(Status.NOT_CREATED.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnCorrectInputUnsetBitIsSUCCESS() {
+        viewModel.inputBitArrayProperty().set("0101");
+        viewModel.create();
+
+        viewModel.inputBitProperty().set("1");
+        viewModel.unsetBit();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    @Test
+    public void statusBitFieldOnCorrectInputSetBitIsSUCCESS() {
+        viewModel.inputBitArrayProperty().set("0101");
+        viewModel.create();
+
+        viewModel.inputBitProperty().set("1");
+        viewModel.setBit();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.fieldInputBitStatusProperty().get());
+    }
+
+    // BitArray field tests
+    @Test
+    public void bitArrayFieldAfterCreatingSameAsInput() {
+        String input = "0101";
+
+        viewModel.inputBitArrayProperty().set(input);
+        viewModel.create();
+
+        assertEquals(input, viewModel.fieldBitArrayProperty().get().toString());
+    }
+
+    @Test
+    public void bitArrayFieldAfterCreateOnIncorrectInputIsEmpty() {
+        final String incorrectInput = "42";
+        viewModel.inputBitArrayProperty().set(incorrectInput);
+        viewModel.create();
+
+        assertEquals("", viewModel.fieldBitArrayProperty().get().toString());
+    }
+
+    @Test
+    public void bitArrayFieldOnCreatedBitArrayAfterSetBitIsChanged() {
+        final String input = "0101";
+        final String inputIndex = "0";
+        viewModel.inputBitArrayProperty().set(input);
+        viewModel.create();
+
+        viewModel.inputBitProperty().set(inputIndex);
+        viewModel.setBit();
+
+        assertNotEquals(input, viewModel.fieldBitArrayProperty().get().toString());
+    }
+
+    @Test
+    public void bitArrayFieldOnCreatedBitArrayAfterUnsetBitIsChanged() {
+        final String input = "0101";
+        final String inputIndex = "1";
+        viewModel.inputBitArrayProperty().set(input);
+        viewModel.create();
+
+        viewModel.inputBitProperty().set(inputIndex);
+        viewModel.unsetBit();
+
+        assertNotEquals(input, viewModel.fieldBitArrayProperty().get().toString());
+    }
+}
diff --git a/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/CrossChecker.java b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/CrossChecker.java
new file mode 100644
index 000000000..0cf2f3350
--- /dev/null
+++ b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/CrossChecker.java
@@ -0,0 +1,27 @@
+package ru.unn.agile.crosssections.model;
+
+public final class CrossChecker {
+
+    private CrossChecker() { }
+
+    public static boolean check(final Section section1, final Section section2) {
+        return cross(section1.getA(), section1.getB(), section2.getA(), section2.getB());
+    }
+
+    private static int getArea(final Dot a, final Dot b, final Dot c) {
+        return (b.getX() - a.getX()) * (c.getY() - a.getY())
+                - (b.getY() - a.getY()) * (c.getX() - a.getX());
+    }
+
+    private static boolean innerCross(final int a, final int b, final int c, final int d) {
+        return Math.max(Math.min(a, b), Math.min(c, d))
+                <= Math.min(Math.max(a, b), Math.max(c, d));
+    }
+
+    private static boolean cross(final Dot a, final Dot b, final Dot c, final Dot d) {
+        return innerCross(a.getX(), b.getX(), c.getX(), d.getX())
+                && innerCross(a.getY(), b.getY(), c.getY(), d.getY())
+                && getArea(a, b, c) * getArea(a, b, d) <= 0
+                && getArea(c, d, a) * getArea(c, d, b) <= 0;
+    }
+}
diff --git a/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Dot.java b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Dot.java
new file mode 100644
index 000000000..1810d906e
--- /dev/null
+++ b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Dot.java
@@ -0,0 +1,44 @@
+package ru.unn.agile.crosssections.model;
+
+import java.util.Objects;
+
+public class Dot {
+
+    private int x;
+    private int y;
+
+    public Dot(final int x, final int y) {
+        this.x = x;
+        this.y = y;
+    }
+
+    public Dot(final String x, final String y) {
+        this(Integer.parseInt(x), Integer.parseInt(y));
+    }
+
+    public int getX() {
+        return x;
+    }
+
+    public int getY() {
+        return y;
+    }
+
+    @Override
+    public boolean equals(final Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Dot dot = (Dot) o;
+        return x == dot.x
+                && y == dot.y;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(x, y);
+    }
+}
diff --git a/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Section.java b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Section.java
new file mode 100644
index 000000000..536b621e3
--- /dev/null
+++ b/code/cross-sections/Model/src/main/java/ru/unn/agile/crosssections/model/Section.java
@@ -0,0 +1,23 @@
+package ru.unn.agile.crosssections.model;
+
+public class Section {
+
+    private Dot a;
+    private Dot b;
+
+    public Section(final Dot a, final Dot b) {
+        if (a.equals(b)) {
+            throw new IllegalArgumentException("Points should not be in one place");
+        }
+        this.a = a;
+        this.b = b;
+    }
+
+    public Dot getA() {
+        return a;
+    }
+
+    public Dot getB() {
+        return b;
+    }
+}
diff --git a/code/cross-sections/Model/src/test/java/ru/unn/agile/crosssections/model/CrossCheckerTest.java b/code/cross-sections/Model/src/test/java/ru/unn/agile/crosssections/model/CrossCheckerTest.java
new file mode 100644
index 000000000..2015071db
--- /dev/null
+++ b/code/cross-sections/Model/src/test/java/ru/unn/agile/crosssections/model/CrossCheckerTest.java
@@ -0,0 +1,123 @@
+package ru.unn.agile.crosssections.model;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+
+public class CrossCheckerTest {
+
+    @Test
+    public void canInitPoint() {
+        int x = 3;
+        int y = 2;
+        Dot point = new Dot(x, y);
+        assertNotNull(point);
+    }
+
+    @Test
+    public void canInitPointNegative() {
+        int x = -3;
+        int y = -2;
+        Dot point = new Dot(x, y);
+        assertNotNull(point);
+    }
+
+    @Test
+    public void canCreateSection() {
+        Dot a = new Dot(1, 2);
+        Dot b = new Dot(1, 3);
+        Section section = new Section(a, b);
+        assertNotNull(section);
+    }
+
+    @Test
+    public void canCreateSectionNegative() {
+        Dot a = new Dot(-1, -2);
+        Dot b = new Dot(-1, -3);
+        Section section = new Section(a, b);
+        assertNotNull(section);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotCreateSectionWithTheSamePoints() {
+        Dot a = new Dot(-1, -2);
+        Dot b = new Dot(-1, -2);
+        Section section = new Section(a, b);
+    }
+
+    @Test
+    public void canCheckCrossOnTheSameSections() {
+        Dot a = new Dot(0, 2);
+        Dot b = new Dot(2, 2);
+        Section section1 = new Section(a, b);
+        Section section2 = new Section(a, b);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckCrossOnTheSameNegativeSections() {
+        Dot a = new Dot(-1, -2);
+        Dot b = new Dot(-2, -2);
+        Section section1 = new Section(a, b);
+        Section section2 = new Section(a, b);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckCrossOnTheSameStartSections() {
+        Dot a = new Dot(0, 0);
+        Dot b = new Dot(2, 2);
+        Section section1 = new Section(a, b);
+        Dot c = new Dot(0, 0);
+        Dot d = new Dot(0, 2);
+        Section section2 = new Section(c, d);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckCrossOnTheSameEndSections() {
+        Dot a = new Dot(0, 0);
+        Dot b = new Dot(2, 2);
+        Section section1 = new Section(a, b);
+        Dot c = new Dot(0, 2);
+        Dot d = new Dot(2, 2);
+        Section section2 = new Section(c, d);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckCrossInTheMiddlePositive() {
+        Dot a = new Dot(2, 2);
+        Dot b = new Dot(0, 0);
+        Section section1 = new Section(a, b);
+        Dot c = new Dot(2, 0);
+        Dot d = new Dot(0, 2);
+        Section section2 = new Section(c, d);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckCrossInTheMiddleNegative() {
+        Dot a = new Dot(0, 0);
+        Dot b = new Dot(-2, -2);
+        Section section1 = new Section(a, b);
+        Dot c = new Dot(0, -2);
+        Dot d = new Dot(-2, 0);
+        Section section2 = new Section(c, d);
+        assertTrue(CrossChecker.check(section1, section2));
+    }
+
+    @Test
+    public void canCheckNotCross() {
+        Dot a = new Dot(0, 2);
+        Dot b = new Dot(2, 2);
+        Section section1 = new Section(a, b);
+        Dot c = new Dot(0, 0);
+        Dot d = new Dot(2, 0);
+        Section section2 = new Section(c, d);
+        assertFalse(CrossChecker.check(section1, section2));
+    }
+
+}
diff --git a/code/cross-sections/View/build.gradle b/code/cross-sections/View/build.gradle
new file mode 100644
index 000000000..c0e5c4474
--- /dev/null
+++ b/code/cross-sections/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.crosssections.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':cross-sections-ViewModel')
+}
diff --git a/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/CrossChecker.java b/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/CrossChecker.java
new file mode 100644
index 000000000..c55793125
--- /dev/null
+++ b/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/CrossChecker.java
@@ -0,0 +1,59 @@
+package ru.unn.agile.crosssections.view;
+
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+import ru.unn.agile.crosssections.viewmodel.ViewModel;
+
+public class CrossChecker {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField txtFstSectionFinishX;
+    @FXML
+    private TextField txtFstSectionFinishY;
+    @FXML
+    private TextField txtFstSectionStartX;
+    @FXML
+    private TextField txtFstSectionStartY;
+    @FXML
+    private TextField txtSndSectionStartX;
+    @FXML
+    private TextField txtSndSectionStartY;
+    @FXML
+    private TextField txtSndSectionFinishX;
+    @FXML
+    private TextField txtSndSectionFinishY;
+    @FXML
+    private Button btnCheck;
+
+    @FXML
+    void initialize() {
+
+        txtFstSectionFinishX.textProperty().bindBidirectional(
+                viewModel.fstSectionStartXProperty());
+        txtFstSectionFinishY.textProperty().bindBidirectional(
+                viewModel.fstSectionStartYProperty());
+        txtFstSectionStartX.textProperty().bindBidirectional(
+                viewModel.fstSectionFinishXProperty());
+        txtFstSectionStartY.textProperty().bindBidirectional(
+                viewModel.fstSectionFinishYProperty());
+        txtSndSectionStartX.textProperty().bindBidirectional(
+                viewModel.sndSectionStartXProperty());
+        txtSndSectionStartY.textProperty().bindBidirectional(
+                viewModel.sndSectionStartYProperty());
+        txtSndSectionFinishX.textProperty().bindBidirectional(
+                viewModel.sndSectionFinishXProperty());
+        txtSndSectionFinishY.textProperty().bindBidirectional(
+                viewModel.sndSectionFinishYProperty());
+
+        btnCheck.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.check();
+            }
+        });
+    }
+}
diff --git a/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/Main.java b/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/Main.java
new file mode 100644
index 000000000..ed4cf0cb9
--- /dev/null
+++ b/code/cross-sections/View/src/main/java/ru/unn/agile/crosssections/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.crosssections.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("CrossChecker.fxml"));
+        primaryStage.setTitle("Cross Checker");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/cross-sections/View/src/main/resources/ru/unn/agile/crosssections/view/CrossChecker.fxml b/code/cross-sections/View/src/main/resources/ru/unn/agile/crosssections/view/CrossChecker.fxml
new file mode 100644
index 000000000..07289ebc3
--- /dev/null
+++ b/code/cross-sections/View/src/main/resources/ru/unn/agile/crosssections/view/CrossChecker.fxml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import ru.unn.agile.crosssections.viewmodel.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.crosssections.view.CrossChecker">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+    <children>
+        <VBox alignment="TOP_CENTER" layoutX="6.0" spacing="10.0">
+            <padding>
+                <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+            </padding>
+         <children>
+            <HBox>
+               <children>
+                  <Label minWidth="-Infinity" text="First Section Start ">
+                     <opaqueInsets>
+                        <Insets />
+                     </opaqueInsets>
+                  </Label>
+                  <TextField fx:id="txtFstSectionStartX" maxWidth="100" maxHeight="100"/>
+                  <Label minWidth="-Infinity" text=" : " />
+                  <TextField fx:id="txtFstSectionStartY" maxWidth="100" maxHeight="100"/>
+               </children>
+            </HBox>
+            <HBox>
+               <children>
+                  <Label minWidth="-Infinity" text="First Section Finish " />
+                  <TextField fx:id="txtFstSectionFinishX" maxWidth="100" maxHeight="100"/>
+                  <Label minWidth="-Infinity" text=" : " />
+                  <TextField fx:id="txtFstSectionFinishY" maxWidth="100" maxHeight="100"/>
+               </children>
+            </HBox>
+            <HBox>
+                 <children>
+                     <Label minWidth="-Infinity" text="Second Section Start " />
+                     <TextField fx:id="txtSndSectionStartX" maxWidth="100" maxHeight="100"/>
+                     <Label minWidth="-Infinity" text=" : " />
+                     <TextField fx:id="txtSndSectionStartY" maxWidth="100" maxHeight="100"/>
+                 </children>
+            </HBox>
+             <HBox>
+                 <children>
+                     <Label minWidth="-Infinity" text="Second Section Finish " />
+                     <TextField fx:id="txtSndSectionFinishX" maxWidth="100" maxHeight="100"/>
+                     <Label minWidth="-Infinity" text=" : " />
+                     <TextField fx:id="txtSndSectionFinishY" maxWidth="100" maxHeight="100"/>
+                 </children>
+             </HBox>
+            <HBox>
+               <children>
+                  <Button fx:id="btnCheck" defaultButton="true" disable="${viewModel.checkDisabled}" maxWidth="1.7976931348623157E308" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Check" HBox.hgrow="ALWAYS" />
+               </children>
+            </HBox>
+            <HBox>
+               <children>
+                  <Label text="Result: " />
+                  <Label fx:id="lbResult" maxWidth="1.7976931348623157E308" text="${viewModel.result}" HBox.hgrow="ALWAYS" />
+                  <Separator prefWidth="200.0" visible="false" />
+                  <Label text="Status: " />
+                  <Label fx:id="lbStatus" maxWidth="1.7976931348623157E308" text="${viewModel.status}" HBox.hgrow="ALWAYS" />
+               </children>
+            </HBox>
+         </children>
+        </VBox>
+    </children>
+</AnchorPane>
diff --git a/code/cross-sections/View/src/test/java/ru/unn/agile/crosssections/view/FakeViewTests.java b/code/cross-sections/View/src/test/java/ru/unn/agile/crosssections/view/FakeViewTests.java
new file mode 100644
index 000000000..c5b88b595
--- /dev/null
+++ b/code/cross-sections/View/src/test/java/ru/unn/agile/crosssections/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.crosssections.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/cross-sections/ViewModel/build.gradle b/code/cross-sections/ViewModel/build.gradle
new file mode 100644
index 000000000..423736f67
--- /dev/null
+++ b/code/cross-sections/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':cross-sections-Model')
+}
diff --git a/code/cross-sections/ViewModel/src/main/java/ru/unn/agile/crosssections/viewmodel/ViewModel.java b/code/cross-sections/ViewModel/src/main/java/ru/unn/agile/crosssections/viewmodel/ViewModel.java
new file mode 100644
index 000000000..86b2f2bb9
--- /dev/null
+++ b/code/cross-sections/ViewModel/src/main/java/ru/unn/agile/crosssections/viewmodel/ViewModel.java
@@ -0,0 +1,200 @@
+package ru.unn.agile.crosssections.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.*;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.crosssections.model.CrossChecker;
+import ru.unn.agile.crosssections.model.Dot;
+import ru.unn.agile.crosssections.model.Section;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+    private final StringProperty fstSectionStartX = new SimpleStringProperty();
+    private final StringProperty fstSectionStartY = new SimpleStringProperty();
+    private final StringProperty fstSectionFinishX = new SimpleStringProperty();
+    private final StringProperty fstSectionFinishY = new SimpleStringProperty();
+    private final StringProperty sndSectionStartX = new SimpleStringProperty();
+    private final StringProperty sndSectionStartY = new SimpleStringProperty();
+    private final StringProperty sndSectionFinishX = new SimpleStringProperty();
+    private final StringProperty sndSectionFinishY = new SimpleStringProperty();
+
+    private final List<StringProperty> fields = new ArrayList<StringProperty>() {
+        {
+            add(fstSectionStartX);
+            add(fstSectionStartY);
+            add(fstSectionFinishX);
+            add(fstSectionFinishY);
+            add(sndSectionStartX);
+            add(sndSectionStartY);
+            add(sndSectionFinishX);
+            add(sndSectionFinishY);
+        }
+    };
+
+    private final StringProperty result = new SimpleStringProperty();
+    private final StringProperty status = new SimpleStringProperty();
+
+    private final BooleanProperty checkDisabled = new SimpleBooleanProperty();
+
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+
+    public ViewModel() {
+        for (StringProperty field : fields) {
+            field.set("");
+        }
+        result.set("");
+        status.set(Status.WAITING.toString());
+
+        BooleanBinding couldCheck = new BooleanBinding() {
+            {
+                for (StringProperty field : fields) {
+                    super.bind(field);
+                }
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return getNewStatus() == Status.READY;
+            }
+        };
+        checkDisabled.bind(couldCheck.not());
+
+        for (StringProperty field : fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    public void check() {
+        if (isCheckDisabled()) {
+            return;
+        }
+
+        Dot a = new Dot(fstSectionStartX.get(), fstSectionStartY.get());
+        Dot b = new Dot(fstSectionFinishX.get(), fstSectionFinishY.get());
+        Dot c = new Dot(sndSectionStartX.get(), sndSectionStartY.get());
+        Dot d = new Dot(sndSectionFinishX.get(), sndSectionFinishY.get());
+
+        try {
+            Section section1 = new Section(a, b);
+            Section section2 = new Section(c, d);
+            result.set(CrossChecker.check(section1, section2) ? "Crossed" : "Don't Crossed");
+            status.set(Status.SUCCESS.toString());
+        } catch (Exception ex) {
+            status.set(ex.getMessage());
+        }
+    }
+
+    public BooleanProperty checkDisabledProperty() {
+        return checkDisabled;
+    }
+
+    public final boolean isCheckDisabled() {
+        return checkDisabled.get();
+    }
+
+    public StringProperty fstSectionStartXProperty() {
+        return fstSectionStartX;
+    }
+
+    public StringProperty fstSectionStartYProperty() {
+        return fstSectionStartY;
+    }
+
+    public StringProperty fstSectionFinishXProperty() {
+        return fstSectionFinishX;
+    }
+
+    public StringProperty fstSectionFinishYProperty() {
+        return fstSectionFinishY;
+    }
+
+    public StringProperty sndSectionStartXProperty() {
+        return sndSectionStartX;
+    }
+
+    public StringProperty sndSectionStartYProperty() {
+        return sndSectionStartY;
+    }
+
+    public StringProperty sndSectionFinishXProperty() {
+        return sndSectionFinishX;
+    }
+
+    public StringProperty sndSectionFinishYProperty() {
+        return sndSectionFinishY;
+    }
+
+    public StringProperty resultProperty() {
+        return result;
+    }
+
+    public final String getResult() {
+        return result.get();
+    }
+
+    public StringProperty statusProperty() {
+        return status;
+    }
+
+    public final String getStatus() {
+        return status.get();
+    }
+
+    private Status getNewStatus() {
+        Status newStatus = Status.READY;
+        for (StringProperty field : fields) {
+            if (field.get().isEmpty()) {
+                newStatus = Status.WAITING;
+                break;
+            }
+        }
+        for (StringProperty field : fields) {
+            if (!isInputCorrect(field)) {
+                newStatus = Status.BAD_FORMAT;
+                break;
+            }
+        }
+        return newStatus;
+    }
+
+    private boolean isInputCorrect(final StringProperty property) {
+        try {
+            if (!property.get().isEmpty()) {
+                Integer.parseInt(property.get());
+            }
+        } catch (NumberFormatException nfe) {
+            return false;
+        }
+        return true;
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            status.set(getNewStatus().toString());
+        }
+    }
+}
+
+enum Status {
+    WAITING("Please enter data"),
+    READY("Press 'Check' or Enter"),
+    BAD_FORMAT("Incorrect input"),
+    SUCCESS("Success");
+
+    private final String name;
+
+    Status(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/cross-sections/ViewModel/src/test/java/ru/unn/agile/crosssections/viewmodel/ViewModelTests.java b/code/cross-sections/ViewModel/src/test/java/ru/unn/agile/crosssections/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..eb06e7e49
--- /dev/null
+++ b/code/cross-sections/ViewModel/src/test/java/ru/unn/agile/crosssections/viewmodel/ViewModelTests.java
@@ -0,0 +1,145 @@
+package ru.unn.agile.crosssections.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canSetDefaults() {
+        assertEquals("", viewModel.fstSectionStartXProperty().get());
+        assertEquals("", viewModel.fstSectionStartYProperty().get());
+        assertEquals("", viewModel.fstSectionFinishXProperty().get());
+        assertEquals("", viewModel.fstSectionFinishYProperty().get());
+        assertEquals("", viewModel.sndSectionStartXProperty().get());
+        assertEquals("", viewModel.sndSectionStartYProperty().get());
+        assertEquals("", viewModel.sndSectionFinishXProperty().get());
+        assertEquals("", viewModel.sndSectionFinishYProperty().get());
+        assertEquals("", viewModel.resultProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsReadyWhenFieldsAreFill() {
+        setInputCrossedData();
+
+        assertEquals(Status.READY.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsWaitingWhenCalculateWithEmptyFields() {
+        viewModel.check();
+
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void canReportBadFormat() {
+        viewModel.fstSectionStartXProperty().set("a");
+
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsWaitingIfNotEnoughCorrectData() {
+        viewModel.fstSectionStartXProperty().set("1");
+
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledInitially() {
+        assertTrue(viewModel.checkDisabledProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledWhenFormatIsBad() {
+        setInputCrossedData();
+        viewModel.fstSectionStartXProperty().set("trash");
+
+        assertTrue(viewModel.checkDisabledProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledWithIncompleteInput() {
+        viewModel.fstSectionStartXProperty().set("1");
+
+        assertTrue(viewModel.checkDisabledProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsEnabledWithCorrectInput() {
+        setInputCrossedData();
+
+        assertFalse(viewModel.checkDisabledProperty().get());
+    }
+
+    @Test
+    public void operationWhenCrossedHasCorrectResult() {
+        setInputCrossedData();
+        viewModel.check();
+        assertEquals("Crossed", viewModel.resultProperty().get());
+    }
+
+    @Test
+    public void operationWhenDontCrossedHasCorrectResult() {
+        setInputDontCrossedData();
+        viewModel.check();
+        assertEquals("Don't Crossed", viewModel.resultProperty().get());
+    }
+
+    @Test
+    public void canSetSuccessMessage() {
+        setInputCrossedData();
+        viewModel.check();
+        assertEquals(Status.SUCCESS.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void canSetBadFormatMessage() {
+        viewModel.fstSectionStartXProperty().set("word");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsReadyWhenSetProperData() {
+        setInputCrossedData();
+        assertEquals(Status.READY.toString(), viewModel.statusProperty().get());
+    }
+
+    private void setInputCrossedData() {
+        viewModel.fstSectionStartXProperty().set("0");
+        viewModel.fstSectionStartYProperty().set("0");
+        viewModel.fstSectionFinishXProperty().set("1");
+        viewModel.fstSectionFinishYProperty().set("1");
+        viewModel.sndSectionStartXProperty().set("1");
+        viewModel.sndSectionStartYProperty().set("0");
+        viewModel.sndSectionFinishXProperty().set("0");
+        viewModel.sndSectionFinishYProperty().set("1");
+    }
+
+    private void setInputDontCrossedData() {
+        viewModel.fstSectionStartXProperty().set("0");
+        viewModel.fstSectionStartYProperty().set("0");
+        viewModel.fstSectionFinishXProperty().set("1");
+        viewModel.fstSectionFinishYProperty().set("0");
+        viewModel.sndSectionStartXProperty().set("1");
+        viewModel.sndSectionStartYProperty().set("1");
+        viewModel.sndSectionFinishXProperty().set("0");
+        viewModel.sndSectionFinishYProperty().set("1");
+    }
+}
diff --git a/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyConverter.java b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyConverter.java
new file mode 100644
index 000000000..9229e85f8
--- /dev/null
+++ b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyConverter.java
@@ -0,0 +1,14 @@
+package ru.unn.agile.currencyconverter.model;
+
+public final class CurrencyConverter {
+
+    private CurrencyConverter() {
+    }
+
+    public static double convert(final CurrencyPair currencyPair, final double currency) {
+        if (currency < 0) {
+            throw new IllegalArgumentException("Currency should be positive!");
+        }
+        return currency * currencyPair.getExchange();
+    }
+}
diff --git a/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyPair.java b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyPair.java
new file mode 100644
index 000000000..fd503f5a4
--- /dev/null
+++ b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/CurrencyPair.java
@@ -0,0 +1,20 @@
+package ru.unn.agile.currencyconverter.model;
+
+public enum CurrencyPair {
+    RUBLE_TO_EURO(ExchangeRates.RUBLE_TO_EURO),
+    RUBLE_TO_DOLLAR(ExchangeRates.RUBLE_TO_DOLLAR),
+    EURO_TO_RUBLE(ExchangeRates.EURO_TO_RUBLE),
+    EURO_TO_DOLLAR(ExchangeRates.EURO_TO_DOLLAR),
+    DOLLAR_TO_RUBLE(ExchangeRates.DOLLAR_TO_RUBLE),
+    DOLLAR_TO_EURO(ExchangeRates.DOLLAR_TO_EURO);
+
+    private final double exchange;
+
+    CurrencyPair(final double exchange) {
+        this.exchange = exchange;
+    }
+
+    public double getExchange() {
+        return exchange;
+    }
+}
diff --git a/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/ExchangeRates.java b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/ExchangeRates.java
new file mode 100644
index 000000000..5b51d5b14
--- /dev/null
+++ b/code/currency-converter/Model/src/main/java/ru/unn/agile/currencyconverter/model/ExchangeRates.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.currencyconverter.model;
+
+final class ExchangeRates {
+    static final double DOLLAR_TO_EURO = 0.89;
+    static final double DOLLAR_TO_RUBLE = 62.55;
+    static final double RUBLE_TO_EURO = 0.014;
+    static final double RUBLE_TO_DOLLAR = 0.016;
+    static final double EURO_TO_RUBLE = 69.86;
+    static final double EURO_TO_DOLLAR = 1.12;
+
+    private ExchangeRates() {
+    }
+}
diff --git a/code/currency-converter/Model/src/test/java/ru/unn/agile/currencyconverter/model/CurrencyConverterTest.java b/code/currency-converter/Model/src/test/java/ru/unn/agile/currencyconverter/model/CurrencyConverterTest.java
new file mode 100644
index 000000000..a3f741bd7
--- /dev/null
+++ b/code/currency-converter/Model/src/test/java/ru/unn/agile/currencyconverter/model/CurrencyConverterTest.java
@@ -0,0 +1,57 @@
+package ru.unn.agile.currencyconverter.model;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class CurrencyConverterTest {
+
+    private final double delta = 0.01;
+
+    @Test
+    public void canConvertEuroToRuble() {
+        var expectedRuble = 69.86;
+        assertEquals(expectedRuble,
+                CurrencyConverter.convert(CurrencyPair.EURO_TO_RUBLE, 1), delta);
+    }
+
+    @Test
+    public void canConvertRubleToEuro() {
+        var expectedEuro = 140;
+        assertEquals(expectedEuro,
+                CurrencyConverter.convert(CurrencyPair.RUBLE_TO_EURO, 10000), delta);
+    }
+
+    @Test
+    public void canConvertEuroToDollar() {
+        var expectedDollar = 112;
+        assertEquals(expectedDollar,
+                CurrencyConverter.convert(CurrencyPair.EURO_TO_DOLLAR, 100), delta);
+    }
+
+    @Test
+    public void canConvertDollarToEuro() {
+        var expectedEuro = 8900;
+        assertEquals(expectedEuro,
+                CurrencyConverter.convert(CurrencyPair.DOLLAR_TO_EURO, 10000), delta);
+    }
+
+    @Test
+    public void canConvertDollarToRuble() {
+        var expectedRuble = 625.5;
+        assertEquals(expectedRuble,
+                CurrencyConverter.convert(CurrencyPair.DOLLAR_TO_RUBLE, 10), delta);
+    }
+
+    @Test
+    public void canConvertRubleToDollar() {
+        var expectedDollar = 160;
+        assertEquals(expectedDollar,
+                CurrencyConverter.convert(CurrencyPair.RUBLE_TO_DOLLAR, 10000), delta);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotConvertNegative() {
+        var converter = CurrencyConverter.convert(CurrencyPair.EURO_TO_RUBLE, -1);
+    }
+}
diff --git a/code/currency-converter/View/build.gradle b/code/currency-converter/View/build.gradle
new file mode 100644
index 000000000..ba0a7f04c
--- /dev/null
+++ b/code/currency-converter/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.currencyconverter.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':currency-converter-ViewModel')
+}
diff --git a/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/CurrencyConverterView.java b/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/CurrencyConverterView.java
new file mode 100644
index 000000000..ccdef366b
--- /dev/null
+++ b/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/CurrencyConverterView.java
@@ -0,0 +1,35 @@
+package ru.unn.agile.currencyconverter.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.currencyconverter.model.CurrencyPair;
+import ru.unn.agile.currencyconverter.viewmodel.CurrencyConverterViewModel;
+
+public class CurrencyConverterView {
+    @FXML
+    private CurrencyConverterViewModel viewModel;
+    @FXML
+    private TextField txtInputCurrency;
+    @FXML
+    private Label lblError;
+    @FXML
+    private TextField txtOutputCurrency;
+    @FXML
+    private ComboBox<CurrencyPair> cbCurrencyPair;
+    @FXML
+    private Button btnConvert;
+
+    @FXML
+    void initialize() {
+        txtInputCurrency.textProperty().bindBidirectional(viewModel.getInputCurrency());
+        lblError.textProperty().bindBidirectional(viewModel.getError());
+        txtOutputCurrency.textProperty().bindBidirectional(viewModel.getOutputCurrency());
+        cbCurrencyPair.valueProperty().bindBidirectional(viewModel.getCurrencyPair());
+        btnConvert.disableProperty().bindBidirectional(viewModel.isConvertButtonDisabled());
+        btnConvert.setOnAction(event -> viewModel.convert());
+    }
+
+}
diff --git a/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/Main.java b/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/Main.java
new file mode 100644
index 000000000..2b854b9c8
--- /dev/null
+++ b/code/currency-converter/View/src/main/java/ru/unn/agile/currencyconverter/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.currencyconverter.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("CurrencyConverter.fxml"));
+        primaryStage.setTitle("CurrencyConverter");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/currency-converter/View/src/main/resources/ru/unn/agile/currencyconverter/view/CurrencyConverter.fxml b/code/currency-converter/View/src/main/resources/ru/unn/agile/currencyconverter/view/CurrencyConverter.fxml
new file mode 100644
index 000000000..c9ed90fe3
--- /dev/null
+++ b/code/currency-converter/View/src/main/resources/ru/unn/agile/currencyconverter/view/CurrencyConverter.fxml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+
+<?import ru.unn.agile.currencyconverter.viewmodel.CurrencyConverterViewModel?>
+<AnchorPane prefHeight="122.0" prefWidth="368.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.currencyconverter.view.CurrencyConverterView">
+   <fx:define>
+      <CurrencyConverterViewModel fx:id="viewModel" />
+   </fx:define>
+   <TextField fx:id="txtInputCurrency" layoutX="14.0" layoutY="16.0" prefHeight="35.0" prefWidth="149.0" />
+   <TextField fx:id="txtOutputCurrency" editable="false" layoutX="204.0" layoutY="16.0" prefHeight="35.0" prefWidth="149.0" />
+   <Label layoutX="179.0" layoutY="24.0" text="=">
+      <font>
+         <Font size="14.0" />
+      </font>
+   </Label>
+   <ComboBox fx:id="cbCurrencyPair" items="${viewModel.currencyPairs}" layoutX="15.0" layoutY="53.0" prefWidth="149.0" />
+   <Button fx:id="btnConvert" layoutX="14.0" layoutY="86.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="341.0" text="Конвертировать" />
+   <Label fx:id="lblError" layoutX="15.0" layoutY="1.0" text="Label" textFill="RED" />
+</AnchorPane>
diff --git a/code/currency-converter/View/src/test/java/ru/unn/agile/currencyconverter/view/FakeViewTests.java b/code/currency-converter/View/src/test/java/ru/unn/agile/currencyconverter/view/FakeViewTests.java
new file mode 100644
index 000000000..689e888ab
--- /dev/null
+++ b/code/currency-converter/View/src/test/java/ru/unn/agile/currencyconverter/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.converter.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/currency-converter/ViewModel/build.gradle b/code/currency-converter/ViewModel/build.gradle
new file mode 100644
index 000000000..64067927c
--- /dev/null
+++ b/code/currency-converter/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':currency-converter-Model')
+}
diff --git a/code/currency-converter/ViewModel/src/main/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModel.java b/code/currency-converter/ViewModel/src/main/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModel.java
new file mode 100644
index 000000000..a3c6bc2a7
--- /dev/null
+++ b/code/currency-converter/ViewModel/src/main/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModel.java
@@ -0,0 +1,77 @@
+package ru.unn.agile.currencyconverter.viewmodel;
+
+import javafx.beans.property.*;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.currencyconverter.model.CurrencyConverter;
+import ru.unn.agile.currencyconverter.model.CurrencyPair;
+
+public class CurrencyConverterViewModel {
+
+    private ObjectProperty<CurrencyPair> currencyPair = new SimpleObjectProperty<>();
+    private StringProperty error = new SimpleStringProperty();
+    private StringProperty inputCurrency = new SimpleStringProperty();
+    private StringProperty outputCurrency = new SimpleStringProperty();
+    private BooleanProperty btnDisabled = new SimpleBooleanProperty();
+
+    private final ObjectProperty<ObservableList<CurrencyPair>> currencyPairs =
+            new SimpleObjectProperty<>(FXCollections.observableArrayList(CurrencyPair.values()));
+
+    public CurrencyConverterViewModel() {
+        inputCurrency.set("");
+        error.set("");
+        outputCurrency.set("");
+        btnDisabled.set(true);
+        currencyPair.set(CurrencyPair.RUBLE_TO_DOLLAR);
+
+        inputCurrency.addListener((observable, oldValue, newValue) -> {
+            onInput(newValue);
+        });
+
+        currencyPair.addListener((observable, oldValue, newValue) -> {
+            onTypeChange();
+        });
+    }
+
+    public StringProperty getInputCurrency() {
+        return inputCurrency;
+    }
+
+    public StringProperty getOutputCurrency() {
+        return outputCurrency;
+    }
+
+    public BooleanProperty isConvertButtonDisabled() {
+        return btnDisabled;
+    }
+
+    public ObjectProperty<CurrencyPair> getCurrencyPair() {
+        return currencyPair;
+    }
+
+    public ObservableList<CurrencyPair> getCurrencyPairs() {
+        return currencyPairs.get();
+    }
+
+    public StringProperty getError() {
+        return error;
+    }
+
+    public void convert() {
+        double value = Double.parseDouble(inputCurrency.get());
+        value = CurrencyConverter.convert(getCurrencyPair().get(), value);
+        outputCurrency.set(String.format("%s", value));
+    }
+
+    private void onInput(final String newValue) {
+        boolean isDouble = newValue.matches("\\d+(\\.\\d+)?");
+        error.set(isDouble || newValue.isEmpty() ? "" : "Incorrect Currency");
+        btnDisabled.set(newValue.isEmpty() || !isDouble);
+        outputCurrency.set("");
+    }
+
+    private void onTypeChange() {
+        outputCurrency.set("");
+    }
+
+}
diff --git a/code/currency-converter/ViewModel/src/test/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModelTests.java b/code/currency-converter/ViewModel/src/test/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModelTests.java
new file mode 100644
index 000000000..03945e17d
--- /dev/null
+++ b/code/currency-converter/ViewModel/src/test/java/ru/unn/agile/currencyconverter/viewmodel/CurrencyConverterViewModelTests.java
@@ -0,0 +1,212 @@
+package ru.unn.agile.currencyconverter.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.currencyconverter.model.CurrencyPair;
+
+import static org.junit.Assert.*;
+
+public class CurrencyConverterViewModelTests {
+
+    private CurrencyConverterViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new CurrencyConverterViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void setsEmptyStingToInputByDefault() {
+        assertEquals("", viewModel.getInputCurrency().get());
+    }
+
+    @Test
+    public void setsEmptyStringInOutputByDefault() {
+        assertEquals("", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void setsConvertButtonDisabledByDefault() {
+        assertTrue(viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void setsListFromPairsByDefault() {
+        assertEquals(CurrencyPair.RUBLE_TO_DOLLAR, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void currencyPairsHasCorrectValues() {
+        assertArrayEquals(CurrencyPair.values(), viewModel.getCurrencyPairs().toArray());
+    }
+
+    @Test
+    public void setsConvertButtonEnabledAfterInput() {
+        viewModel.getInputCurrency().set("1");
+
+        assertFalse(viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void setsConvertButtonDisabledAfterClearInput() {
+        viewModel.getInputCurrency().set("1");
+        viewModel.getInputCurrency().set("");
+
+        assertTrue(viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void hasErrorAfterIncorrectInput() {
+        viewModel.getInputCurrency().set("word");
+
+        assertEquals("Incorrect Currency", viewModel.getError().get());
+    }
+
+    @Test
+    public void hasNoErrorAfterCorrectInput() {
+        viewModel.getInputCurrency().set("word");
+        viewModel.getInputCurrency().set("3");
+
+        assertEquals("", viewModel.getError().get());
+    }
+
+    @Test
+    public void doesntConvertWithIncorrectInput() {
+        viewModel.getInputCurrency().set("word");
+
+        assertTrue(viewModel.isConvertButtonDisabled().get());
+    }
+
+    @Test
+    public void hasNoErrorByDefault() {
+        assertEquals("", viewModel.getError().get());
+    }
+
+    @Test
+    public void hasNoErrorAfterClearInput() {
+        viewModel.getInputCurrency().set("word");
+        viewModel.getInputCurrency().set("");
+
+        assertEquals("", viewModel.getError().get());
+    }
+
+    @Test
+    public void setsEuroToDollarInCurrencyPair() {
+        viewModel.getCurrencyPair().set(CurrencyPair.EURO_TO_DOLLAR);
+
+        assertEquals(CurrencyPair.EURO_TO_DOLLAR, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void setsDollarToEuroInCurrencyPair() {
+        viewModel.getCurrencyPair().set(CurrencyPair.DOLLAR_TO_EURO);
+
+        assertEquals(CurrencyPair.DOLLAR_TO_EURO, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void setsDollarToRubleInCurrencyPair() {
+        viewModel.getCurrencyPair().set(CurrencyPair.DOLLAR_TO_RUBLE);
+
+        assertEquals(CurrencyPair.DOLLAR_TO_RUBLE, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void setsEuroToRubleInCurrencyPair() {
+        viewModel.getCurrencyPair().set(CurrencyPair.EURO_TO_RUBLE);
+
+        assertEquals(CurrencyPair.EURO_TO_RUBLE, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void setsRubleToEuroInCurrencyPair() {
+        viewModel.getCurrencyPair().set(CurrencyPair.RUBLE_TO_EURO);
+
+        assertEquals(CurrencyPair.RUBLE_TO_EURO, viewModel.getCurrencyPair().get());
+    }
+
+    @Test
+    public void convertsRubleToDollarByDefault() {
+        viewModel.getInputCurrency().set("10000");
+
+        viewModel.convert();
+
+        assertEquals("160.0", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void convertsEuroToRuble() {
+        viewModel.getInputCurrency().set("1");
+
+        viewModel.getCurrencyPair().set(CurrencyPair.EURO_TO_RUBLE);
+        viewModel.convert();
+
+        assertEquals("69.86", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void convertsDollarToRuble() {
+        viewModel.getInputCurrency().set("10");
+
+        viewModel.getCurrencyPair().set(CurrencyPair.DOLLAR_TO_RUBLE);
+        viewModel.convert();
+
+        assertEquals("625.5", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void convertsRubleToEuro() {
+        viewModel.getInputCurrency().set("10000");
+
+        viewModel.getCurrencyPair().set(CurrencyPair.RUBLE_TO_EURO);
+        viewModel.convert();
+
+        assertEquals("140.0", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void convertsDollarToEuro() {
+        viewModel.getInputCurrency().set("10000");
+
+        viewModel.getCurrencyPair().set(CurrencyPair.DOLLAR_TO_EURO);
+        viewModel.convert();
+
+        assertEquals("8900.0", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void convertsEuroToDollar() {
+        viewModel.getInputCurrency().set("1");
+
+        viewModel.getCurrencyPair().set(CurrencyPair.EURO_TO_DOLLAR);
+        viewModel.convert();
+
+        assertEquals("1.12", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void clearsOutputAfterChangeInput() {
+        viewModel.getInputCurrency().set("1");
+
+        viewModel.convert();
+        viewModel.getInputCurrency().set("2");
+
+        assertEquals("", viewModel.getOutputCurrency().get());
+    }
+
+    @Test
+    public void clearsOutputAfterChangeCurrencyPair() {
+        viewModel.getInputCurrency().set("2");
+
+        viewModel.convert();
+        viewModel.getCurrencyPair().set(CurrencyPair.RUBLE_TO_EURO);
+
+        assertEquals("", viewModel.getOutputCurrency().get());
+    }
+}
diff --git a/code/datastructure-set/Infrastructure/build.gradle b/code/datastructure-set/Infrastructure/build.gradle
new file mode 100644
index 000000000..704c6acb2
--- /dev/null
+++ b/code/datastructure-set/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':datastructure-set-ViewModel')
+    testCompile project(':datastructure-set-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/datastructure-set/Infrastructure/src/main/java/ru/unn/agile/datastructure/set/infrastructure/TxtLogger.java b/code/datastructure-set/Infrastructure/src/main/java/ru/unn/agile/datastructure/set/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..04c164f39
--- /dev/null
+++ b/code/datastructure-set/Infrastructure/src/main/java/ru/unn/agile/datastructure/set/infrastructure/TxtLogger.java
@@ -0,0 +1,63 @@
+package ru.unn.agile.datastructure.set.infrastructure;
+
+import ru.unn.agile.datastructure.set.viewmodel.Logger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Locale;
+
+public class TxtLogger implements Logger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss.SSS";
+    private static final String LOG_FORMAT = "%s >> %s";
+    private final BufferedWriter writer;
+    private final String filename;
+
+    public TxtLogger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        writer = logWriter;
+    }
+
+    @Override public void log(final String message) {
+        try {
+            writer.write(String.format(
+                    LOG_FORMAT,
+                    new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH).format(new Date()),
+                    message
+                    )
+            );
+            writer.newLine();
+            writer.flush();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    @Override public List<String> getLog() {
+        return new ArrayList<>() {{
+            try {
+                var reader = new BufferedReader(new FileReader(filename));
+                var line = reader.readLine();
+
+                while (line != null) {
+                    add(line);
+                    line = reader.readLine();
+                }
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }};
+    }
+}
diff --git a/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/RegexMatcher.java b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/RegexMatcher.java
new file mode 100644
index 000000000..b09ef6ac9
--- /dev/null
+++ b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/RegexMatcher.java
@@ -0,0 +1,32 @@
+package ru.unn.agile.datastructure.set.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class RegexMatcher extends BaseMatcher {
+    private final String regexStr;
+
+    private RegexMatcher(final String regex) {
+        this.regexStr = regex;
+    }
+
+    public boolean matches(final Object o) {
+        if (o instanceof String) {
+            return ((String) o).matches(regexStr);
+        }
+        return false;
+    }
+
+    public void describeTo(final Description description) {
+        if (description != null) {
+            description.appendText("regex = ");
+            description.appendText(regexStr);
+        }
+    }
+
+    @SuppressWarnings(value = "unchecked")
+    static Matcher<? super String> matchesPattern(final String regex) {
+        return (Matcher<? super String>) new RegexMatcher(regex);
+    }
+}
diff --git a/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/TxtLoggerTest.java b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/TxtLoggerTest.java
new file mode 100644
index 000000000..aa44c68a7
--- /dev/null
+++ b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/TxtLoggerTest.java
@@ -0,0 +1,49 @@
+package ru.unn.agile.datastructure.set.infrastructure;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.ArrayList;
+
+import static org.junit.Assert.assertThat;
+import static ru.unn.agile.datastructure.set.infrastructure.RegexMatcher.matchesPattern;
+
+public class TxtLoggerTest {
+    private static final String FILE_NAME = "./TxtLogger_Tests-lab3.log";
+    private TxtLogger logger;
+
+    @Before
+    public void setUp() {
+        logger = new TxtLogger(FILE_NAME);
+    }
+
+    @After
+    public void tearDown() {
+        logger = null;
+    }
+
+    @Test
+    public void canLogMessage() {
+        var message = "message";
+
+        logger.log(message);
+
+        assertThat(logger.getLog().get(0), matchesPattern(".*" + message + "$"));
+    }
+
+    @Test
+    public void canLogSeveralMessages() {
+        var messages = new ArrayList<String>() {{
+            add("message 1");
+            add("message 2");
+            add("message 3");
+        }};
+        messages.forEach(logger::log);
+
+        var log = logger.getLog();
+        for (int i = 0; i < log.size(); i++) {
+            assertThat(log.get(0), matchesPattern(".*" + messages.get(0) + "$"));
+        }
+    }
+}
diff --git a/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/ViewModelWithTxtLoggerTests.java b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..27b92a828
--- /dev/null
+++ b/code/datastructure-set/Infrastructure/src/test/java/ru/unn/agile/datastructure/set/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,11 @@
+package ru.unn.agile.datastructure.set.infrastructure;
+
+import ru.unn.agile.datastructure.set.viewmodel.ViewModel;
+import ru.unn.agile.datastructure.set.viewmodel.ViewModelTests;
+
+public class ViewModelWithTxtLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        setViewModel(new ViewModel(new TxtLogger("./ViewModel_with_TxtLogger_Tests-lab3.log")));
+    }
+}
diff --git a/code/datastructure-set/src/main/java/ru/unn/agile/datastructure/set/model/MySet.java b/code/datastructure-set/Model/src/main/java/ru/unn/agile/datastructure/set/model/MySet.java
similarity index 100%
rename from code/datastructure-set/src/main/java/ru/unn/agile/datastructure/set/model/MySet.java
rename to code/datastructure-set/Model/src/main/java/ru/unn/agile/datastructure/set/model/MySet.java
diff --git a/code/datastructure-set/src/test/java/ru/unn/agile/datastructure/set/model/MySetTest.java b/code/datastructure-set/Model/src/test/java/ru/unn/agile/datastructure/set/model/MySetTest.java
similarity index 100%
rename from code/datastructure-set/src/test/java/ru/unn/agile/datastructure/set/model/MySetTest.java
rename to code/datastructure-set/Model/src/test/java/ru/unn/agile/datastructure/set/model/MySetTest.java
diff --git a/code/datastructure-set/View/build.gradle b/code/datastructure-set/View/build.gradle
new file mode 100644
index 000000000..f169b50b1
--- /dev/null
+++ b/code/datastructure-set/View/build.gradle
@@ -0,0 +1,18 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.datastructure.set.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':datastructure-set-ViewModel')
+    compile project(':datastructure-set-Infrastructure')
+}
\ No newline at end of file
diff --git a/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/Main.java b/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/Main.java
new file mode 100644
index 000000000..c90653125
--- /dev/null
+++ b/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.datastructure.set.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("MySet.fxml"));
+        primaryStage.setTitle("Set Data Structure");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/MySet.java b/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/MySet.java
new file mode 100644
index 000000000..0210e88e9
--- /dev/null
+++ b/code/datastructure-set/View/src/main/java/ru/unn/agile/datastructure/set/view/MySet.java
@@ -0,0 +1,54 @@
+package ru.unn.agile.datastructure.set.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.datastructure.set.infrastructure.TxtLogger;
+import ru.unn.agile.datastructure.set.viewmodel.ViewModel;
+
+public class MySet {
+
+    private ViewModel viewModel;
+    @FXML
+    private Button btnAdd;
+    @FXML
+    private Button btnRemove;
+    @FXML
+    private Button btnRetain;
+    @FXML
+    private Button btnClear;
+    @FXML
+    private Button btnContains;
+    @FXML
+    private Button btnIsEmpty;
+    @FXML
+    private TextField txtEnteredSet;
+    @FXML
+    private TextField txtCurrentSet;
+    @FXML
+    private Label lblContains;
+    @FXML
+    private Label lblIsEmpty;
+
+    @FXML
+    void initialize() {
+        viewModel = new ViewModel(new TxtLogger("./TxtLogger-lab3.log"));
+        btnAdd.disableProperty().bindBidirectional(viewModel.isAddButtonDisabled());
+        btnRemove.disableProperty().bindBidirectional(viewModel.isRemoveButtonDisabled());
+        btnRetain.disableProperty().bindBidirectional(viewModel.isRetainButtonDisabled());
+        btnContains.disableProperty().bindBidirectional(viewModel.isContainsButtonDisabled());
+
+        txtEnteredSet.textProperty().bindBidirectional(viewModel.getTxtEnteredItemsProp());
+        txtCurrentSet.textProperty().bindBidirectional(viewModel.getTxtCurrentSetProp());
+        lblContains.textProperty().bindBidirectional(viewModel.getTxtContainsItemProp());
+        lblIsEmpty.textProperty().bindBidirectional(viewModel.getTxtIsEmptyItemProp());
+
+        btnAdd.setOnAction(event -> viewModel.addEnteredItems());
+        btnRemove.setOnAction(event -> viewModel.removeEnteredItems());
+        btnRetain.setOnAction(event -> viewModel.retainEnteredItems());
+        btnClear.setOnAction(event -> viewModel.clearCurrentItems());
+        btnContains.setOnAction(event -> viewModel.containsEnteredItems());
+        btnIsEmpty.setOnAction(event -> viewModel.isCurrentSetEmpty());
+    }
+}
diff --git a/code/datastructure-set/View/src/main/resources/ru/unn/agile/datastructure/set/view/MySet.fxml b/code/datastructure-set/View/src/main/resources/ru/unn/agile/datastructure/set/view/MySet.fxml
new file mode 100644
index 000000000..0195992c8
--- /dev/null
+++ b/code/datastructure-set/View/src/main/resources/ru/unn/agile/datastructure/set/view/MySet.fxml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.AnchorPane?>
+<AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" prefHeight="300.0" prefWidth="600.0" fx:controller="ru.unn.agile.datastructure.set.view.MySet">
+    <children>
+        <Button fx:id="btnAdd" layoutX="33.0" layoutY="163.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Add" />
+        <TextField fx:id="txtEnteredSet" layoutX="33.0" layoutY="66.0" />
+        <Label layoutX="350.0" layoutY="45.0" text="Current collection" />
+        <TextField fx:id="txtCurrentSet" editable="false" layoutX="350.0" layoutY="63.0" />
+        <Label layoutX="33.0" layoutY="45.0" text="Entered Items" />
+        <Button fx:id="btnRemove" layoutX="178.0" layoutY="163.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Remove" />
+        <Button fx:id="btnRetain" layoutX="320.0" layoutY="163.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Retain" />
+        <Button fx:id="btnClear" layoutX="468.0" layoutY="163.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Clear" />
+        <Button fx:id="btnContains" layoutX="33.0" layoutY="207.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Contains" />
+        <Label layoutX="34.0" layoutY="235.0" text="Contains:" />
+        <Label fx:id="lblContains" layoutX="88.0" layoutY="235.0" text="No" />
+        <Button fx:id="btnIsEmpty" layoutX="178.0" layoutY="207.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="104.0" text="Is Empty" />
+        <Label layoutX="178.0" layoutY="235.0" text="Is Empty:" />
+        <Label fx:id="lblIsEmpty" layoutX="232.0" layoutY="235.0" text="No" />
+    </children>
+</AnchorPane>
diff --git a/code/datastructure-set/View/src/test/java/ru/unn/agile/datastructure/set/view/FakeViewTests.java b/code/datastructure-set/View/src/test/java/ru/unn/agile/datastructure/set/view/FakeViewTests.java
new file mode 100644
index 000000000..388e45a3c
--- /dev/null
+++ b/code/datastructure-set/View/src/test/java/ru/unn/agile/datastructure/set/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.datastructure.set.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/datastructure-set/ViewModel/build.gradle b/code/datastructure-set/ViewModel/build.gradle
new file mode 100644
index 000000000..1e34bc291
--- /dev/null
+++ b/code/datastructure-set/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':datastructure-set-Model')
+}
diff --git a/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/Logger.java b/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/Logger.java
new file mode 100644
index 000000000..65e0b868c
--- /dev/null
+++ b/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/Logger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.datastructure.set.viewmodel;
+
+import java.util.List;
+
+public interface Logger {
+    void log(String message);
+
+    List<String> getLog();
+}
diff --git a/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/ViewModel.java b/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/ViewModel.java
new file mode 100644
index 000000000..a9ecf86a8
--- /dev/null
+++ b/code/datastructure-set/ViewModel/src/main/java/ru/unn/agile/datastructure/set/viewmodel/ViewModel.java
@@ -0,0 +1,182 @@
+package ru.unn.agile.datastructure.set.viewmodel;
+
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import ru.unn.agile.datastructure.set.model.MySet;
+
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+
+public class ViewModel {
+
+    private static final String ITEMS_SEPARATOR = " ";
+
+    private BooleanProperty btnAddDisabledProp = new SimpleBooleanProperty();
+    private BooleanProperty btnRemoveDisabledProp = new SimpleBooleanProperty();
+    private BooleanProperty btnRetainDisabledProp = new SimpleBooleanProperty();
+    private BooleanProperty btnContainsDisabledProp = new SimpleBooleanProperty();
+    private StringProperty txtContainsItemProp = new SimpleStringProperty();
+    private StringProperty txtIsEmptySetProp = new SimpleStringProperty();
+    private StringProperty txtEnteredItemsProp = new SimpleStringProperty();
+    private StringProperty txtCurrentSetProp = new SimpleStringProperty();
+    private MySet<Integer> currentSet = new MySet<>();
+    private Set<Integer> enteredSet = new LinkedHashSet<>();
+
+    private Logger logger;
+
+    public ViewModel(final Logger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger can not be null");
+        }
+        this.logger = logger;
+        btnAddDisabledProp.setValue(true);
+        btnRemoveDisabledProp.setValue(true);
+        btnRetainDisabledProp.setValue(true);
+        btnContainsDisabledProp.setValue(true);
+
+        txtContainsItemProp.setValue("");
+        txtIsEmptySetProp.setValue("");
+        txtEnteredItemsProp.setValue("");
+        txtCurrentSetProp.setValue("");
+
+        txtEnteredItemsProp.addListener((observable, oldValue, newValue) -> {
+            logger.log(String.format(LogMessages.ENTERED_ITEMS_CHANGED, oldValue, newValue));
+            setEnteredItems(newValue);
+        });
+    }
+
+    public BooleanProperty isAddButtonDisabled() {
+        return btnAddDisabledProp;
+    }
+
+    public BooleanProperty isRemoveButtonDisabled() {
+        return btnRemoveDisabledProp;
+    }
+
+    public BooleanProperty isContainsButtonDisabled() {
+        return btnContainsDisabledProp;
+    }
+
+    public BooleanProperty isRetainButtonDisabled() {
+        return btnRetainDisabledProp;
+    }
+
+    public StringProperty getTxtEnteredItemsProp() {
+        return txtEnteredItemsProp;
+    }
+
+    public StringProperty getTxtCurrentSetProp() {
+        return txtCurrentSetProp;
+    }
+
+    public StringProperty getTxtContainsItemProp() {
+        return txtContainsItemProp;
+    }
+
+    public StringProperty getTxtIsEmptyItemProp() {
+        return txtIsEmptySetProp;
+    }
+
+    public void addEnteredItems() {
+        logger.log(LogMessages.ADD_PRESSED);
+        currentSet.addAll(enteredSet);
+        txtCurrentSetProp.setValue(getCurrentSetItems());
+    }
+
+    public void removeEnteredItems() {
+        logger.log(LogMessages.REMOVE_PRESSED);
+        currentSet.removeAll(enteredSet);
+        txtCurrentSetProp.setValue(getCurrentSetItems());
+    }
+
+    public void retainEnteredItems() {
+        logger.log(LogMessages.RETAIN_PRESSED);
+        currentSet.retainAll(enteredSet);
+        txtCurrentSetProp.setValue(getCurrentSetItems());
+    }
+
+    public void clearCurrentItems() {
+        logger.log(LogMessages.CLEAR_PRESSED);
+        currentSet.clear();
+        txtCurrentSetProp.setValue(getCurrentSetItems());
+    }
+
+    public void containsEnteredItems() {
+        logger.log(LogMessages.CONTAINS_PRESSED);
+        if (currentSet.containsAll(enteredSet)) {
+            txtContainsItemProp.setValue("Yes");
+        } else {
+            txtContainsItemProp.setValue("No");
+        }
+    }
+
+    public void isCurrentSetEmpty() {
+        logger.log(LogMessages.IS_EMPTY_PRESSED);
+        if (currentSet.isEmpty()) {
+            txtIsEmptySetProp.setValue("Yes");
+        } else {
+            txtIsEmptySetProp.setValue("No");
+        }
+    }
+
+    public List<String> getLog() {
+        return logger.getLog();
+    }
+
+    private void setEnteredItems(final String itemsStr) {
+        enteredSet.clear();
+        txtEnteredItemsProp.setValue(itemsStr);
+
+        var isValidEnteredData = false;
+
+        if (!itemsStr.isEmpty()) {
+            var splitedItems = itemsStr.split(ITEMS_SEPARATOR);
+            if (splitedItems.length > 0) {
+                for (String splitedItem : splitedItems) {
+                    try {
+                        int parsedItem = Integer.parseInt(splitedItem);
+                        enteredSet.add(parsedItem);
+                    } catch (NumberFormatException e) {
+                        break;
+                    }
+                }
+                isValidEnteredData = splitedItems.length == enteredSet.size();
+            }
+        }
+
+        btnAddDisabledProp.setValue(!isValidEnteredData);
+        btnRemoveDisabledProp.setValue(!isValidEnteredData);
+        btnRetainDisabledProp.setValue(!isValidEnteredData);
+        btnContainsDisabledProp.setValue(!isValidEnteredData);
+    }
+
+    private String getCurrentSetItems() {
+        if (currentSet.isEmpty()) {
+            return "";
+        }
+        var builder = new StringBuilder();
+        var iterator = currentSet.iterator();
+        while (iterator.hasNext()) {
+            builder.append(iterator.next());
+            builder.append(ITEMS_SEPARATOR);
+        }
+        builder.deleteCharAt(builder.length() - 1);
+        return builder.toString();
+    }
+
+    static final class LogMessages {
+        private LogMessages() {
+        }
+
+        static final String ADD_PRESSED = "Add button pressed";
+        static final String REMOVE_PRESSED = "Remove button pressed";
+        static final String RETAIN_PRESSED = "Retain button pressed";
+        static final String CLEAR_PRESSED = "Clear button pressed";
+        static final String CONTAINS_PRESSED = "Contains button pressed";
+        static final String IS_EMPTY_PRESSED = "Contains button pressed";
+        static final String ENTERED_ITEMS_CHANGED = "Entered items changed from '%s' to '%s'";
+    }
+}
diff --git a/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/FakeLogger.java b/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..5394ae591
--- /dev/null
+++ b/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/FakeLogger.java
@@ -0,0 +1,16 @@
+package ru.unn.agile.datastructure.set.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements Logger {
+    private List<String> log = new ArrayList<>();
+
+    @Override public void log(final String message) {
+        log.add(message);
+    }
+
+    @Override public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/ViewModelTests.java b/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..098284eea
--- /dev/null
+++ b/code/datastructure-set/ViewModel/src/test/java/ru/unn/agile/datastructure/set/viewmodel/ViewModelTests.java
@@ -0,0 +1,207 @@
+package ru.unn.agile.datastructure.set.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        setViewModel(new ViewModel(new FakeLogger()));
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    protected void setViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Test
+    public void ifNoEnteredItemsAddButtonIsDisabled() {
+        assertTrue(viewModel.isAddButtonDisabled().get());
+    }
+
+    @Test
+    public void ifNoEnteredItemsRemoveButtonIsDisabled() {
+        assertTrue(viewModel.isRemoveButtonDisabled().get());
+    }
+
+    @Test
+    public void ifNoEnteredItemsContainsButtonIsDisabled() {
+        assertTrue(viewModel.isContainsButtonDisabled().get());
+    }
+
+    @Test
+    public void ifNoEnteredItemsRetainButtonIsDisabled() {
+        assertTrue(viewModel.isRetainButtonDisabled().get());
+    }
+
+    @Test
+    public void ifEnteredItemIsValidAddButtonIsEnabled() {
+        viewModel.getTxtEnteredItemsProp().setValue("10");
+        assertFalse(viewModel.isAddButtonDisabled().get());
+    }
+
+    @Test
+    public void ifEnteredItemIsNotValidAddButtonIsDisabled() {
+        viewModel.getTxtEnteredItemsProp().setValue("ds");
+        assertTrue(viewModel.isAddButtonDisabled().get());
+    }
+
+    @Test
+    public void ifEnteredItemsAreValidAddButtonIsEnabled() {
+        viewModel.getTxtEnteredItemsProp().setValue("10 52 -3 95");
+        assertFalse(viewModel.isAddButtonDisabled().get());
+    }
+
+    @Test
+    public void ifEnteredItemsAreNotValidAddButtonIsDisabled() {
+        viewModel.getTxtEnteredItemsProp().setValue("50 d 98 3s");
+        assertTrue(viewModel.isAddButtonDisabled().get());
+    }
+
+    @Test
+    public void canAddItemsToSet() {
+        viewModel.getTxtEnteredItemsProp().setValue("12 6 92 4");
+        viewModel.addEnteredItems();
+        assertEquals("12 6 92 4", viewModel.getTxtCurrentSetProp().getValue());
+    }
+
+    @Test
+    public void canRemoveItemsFromSet() {
+        viewModel.getTxtEnteredItemsProp().setValue("2 16 9 4");
+        viewModel.addEnteredItems();
+        viewModel.getTxtEnteredItemsProp().setValue("2 9");
+        viewModel.removeEnteredItems();
+        assertEquals("16 4", viewModel.getTxtCurrentSetProp().getValue());
+    }
+
+    @Test
+    public void canRetainItemsFromSet() {
+        viewModel.getTxtEnteredItemsProp().setValue("5 96 35 21");
+        viewModel.addEnteredItems();
+        viewModel.getTxtEnteredItemsProp().setValue("21 96 3");
+        viewModel.retainEnteredItems();
+        assertEquals("96 21", viewModel.getTxtCurrentSetProp().getValue());
+    }
+
+    @Test
+    public void canClearCurrentSet() {
+        viewModel.getTxtEnteredItemsProp().setValue("5 96 35 21");
+        viewModel.addEnteredItems();
+        viewModel.clearCurrentItems();
+        assertEquals("", viewModel.getTxtCurrentSetProp().getValue());
+    }
+
+    @Test
+    public void canCheckItemsInSetIfContain() {
+        viewModel.getTxtEnteredItemsProp().setValue("5 96 35 21");
+        viewModel.addEnteredItems();
+        viewModel.getTxtEnteredItemsProp().setValue("21 96 5");
+        viewModel.containsEnteredItems();
+        assertEquals("Yes", viewModel.getTxtContainsItemProp().getValue());
+    }
+
+    @Test
+    public void canCheckItemsInSetIfNotContain() {
+        viewModel.getTxtEnteredItemsProp().setValue("5 9 3 1");
+        viewModel.addEnteredItems();
+        viewModel.getTxtEnteredItemsProp().setValue("5 4 3");
+        viewModel.containsEnteredItems();
+        assertEquals("No", viewModel.getTxtContainsItemProp().getValue());
+    }
+
+    @Test
+    public void canCheckSetIsEmptyIfEmpty() {
+        viewModel.isCurrentSetEmpty();
+        assertEquals("Yes", viewModel.getTxtIsEmptyItemProp().getValue());
+    }
+
+    @Test
+    public void canCheckSetIsEmptyIfNotEmpty() {
+        viewModel.getTxtEnteredItemsProp().setValue("5 4");
+        viewModel.addEnteredItems();
+        viewModel.isCurrentSetEmpty();
+        assertEquals("No", viewModel.getTxtIsEmptyItemProp().getValue());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void canNotCreateViewModelWithNullLogger() {
+        new ViewModel(null);
+    }
+
+    @Test
+    public void canGetEmptyLogInTheBegging() {
+        var log = viewModel.getLog();
+
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void canLogChangingEnteredText() {
+        var oldValue = "";
+        var newValue = "12 6";
+
+        viewModel.getTxtEnteredItemsProp().setValue(newValue);
+
+        var expectedMessage =
+                String.format(ViewModel.LogMessages.ENTERED_ITEMS_CHANGED, oldValue, newValue);
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingAddButton() {
+        viewModel.addEnteredItems();
+
+        var expectedMessage = ViewModel.LogMessages.ADD_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingRemoveButton() {
+        viewModel.removeEnteredItems();
+
+        var expectedMessage = ViewModel.LogMessages.REMOVE_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingRetainButton() {
+        viewModel.retainEnteredItems();
+
+        var expectedMessage = ViewModel.LogMessages.RETAIN_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingContainsButton() {
+        viewModel.containsEnteredItems();
+
+        var expectedMessage = ViewModel.LogMessages.CONTAINS_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingIsEmptyButton() {
+        viewModel.isCurrentSetEmpty();
+
+        var expectedMessage = ViewModel.LogMessages.IS_EMPTY_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+
+    @Test
+    public void canLogPressingClearButton() {
+        viewModel.clearCurrentItems();
+
+        var expectedMessage = ViewModel.LogMessages.CLEAR_PRESSED;
+        assertTrue(viewModel.getLog().get(0).matches(".*" + expectedMessage + "$"));
+    }
+}
diff --git a/code/deposit-calculator/infrastructure/build.gradle b/code/deposit-calculator/infrastructure/build.gradle
new file mode 100644
index 000000000..b78cf0c02
--- /dev/null
+++ b/code/deposit-calculator/infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':deposit-calculator-viewmodel')
+    testCompile project(':deposit-calculator-viewmodel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/deposit-calculator/infrastructure/src/main/java/ru/unn/agile/depositcalculator/infrastructure/Logger.java b/code/deposit-calculator/infrastructure/src/main/java/ru/unn/agile/depositcalculator/infrastructure/Logger.java
new file mode 100644
index 000000000..29c4c56d7
--- /dev/null
+++ b/code/deposit-calculator/infrastructure/src/main/java/ru/unn/agile/depositcalculator/infrastructure/Logger.java
@@ -0,0 +1,66 @@
+package ru.unn.agile.depositcalculator.infrastructure;
+
+
+import ru.unn.agile.depositcalculator.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class Logger implements ILogger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private final String filename;
+
+    private static String now() {
+        var cal = Calendar.getInstance();
+        var sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    public Logger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter bufferedWriter = null;
+        try {
+            var fileWriter = new FileWriter(filename);
+            bufferedWriter = new BufferedWriter(fileWriter);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        writer = bufferedWriter;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            writer.write(now() + " > " + s);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        var log = new ArrayList<String>();
+        try {
+            var reader = new BufferedReader(new FileReader(filename));
+            var line = reader.readLine();
+            while (line != null) {
+                log.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+        return log;
+    }
+}
diff --git a/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/LoggerTests.java b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/LoggerTests.java
new file mode 100644
index 000000000..4c8654c0d
--- /dev/null
+++ b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/LoggerTests.java
@@ -0,0 +1,64 @@
+package ru.unn.agile.depositcalculator.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.fail;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static ru.unn.agile.depositcalculator.infrastructure.RegexMatcher.matchesPattern;
+
+public class LoggerTests {
+    private static final String FILENAME = "./LoggerTests.log";
+    private Logger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new Logger(FILENAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            var fileReader = new FileReader(FILENAME);
+            new BufferedReader(fileReader);
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " wasn't created!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        txtLogger.log("Test message");
+        var pattern = ".*Test message$";
+        assertThat(txtLogger.getLog().get(0), matchesPattern(pattern));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        txtLogger.log(messages[0]);
+        txtLogger.log(messages[1]);
+
+        var actualMessages = txtLogger.getLog();
+        assertThat(actualMessages.get(0), matchesPattern(".*" + messages[0] + "$"));
+        assertThat(actualMessages.get(1), matchesPattern(".*" + messages[1] + "$"));
+    }
+
+    @Test
+    public void checkIfLogContainsDateAndTime() {
+        txtLogger.log("Test message");
+        var pattern = "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*";
+        assertThat(txtLogger.getLog().get(0), matchesPattern(pattern));
+    }
+}
diff --git a/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/RegexMatcher.java b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/RegexMatcher.java
new file mode 100644
index 000000000..ca1b23eb8
--- /dev/null
+++ b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/RegexMatcher.java
@@ -0,0 +1,33 @@
+package ru.unn.agile.depositcalculator.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class RegexMatcher extends BaseMatcher {
+    private final String regex;
+
+    public RegexMatcher(final String regex) {
+        this.regex = regex;
+    }
+
+    public boolean matches(final Object o) {
+        if (o instanceof String) {
+            return ((String) o).matches(regex);
+        }
+        return false;
+    }
+
+    public void describeTo(final Description description) {
+        description.appendText("matches regex = ");
+        description.appendText(regex);
+    }
+
+    public static Matcher<? super String> matchesPattern(final String regex) {
+        RegexMatcher matcher = new RegexMatcher(regex);
+
+        @SuppressWarnings (value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>)   matcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/ViewModelWithLoggerTests.java b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/ViewModelWithLoggerTests.java
new file mode 100644
index 000000000..d0d4001fc
--- /dev/null
+++ b/code/deposit-calculator/infrastructure/src/test/java/ru/unn/agile/depositcalculator/infrastructure/ViewModelWithLoggerTests.java
@@ -0,0 +1,66 @@
+package ru.unn.agile.depositcalculator.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.fail;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static ru.unn.agile.depositcalculator.infrastructure.RegexMatcher.matchesPattern;
+
+public class ViewModelWithLoggerTests {
+    private static final String FILENAME = "./ViewModelWithLoggerTests.log";
+    private Logger logger;
+
+    @Before
+    public void setUp() {
+        logger = new Logger(FILENAME);
+    }
+
+    @Test
+    public void canCreateLogger() {
+        assertNotNull(logger);
+    }
+
+    @Test
+    public void canCreateLogFileOnStorage() {
+        try {
+            new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        var testMessage = "Test message";
+        logger.log(testMessage);
+        var pattern = ".*" + testMessage + "$";
+        assertThat(logger.getLog().get(0), matchesPattern(pattern));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        logger.log(messages[0]);
+        logger.log(messages[1]);
+
+        var actualMessages = logger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            var pattern = ".*" + messages[i] + "$";
+            assertThat(actualMessages.get(i), matchesPattern(pattern));
+        }
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        logger.log("Test message");
+        var pattern = "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*";
+        assertThat(logger.getLog().get(0), matchesPattern(pattern));
+    }
+}
diff --git a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/Calculator.java b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/Calculator.java
similarity index 98%
rename from code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/Calculator.java
rename to code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/Calculator.java
index ed451ed75..783e87c71 100644
--- a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/Calculator.java
+++ b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/Calculator.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.DepositCalculator.Model;
+package ru.unn.agile.depositcalculator.model;
 
 public class Calculator {
 
diff --git a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/CapitalizationPeriod.java b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/CapitalizationPeriod.java
similarity index 60%
rename from code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/CapitalizationPeriod.java
rename to code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/CapitalizationPeriod.java
index d6a3acf72..dd4cfb90e 100644
--- a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/CapitalizationPeriod.java
+++ b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/CapitalizationPeriod.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.DepositCalculator.Model;
+package ru.unn.agile.depositcalculator.model;
 
 public enum CapitalizationPeriod {
     MONTH,
diff --git a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/DepositTimeType.java b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/DepositTimeType.java
similarity index 57%
rename from code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/DepositTimeType.java
rename to code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/DepositTimeType.java
index d5b239b70..39199b540 100644
--- a/code/deposit-calculator/src/main/java/ru/unn/agile/DepositCalculator/Model/DepositTimeType.java
+++ b/code/deposit-calculator/model/src/main/java/ru/unn/agile/depositcalculator/model/DepositTimeType.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.DepositCalculator.Model;
+package ru.unn.agile.depositcalculator.model;
 
 public enum DepositTimeType {
     YEAR,
diff --git a/code/deposit-calculator/src/test/java/ru/unn/agile/DepositCalculator/Model/CalculatorTest.java b/code/deposit-calculator/model/src/test/java/ru/unn/agile/depositcalculator/model/CalculatorTest.java
similarity index 99%
rename from code/deposit-calculator/src/test/java/ru/unn/agile/DepositCalculator/Model/CalculatorTest.java
rename to code/deposit-calculator/model/src/test/java/ru/unn/agile/depositcalculator/model/CalculatorTest.java
index 50aafa79e..7403fd11a 100644
--- a/code/deposit-calculator/src/test/java/ru/unn/agile/DepositCalculator/Model/CalculatorTest.java
+++ b/code/deposit-calculator/model/src/test/java/ru/unn/agile/depositcalculator/model/CalculatorTest.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.DepositCalculator.Model;
+package ru.unn.agile.depositcalculator.model;
 
 import org.junit.Test;
 import static org.junit.Assert.*;
diff --git a/code/deposit-calculator/view/build.gradle b/code/deposit-calculator/view/build.gradle
new file mode 100644
index 000000000..eb88d0fc3
--- /dev/null
+++ b/code/deposit-calculator/view/build.gradle
@@ -0,0 +1,18 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.DepositCalculator.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':deposit-calculator-viewmodel')
+    compile project(':deposit-calculator-infrastructure')
+}
+
diff --git a/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/DepositCalculator.java b/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/DepositCalculator.java
new file mode 100644
index 000000000..8d90d7875
--- /dev/null
+++ b/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/DepositCalculator.java
@@ -0,0 +1,56 @@
+package ru.unn.agile.depositcalculator.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import ru.unn.agile.depositcalculator.infrastructure.Logger;
+import ru.unn.agile.depositcalculator.model.CapitalizationPeriod;
+import ru.unn.agile.depositcalculator.model.DepositTimeType;
+import ru.unn.agile.depositcalculator.viewmodel.ViewModel;
+
+public class DepositCalculator {
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField txtPercentage;
+    @FXML
+    private TextField txtStartSum;
+    @FXML
+    private ComboBox<DepositTimeType> cmbPeriod;
+    @FXML
+    private ComboBox<CapitalizationPeriod> cmbCapit;
+    @FXML
+    private TextArea txtResult;
+    @FXML
+    private TextArea areaLog;
+    @FXML
+    private Button btnCalc;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(new Logger("./TxtLogger.log"));
+        txtPercentage.textProperty().bindBidirectional(viewModel.percentProperty());
+        txtStartSum.textProperty().bindBidirectional(viewModel.startSumProperty());
+        txtResult.textProperty().bindBidirectional(viewModel.resultProperty());
+
+        cmbPeriod.valueProperty().bindBidirectional(viewModel.periodProperty());
+        cmbCapit.valueProperty().bindBidirectional(viewModel.capitalizationProperty());
+
+        areaLog.textProperty().bindBidirectional(viewModel.getLogsProperty());
+        txtPercentage.focusedProperty().addListener((observable, oldValue, newValue) -> {
+            if (!newValue) {
+                viewModel.onPercentageFocusChanged();
+            }
+        });
+        txtStartSum.focusedProperty().addListener((observable, oldValue, newValue) -> {
+            if (!newValue) {
+                viewModel.onSumFocusChanged();
+            }
+        });
+
+        btnCalc.setOnAction(event -> viewModel.calculate());
+    }
+}
diff --git a/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/Main.java b/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/Main.java
new file mode 100644
index 000000000..28826a498
--- /dev/null
+++ b/code/deposit-calculator/view/src/main/java/ru/unn/agile/depositcalculator/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.depositcalculator.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("DepositCalculator.fxml"));
+        primaryStage.setTitle("Deposit calculator");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/deposit-calculator/view/src/main/resources/ru/unn/agile/depositcalculator/view/DepositCalculator.fxml b/code/deposit-calculator/view/src/main/resources/ru/unn/agile/depositcalculator/view/DepositCalculator.fxml
new file mode 100644
index 000000000..4bb5a10bd
--- /dev/null
+++ b/code/deposit-calculator/view/src/main/resources/ru/unn/agile/depositcalculator/view/DepositCalculator.fxml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+
+<?import ru.unn.agile.depositcalculator.viewmodel.ViewModel?>
+
+<AnchorPane prefHeight="294.0" prefWidth="319.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.depositcalculator.view.DepositCalculator">
+   <fx:define>
+      <ViewModel fx:id="viewModel" />
+   </fx:define>
+   <children>
+      <Button fx:id="btnCalc" defaultButton="true" layoutX="237.0" layoutY="255.0" mnemonicParsing="false" text="Calculate" />
+
+      <TextArea fx:id="txtResult" editable="false" layoutX="17.0" layoutY="194.0" prefHeight="53.0" prefWidth="285.0" wrapText="true" />
+
+      <ComboBox fx:id="cmbPeriod" items="${viewModel.periods}" layoutX="152.0" layoutY="20.0" prefWidth="150.0" />
+      <ComboBox fx:id="cmbCapit" items="${viewModel.capitalizations}" layoutX="152.0" layoutY="58.0" prefWidth="150.0" />
+      <TextField fx:id="txtStartSum" layoutX="152.0" layoutY="95.0" prefWidth="150.0" />
+      <TextField fx:id="txtPercentage" layoutX="152.0" layoutY="134.0" prefWidth="150.0" />
+
+      <Label layoutX="22.0" layoutY="24.0" text="Срок вклада:" />
+      <Label layoutX="22.0" layoutY="62.0" text="Капитализация:" />
+      <Label layoutX="22.0" layoutY="99.0" text="Сумма вклада" />
+      <Label layoutX="22.0" layoutY="138.0" text="Процентная ставка:" />
+      <Label layoutX="22.0" layoutY="173.0" text="Результат:" />
+
+      <TextArea fx:id="areaLog" editable="false" layoutX="22.0" layoutY="300.0" prefHeight="100.0" prefWidth="275.0" />
+   </children>
+
+</AnchorPane>
diff --git a/code/deposit-calculator/view/src/test/java/ru/unn/agile/depositcalculator/view/FakeViewTests.java b/code/deposit-calculator/view/src/test/java/ru/unn/agile/depositcalculator/view/FakeViewTests.java
new file mode 100644
index 000000000..bee6dde4e
--- /dev/null
+++ b/code/deposit-calculator/view/src/test/java/ru/unn/agile/depositcalculator/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.depositcalculator.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/deposit-calculator/viewmodel/build.gradle b/code/deposit-calculator/viewmodel/build.gradle
new file mode 100644
index 000000000..a8a8ca51a
--- /dev/null
+++ b/code/deposit-calculator/viewmodel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':deposit-calculator-model')
+}
\ No newline at end of file
diff --git a/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ILogger.java b/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ILogger.java
new file mode 100644
index 000000000..4e1c97103
--- /dev/null
+++ b/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ILogger.java
@@ -0,0 +1,8 @@
+package ru.unn.agile.depositcalculator.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void log(String s);
+    List<String> getLog();
+}
diff --git a/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ViewModel.java b/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ViewModel.java
new file mode 100644
index 000000000..7071ff162
--- /dev/null
+++ b/code/deposit-calculator/viewmodel/src/main/java/ru/unn/agile/depositcalculator/viewmodel/ViewModel.java
@@ -0,0 +1,222 @@
+package ru.unn.agile.depositcalculator.viewmodel;
+
+import javafx.beans.property.ObjectProperty;
+import javafx.beans.property.SimpleObjectProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.depositcalculator.model.Calculator;
+import ru.unn.agile.depositcalculator.model.CapitalizationPeriod;
+import ru.unn.agile.depositcalculator.model.DepositTimeType;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+
+public class ViewModel {
+
+    private final Pattern pattern =
+            Pattern.compile("^([0-9]*)(\\.)?([0-9]*)$", Pattern.CASE_INSENSITIVE);
+
+    // region fields
+    private final SimpleStringProperty percentProperty = new SimpleStringProperty();
+    private final SimpleStringProperty startSumProperty = new SimpleStringProperty();
+    private final SimpleStringProperty resultProperty = new SimpleStringProperty();
+    private final SimpleStringProperty logsProperty = new SimpleStringProperty();
+    private final ObjectProperty<ObservableList<DepositTimeType>> periods =
+            new SimpleObjectProperty<>(
+                    FXCollections.observableArrayList(DepositTimeType.values()));
+    private final ObjectProperty<ObservableList<CapitalizationPeriod>> capitalizations =
+            new SimpleObjectProperty<>(
+                    FXCollections.observableArrayList(CapitalizationPeriod.values()));
+    private final ObjectProperty<DepositTimeType> period = new SimpleObjectProperty<>();
+    private final ObjectProperty<CapitalizationPeriod> capitalization =
+            new SimpleObjectProperty<>();
+
+    private ILogger logger;
+    // endregion
+
+    // region getters/setters
+
+    public ObservableList<DepositTimeType> getPeriods() {
+        return periods.get();
+    }
+
+    public ObservableList<CapitalizationPeriod> getCapitalizations() {
+        return capitalizations.get();
+    }
+
+    public DepositTimeType getPeriod() {
+        return period.get();
+    }
+
+    public ObjectProperty<DepositTimeType> periodProperty() {
+        return period;
+    }
+
+    public void setPeriod(final DepositTimeType period) {
+        this.period.set(period);
+    }
+
+    public CapitalizationPeriod getCapitalization() {
+        return capitalization.get();
+    }
+
+    public ObjectProperty<CapitalizationPeriod> capitalizationProperty() {
+        return capitalization;
+    }
+
+    public void setCapitalization(final CapitalizationPeriod capitalization) {
+        this.capitalization.set(capitalization);
+    }
+
+    public String getPercentProperty() {
+        return percentProperty.get();
+    }
+
+    public SimpleStringProperty percentProperty() {
+        return percentProperty;
+    }
+
+    public void setPercentProperty(final String percentProperty) {
+        this.percentProperty.set(percentProperty);
+    }
+
+    public String getStartSumProperty() {
+        return startSumProperty.get();
+    }
+
+    public SimpleStringProperty startSumProperty() {
+        return startSumProperty;
+    }
+
+    public void setStartSumProperty(final String startSumProperty) {
+        this.startSumProperty.set(startSumProperty);
+    }
+
+    public String getResultProperty() {
+        return resultProperty.get();
+    }
+
+    public SimpleStringProperty resultProperty() {
+        return resultProperty;
+    }
+
+    public void setResultProperty(final String resultProperty) {
+        this.resultProperty.set(resultProperty);
+    }
+
+    public final SimpleStringProperty getLogsProperty() {
+        return logsProperty;
+    }
+    //endregion
+
+    public ViewModel() {
+        initialize();
+    }
+
+    public ViewModel(final ILogger logger) {
+        setLogger(logger);
+        initialize();
+    }
+
+    public void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger value can't be null");
+        }
+        this.logger = logger;
+    }
+
+    public void calculate() {
+        if (getStartSumProperty().isEmpty()
+                || getPercentProperty().isEmpty()
+                || !getValidationStatus(getStartSumProperty())
+                || !getValidationStatus(getPercentProperty())) {
+            setResultProperty(LogMessages.VALIDATION_ERROR);
+            return;
+        }
+
+        Calculator calculator = new Calculator();
+        calculator.setPeriod(getPeriod(), 1);
+        calculator.setPercent(Integer.parseInt(getPercentProperty()));
+        calculator.setStartSum(Double.parseDouble(getStartSumProperty()));
+        calculator.setCapitalizationPeriod(getCapitalization());
+        double result = calculator.calculate();
+        result = getCustomerFormat(result);
+        setResultProperty(String.format("%s", result));
+
+        log(LogMessages.CALCULATION_COMPLETED_LOG_MSG + result);
+    }
+
+    public void onPercentageFocusChanged() {
+        log(LogMessages.PERCENTAGE_UPDATED_LOG_MSG + getPercentProperty());
+    }
+
+    public void onSumFocusChanged() {
+        log(LogMessages.START_SUM_UPDATED_LOG_MSG + getStartSumProperty());
+    }
+
+    public List<String> getLogs() {
+        if (logger == null) {
+            return new ArrayList<>();
+        }
+        return logger.getLog();
+    }
+
+    private boolean getValidationStatus(final String value) {
+        Matcher matcher = pattern.matcher(value);
+        return matcher.matches();
+    }
+
+    private double getCustomerFormat(final double input) {
+        BigDecimal bd = new BigDecimal(input);
+        return bd.setScale(2, RoundingMode.UP).doubleValue();
+    }
+
+    private void setActualLogs() {
+        var fullLog = getLogs();
+        StringBuilder record = new StringBuilder();
+        for (String log : fullLog) {
+            record.append(log).append("\n");
+        }
+        logsProperty.set(record.toString());
+    }
+
+    private void log(final String message) {
+        if (logger != null) {
+            logger.log(message);
+            setActualLogs();
+        }
+    }
+
+    private void initialize() {
+        period.addListener((observable, oldValue, newValue) -> {
+            log(LogMessages.PERIOD_UPDATED_LOG_MSG + newValue);
+        });
+        capitalization.addListener((observable, oldValue, newValue) -> {
+            log(LogMessages.CAPITALIZATION_UPDATED_LOG_MSG + newValue);
+        });
+
+        setCapitalization(CapitalizationPeriod.MONTH);
+        setPeriod(DepositTimeType.DAY);
+        setStartSumProperty("1000");
+        setPercentProperty("8");
+    }
+
+    static final class LogMessages {
+        private LogMessages() {
+        }
+
+        static final String VALIDATION_ERROR =
+                "Fields should contains only number and values should be more or equal 0";
+        static final String PERIOD_UPDATED_LOG_MSG = "Selected period updated: ";
+        static final String CAPITALIZATION_UPDATED_LOG_MSG = "Selected capitalization updated: ";
+        static final String START_SUM_UPDATED_LOG_MSG = "Start sum value updated: ";
+        static final String PERCENTAGE_UPDATED_LOG_MSG = "Percentage value updated: ";
+        static final String CALCULATION_COMPLETED_LOG_MSG = "Calculation completed: ";
+    }
+}
diff --git a/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/FakeLogger.java b/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..943131e0c
--- /dev/null
+++ b/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.depositcalculator.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements ILogger {
+    private ArrayList<String> log = new ArrayList<String>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/ViewModelTest.java b/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/ViewModelTest.java
new file mode 100644
index 000000000..ac643d574
--- /dev/null
+++ b/code/deposit-calculator/viewmodel/src/test/java/ru/unn/agile/depositcalculator/viewmodel/ViewModelTest.java
@@ -0,0 +1,185 @@
+package ru.unn.agile.depositcalculator.viewmodel;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.depositcalculator.model.CapitalizationPeriod;
+import ru.unn.agile.depositcalculator.model.DepositTimeType;
+
+public class ViewModelTest {
+
+    private ViewModel viewModel;
+
+    protected void setViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        if (viewModel == null) {
+            viewModel = new ViewModel(new FakeLogger());
+        }
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canSetDefaultDepositPeriod() {
+        Assert.assertEquals(DepositTimeType.DAY, viewModel.periodProperty().get());
+    }
+
+    @Test
+    public void canSetDefaultCapitPeriod() {
+        Assert.assertEquals(CapitalizationPeriod.MONTH, viewModel.capitalizationProperty().get());
+    }
+
+    @Test
+    public void canSetDefaultStartSum() {
+        Assert.assertEquals("1000", viewModel.getStartSumProperty());
+    }
+
+    @Test
+    public void canSetDefaultPercent() {
+        Assert.assertEquals("8", viewModel.getPercentProperty());
+    }
+
+    @Test
+    public void canCalculate() {
+        viewModel.calculate();
+        Assert.assertEquals("1000.22", viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateEmptyPercentage() {
+        viewModel.setPercentProperty("");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateEmptyStartSum() {
+        viewModel.setStartSumProperty("");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateNegativeStartSum() {
+        viewModel.setStartSumProperty("-1");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateNegativePercentage() {
+        viewModel.setPercentProperty("-1");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateNotNumberSymbolsPercentage() {
+        viewModel.setPercentProperty("asdfasdf100-adsf.0");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canValidateNotNumberSymbolsStartSum() {
+        viewModel.setStartSumProperty("asdfasdf100-adsf.0");
+        viewModel.calculate();
+        Assert.assertEquals(ViewModel.LogMessages.VALIDATION_ERROR, viewModel.getResultProperty());
+    }
+
+    @Test
+    public void canSetLoggerToViewModel() {
+        var viewModel = new ViewModel();
+        viewModel.setLogger(new FakeLogger());
+        Assert.assertNotNull(viewModel.getLogs());
+    }
+
+    @Test (expected = IllegalArgumentException.class)
+    public void cannotCreateViewModelIfLoggerIsNull() {
+        new ViewModel(null);
+    }
+
+    @Test (expected = IllegalArgumentException.class)
+    public void cannotSetNullLoggerToViewModel() {
+        viewModel.setLogger(null);
+    }
+
+    @Test
+    public void loggerInitiallyContainsDefaultValues() {
+        var logs = viewModel.getLogs();
+        Assert.assertFalse(logs.isEmpty());
+    }
+
+    @Test
+    public void canLogCapitalizationUpdatedValue() {
+        viewModel.setCapitalization(CapitalizationPeriod.YEAR);
+        var logs = viewModel.getLogs();
+        var lastLog = logs.get(logs.size() - 1);
+        Assert.assertTrue(lastLog.contains(ViewModel.LogMessages.CAPITALIZATION_UPDATED_LOG_MSG));
+    }
+
+    @Test
+    public void canLogPeriodUpdatedValue() {
+        viewModel.setPeriod(DepositTimeType.DAY);
+        var logs = viewModel.getLogs();
+        var lastLog = logs.get(logs.size() - 1);
+        Assert.assertTrue(lastLog.contains(ViewModel.LogMessages.PERIOD_UPDATED_LOG_MSG));
+    }
+
+    @Test
+    public void canLogStartSumValueChanged() {
+        viewModel.setStartSumProperty("10000");
+        viewModel.onSumFocusChanged();
+        var logs = viewModel.getLogs();
+        var lastLog = logs.get(logs.size() - 1);
+        Assert.assertTrue(lastLog.contains(ViewModel.LogMessages.START_SUM_UPDATED_LOG_MSG));
+    }
+
+    @Test
+    public void canLogPercentageValueChanged() {
+        viewModel.setPercentProperty("21");
+        viewModel.onPercentageFocusChanged();
+        var logs = viewModel.getLogs();
+        var lastLog = logs.get(logs.size() - 1);
+        Assert.assertTrue(lastLog.contains(ViewModel.LogMessages.PERCENTAGE_UPDATED_LOG_MSG));
+    }
+
+    @Test
+    public void canLogManyActions() {
+        viewModel.setPercentProperty("21");
+        viewModel.onPercentageFocusChanged();
+
+        viewModel.setCapitalization(CapitalizationPeriod.YEAR);
+
+        var logs = viewModel.getLogs();
+        var logsCount = logs.size();
+        Assert.assertTrue(logsCount > 1);
+    }
+
+    @Test
+    public void canLogCalculationCompletion() {
+        viewModel.setStartSumProperty("10000");
+        viewModel.onSumFocusChanged();
+
+        viewModel.setPercentProperty("21");
+        viewModel.onPercentageFocusChanged();
+
+        viewModel.setPeriod(DepositTimeType.DAY);
+
+        viewModel.setCapitalization(CapitalizationPeriod.YEAR);
+
+        viewModel.calculate();
+
+        var logs = viewModel.getLogs();
+        var lastLog = logs.get(logs.size() - 1);
+        Assert.assertTrue(lastLog.contains(ViewModel.LogMessages.CALCULATION_COMPLETED_LOG_MSG));
+    }
+}
diff --git a/code/dijkstra-algorithm/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java b/code/dijkstra-algorithm/Model/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java
similarity index 92%
rename from code/dijkstra-algorithm/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java
rename to code/dijkstra-algorithm/Model/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java
index d108f48c6..eb18c749d 100644
--- a/code/dijkstra-algorithm/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java
+++ b/code/dijkstra-algorithm/Model/src/main/java/ru/unn/agile/DijkstraAlgorithm/Model/DijkstraGraph.java
@@ -1,12 +1,8 @@
 package ru.unn.agile.dijkstraalgorithm.model;
 
-import java.util.List;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.NavigableSet;
-import java.util.TreeSet;
+import java.util.*;
 
-class DijkstraGraph {
+public class DijkstraGraph {
 
     // mapping of vertex names to Vertex objects, built from a set of Edges
     private final Map<String, Vertex> graph;
@@ -16,11 +12,19 @@
         private final String v1, v2;
         private final int dist;
 
-        Edge(final String v1, final String v2, final int dist) {
+        public Edge(final String v1, final String v2, final int dist) {
             this.v1 = v1;
             this.v2 = v2;
             this.dist = dist;
         }
+
+        public String getV1() {
+            return v1;
+        }
+
+        public String getV2() {
+            return v2;
+        }
     }
 
     /**
@@ -60,7 +64,7 @@ public int compareTo(final Vertex other) {
     /**
      * Builds a graph from a set of edges
      */
-    DijkstraGraph(final List<Edge> edges) {
+    public DijkstraGraph(final List<Edge> edges) {
         validateEdges(edges);
 
         graph = new HashMap<>(edges.size());
@@ -163,4 +167,8 @@ public String getPath(final String endName) {
     public int getVertexNumber() {
         return graph.size();
     }
+
+    public List<String> getVertexList() {
+        return new ArrayList<>(graph.keySet());
+    }
 }
diff --git a/code/dijkstra-algorithm/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java b/code/dijkstra-algorithm/Model/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java
similarity index 96%
rename from code/dijkstra-algorithm/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java
rename to code/dijkstra-algorithm/Model/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java
index 1d8bbbae7..0a279e431 100644
--- a/code/dijkstra-algorithm/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java
+++ b/code/dijkstra-algorithm/Model/src/test/java/ru/unn/agile/dijkstraalgorithm/model/DijkstraGraphTest.java
@@ -155,4 +155,10 @@ public void canNotCalculatePathToUnreachablePoint() {
         assertEquals(CAN_NOT_REACH_D_VERTEX, pathFromAtoD);
     }
 
+    @Test
+    public void canGetVertexList() {
+        DijkstraGraph g = new DijkstraGraph(EDGES_1);
+
+        assertEquals(5, g.getVertexList().size());
+    }
 }
diff --git a/code/dijkstra-algorithm/View/build.gradle b/code/dijkstra-algorithm/View/build.gradle
new file mode 100644
index 000000000..0ad8478a3
--- /dev/null
+++ b/code/dijkstra-algorithm/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.dijkstraalgorithm.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':dijkstra-algorithm-ViewModel')
+}
diff --git a/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.java b/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.java
new file mode 100644
index 000000000..8671cea64
--- /dev/null
+++ b/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.java
@@ -0,0 +1,123 @@
+package ru.unn.agile.dijkstraalgorithm.view;
+
+import javafx.beans.property.Property;
+import javafx.css.PseudoClass;
+import javafx.fxml.FXML;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
+import ru.unn.agile.dijkstraalgorithm.viewmodel.EdgeViewModel;
+import ru.unn.agile.dijkstraalgorithm.viewmodel.ViewModel;
+
+
+public class Dijkstra {
+
+    private final PseudoClass errorClass = PseudoClass.getPseudoClass("error");
+    private final String vertexInputTooltip = "Only letters allowed";
+    private final String weightInputTooltip = "Only positive integer numbers allowed";
+
+    @FXML
+    private ViewModel viewModel;
+
+    @FXML
+    private TextField vertex1TextField;
+    @FXML
+    private TextField vertex2TextField;
+    @FXML
+    private TextField weightTextField;
+    @FXML
+    private Button addEdgeButton;
+
+    @FXML
+    private TableView<EdgeViewModel> tableEdges;
+    @FXML
+    private TableColumn<EdgeViewModel, String> vertex1Column;
+    @FXML
+    private TableColumn<EdgeViewModel, String> vertex2Column;
+    @FXML
+    private TableColumn<EdgeViewModel, Integer> weightColumn;
+
+    @FXML
+    private Button createGraphButton;
+    @FXML
+    private Button calculatePathButton;
+
+    @FXML
+    private ComboBox<String> fromComboBox;
+    @FXML
+    private ComboBox<String> toComboBox;
+    @FXML
+    private TextArea resultPathTextArea;
+
+    @FXML
+    void initialize() {
+        initAddEdgeForm();
+        initTableView();
+        initControlPanel();
+    }
+
+    private void initAddEdgeForm() {
+        initTextField(vertex1TextField, vertexInputTooltip, viewModel.vertex1Property());
+        initTextField(vertex2TextField, vertexInputTooltip, viewModel.vertex2Property());
+        initTextField(weightTextField, weightInputTooltip, viewModel.weightProperty());
+
+        viewModel.vertex1Property().addListener(obs ->
+                setErrorBorder(vertex1TextField, !viewModel.isVertex1InputCorrect()));
+        viewModel.vertex2Property().addListener(obs ->
+                setErrorBorder(vertex2TextField, !viewModel.isVertex2InputCorrect()));
+        viewModel.weightProperty().addListener(obs ->
+                setErrorBorder(weightTextField, !viewModel.isWeightInputCorrect()));
+
+        addEdgeButton.disableProperty()
+                .bindBidirectional(viewModel.addingNewEdgeDisabledProperty());
+        addEdgeButton.setOnAction(e -> viewModel.addEdge());
+    }
+
+    private void initTableView() {
+        tableEdges.setItems(viewModel.getEdgeList());
+
+        vertex1Column.setCellValueFactory(
+                new PropertyValueFactory<EdgeViewModel, String>("vertex1"));
+        vertex2Column.setCellValueFactory(
+                new PropertyValueFactory<EdgeViewModel, String>("vertex2"));
+        weightColumn.setCellValueFactory(
+                new PropertyValueFactory<EdgeViewModel, Integer>("weight"));
+    }
+
+    private void initControlPanel() {
+        createGraphButton.setOnAction(e -> viewModel.createGraph());
+        calculatePathButton.setOnAction(e -> viewModel.calculatePath());
+
+        fromComboBox.valueProperty().bindBidirectional(viewModel.vertexFromProperty());
+        toComboBox.valueProperty().bindBidirectional(viewModel.vertexToProperty());
+
+        resultPathTextArea.textProperty().bindBidirectional(viewModel.resultPathProperty());
+    }
+
+    private  void initTextField(final TextField textField,
+                                final String tooltip,
+                                final Property<String> property) {
+        bindTextFieldProperty(textField, property);
+        setTextFieldTooltip(textField, tooltip);
+        addListenerForRemovingSpaces(textField);
+    }
+
+    private void setTextFieldTooltip(final TextField textField, final String tooltip) {
+        textField.tooltipProperty().setValue(new Tooltip(tooltip));
+    }
+
+    private void bindTextFieldProperty(final TextField textField,
+                                       final Property<String> property) {
+        textField.textProperty().bindBidirectional(property);
+    }
+
+    private void addListenerForRemovingSpaces(final TextField textField) {
+        textField.textProperty().addListener(
+                (observable, oldValue, newValue) ->
+                        textField.setText(newValue.replaceAll("\\s+", ""))
+        );
+    }
+
+    private void setErrorBorder(final TextField textField, final boolean active) {
+        textField.pseudoClassStateChanged(errorClass, active);
+    }
+}
diff --git a/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Main.java b/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Main.java
new file mode 100644
index 000000000..2f6b14c70
--- /dev/null
+++ b/code/dijkstra-algorithm/View/src/main/java/ru/unn/agile/dijkstraalgorithm/view/Main.java
@@ -0,0 +1,32 @@
+package ru.unn.agile.dijkstraalgorithm.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+
+public class Main extends Application {
+
+    private static final String VIEW_TITLE = "Dijkstra Algorithm";
+    private static final String FXML_RESOURCES = "Dijkstra.fxml";
+    private static final String STYLE_RESOURCES = "style.css";
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource(FXML_RESOURCES));
+        Scene scene = new Scene(root);
+        scene.getStylesheets().add(getClass().getResource(STYLE_RESOURCES).toExternalForm());
+
+        primaryStage.setScene(scene);
+        primaryStage.setTitle(VIEW_TITLE);
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
+
+
diff --git a/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.fxml b/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.fxml
new file mode 100644
index 000000000..c4c9ba944
--- /dev/null
+++ b/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/Dijkstra.fxml
@@ -0,0 +1,149 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Font?>
+
+<?import ru.unn.agile.dijkstraalgorithm.viewmodel.ViewModel?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/8.0.172-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.dijkstraalgorithm.view.Dijkstra">
+   <fx:define>
+      <ViewModel fx:id="viewModel"/>
+   </fx:define>
+   <children>
+      <HBox>
+         <children>
+            <VBox>
+               <children>
+                  <HBox>
+                     <children>
+                        <VBox>
+                           <children>
+                              <Label text="Vertex1" />
+                              <TextField fx:id="vertex1TextField" maxWidth="75.0" minWidth="75.0" prefWidth="75.0">
+                                 <VBox.margin>
+                                    <Insets top="5.0" />
+                                 </VBox.margin>
+                              </TextField>
+                           </children>
+                           <HBox.margin>
+                              <Insets right="20.0" />
+                           </HBox.margin>
+                        </VBox>
+                        <VBox layoutX="10.0" layoutY="10.0">
+                           <children>
+                              <Label text="Vertex2" />
+                              <TextField fx:id="vertex2TextField" maxWidth="75.0" minWidth="75.0" prefWidth="75.0">
+                                 <VBox.margin>
+                                    <Insets top="5.0" />
+                                 </VBox.margin>
+                              </TextField>
+                           </children>
+                           <HBox.margin>
+                              <Insets right="20.0" />
+                           </HBox.margin>
+                        </VBox>
+                        <VBox layoutX="85.0" layoutY="10.0">
+                           <children>
+                              <Label text="Weight" />
+                              <TextField fx:id="weightTextField" maxWidth="75.0" minWidth="75.0" prefWidth="75.0">
+                                 <VBox.margin>
+                                    <Insets top="5.0" />
+                                 </VBox.margin>
+                              </TextField>
+                           </children>
+                           <HBox.margin>
+                              <Insets right="20.0" />
+                           </HBox.margin>
+                        </VBox>
+                        <Button fx:id="addEdgeButton" mnemonicParsing="false" prefHeight="25.0" text="Add Edge">
+                           <HBox.margin>
+                              <Insets top="22.0" />
+                           </HBox.margin>
+                        </Button>
+                     </children>
+                  </HBox>
+                  <TableView fx:id="tableEdges">
+                     <columns>
+                        <TableColumn fx:id="vertex1Column" maxWidth="100.0" minWidth="50.0" prefWidth="100.0" text="Vertex 1" />
+                        <TableColumn fx:id="vertex2Column" maxWidth="100.0" minWidth="75.0" prefWidth="100.0" text="Vertex 2" />
+                        <TableColumn fx:id="weightColumn" maxWidth="100.0" minWidth="75.0" prefWidth="100.0" text="Weight" />
+                     </columns>
+                     <VBox.margin>
+                        <Insets top="10.0" />
+                     </VBox.margin>
+                  </TableView>
+               </children>
+               <padding>
+                  <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+               </padding>
+            </VBox>
+            <VBox alignment="TOP_CENTER" prefWidth="200.0">
+               <padding>
+                  <Insets top="22.0" />
+               </padding>
+               <children>
+                  <Button fx:id="createGraphButton" layoutX="35.0" layoutY="193.0" mnemonicParsing="false" prefWidth="150.0" text="Create graph">
+                     <font>
+                        <Font size="16.0" />
+                     </font>
+                     <VBox.margin>
+                        <Insets top="20.0" />
+                     </VBox.margin>
+                  </Button>
+                  <Label text="Select vertexes" textAlignment="CENTER">
+                     <font>
+                        <Font size="20.0" />
+                     </font>
+                     <VBox.margin>
+                        <Insets top="34.0" />
+                     </VBox.margin>
+                  </Label>
+                  <ComboBox fx:id="fromComboBox" items="${viewModel.vertexList}" prefWidth="150.0" promptText="From">
+                     <VBox.margin>
+                        <Insets top="10.0" />
+                     </VBox.margin></ComboBox>
+                  <ComboBox fx:id="toComboBox" items="${viewModel.vertexList}" layoutX="35.0" layoutY="80.0" prefWidth="150.0" promptText="To">
+                     <VBox.margin>
+                        <Insets top="10.0" />
+                     </VBox.margin>
+                  </ComboBox>
+                  <Button fx:id="calculatePathButton" mnemonicParsing="false" prefWidth="150.0" text="Calculate path">
+                     <font>
+                        <Font size="16.0" />
+                     </font>
+                     <VBox.margin>
+                        <Insets top="20.0" />
+                     </VBox.margin>
+                  </Button>
+                  <Label layoutX="35.0" layoutY="300.0" minWidth="150.0" prefWidth="150.0" text="Result: ">
+                     <font>
+                        <Font size="16.0" />
+                     </font>
+                     <VBox.margin>
+                        <Insets top="31.0" />
+                     </VBox.margin>
+                  </Label>
+                  <TextArea fx:id="resultPathTextArea" editable="false" maxWidth="150.0" minWidth="150.0" prefHeight="140.0" prefWidth="150.0" wrapText="true">
+                     <VBox.margin>
+                        <Insets />
+                     </VBox.margin>
+                  </TextArea>
+               </children>
+            </VBox>
+         </children>
+         <padding>
+            <Insets bottom="5.0" left="5.0" right="5.0" top="5.0" />
+         </padding>
+      </HBox>
+   </children>
+</AnchorPane>
diff --git a/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/style.css b/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/style.css
new file mode 100644
index 000000000..ac02cca48
--- /dev/null
+++ b/code/dijkstra-algorithm/View/src/main/resources/ru/unn/agile/dijkstraalgorithm/view/style.css
@@ -0,0 +1,4 @@
+.text-field:error {
+    -fx-text-box-border: red ;
+    -fx-focus-color: red ;
+}
\ No newline at end of file
diff --git a/code/dijkstra-algorithm/ViewModel/build.gradle b/code/dijkstra-algorithm/ViewModel/build.gradle
new file mode 100644
index 000000000..63f9b7fb9
--- /dev/null
+++ b/code/dijkstra-algorithm/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':dijkstra-algorithm-Model')
+}
\ No newline at end of file
diff --git a/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModel.java b/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModel.java
new file mode 100644
index 000000000..3279cb4e0
--- /dev/null
+++ b/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModel.java
@@ -0,0 +1,61 @@
+package ru.unn.agile.dijkstraalgorithm.viewmodel;
+
+import javafx.beans.property.SimpleIntegerProperty;
+import javafx.beans.property.SimpleStringProperty;
+import ru.unn.agile.dijkstraalgorithm.model.DijkstraGraph;
+
+public class EdgeViewModel {
+    private final SimpleStringProperty vertex1 = new SimpleStringProperty("");
+    private final SimpleStringProperty vertex2 = new SimpleStringProperty("");
+    private final SimpleIntegerProperty weight = new SimpleIntegerProperty();
+
+    private final DijkstraGraph.Edge edge;
+
+    EdgeViewModel(final String vertex1, final String vertex2, final String weight) {
+        setVertex1(vertex1);
+        setVertex2(vertex2);
+        setWeight(weight);
+
+        edge = new DijkstraGraph.Edge(getVertex1(), getVertex2(), getWeight());
+    }
+
+    private String getVertex1() {
+        return vertex1.get();
+    }
+
+    public SimpleStringProperty vertex1Property() {
+        return vertex1;
+    }
+
+    private void setVertex1(final String vertex1) {
+        this.vertex1.set(vertex1);
+    }
+
+    private String getVertex2() {
+        return vertex2.get();
+    }
+
+    public SimpleStringProperty vertex2Property() {
+        return vertex2;
+    }
+
+    private void setVertex2(final String vertex2) {
+        this.vertex2.set(vertex2);
+    }
+
+    private int getWeight() {
+        return weight.get();
+    }
+
+    public SimpleIntegerProperty weightProperty() {
+        return weight;
+    }
+
+    private void setWeight(final String weight) {
+        this.weight.set(Integer.parseInt(weight));
+    }
+
+    public DijkstraGraph.Edge getEdge() {
+        return edge;
+    }
+}
diff --git a/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModel.java b/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModel.java
new file mode 100644
index 000000000..c59d68702
--- /dev/null
+++ b/code/dijkstra-algorithm/ViewModel/src/main/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModel.java
@@ -0,0 +1,161 @@
+package ru.unn.agile.dijkstraalgorithm.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.dijkstraalgorithm.model.DijkstraGraph;
+
+import java.util.List;
+import java.util.regex.Pattern;
+import java.util.stream.Collectors;
+
+public class ViewModel {
+
+    private DijkstraGraph graph;
+
+    private static final Pattern VERTEX_INPUT_ALLOWED_SYMBOLS = Pattern.compile("^[a-zA-Z]+$");
+    private static final Pattern WEIGHT_INPUT_ALLOWED_SYMBOLS = Pattern.compile("^[1-9][0-9]*$");
+    private final SimpleBooleanProperty addingNewEdgeDisabled = new SimpleBooleanProperty();
+
+
+    private final StringProperty vertex1 = new SimpleStringProperty();
+    private final StringProperty vertex2 = new SimpleStringProperty();
+    private final StringProperty weight = new SimpleStringProperty();
+
+    private StringProperty vertexFrom = new SimpleStringProperty();
+    private StringProperty vertexTo = new SimpleStringProperty();
+    private StringProperty resultPath = new SimpleStringProperty();
+
+
+    private final ObservableList<EdgeViewModel> edgeList = FXCollections.observableArrayList();
+    private final ObservableList<String> vertexList = FXCollections.observableArrayList();
+
+
+    public ViewModel() {
+        clearFormInput();
+
+        BooleanBinding canCalculateBoolBinding = new BooleanBinding() {
+            {
+                super.bind(vertex1, vertex2, weight);
+            }
+            @Override
+            protected boolean computeValue() {
+                return (isVertex1InputCorrect()
+                        && isVertex2InputCorrect()
+                        && isWeightInputCorrect());
+            }
+        };
+        addingNewEdgeDisabled.bind(canCalculateBoolBinding.not());
+    }
+
+    public void addEdge() {
+        EdgeViewModel newEdge = new EdgeViewModel(vertex1.get(), vertex2.get(), weight.get());
+        edgeList.add(newEdge);
+
+        clearFormInput();
+    }
+
+    private void clearFormInput() {
+        vertex1.set("");
+        vertex2.set("");
+        weight.set("");
+    }
+
+    public boolean isVertex1InputCorrect() {
+        String exprText = vertex1.get();
+        return (VERTEX_INPUT_ALLOWED_SYMBOLS.matcher(exprText).matches()
+                && areVertexInputsNotEqual());
+    }
+
+    public boolean isVertex2InputCorrect() {
+        String exprText = vertex2.get();
+        return (VERTEX_INPUT_ALLOWED_SYMBOLS.matcher(exprText).matches()
+                && areVertexInputsNotEqual());
+    }
+
+    private boolean areVertexInputsNotEqual() {
+        return !vertex1.get().equals(vertex2.get());
+    }
+
+    public boolean isWeightInputCorrect() {
+        String exprText = weight.get();
+        return (WEIGHT_INPUT_ALLOWED_SYMBOLS.matcher(exprText).matches());
+    }
+
+    public void createGraph() {
+        if (edgeList.isEmpty()) {
+            return;
+        }
+
+        List<DijkstraGraph.Edge> list = edgeList.stream()
+                .map(EdgeViewModel::getEdge)
+                .collect(Collectors.toList());
+
+        graph = new DijkstraGraph(list);
+        updateVertexList();
+    }
+
+    private void updateVertexList() {
+        vertexList.clear();
+        vertexList.addAll(graph.getVertexList());
+    }
+
+    public void calculatePath() {
+        String toPath = getVertexTo();
+        String fromPath = getVertexFrom();
+        if (toPath == null || fromPath == null) {
+            return;
+        }
+
+        graph.calculate(fromPath);
+        resultPath.setValue(graph.getPath(toPath));
+    }
+
+    public StringProperty vertex1Property() {
+        return vertex1;
+    }
+
+    public StringProperty vertex2Property() {
+        return vertex2;
+    }
+
+    public StringProperty weightProperty() {
+        return weight;
+    }
+
+    private String getVertexFrom() {
+        return vertexFrom.get();
+    }
+
+    public StringProperty vertexFromProperty() {
+        return vertexFrom;
+    }
+
+
+    private String getVertexTo() {
+        return vertexTo.get();
+    }
+
+    public StringProperty vertexToProperty() {
+        return vertexTo;
+    }
+
+    public StringProperty resultPathProperty() {
+        return resultPath;
+    }
+
+    public SimpleBooleanProperty addingNewEdgeDisabledProperty() {
+        return addingNewEdgeDisabled;
+    }
+
+    public ObservableList<EdgeViewModel> getEdgeList() {
+        return edgeList;
+    }
+
+    public ObservableList<String> getVertexList() {
+        return vertexList;
+    }
+}
diff --git a/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModelTest.java b/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModelTest.java
new file mode 100644
index 000000000..5ab3586a3
--- /dev/null
+++ b/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/EdgeViewModelTest.java
@@ -0,0 +1,19 @@
+package ru.unn.agile.dijkstraalgorithm.viewmodel;
+
+import org.junit.Test;
+import ru.unn.agile.dijkstraalgorithm.model.DijkstraGraph;
+
+import static org.junit.Assert.assertTrue;
+
+public class EdgeViewModelTest {
+    private final String vertex1 = "A";
+    private final String vertex2 = "B";
+    private final String weight = "2";
+
+    private final EdgeViewModel edge = new EdgeViewModel(vertex1, vertex2, weight);
+
+    @Test
+    public void canGetVertex1Property() {
+        assertTrue(edge.getEdge() instanceof DijkstraGraph.Edge);
+    }
+}
diff --git a/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModelTest.java b/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModelTest.java
new file mode 100644
index 000000000..20bb691bf
--- /dev/null
+++ b/code/dijkstra-algorithm/ViewModel/src/test/java/ru/unn/agile/dijkstraalgorithm/viewmodel/ViewModelTest.java
@@ -0,0 +1,154 @@
+package ru.unn.agile.dijkstraalgorithm.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+
+public class ViewModelTest {
+
+    private static final String VERTEX1_CORRECT_INPUT = "A";
+    private static final String VERTEX2_CORRECT_INPUT = "B";
+    private static final String WEIGHT_CORRECT_INPUT = "2";
+
+    private static final String VERTEX1_INCORRECT_INPUT = "A1!";
+    private static final String VERTEX2_INCORRECT_INPUT = "B1%";
+    private static final String WEIGHT_INCORRECT_INPUT = "2A!";
+
+    private static final String PATH_RESULT = "A(0) -> B(2)";
+
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void isAddEdgeButtonDisabledForEmptyInput() {
+        setFormTextFields("", "", "");
+
+        assertTrue(isAddEdgeButtonDisabled());
+    }
+
+    @Test
+    public void isAddEdgeButtonDisabledForInvalidVertex1Input() {
+        setFormTextFields(VERTEX1_INCORRECT_INPUT, VERTEX2_CORRECT_INPUT, WEIGHT_CORRECT_INPUT);
+        assertTrue(isAddEdgeButtonDisabled());
+    }
+
+    @Test
+    public void isAddEdgeButtonDisabledForInvalidVertex2Input() {
+        setFormTextFields(VERTEX1_CORRECT_INPUT, VERTEX2_INCORRECT_INPUT, WEIGHT_CORRECT_INPUT);
+        assertTrue(isAddEdgeButtonDisabled());
+    }
+
+    @Test
+    public void isAddEdgeButtonDisabledForInvalidWeightInput() {
+        setFormTextFields(VERTEX1_CORRECT_INPUT, VERTEX2_CORRECT_INPUT, WEIGHT_INCORRECT_INPUT);
+        assertTrue(isAddEdgeButtonDisabled());
+    }
+
+    @Test
+    public void isAddEdgeButtonEnabledForCorrectInput() {
+        setFormTextFields(VERTEX1_CORRECT_INPUT, VERTEX2_CORRECT_INPUT, WEIGHT_CORRECT_INPUT);
+        assertFalse(isAddEdgeButtonDisabled());
+    }
+
+    @Test
+    public void isFormInputsEmptyAfterAddingNewEdge() {
+        addEdge();
+        assertTrue(viewModel.vertex1Property().get().isEmpty()
+                && viewModel.vertex2Property().get().isEmpty()
+                && viewModel.weightProperty().get().isEmpty()
+        );
+    }
+
+    @Test
+    public void isGraphEdgeListNotEmptyAfterAdding() {
+        addEdgeAndCreateGraph();
+        assertFalse(viewModel.getEdgeList().isEmpty());
+    }
+
+    @Test
+    public void isGraphEdgeListEmptyAfterCreateGraphWithoutEdges() {
+        createGraph();
+        assertTrue(viewModel.getEdgeList().isEmpty());
+    }
+
+    @Test
+    public void isVertexListUpdated() {
+        addEdgeAndCreateGraph();
+        assertFalse(viewModel.getVertexList().isEmpty());
+    }
+
+    @Test(expected = Test.None.class)
+    public void canChooseVertexFromComboBox() {
+        addEdgeAndCreateGraph();
+        getVertexFromList(0);
+    }
+
+    @Test
+    public void canCalculatePath() {
+        addEdgeAndCreateGraph();
+        chooseFromComboBox(0);
+        chooseToComboBox(1);
+        viewModel.calculatePath();
+
+        assertEquals(PATH_RESULT, viewModel.resultPathProperty().get());
+    }
+
+    @Test
+    public void emptyResultWhenFromAndToComboBoxesAreEmpty() {
+        addEdgeAndCreateGraph();
+        viewModel.calculatePath();
+        assertNull(viewModel.resultPathProperty().get());
+    }
+
+
+
+    private boolean isAddEdgeButtonDisabled() {
+        return viewModel.addingNewEdgeDisabledProperty().get();
+    }
+
+    private void setFormTextFields(final String vertex1,
+                                   final String vertex2,
+                                   final String weight) {
+        viewModel.vertex1Property().setValue(vertex1);
+        viewModel.vertex2Property().setValue(vertex2);
+        viewModel.weightProperty().setValue(weight);
+    }
+
+    private void addEdge() {
+        setFormTextFields(VERTEX1_CORRECT_INPUT, VERTEX2_CORRECT_INPUT, WEIGHT_CORRECT_INPUT);
+        viewModel.addEdge();
+    }
+
+    private void createGraph() {
+        viewModel.createGraph();
+    }
+
+    private void addEdgeAndCreateGraph() {
+        addEdge();
+        createGraph();
+    }
+
+    private String getVertexFromList(final int vertexIndex) {
+        return viewModel.getVertexList().get(vertexIndex);
+    }
+
+    private void chooseFromComboBox(final int vertexIndex) {
+        viewModel.vertexFromProperty().setValue(getVertexFromList(vertexIndex));
+    }
+
+    private void chooseToComboBox(final int vertexIndex) {
+        viewModel.vertexToProperty().setValue(getVertexFromList(vertexIndex));
+    }
+}
diff --git a/code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/Fraction.java b/code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/Fraction.java
similarity index 94%
rename from code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/Fraction.java
rename to code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/Fraction.java
index 74759b9b0..52798f1f1 100644
--- a/code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/Fraction.java
+++ b/code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/Fraction.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.fractioncalculator;
+package ru.unn.agile.fractioncalculator.model;
 
 import java.util.Objects;
 
@@ -7,7 +7,7 @@
     private final int numerator;
     private final int denominator;
 
-    private static final String FRACTION_DELIMITER = "/";
+    public static final String FRACTION_DELIMITER = "/";
 
     public Fraction(final int numerator, final int denominator) throws IllegalArgumentException {
         if (denominator == 0) {
@@ -59,5 +59,4 @@ public boolean equals(final Object o) {
     public int hashCode() {
         return Objects.hash(numerator, denominator);
     }
-
 }
diff --git a/code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/FractionCalculator.java b/code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/FractionCalculator.java
similarity index 98%
rename from code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/FractionCalculator.java
rename to code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/FractionCalculator.java
index 9c218420f..06fabe22d 100644
--- a/code/fractioncalculator/src/main/java/ru/unn/agile/fractioncalculator/FractionCalculator.java
+++ b/code/fractioncalculator/model/src/main/java/ru/unn/agile/fractioncalculator/model/FractionCalculator.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.fractioncalculator;
+package ru.unn.agile.fractioncalculator.model;
 
 import java.util.Arrays;
 import java.util.Objects;
diff --git a/code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionCalculatorTest.java b/code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionCalculatorTest.java
similarity index 98%
rename from code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionCalculatorTest.java
rename to code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionCalculatorTest.java
index 477ed4ee7..5905fc38f 100644
--- a/code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionCalculatorTest.java
+++ b/code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionCalculatorTest.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.fractioncalculator;
+package ru.unn.agile.fractioncalculator.model;
 
 import org.junit.Test;
 
diff --git a/code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionTest.java b/code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionTest.java
similarity index 97%
rename from code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionTest.java
rename to code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionTest.java
index a80419e5c..8b2a6353e 100644
--- a/code/fractioncalculator/src/test/java/ru/unn/agile/fractioncalculator/FractionTest.java
+++ b/code/fractioncalculator/model/src/test/java/ru/unn/agile/fractioncalculator/model/FractionTest.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.fractioncalculator;
+package ru.unn.agile.fractioncalculator.model;
 
 import org.junit.Test;
 
diff --git a/code/fractioncalculator/view/build.gradle b/code/fractioncalculator/view/build.gradle
new file mode 100644
index 000000000..acc4a7928
--- /dev/null
+++ b/code/fractioncalculator/view/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.fractioncalculator.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':fractioncalculator-viewmodel')
+}
\ No newline at end of file
diff --git a/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/FractionCalculator.java b/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/FractionCalculator.java
new file mode 100644
index 000000000..8caecc84c
--- /dev/null
+++ b/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/FractionCalculator.java
@@ -0,0 +1,34 @@
+package ru.unn.agile.fractioncalculator.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.fractioncalculator.viewmodel.ViewModel;
+
+public class FractionCalculator {
+
+    @FXML private ViewModel viewModel;
+
+    @FXML private TextField firstFraction;
+    @FXML private TextField secondFraction;
+
+    @FXML private Label resultLabel;
+
+    @FXML private Button plusButton;
+    @FXML private Button minusButton;
+    @FXML private Button multipleButton;
+    @FXML private Button divideButton;
+
+    @FXML
+    void initialize() {
+        firstFraction.textProperty().bindBidirectional(viewModel.firstFractionProperty());
+        secondFraction.textProperty().bindBidirectional(viewModel.secondFractionProperty());
+        resultLabel.textProperty().bindBidirectional(viewModel.firstFractionProperty());
+
+        plusButton.setOnAction(actionEvent -> viewModel.calculateSum());
+        minusButton.setOnAction(actionEvent -> viewModel.calculateMinus());
+        multipleButton.setOnAction(actionEvent -> viewModel.calculateMultiple());
+        divideButton.setOnAction(actionEvent -> viewModel.calculateDivide());
+    }
+}
diff --git a/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/Main.java b/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/Main.java
new file mode 100644
index 000000000..949999194
--- /dev/null
+++ b/code/fractioncalculator/view/src/main/java/ru/unn/agile/fractioncalculator/view/Main.java
@@ -0,0 +1,24 @@
+package ru.unn.agile.fractioncalculator.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+    private static final String TITLE_OF_APPLICATION = "FractionCalculator";
+    private static final String SCENE = "FractionCalculator.fxml";
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent parent = FXMLLoader.load(getClass().getResource(SCENE));
+        primaryStage.setTitle(TITLE_OF_APPLICATION);
+        primaryStage.setScene(new Scene(parent));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/fractioncalculator/view/src/main/resources/ru.unn.agile.fractioncalculator.view/FractionCalculator.fxml b/code/fractioncalculator/view/src/main/resources/ru.unn.agile.fractioncalculator.view/FractionCalculator.fxml
new file mode 100644
index 000000000..d02b4b422
--- /dev/null
+++ b/code/fractioncalculator/view/src/main/resources/ru.unn.agile.fractioncalculator.view/FractionCalculator.fxml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import ru.unn.agile.fractioncalculator.viewmodel.ViewModel?>
+
+<AnchorPane prefHeight="233.0" prefWidth="375.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.fractioncalculator.view.FractionCalculator">
+   <fx:define>
+      <ViewModel fx:id="viewModel" />
+   </fx:define>
+
+   <children>
+      <TextField fx:id="firstFraction" layoutX="50.0" layoutY="69.0" prefHeight="25.0" prefWidth="80.0" />
+      <TextField fx:id="secondFraction" layoutX="246.0" layoutY="69.0" prefHeight="25.0" prefWidth="80.0" />
+      <Button fx:id="plusButton" layoutX="163.0" layoutY="22.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="50.0" text="+" />
+      <Button fx:id="minusButton" layoutX="163.0" layoutY="56.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="50.0" text="-" />
+      <Button fx:id="multipleButton" layoutX="163.0" layoutY="90.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="50.0" text="*" />
+      <Button fx:id="divideButton" layoutX="163.0" layoutY="125.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="50.0" text="/" />
+      <Label fx:id="resultLabel" layoutX="130.0" layoutY="164.0" prefHeight="25.0" prefWidth="116.0" text="Label" textAlignment="CENTER" />
+   </children>
+</AnchorPane>
diff --git a/code/fractioncalculator/view/src/test/java/ru/unn/agile/fractioncalculator/view/FakeViewTests.java b/code/fractioncalculator/view/src/test/java/ru/unn/agile/fractioncalculator/view/FakeViewTests.java
new file mode 100644
index 000000000..b238e1200
--- /dev/null
+++ b/code/fractioncalculator/view/src/test/java/ru/unn/agile/fractioncalculator/view/FakeViewTests.java
@@ -0,0 +1,15 @@
+package ru.unn.agile.fractioncalculator.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+
+    @Ignore
+    @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/fractioncalculator/viewmodel/build.gradle b/code/fractioncalculator/viewmodel/build.gradle
new file mode 100644
index 000000000..07345ada9
--- /dev/null
+++ b/code/fractioncalculator/viewmodel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':fractioncalculator-model')
+}
\ No newline at end of file
diff --git a/code/fractioncalculator/viewmodel/src/main/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModel.java b/code/fractioncalculator/viewmodel/src/main/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModel.java
new file mode 100644
index 000000000..2b98dc0d5
--- /dev/null
+++ b/code/fractioncalculator/viewmodel/src/main/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModel.java
@@ -0,0 +1,109 @@
+package ru.unn.agile.fractioncalculator.viewmodel;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import ru.unn.agile.fractioncalculator.model.Fraction;
+import ru.unn.agile.fractioncalculator.model.FractionCalculator;
+
+
+public class ViewModel {
+
+    public static final String EMPTY_CALC_RESULT = "";
+
+    private StringProperty firstFraction = new SimpleStringProperty();
+    private StringProperty secondFraction = new SimpleStringProperty();
+    private StringProperty resultFraction = new SimpleStringProperty();
+
+    public StringProperty firstFractionProperty() {
+        return firstFraction;
+    }
+
+    public StringProperty secondFractionProperty() {
+        return secondFraction;
+    }
+
+    public StringProperty resultFractionProperty() {
+        return resultFraction;
+    }
+
+    public void setFirstFraction(final String fraction) {
+        firstFraction.set(fraction);
+    }
+
+    public void setSecondFraction(final String fraction) {
+        secondFraction.set(fraction);
+    }
+
+    public void calculateSum() {
+        if (isCorrectInputFractions()) {
+            Fraction firstFraction = stringToFraction(firstFractionProperty().get());
+            Fraction secondFraction = stringToFraction(secondFractionProperty().get());
+            Fraction res = FractionCalculator.reduce(
+                    FractionCalculator.sum(firstFraction, secondFraction));
+            resultFraction.set(res.toString());
+        } else {
+            resultFraction.set(EMPTY_CALC_RESULT);
+        }
+    }
+
+    public void calculateMinus() {
+        if (isCorrectInputFractions()) {
+            Fraction firstFraction = stringToFraction(firstFractionProperty().get());
+            Fraction secondFraction = stringToFraction(secondFractionProperty().get());
+            Fraction res = FractionCalculator.reduce(
+                    FractionCalculator.minus(firstFraction, secondFraction));
+            resultFraction.set(res.toString());
+        } else {
+            resultFraction.set(EMPTY_CALC_RESULT);
+        }
+    }
+
+    private boolean isCorrectInputFractions() {
+        if (firstFraction.get() != null && secondFraction.get() != null) {
+            Fraction firstFraction = stringToFraction(firstFractionProperty().get());
+            Fraction secondFraction = stringToFraction(secondFractionProperty().get());
+            if (firstFraction != null && secondFraction != null) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void calculateMultiple() {
+        if (isCorrectInputFractions()) {
+            Fraction firstFraction = stringToFraction(firstFractionProperty().get());
+            Fraction secondFraction = stringToFraction(secondFractionProperty().get());
+            Fraction res = FractionCalculator.reduce(
+                    FractionCalculator.multiple(firstFraction, secondFraction));
+            resultFraction.set(res.toString());
+        } else {
+            resultFraction.set(EMPTY_CALC_RESULT);
+        }
+    }
+
+    public void calculateDivide() {
+        if (isCorrectInputFractions()) {
+            Fraction firstFraction = stringToFraction(firstFractionProperty().get());
+            Fraction secondFraction = stringToFraction(secondFractionProperty().get());
+            Fraction res = FractionCalculator.reduce(
+                    FractionCalculator.divide(firstFraction, secondFraction));
+            resultFraction.set(res.toString());
+        } else {
+            resultFraction.set(EMPTY_CALC_RESULT);
+        }
+    }
+
+    private Fraction stringToFraction(final String fractionStr) {
+        String[] args = fractionStr.split(Fraction.FRACTION_DELIMITER);
+        if (args.length == 2) {
+            try {
+                int numerator = Integer.parseInt(args[0]);
+                int denominator = Integer.parseInt(args[1]);
+                return new Fraction(numerator, denominator);
+            } catch (IllegalArgumentException e) {
+                return null;
+            }
+        }
+        return null;
+    }
+}
diff --git a/code/fractioncalculator/viewmodel/src/test/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModelTest.java b/code/fractioncalculator/viewmodel/src/test/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModelTest.java
new file mode 100644
index 000000000..93f9f1a9d
--- /dev/null
+++ b/code/fractioncalculator/viewmodel/src/test/java/ru/unn/agile/fractioncalculator/viewmodel/ViewModelTest.java
@@ -0,0 +1,179 @@
+package ru.unn.agile.fractioncalculator.viewmodel;
+
+import javafx.beans.property.StringProperty;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTest {
+
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canGetFirstFraction() {
+        assertNotNull(viewModel.firstFractionProperty());
+    }
+
+    @Test
+    public void canGetSecondFraction() {
+        assertNotNull(viewModel.secondFractionProperty());
+    }
+
+    @Test
+    public void canGetEmptyResult() {
+        StringProperty res = viewModel.resultFractionProperty();
+        String actual = res.get();
+        assertNull(actual);
+    }
+
+    @Test
+    public void canSetFirstFraction() {
+        String expected = "11/22";
+        viewModel.setFirstFraction(expected);
+        String actual = viewModel.firstFractionProperty().get();
+
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canSetSecondFraction() {
+        String expected = "33/44";
+        viewModel.setSecondFraction(expected);
+        String actual = viewModel.secondFractionProperty().get();
+
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canSumFractions() {
+        String firstFractionStr = "10/20";
+        String secondFractionStr = "5/20";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "3/4";
+
+        viewModel.calculateSum();
+        String actual = viewModel.resultFractionProperty().get();
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canSumNegativeFractions() {
+        String firstFractionStr = "-10/20";
+        String secondFractionStr = "-5/20";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "-3/4";
+
+        viewModel.calculateSum();
+        String actual = viewModel.resultFractionProperty().get();
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canMinusFractions() {
+        String firstFractionStr = "10/20";
+        String secondFractionStr = "5/20";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "1/4";
+
+        viewModel.calculateMinus();
+        String actual = viewModel.resultFractionProperty().get();
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void cantMinusFractions() {
+        String firstFractionStr = "10/20";
+        String secondFractionStr = "qwe";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+
+        viewModel.calculateMinus();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(ViewModel.EMPTY_CALC_RESULT, res);
+    }
+
+    @Test
+    public void canMultipleFractions() {
+        String firstFractionStr = "2/3";
+        String secondFractionStr = "3/4";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "1/2";
+
+        viewModel.calculateMultiple();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(expected, res);
+    }
+
+    @Test
+    public void canMultipleNegativePositiveFractions() {
+        String firstFractionStr = "-2/3";
+        String secondFractionStr = "3/4";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "-1/2";
+
+        viewModel.calculateMultiple();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(expected, res);
+    }
+
+    @Test
+    public void canMultipleNegativeNegativeFractions() {
+        String firstFractionStr = "-2/3";
+        String secondFractionStr = "-3/4";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "1/2";
+
+        viewModel.calculateMultiple();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(expected, res);
+    }
+
+    @Test
+    public void canDivideFractions() {
+        String firstFractionStr = "2/3";
+        String secondFractionStr = "4/5";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+        String expected = "5/6";
+
+        viewModel.calculateDivide();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(expected, res);
+    }
+
+    @Test
+    public void cantDivideIncorrectFractions() {
+        String firstFractionStr = "2/0";
+        String secondFractionStr = "1/5";
+        viewModel.setFirstFraction(firstFractionStr);
+        viewModel.setSecondFraction(secondFractionStr);
+
+        viewModel.calculateDivide();
+        String res = viewModel.resultFractionProperty().get();
+
+        assertEquals(ViewModel.EMPTY_CALC_RESULT, res);
+    }
+}
diff --git a/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/Huffman.java b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/Huffman.java
new file mode 100644
index 000000000..f69b41907
--- /dev/null
+++ b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/Huffman.java
@@ -0,0 +1,70 @@
+package ru.unn.agile.huffman.model;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.PriorityQueue;
+import java.util.stream.Collectors;
+
+import ru.unn.agile.huffman.model.node.*;
+
+public final class Huffman {
+    private static String encodedString = "";
+    private static String decodedString = "";
+
+    public static final String CODE_0 = "0";
+    public static final String CODE_1 = "1";
+
+    private Huffman() { }
+
+    private static Map<Character, Node> buildAlphabet() {
+        Map<Character, Integer> numberOfAppearances = new HashMap<>();
+        Map<Character, Node> alphabet = new HashMap<>();
+
+        decodedString.chars().forEach(charElem -> {
+            if (numberOfAppearances.containsKey((char) charElem)) {
+                numberOfAppearances.put((char) charElem,
+                        numberOfAppearances.get((char) charElem) + 1);
+            } else {
+                numberOfAppearances.put((char) charElem, 1);
+            }
+        });
+
+        numberOfAppearances.entrySet().forEach(entry -> {
+            alphabet.put(entry.getKey(), new Node(entry.getValue()));
+        });
+
+        return alphabet;
+    }
+
+    public static String encodeString(final String str) {
+        decodedString = str;
+        if ("".equals(decodedString)) {
+            encodedString = "";
+        } else {
+            Map<Character, Node> alphabet = buildAlphabet();
+
+            PriorityQueue<Node> sortedAlphabet = new PriorityQueue<>();
+
+            sortedAlphabet.addAll(alphabet.values().stream().collect(Collectors.toList()));
+
+            while (sortedAlphabet.size() > 1) {
+                Node first = sortedAlphabet.poll();
+                Node second = sortedAlphabet.poll();
+                sortedAlphabet.add(new InternalNode(first, second));
+            }
+
+            if (alphabet.size() == 1) {
+                sortedAlphabet.poll().buildCode(CODE_0);
+            } else {
+                sortedAlphabet.poll().buildCode("");
+            }
+
+            encodedString = decodedString
+                    .chars()
+                    .mapToObj(ch -> alphabet.get((char) ch).getCode())
+                    .collect(Collectors.joining(""));
+        }
+
+        return encodedString;
+    }
+}
diff --git a/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/InternalNode.java b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/InternalNode.java
new file mode 100644
index 000000000..7020dad78
--- /dev/null
+++ b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/InternalNode.java
@@ -0,0 +1,21 @@
+package ru.unn.agile.huffman.model.node;
+
+import ru.unn.agile.huffman.model.Huffman;
+
+public class InternalNode extends Node {
+    private final Node left;
+    private final Node right;
+
+    public InternalNode(final Node left, final Node right) {
+        super(left.getSum() + right.getSum());
+        this.left = left;
+        this.right = right;
+    }
+
+    @Override
+    public void buildCode(final String code) {
+        super.buildCode(code);
+        left.buildCode(code + Huffman.CODE_0);
+        right.buildCode(code + Huffman.CODE_1);
+    }
+}
diff --git a/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/Node.java b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/Node.java
new file mode 100644
index 000000000..b94bd2cf9
--- /dev/null
+++ b/code/huffman/Model/src/main/java/ru/unn/agile/huffman/model/node/Node.java
@@ -0,0 +1,27 @@
+package ru.unn.agile.huffman.model.node;
+
+public class Node implements Comparable<Node> {
+    private final int sum;
+    private String code;
+
+    public Node(final int sum) {
+        this.sum = sum;
+    }
+
+    public String getCode() {
+        return this.code;
+    }
+
+    @Override
+    public int compareTo(final Node o) {
+        return Integer.compare(this.sum, o.sum);
+    }
+
+    public void buildCode(final String code) {
+        this.code = code;
+    }
+
+    public int getSum() {
+        return sum;
+    }
+}
diff --git a/code/huffman/Model/src/test/java/ru/unn/agile/huffman/model/HuffmanTest.java b/code/huffman/Model/src/test/java/ru/unn/agile/huffman/model/HuffmanTest.java
new file mode 100644
index 000000000..55021dfa7
--- /dev/null
+++ b/code/huffman/Model/src/test/java/ru/unn/agile/huffman/model/HuffmanTest.java
@@ -0,0 +1,87 @@
+package ru.unn.agile.huffman.model;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class HuffmanTest {
+    @Test
+    public void encodedStringIsEmptyIfHuffmanCreatedWithEmptyString() {
+        assertTrue(Huffman.encodeString("").equals(""));
+    }
+
+    @Test
+    public void encodedStringIsCorrectWith1AlphabeticSymbolInput() {
+        assertEquals(Huffman.encodeString("a"), "0");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWith2AlphabeticSymbolsInput() {
+        assertEquals(Huffman.encodeString("ab"), "01");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithRepeatedAlphabeticSymbolInput() {
+        assertEquals(Huffman.encodeString("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"),
+        "000000000000000000000000000000");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWith10DifferentAlphabeticSymbolsInput() {
+        assertEquals(Huffman.encodeString("abhfklopmn"), "0010111011110010100110111001111000");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWith10CoupleSymbolsInput() {
+        assertEquals(Huffman.encodeString("ababababab"), "0101010101");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWith10TripletSymbolsInput() {
+        assertEquals(Huffman.encodeString("abcabcabcabcabc"), "1001110011100111001110011");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithAlphabeticSymbolsAndWhitespaceInput() {
+        assertEquals(Huffman.encodeString("hello world"), "01011101010110000111111000110011");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithTheSameUpperAndLowerSymbolsInput() {
+        assertEquals(Huffman.encodeString("Ww"), "01");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithNumericSymbolsInput() {
+        assertEquals(Huffman.encodeString("1029384756"), "0011100011110111100001011111010100");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithNumericAndAlphabeticSymbolsInput() {
+        assertEquals(Huffman.encodeString("111aaa 9e9e9dm  ke3mm 2333 004040404"),
+            "111011101110000000000101110011111100111111001101"
+            + "00011011011101111111011001001101110110011011011101100100010100010100010100010");
+    }
+
+    @Test
+    public void encodedStringIsCorrectWithNumericAndAlphabeticAndSpecialSymbolsInput() {
+        assertEquals(Huffman.encodeString("!!! dddd ?? dd ? !! ddd333 99999UUUUUcwqdfjdkpw"),
+        "0100100101101010101011001110111110101011001111100"
+        + "100101101010100110011001101100010010010010010000000000000001"
+        + "1110011101111001101111011111101011111111100011101");
+    }
+
+    @Test
+    public void canCompareTwoTheSameStringsWithTheSameAlphabets() {
+        String str1 = Huffman.encodeString("170995o0unn");
+        String str2 = Huffman.encodeString("170995o0unn");
+        assertTrue(str1.equals(str2));
+    }
+
+    @Test
+    public void decodedStringsAreDifferentForTwoDifferentStringsWithDifferentAlphabets() {
+        String str1 = Huffman.encodeString("abbb");
+        String str2 = Huffman.encodeString("cabbb");
+        assertFalse(str1.equals(str2));
+    }
+}
diff --git a/code/huffman/View/build.gradle b/code/huffman/View/build.gradle
new file mode 100644
index 000000000..1fa00f3fe
--- /dev/null
+++ b/code/huffman/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.huffman.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':huffman-ViewModel')
+}
diff --git a/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Huffman.java b/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Huffman.java
new file mode 100644
index 000000000..35f991c7f
--- /dev/null
+++ b/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Huffman.java
@@ -0,0 +1,30 @@
+package ru.unn.agile.huffman.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+
+import javafx.scene.control.TextField;
+import ru.unn.agile.huffman.viewmodel.HuffmanViewModel;
+
+public class Huffman {
+    @FXML
+    private HuffmanViewModel huffmanViewModel;
+    @FXML
+    private TextField textFieldRef;
+    @FXML
+    private Label labelEncode;
+    @FXML
+    private Label labelDecode;
+    @FXML
+    private Button buttonStart;
+
+    @FXML
+    void initialize() {
+        textFieldRef.textProperty().bindBidirectional(huffmanViewModel.getInput());
+        labelEncode.textProperty().bindBidirectional(huffmanViewModel.getOutputEncode());
+        labelDecode.textProperty().bindBidirectional(huffmanViewModel.getOutputDecode());
+        buttonStart.setOnAction(event -> huffmanViewModel.startEncodeAndDecode());
+        buttonStart.setCancelButton(huffmanViewModel.getButtonStartEnabled());
+    }
+}
diff --git a/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Main.java b/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Main.java
new file mode 100644
index 000000000..14a923ca8
--- /dev/null
+++ b/code/huffman/View/src/main/java/ru/unn/agile/huffman/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.huffman.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("Huffman.fxml"));
+        primaryStage.setTitle("Huffman");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/huffman/View/src/main/resources/ru/unn/agile/huffman/view/Huffman.fxml b/code/huffman/View/src/main/resources/ru/unn/agile/huffman/view/Huffman.fxml
new file mode 100644
index 000000000..c5c0331a5
--- /dev/null
+++ b/code/huffman/View/src/main/resources/ru/unn/agile/huffman/view/Huffman.fxml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.text.Font?>
+
+<?import ru.unn.agile.huffman.viewmodel.HuffmanViewModel?>
+
+<AnchorPane prefHeight="384.0" prefWidth="445.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.huffman.view.Huffman">
+   <fx:define>
+      <HuffmanViewModel fx:id="huffmanViewModel" />
+   </fx:define>
+   <children>
+      <Button fx:id="buttonStart" alignment="CENTER" layoutX="151.0" layoutY="292.0" mnemonicParsing="false" prefHeight="77.0" prefWidth="144.0" text="Start">
+         <font>
+            <Font size="36.0" />
+         </font></Button>
+      <Label fx:id="labelEncode" layoutX="14.0" layoutY="99.0" prefHeight="56.0" prefWidth="418.0" text="Encode" textAlignment="CENTER" wrapText="true" />
+      <TextField fx:id="textFieldRef" accessibleRoleDescription="d" layoutX="14.0" layoutY="14.0" prefHeight="47.0" prefWidth="418.0" promptText="Ref" />
+      <Label fx:id="labelDecode" layoutX="14.0" layoutY="192.0" prefHeight="56.0" prefWidth="418.0" text="Decode" />
+      <Label layoutX="14.0" layoutY="82.0" prefHeight="17.0" prefWidth="418.0" text="Encode:" />
+      <Label layoutX="14.0" layoutY="175.0" prefHeight="17.0" prefWidth="418.0" text="Decode:" />
+   </children>
+</AnchorPane>
diff --git a/code/huffman/ViewModel/build.gradle b/code/huffman/ViewModel/build.gradle
new file mode 100644
index 000000000..1c6848dda
--- /dev/null
+++ b/code/huffman/ViewModel/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.huffman.viewmodel.HuffmanViewModel'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':huffman-Model')
+}
diff --git a/code/huffman/ViewModel/src/main/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModel.java b/code/huffman/ViewModel/src/main/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModel.java
new file mode 100644
index 000000000..002144262
--- /dev/null
+++ b/code/huffman/ViewModel/src/main/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModel.java
@@ -0,0 +1,45 @@
+package ru.unn.agile.huffman.viewmodel;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+
+import ru.unn.agile.huffman.model.Huffman;
+
+public class HuffmanViewModel {
+    private StringProperty input = new SimpleStringProperty();
+    private StringProperty outputEncode = new SimpleStringProperty();
+    private StringProperty outputDecode = new SimpleStringProperty();
+    private boolean enabledButtonStart = true;
+
+    public HuffmanViewModel() {
+        input.set("Reference string");
+        outputEncode.set("Encode");
+        outputDecode.set("Decode");
+    }
+
+    public StringProperty getInput() {
+        return input;
+    }
+
+    public void setInput(final String str) {
+        input.set(str);
+    }
+
+    public StringProperty getOutputEncode() {
+        return outputEncode;
+    }
+
+    public StringProperty getOutputDecode() {
+        return outputDecode;
+    }
+
+    public void startEncodeAndDecode() {
+        String inputString = input.get();
+        outputEncode.set(Huffman.encodeString(inputString));
+        outputDecode.set(inputString);
+    }
+
+    public boolean getButtonStartEnabled() {
+        return enabledButtonStart;
+    }
+}
diff --git a/code/huffman/ViewModel/src/test/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModelTest.java b/code/huffman/ViewModel/src/test/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModelTest.java
new file mode 100644
index 000000000..7d5413cb5
--- /dev/null
+++ b/code/huffman/ViewModel/src/test/java/ru/unn/agile/huffman/viewmodel/HuffmanViewModelTest.java
@@ -0,0 +1,57 @@
+package ru.unn.agile.huffman.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class HuffmanViewModelTest {
+    private HuffmanViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new HuffmanViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void checkRefLabelTextByDefaultText() {
+        assertEquals("Reference string", viewModel.getInput().get());
+    }
+
+    @Test
+    public void checkEncodeLabelTextByDefaultText() {
+        assertEquals("Encode", viewModel.getOutputEncode().get());
+    }
+
+    @Test
+    public void checkDecodeLabelTextByDefaultText() {
+        assertEquals("Decode", viewModel.getOutputDecode().get());
+    }
+
+    @Test
+    public void checkEncodeLabelAfterPushStartWithZeroString() {
+        viewModel.setInput("");
+        viewModel.startEncodeAndDecode();
+        assertEquals("", viewModel.getOutputEncode().get());
+    }
+
+    @Test
+    public void checkEncodeLabelAfterPushStartWithString() {
+        viewModel.setInput("ab");
+        viewModel.startEncodeAndDecode();
+        assertEquals("01", viewModel.getOutputEncode().get());
+    }
+
+    @Test
+    public void checkDecodeLabelAfterPushStartWithZeroString() {
+        viewModel.setInput("");
+        viewModel.startEncodeAndDecode();
+        assertEquals("", viewModel.getOutputDecode().get());
+    }
+}
diff --git a/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/AntonVlasovTest.java b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/AntonVlasovTest.java
new file mode 100644
index 000000000..cb0b4e104
--- /dev/null
+++ b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/AntonVlasovTest.java
@@ -0,0 +1,29 @@
+package ru.unn.agile.ComplexNumber.Model;
+
+import org.junit.Test;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+
+import static org.junit.Assert.assertEquals;
+
+public class AntonVlasovTest {
+    @Test(expected = NumberFormatException.class)
+    public void cannotCreateNumberWithIncorrectRealPart() {
+        var incorrectRealPart = "world";
+        var correctImaginaryPart = "1";
+        var number = new ComplexNumber(incorrectRealPart, correctImaginaryPart);
+    }
+
+    @Test(expected = NumberFormatException.class)
+    public void cannotCreateNumberWithIncorrectImaginaryPart() {
+        var correctRealPart = "1";
+        var incorrectImaginaryPart = "hello";
+        var number = new ComplexNumber(correctRealPart, incorrectImaginaryPart);
+    }
+
+    @Test
+    public void canCompareComplexNumbersWithDifferentInitializationTypes() {
+        var number1 = new ComplexNumber("1", "1");
+        var number2 = new ComplexNumber(1, 1);
+        assertEquals(number1, number2);
+    }
+}
diff --git a/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DariaFedorovaTest.java b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DariaFedorovaTest.java
new file mode 100644
index 000000000..f793acb90
--- /dev/null
+++ b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DariaFedorovaTest.java
@@ -0,0 +1,38 @@
+package ru.unn.agile.ComplexNumber.Model;
+
+import org.junit.Test;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+
+import static org.junit.Assert.assertEquals;
+
+public class DariaFedorovaTest {
+    @Test
+    public void canAddComplexNumbers() {
+        ComplexNumber number1 = new ComplexNumber(2.0, 1.0);
+        ComplexNumber number2 = new ComplexNumber(1.0, 1.0);
+
+        ComplexNumber resultNumber = number1.add(number2);
+
+        assertEquals(new ComplexNumber(3.0, 2.0), resultNumber);
+    }
+
+    @Test
+    public void canAddNegativeComplexNumbers() {
+        ComplexNumber number1 = new ComplexNumber(-2.0, -1.0);
+        ComplexNumber number2 = new ComplexNumber(-1.0, -1.0);
+
+        ComplexNumber resultNumber = number1.add(number2);
+
+        assertEquals(new ComplexNumber(-3.0, -2.0), resultNumber);
+    }
+
+    @Test
+    public void canAddZeroComplexNumbers() {
+        ComplexNumber number1 = new ComplexNumber(-2.0, 1.0);
+        ComplexNumber number2 = new ComplexNumber(0.0, 0.0);
+
+        ComplexNumber resultNumber = number1.add(number2);
+
+        assertEquals(new ComplexNumber(-2.0, 1.0), resultNumber);
+    }
+}
diff --git a/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DmitriyGrishinTest.java b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DmitriyGrishinTest.java
new file mode 100644
index 000000000..5420df0af
--- /dev/null
+++ b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/DmitriyGrishinTest.java
@@ -0,0 +1,33 @@
+package ru.unn.agile.ComplexNumber.Model;
+
+import org.junit.Test;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+public class DmitriyGrishinTest {
+
+    @Test
+    public void canCreateComplexNumberBasedOnNumbers() {
+        var realPartNumber = 1.2;
+        var imaginaryPartNumber = 3.4;
+        ComplexNumber complexNumber = new ComplexNumber(realPartNumber, imaginaryPartNumber);
+        assertNotNull(complexNumber);
+    }
+
+    @Test
+    public void canCreateComplexNumberBasedOnStringPresentation() {
+        var realPartString = "1.2";
+        var imaginaryPartString = "3.4";
+        ComplexNumber complexNumber = new ComplexNumber(realPartString, imaginaryPartString);
+        assertEquals(new ComplexNumber(1.2, 3.4), complexNumber);
+    }
+
+    @Test
+    public void canGetStringPresentation() {
+        ComplexNumber complexNumber = new ComplexNumber(1.2, 3.4);
+        var expectedString = "1.2 + 3.4i";
+        assertEquals(expectedString, complexNumber.toString());
+    }
+}
diff --git a/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/PopkovKirillTest.java b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/PopkovKirillTest.java
new file mode 100644
index 000000000..0225358c8
--- /dev/null
+++ b/code/korniakov-kirill-lab1/src/test/java/ru/unn/agile/ComplexNumber/Model/PopkovKirillTest.java
@@ -0,0 +1,63 @@
+package ru.unn.agile.ComplexNumber.Model;
+
+import org.junit.Test;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+
+import static org.junit.Assert.*;
+
+public class PopkovKirillTest {
+    private final double delta = 0.001;
+
+    @Test
+    public void canInitWithEmptyConstructor() {
+        ComplexNumber complexNumber = new ComplexNumber();
+
+        assertEquals("0.0 + 0.0i", complexNumber.toString());
+    }
+
+    @Test
+    public void canGetRealPart() {
+        ComplexNumber complexNumber = new ComplexNumber(1, 2);
+
+        assertEquals(1.0, complexNumber.getReal(), delta);
+    }
+
+    @Test
+    public void canGetImaginaryPart() {
+        ComplexNumber complexNumber = new ComplexNumber(1, 2);
+
+        assertEquals(2.0, complexNumber.getImaginary(), delta);
+    }
+
+    @Test
+    public void canGetRealPartWithStringInConstructor() {
+        ComplexNumber complexNumber = new ComplexNumber("1", "2");
+
+        assertEquals(1.0, complexNumber.getReal(), delta);
+    }
+
+    @Test
+    public void canGetImaginaryPartWithStringInConstructor() {
+        ComplexNumber complexNumber = new ComplexNumber("1", "2");
+
+        assertEquals(2.0, complexNumber.getImaginary(), delta);
+    }
+
+    @Test
+    public void canAddComplexNumbers() {
+        ComplexNumber complexNumber1 = new ComplexNumber("1", "2");
+        ComplexNumber complexNumber2 = new ComplexNumber("2", "3");
+        ComplexNumber complexNumber3 = complexNumber1.add(complexNumber2);
+
+        assertEquals(complexNumber3, new ComplexNumber(3, 5));
+    }
+
+    @Test
+    public void canMultiplyComplexNumbers() {
+        ComplexNumber complexNumber1 = new ComplexNumber("1", "2");
+        ComplexNumber complexNumber2 = new ComplexNumber("2", "-3");
+        ComplexNumber complexNumber3 = complexNumber1.multiply(complexNumber2);
+
+        assertEquals(complexNumber3, new ComplexNumber(8, 1));
+    }
+}
diff --git a/code/lab1-tdd-vector_operations/src/main/java/ru/unn/agile/vectors/model/Vector.java b/code/lab1-tdd-vector_operations/src/main/java/ru/unn/agile/vectors/model/Vector.java
new file mode 100644
index 000000000..31296eaea
--- /dev/null
+++ b/code/lab1-tdd-vector_operations/src/main/java/ru/unn/agile/vectors/model/Vector.java
@@ -0,0 +1,92 @@
+package ru.unn.agile.vectors.model;
+
+public class Vector {
+    private double x;
+    private double y;
+    private double z;
+
+    public Vector(final double x0, final double y0, final double z0) {
+        this.x = x0;
+        this.y = y0;
+        this.z = z0;
+    }
+
+    @Override
+    public boolean equals(final Object obj) {
+        final double eps = 0.01;
+        if (obj == this) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (!(getClass() == obj.getClass())) {
+            return false;
+        }
+        Vector tmp = (Vector) obj;
+        return Math.abs(tmp.x - this.x) < eps
+                && Math.abs(tmp.y - this.y) < eps
+                && Math.abs(tmp.z - this.z) < eps;
+    }
+
+    @Override
+    public int hashCode() {
+        return super.hashCode();
+    }
+
+    public static boolean isEqual(final Vector v1, final Vector v2) {
+        return v1.x == v2.x && v1.y == v2.y && v1.z == v2.z;
+    }
+
+    public static double getLengthNorm(final Vector v1) {
+        double len = 0;
+        double sum = Math.pow(v1.x, 2) + Math.pow(v1.y, 2) + Math.pow(v1.z, 2);
+        len = Math.sqrt(sum);
+        return len;
+    }
+
+    public static boolean isOrthogonal(final Vector v1, final Vector v2) {
+        double cosAlpha = (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z)
+                            / (getLengthNorm(v1) * getLengthNorm(v2));
+        return ((cosAlpha) == 0);
+    }
+
+    public static Vector getSum(final Vector v1, final Vector v2) {
+        Vector res = new Vector(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);
+        return res;
+    }
+
+    public static Vector getDiff(final Vector v1, final Vector v2) {
+        Vector res = new Vector(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
+        return res;
+    }
+
+    public static double getScalarMult(final Vector v1, final Vector v2) {
+        return (v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z);
+    }
+
+    public static Vector getVectMult(final  Vector v1, final Vector v2) {
+        double newX = v1.y * v2.z - v1.z * v2.y;
+        double newY = v1.x * v2.z - v1.z * v2.x;
+        double newZ = v1.x * v2.y - v1.y * v2.x;
+        Vector res = new Vector(newX, newY, newZ);
+        return res;
+    }
+
+    public static boolean isComplanar(final Vector v1, final Vector v2) {
+        Vector res = getVectMult(v1, v2);
+        return new Vector(0, 0, 0).equals(res);
+    }
+
+    public double getX() {
+        return x;
+    }
+
+    public double getY() {
+        return y;
+    }
+
+    public double getZ() {
+        return z;
+    }
+}
diff --git a/code/lab1-tdd-vector_operations/src/test/java/ru/unn/agile/vectors/VectorTest.java b/code/lab1-tdd-vector_operations/src/test/java/ru/unn/agile/vectors/VectorTest.java
new file mode 100644
index 000000000..6a4f6e5bf
--- /dev/null
+++ b/code/lab1-tdd-vector_operations/src/test/java/ru/unn/agile/vectors/VectorTest.java
@@ -0,0 +1,210 @@
+package ru.unn.agile.vectors;
+
+import org.junit.Test;
+import ru.unn.agile.vectors.model.Vector;
+
+import static junit.framework.TestCase.assertEquals;
+import static org.junit.Assert.*;
+
+public class VectorTest {
+
+    @Test
+    public void canCreateVectorWithPositiveCoordinates() {
+        Vector vect = new Vector(1, 2, 3);
+        assertNotNull(vect);
+    }
+
+    @Test
+    public void canCreateVectorWithNegativeCoordinates() {
+        Vector vect = new Vector(-1, -2, -3);
+        assertNotNull(vect);
+    }
+
+    @Test
+    public void canCreateTwoEqualVectorsWithPositiveCoordinates() {
+        Vector v1 = new Vector(1, 2, 3);
+        Vector v2 = new Vector(1, 2, 3);
+        boolean tmp = Vector.isEqual(v2, v1);
+        assertTrue(tmp);
+    }
+
+    @Test
+    public void canCreateTwoEqualVectorsWithNegativeCoordinates() {
+        Vector v1 = new Vector(-1, -2, -3);
+        Vector v2 = new Vector(-1, -2, -3);
+        boolean tmp = Vector.isEqual(v2, v1);
+        assertTrue(tmp);
+    }
+
+    @Test
+    public void canFindTheLengthNormWithPositiveCoordinates() {
+        Vector vect = new Vector(1, 2, 3);
+        double tmp = 3.7416573867739413;
+        double len = Vector.getLengthNorm(vect);
+        assertEquals(len, tmp);
+    }
+
+    @Test
+    public void canFindTheLengthNormWithNegativeCoordinates() {
+        Vector vect = new Vector(-1, -2, -3);
+        double tmp = 3.7416573867739413;
+        double len = Vector.getLengthNorm(vect);
+        assertEquals(len, tmp);
+    }
+
+    @Test
+    public void canCheckIsOrtogonal() {
+        Vector v1 = new Vector(0, 1, 0);
+        Vector v2 = new Vector(0, 0, 1);
+        boolean tmp = Vector.isOrthogonal(v2, v1);
+        assertTrue(tmp);
+    }
+
+    @Test
+    public void canAddTwoVectorsWithPositiveCoordinates() {
+        Vector v1 = new Vector(1, 1, 1);
+        Vector v2 = new Vector(2, 2, 2);
+        Vector actRes = new Vector(3, 3, 3);
+        Vector expRes = Vector.getSum(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canAddTwoVectorsWithNegativeCoordinates() {
+        Vector v1 = new Vector(-1, -1, -1);
+        Vector v2 = new Vector(-2, -2, -2);
+        Vector actRes = new Vector(-3, -3, -3);
+        Vector expRes = Vector.getSum(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canAddTwoVectorsWithDifferentSignCoordinates() {
+        Vector v1 = new Vector(-1, 1, -1);
+        Vector v2 = new Vector(2, -2, 2);
+        Vector actRes = new Vector(1, -1, 1);
+        Vector expRes = Vector.getSum(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDifferenceTwoVectorsWithPositiveCoordinates() {
+        Vector v1 = new Vector(1, 1, 1);
+        Vector v2 = new Vector(2, 2, 2);
+        Vector actRes = new Vector(1, 1, 1);
+        Vector expRes = Vector.getDiff(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDifferenceTwoVectorsWithNegativeCoordinates() {
+        Vector v1 = new Vector(-1, -1, -1);
+        Vector v2 = new Vector(-2, -2, -2);
+        Vector actRes = new Vector(-1, -1, -1);
+        Vector expRes = Vector.getDiff(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDifferenceTwoVectorsWithDifferentSignCoordinates() {
+        Vector v1 = new Vector(-1, 1, -1);
+        Vector v2 = new Vector(2, -2, 2);
+        Vector actRes = new Vector(3, -3, 3);
+        Vector expRes = Vector.getDiff(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDoScalarMulterenceTwoVectorsWithPositiveCoordinates() {
+        Vector v1 = new Vector(1, 1, 1);
+        Vector v2 = new Vector(2, 2, 2);
+        double actRes = 6;
+        double expRes = Vector.getScalarMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test()
+    public void canDoScalarMultTwoVectorsWithNegativeCoordinates() {
+        Vector v1 = new Vector(-1, -1, -1);
+        Vector v2 = new Vector(-2, -2, -2);
+        double actRes = 6;
+        double expRes = Vector.getScalarMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDoScalarMultTwoVectorsWithDifferentSignCoordinates() {
+        Vector v1 = new Vector(-1, 1, 1);
+        Vector v2 = new Vector(2, -2, 2);
+        double actRes = -2;
+        double expRes = Vector.getScalarMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDoVectMulterenceTwoVectorsWithPositiveCoordinates() {
+        Vector v1 = new Vector(1, 1, 1);
+        Vector v2 = new Vector(2, 2, 2);
+        Vector actRes = new Vector(0, 0, 0);
+        Vector expRes = Vector.getVectMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDoVectMultTwoVectorsWithNegativeCoordinates() {
+        Vector v1 = new Vector(-1, -1, -1);
+        Vector v2 = new Vector(-2, -2, -2);
+        Vector actRes = new Vector(0, 0, 0);
+        Vector expRes = Vector.getVectMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canDoVectMultTwoVectorsWithDifferentSignCoordinates() {
+        Vector v1 = new Vector(-1, 1, 1);
+        Vector v2 = new Vector(2, -2, 2);
+        Vector actRes = new Vector(-4, 4, 0);
+        Vector expRes = Vector.getVectMult(v2, v1);
+        assertEquals(expRes, actRes);
+    }
+
+    @Test
+    public void canCheckIsComplonarWithComplonarVectors() {
+        Vector v1 = new Vector(1, 1, 1);
+        Vector v2 = new Vector(2, 2, 2);
+        boolean tmp = Vector.isComplanar(v2, v1);
+        assertTrue(tmp);
+    }
+
+    @Test
+    public void canCheckIsComplonarWithNotComplonarVectors() {
+        Vector v1 = new Vector(-1, 1, 1);
+        Vector v2 = new Vector(2, -2, 2);
+        boolean tmp = Vector.isComplanar(v2, v1);
+        assertFalse(tmp);
+    }
+
+    @Test
+    public void canGetX() {
+        Vector v1 = new Vector(-1, 1, 1);
+        double actualRes = v1.getX();
+        double expectedRes = -1.0;
+        assertEquals(actualRes, expectedRes);
+    }
+
+    @Test
+    public void canGetY() {
+        Vector v1 = new Vector(-1, 1, 1);
+        double actualRes = v1.getY();
+        double expectedRes = 1.0;
+        assertEquals(actualRes, expectedRes);
+    }
+
+    @Test
+    public void canGetZ() {
+        Vector v1 = new Vector(-1, 1, 1);
+        double actualRes = v1.getZ();
+        double expectedRes = 1.0;
+        assertEquals(actualRes, expectedRes);
+    }
+}
diff --git a/code/length-converter/Infrastructure/build.gradle b/code/length-converter/Infrastructure/build.gradle
new file mode 100644
index 000000000..82198b924
--- /dev/null
+++ b/code/length-converter/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':length-converter-ViewModel')
+    testCompile project(':length-converter-ViewModel').sourceSets.test.output
+}
diff --git a/code/length-converter/Infrastructure/src/main/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLogger.java b/code/length-converter/Infrastructure/src/main/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLogger.java
new file mode 100644
index 000000000..a2d3a9d9c
--- /dev/null
+++ b/code/length-converter/Infrastructure/src/main/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLogger.java
@@ -0,0 +1,68 @@
+package ru.unn.agile.converter.infrastructure;
+
+import ru.unn.agile.converter.viewmodel.LengthConverterILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class LengthConverterTxtLogger implements LengthConverterILogger {
+    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter logWriter;
+    private final String logFileName;
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    public LengthConverterTxtLogger(final String logFileName) {
+        this.logFileName = logFileName;
+
+        BufferedWriter initialWriter = null;
+        try {
+            initialWriter = new BufferedWriter(new FileWriter(logFileName));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        logWriter = initialWriter;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            logWriter.write(now() + " > " + s);
+            logWriter.newLine();
+            logWriter.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader reader;
+        ArrayList<String> log = new ArrayList<String>();
+        try {
+            reader = new BufferedReader(new FileReader(logFileName));
+            String lineFromLog = reader.readLine();
+
+            while (lineFromLog != null) {
+                log.add(lineFromLog);
+                lineFromLog = reader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+
+        return log;
+    }
+
+}
diff --git a/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterRegexMatcher.java b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterRegexMatcher.java
new file mode 100644
index 000000000..e6dd4987d
--- /dev/null
+++ b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterRegexMatcher.java
@@ -0,0 +1,29 @@
+package ru.unn.agile.converter.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class LengthConverterRegexMatcher extends BaseMatcher {
+    private final String regex;
+
+    public LengthConverterRegexMatcher(final String regex) {
+        this.regex = regex;
+    }
+
+    public void describeTo(final Description description) {
+        description.appendText("matches regex = ");
+        description.appendText(regex);
+    }
+
+    public boolean matches(final Object o) {
+        return ((String) o).matches(regex);
+    }
+
+    public static Matcher<? super String> matchesPattern(final String regex) {
+        LengthConverterRegexMatcher matcher = new LengthConverterRegexMatcher(regex);
+        @SuppressWarnings (value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>)   matcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLoggerTests.java b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLoggerTests.java
new file mode 100644
index 000000000..c9cc46caa
--- /dev/null
+++ b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/LengthConverterTxtLoggerTests.java
@@ -0,0 +1,72 @@
+package ru.unn.agile.converter.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.fail;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static ru.unn.agile.converter.infrastructure.LengthConverterRegexMatcher.matchesPattern;
+
+public class LengthConverterTxtLoggerTests {
+    private static final String LOG_FILE_NAME = "./TxtLogger_Tests-lab3.log";
+    private LengthConverterTxtLogger logger;
+
+    @Before
+    public void setUp() {
+        logger = new LengthConverterTxtLogger(LOG_FILE_NAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(logger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(LOG_FILE_NAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + LOG_FILE_NAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteSingleLogMessage() {
+        String testMessage = "Test message";
+
+        logger.log(testMessage);
+
+        String message = logger.getLog().get(0);
+        assertThat(message, matchesPattern(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void canWriteMoreThenOneLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        logger.log(messages[0]);
+        logger.log(messages[1]);
+
+        List<String> actualMessages = logger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertThat(actualMessages.get(i), matchesPattern(".*" + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void doesLogFileContainDateAndTime() {
+        String message = "Test message";
+
+        logger.log(message);
+
+        String messageFromLog = logger.getLog().get(0);
+        assertThat(messageFromLog, matchesPattern(
+                "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*"));
+    }
+}
diff --git a/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/ViewModelWithTxtLoggerTests.java b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..9d7243996
--- /dev/null
+++ b/code/length-converter/Infrastructure/src/test/java/ru/unn/agile/converter/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.converter.infrastructure;
+
+import ru.unn.agile.converter.viewmodel.LengthConverterViewModel;
+import ru.unn.agile.converter.viewmodel.LengthConverterViewModelTests;
+
+public class ViewModelWithTxtLoggerTests extends LengthConverterViewModelTests {
+    @Override
+    public void setUp() {
+        LengthConverterTxtLogger realLogger =
+            new LengthConverterTxtLogger("./ViewModel_with_TxtLogger_Tests-lab3.log");
+        super.setExternalViewModel(new LengthConverterViewModel(realLogger));
+    }
+}
diff --git a/code/length-converter/View/build.gradle b/code/length-converter/View/build.gradle
index b9a8ff4c5..971770335 100644
--- a/code/length-converter/View/build.gradle
+++ b/code/length-converter/View/build.gradle
@@ -14,4 +14,5 @@ javafx {
 
 dependencies {
     compile project(':length-converter-ViewModel')
+    compile project(':length-converter-Infrastructure')
 }
diff --git a/code/length-converter/View/src/main/java/ru/unn/agile/converter/view/LengthConverterView.java b/code/length-converter/View/src/main/java/ru/unn/agile/converter/view/LengthConverterView.java
index 253d7d6d1..c7ad9db6d 100644
--- a/code/length-converter/View/src/main/java/ru/unn/agile/converter/view/LengthConverterView.java
+++ b/code/length-converter/View/src/main/java/ru/unn/agile/converter/view/LengthConverterView.java
@@ -7,6 +7,7 @@
 import javafx.scene.control.TextField;
 import ru.unn.agile.converter.model.LengthType;
 import ru.unn.agile.converter.viewmodel.LengthConverterViewModel;
+import ru.unn.agile.converter.infrastructure.LengthConverterTxtLogger;
 
 public class LengthConverterView {
     @FXML
@@ -28,7 +29,7 @@
 
     @FXML
     void initialize() {
-
+        viewModel.setLogger(new LengthConverterTxtLogger("./TxtLogger-lab3.log"));
         txtInput.textProperty().bindBidirectional(viewModel.getInput());
         lblError.textProperty().bindBidirectional(viewModel.getError());
         txtOutput.textProperty().bindBidirectional(viewModel.getOutput());
diff --git a/code/length-converter/View/src/main/resources/ru/unn/agile/converter/view/LengthConverter.fxml b/code/length-converter/View/src/main/resources/ru/unn/agile/converter/view/LengthConverter.fxml
index 8aa3c3e46..cdae34c8b 100644
--- a/code/length-converter/View/src/main/resources/ru/unn/agile/converter/view/LengthConverter.fxml
+++ b/code/length-converter/View/src/main/resources/ru/unn/agile/converter/view/LengthConverter.fxml
@@ -6,7 +6,7 @@
 <?import javafx.scene.text.*?>
 
 <?import ru.unn.agile.converter.viewmodel.LengthConverterViewModel?>
-<AnchorPane prefHeight="122.0" prefWidth="368.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.converter.view.LengthConverterView">
+<AnchorPane prefHeight="400.0" prefWidth="400.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.converter.view.LengthConverterView">
    <fx:define>
       <LengthConverterViewModel fx:id="viewModel" />
    </fx:define>
@@ -28,4 +28,5 @@
       <padding>
          <Insets bottom="-7.0" top="-7.0" />
       </padding></Button>
+   <TextArea fx:id="areaLog" text="${viewModel.logs}" layoutX="10.0" layoutY="150.0" editable="false" prefHeight="200.0" prefWidth="380.0" VBox.vgrow="ALWAYS" />
 </AnchorPane>
diff --git a/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterILogger.java b/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterILogger.java
new file mode 100644
index 000000000..02d49f6a9
--- /dev/null
+++ b/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.converter.viewmodel;
+
+import java.util.List;
+
+public interface LengthConverterILogger {
+    void log(String s);
+
+    List<String> getLog();
+}
diff --git a/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModel.java b/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModel.java
index 07963ce7d..566b55d88 100644
--- a/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModel.java
+++ b/code/length-converter/ViewModel/src/main/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModel.java
@@ -6,11 +6,14 @@
 import ru.unn.agile.converter.model.LengthConverter;
 import ru.unn.agile.converter.model.LengthType;
 
+import java.util.List;
+
 public class LengthConverterViewModel {
 
     private StringProperty input = new SimpleStringProperty();
     private StringProperty error = new SimpleStringProperty();
     private StringProperty output = new SimpleStringProperty();
+    private final StringProperty logs = new SimpleStringProperty();
     private BooleanProperty btnDisabled = new SimpleBooleanProperty();
     private ObjectProperty<LengthType> fromType = new SimpleObjectProperty<>();
     private ObjectProperty<LengthType> toType = new SimpleObjectProperty<>();
@@ -18,7 +21,26 @@
     private final ObjectProperty<ObservableList<LengthType>> lengthTypes =
             new SimpleObjectProperty<>(FXCollections.observableArrayList(LengthType.values()));
 
+    private LengthConverterILogger logger;
+
+    public final void setLogger(final LengthConverterILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
     public LengthConverterViewModel() {
+        init();
+    }
+
+
+    public LengthConverterViewModel(final LengthConverterILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    private void init() {
         input.set("");
         error.set("");
         output.set("");
@@ -30,12 +52,21 @@ public LengthConverterViewModel() {
             onInput(newValue);
         });
         fromType.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message = new StringBuilder(LogMessages.START_LENGHT_TYPE_WAS_CHANGED);
+            message.append("to type: ").append(newValue)
+                    .append(".");
+            logger.log(message.toString());
+            addToLog();
             onTypeChange();
         });
         toType.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message = new StringBuilder(LogMessages.RESULT_LENGHT_TYPE_WAS_CHANGED);
+            message.append("to type: ").append(newValue)
+                    .append(".");
+            logger.log(message.toString());
+            addToLog();
             onTypeChange();
         });
-
     }
 
     public StringProperty getInput() {
@@ -66,22 +97,55 @@ public StringProperty getError() {
         return error;
     }
 
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    public final List<String> getLog() {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        return logger.getLog();
+    }
+
+
     public void convert() {
+        if (isConvertButtonDisabled().getValue()) {
+            return;
+        }
         double value = Double.parseDouble(input.get());
         LengthConverter converter = new LengthConverter(value, getFromType().get());
         value = converter.convert(getToType().get());
         output.set(format(value));
+        StringBuilder message = new StringBuilder(LogMessages.CONVERT_WAS_PRESSED);
+        message.append("from type: ").append(getFromType().getValue())
+                .append(" to type: ").append(getToType().getValue())
+                .append(".");
+        logger.log(message.toString());
+        addToLog();
     }
 
     public void swap() {
         LengthType tmp = fromType.get();
         fromType.set(toType.get());
         toType.set(tmp);
+        logger.log(LogMessages.SWAP_PRESSED);
+        addToLog();
     }
 
     private void onInput(final String newValue) {
         boolean isNumeric = isNumeric(newValue);
-        error.set(isNumeric || newValue.isEmpty() ? "" : "invalid");
+        if (isNumeric || newValue.isEmpty()) {
+            error.set("");
+        } else {
+            error.set("invalid");
+            logger.log(LogMessages.INCORRECT_INPUT);
+            addToLog();
+        }
         btnDisabled.set(newValue.isEmpty() || !isNumeric);
         output.set("");
     }
@@ -102,4 +166,25 @@ private void onTypeChange() {
         output.set("");
     }
 
+    private void addToLog() {
+        List<String> log = logger.getLog();
+        StringBuilder records = new StringBuilder("");
+        for (String logString : log) {
+            records.append(logString).append("\n");
+        }
+        logs.set(records.toString());
+    }
+
+}
+
+final class LogMessages {
+    public static final String CONVERT_WAS_PRESSED = "Convert following: ";
+    public static final String RESULT_LENGHT_TYPE_WAS_CHANGED =
+            "Result length type was changed to ";
+    public static final String START_LENGHT_TYPE_WAS_CHANGED =
+            "Start length type was changed to ";
+    public static final String SWAP_PRESSED = "Length types swapped.";
+    public static final String INCORRECT_INPUT = "Incorrect input.";
+
+    private LogMessages() { }
 }
diff --git a/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterFakeLogger.java b/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterFakeLogger.java
new file mode 100644
index 000000000..ef586442d
--- /dev/null
+++ b/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterFakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.converter.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class LengthConverterFakeLogger implements LengthConverterILogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModelTests.java b/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModelTests.java
index b428792d0..2b925a9a2 100644
--- a/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModelTests.java
+++ b/code/length-converter/ViewModel/src/test/java/ru/unn/agile/converter/viewmodel/LengthConverterViewModelTests.java
@@ -5,15 +5,29 @@
 import org.junit.Test;
 import ru.unn.agile.converter.model.LengthType;
 
+import java.util.List;
+
 import static org.junit.Assert.*;
 
 public class LengthConverterViewModelTests {
 
     private LengthConverterViewModel viewModel;
 
+    public void setExternalViewModel(final LengthConverterViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    private void setCorrectInput() {
+        viewModel.getInput().set("2");
+        viewModel.getFromType().set(LengthType.KILOMETER);
+        viewModel.getToType().set(LengthType.METER);
+    }
+
     @Before
     public void setUp() {
-        viewModel = new LengthConverterViewModel();
+        if (viewModel == null) {
+            viewModel = new LengthConverterViewModel(new LengthConverterFakeLogger());
+        }
     }
 
     @After
@@ -201,4 +215,98 @@ public void canClearOutputAfterSwap() {
 
         assertEquals("", viewModel.getOutput().get());
     }
+
+    @Test
+    public void viewModelConstructorThrowsExceptionWithNullLogger() {
+        try {
+            new LengthConverterViewModel(null);
+            fail("Exception wasn't thrown");
+        } catch (IllegalArgumentException ex) {
+            assertEquals("Logger parameter can't be null", ex.getMessage());
+        } catch (Exception ex) {
+            fail("Invalid exception type");
+        }
+    }
+
+    @Test
+    public void logIsEmptyInTheBeginning() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterConvertion() {
+        setCorrectInput();
+        viewModel.convert();
+        String message = viewModel.getLog().get(2);
+
+        assertTrue(message.matches(".*" + LogMessages.CONVERT_WAS_PRESSED + ".*"));
+    }
+
+    @Test
+    public void logContainsInputArgumentsAfterConvertion() {
+        setCorrectInput();
+
+        viewModel.convert();
+
+        String message = viewModel.getLog().get(2);
+        assertTrue(message.matches(".*" + viewModel.getFromType().get()
+                + ".*" + viewModel.getToType().get() + ".*"));
+    }
+
+    @Test
+    public void swappingIsMentionedInTheLog() {
+        setCorrectInput();
+
+        viewModel.swap();
+
+        String message = viewModel.getLog().get(4);
+        assertTrue(message.matches(".*" + LogMessages.SWAP_PRESSED + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        setCorrectInput();
+
+        viewModel.convert();
+        viewModel.convert();
+
+        assertEquals(4, viewModel.getLog().size());
+    }
+
+    @Test
+    public void canSeeFromTypeChangeInLog() {
+        setCorrectInput();
+
+        viewModel.getFromType().set(LengthType.METER);
+
+        String message = viewModel.getLog().get(2);
+        assertTrue(message.matches(".*" + LogMessages.START_LENGHT_TYPE_WAS_CHANGED + ".*"));
+    }
+
+    @Test
+    public void canSeeToTypeChangeInLog() {
+        setCorrectInput();
+
+        viewModel.getToType().set(LengthType.CENTIMETER);
+
+        String message = viewModel.getLog().get(2);
+        assertTrue(message.matches(".*" + LogMessages.RESULT_LENGHT_TYPE_WAS_CHANGED + ".*"));
+    }
+
+    @Test
+    public void typeChangeIsNotLoggedIfNotChanged() {
+        viewModel.getToType().set(LengthType.CENTIMETER);
+        viewModel.getFromType().set(LengthType.METER);
+
+        assertEquals(0, viewModel.getLog().size());
+    }
+
+    @Test
+    public void convertIsNotCalledWhenButtonIsDisabled() {
+        viewModel.convert();
+
+        assertTrue(viewModel.getLog().isEmpty());
+    }
 }
diff --git a/code/kochetova-dasha-lab1-matrix/src/main/java/ru/unn/agile/matrix/model/Matrix.java b/code/matrix/Model/src/main/java/ru/unn/agile/Matrix/Model/Matrix.java
similarity index 98%
rename from code/kochetova-dasha-lab1-matrix/src/main/java/ru/unn/agile/matrix/model/Matrix.java
rename to code/matrix/Model/src/main/java/ru/unn/agile/Matrix/Model/Matrix.java
index 3d3efd913..0618e89f4 100644
--- a/code/kochetova-dasha-lab1-matrix/src/main/java/ru/unn/agile/matrix/model/Matrix.java
+++ b/code/matrix/Model/src/main/java/ru/unn/agile/Matrix/Model/Matrix.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.Matrix.model;
+package ru.unn.agile.Matrix.Model;
 
 public class Matrix {
 
diff --git a/code/kochetova-dasha-lab1-matrix/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java b/code/matrix/Model/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java
similarity index 99%
rename from code/kochetova-dasha-lab1-matrix/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java
rename to code/matrix/Model/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java
index 59bab703c..daba95a8c 100644
--- a/code/kochetova-dasha-lab1-matrix/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java
+++ b/code/matrix/Model/src/test/java/ru/unn/agile/Matrix/Model/MatrixTest.java
@@ -3,7 +3,6 @@
 import org.junit.Test;
 import org.junit.Rule;
 import org.junit.rules.ExpectedException;
-import ru.unn.agile.Matrix.model.Matrix;
 
 import static org.junit.Assert.*;
 
diff --git a/code/matrix/View/build.gradle b/code/matrix/View/build.gradle
new file mode 100644
index 000000000..fdbb80a09
--- /dev/null
+++ b/code/matrix/View/build.gradle
@@ -0,0 +1,16 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.Matrix.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':matrix-viewmodel')
+}
\ No newline at end of file
diff --git a/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Main.java b/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Main.java
new file mode 100644
index 000000000..ca47d9cb7
--- /dev/null
+++ b/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.Matrix.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("Matrix.fxml"));
+        primaryStage.setTitle("Matrix");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Matrix.java b/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Matrix.java
new file mode 100644
index 000000000..a31d75ff3
--- /dev/null
+++ b/code/matrix/View/src/main/java/ru/unn/agile/Matrix/view/Matrix.java
@@ -0,0 +1,209 @@
+package ru.unn.agile.Matrix.view;
+
+import javafx.fxml.FXML;
+import ru.unn.agile.Matrix.viewmodel.ViewModel;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+import javafx.scene.control.Label;
+
+public class Matrix {
+    private static final String ZERO_ELEMENT_INDEX = "0";
+
+    private static final String FIRST_ELEMENT_INDEX = "1";
+
+    private static final String SECOND_ELEMENT_INDEX = "2";
+
+    private static final String THIRD_ELEMENT_INDEX = "3";
+
+    private static final String FOURTH_ELEMENT_INDEX = "4";
+
+    private static final String FIFTH_ELEMENT_INDEX = "5";
+
+    private static final String SIXTH_ELEMENT_INDEX = "6";
+
+    private static final String SEVENTH_ELEMENT_INDEX = "7";
+
+    private static final String EIGHT_ELEMENT_INDEX = "8";
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private Button buttonCompare;
+    @FXML
+    private Button transposeFirst;
+    @FXML
+    private Button transposeSecond;
+    @FXML
+    private Button sumButton;
+    @FXML
+    private TextField first00 = new TextField();
+    @FXML
+    private TextField first10 = new TextField();
+    @FXML
+    private TextField first20 = new TextField();
+    @FXML
+    private TextField first01 = new TextField();
+    @FXML
+    private TextField first11 = new TextField();
+    @FXML
+    private TextField first21 = new TextField();
+    @FXML
+    private TextField first02 = new TextField();
+    @FXML
+    private TextField first12 = new TextField();
+    @FXML
+    private TextField first22 = new TextField();
+    @FXML
+    private TextField second00 = new TextField();
+    @FXML
+    private TextField second10 = new TextField();
+    @FXML
+    private TextField second20 = new TextField();
+    @FXML
+    private TextField second01 = new TextField();
+    @FXML
+    private TextField second11 = new TextField();
+    @FXML
+    private TextField second21 = new TextField();
+    @FXML
+    private TextField second02 = new TextField();
+    @FXML
+    private TextField second12 = new TextField();
+    @FXML
+    private TextField second22 = new TextField();
+    @FXML
+    private Label result00 = new Label();
+    @FXML
+    private Label result10 = new Label();
+    @FXML
+    private Label result20 = new Label();
+    @FXML
+    private Label result01 = new Label();
+    @FXML
+    private Label result11 = new Label();
+    @FXML
+    private Label result21 = new Label();
+    @FXML
+    private Label result02 = new Label();
+    @FXML
+    private Label result12 = new Label();
+    @FXML
+    private Label result22 = new Label();
+
+    @FXML
+    private TextField[] firstMatrixFields = new TextField[] {
+            first00,
+            first10,
+            first20,
+            first01,
+            first11,
+            first21,
+            first02,
+            first12,
+            first22
+    };
+
+
+    @FXML
+    void initialize() {
+        first00.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                ZERO_ELEMENT_INDEX
+        ));
+        first10.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                FIRST_ELEMENT_INDEX
+        ));
+        first20.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                SECOND_ELEMENT_INDEX
+        ));
+        first01.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                THIRD_ELEMENT_INDEX
+        ));
+        first11.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                FOURTH_ELEMENT_INDEX
+        ));
+        first21.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                FIFTH_ELEMENT_INDEX
+        ));
+        first02.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                SIXTH_ELEMENT_INDEX
+        ));
+        first12.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                SEVENTH_ELEMENT_INDEX
+        ));
+        first22.textProperty().bindBidirectional(viewModel.getFirstMatrixPropertiesByIndex(
+                EIGHT_ELEMENT_INDEX
+        ));
+
+        second00.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                ZERO_ELEMENT_INDEX
+        ));
+        second10.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                FIRST_ELEMENT_INDEX
+        ));
+        second20.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                SECOND_ELEMENT_INDEX
+        ));
+        second01.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                THIRD_ELEMENT_INDEX
+        ));
+        second11.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                FOURTH_ELEMENT_INDEX
+        ));
+        second21.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                FIFTH_ELEMENT_INDEX
+        ));
+        second02.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                SIXTH_ELEMENT_INDEX
+        ));
+        second12.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                SEVENTH_ELEMENT_INDEX
+        ));
+        second22.textProperty().bindBidirectional(viewModel.getSecondMatrixPropertiesByIndex(
+                EIGHT_ELEMENT_INDEX
+        ));
+
+        result00.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                ZERO_ELEMENT_INDEX
+        ));
+        result10.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                FIRST_ELEMENT_INDEX
+        ));
+        result20.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                SECOND_ELEMENT_INDEX
+        ));
+        result01.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                THIRD_ELEMENT_INDEX
+        ));
+        result11.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                FOURTH_ELEMENT_INDEX
+        ));
+        result21.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                FIFTH_ELEMENT_INDEX
+        ));
+        result02.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                SIXTH_ELEMENT_INDEX
+        ));
+        result12.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                SEVENTH_ELEMENT_INDEX
+        ));
+        result22.textProperty().bindBidirectional(viewModel.getResultMatrixPropertiesByIndex(
+                EIGHT_ELEMENT_INDEX
+        ));
+
+        buttonCompare.setOnAction(actionEvent -> {
+            viewModel.compareMatrices();
+        });
+        transposeFirst.setOnAction(actionEvent -> {
+            viewModel.transposeFirstMatrix();
+        });
+        transposeSecond.setOnAction(actionEvent -> {
+            viewModel.transposeSecondMatrix();
+        });
+        sumButton.setOnAction(actionEvent -> {
+            viewModel.sumMatrices();
+        });
+
+    }
+
+
+}
diff --git a/code/matrix/View/src/main/resources/ru/unn/agile/Matrix/view/Matrix.fxml b/code/matrix/View/src/main/resources/ru/unn/agile/Matrix/view/Matrix.fxml
new file mode 100644
index 000000000..0ab6abcb5
--- /dev/null
+++ b/code/matrix/View/src/main/resources/ru/unn/agile/Matrix/view/Matrix.fxml
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.effect.*?>
+<?import javafx.scene.control.*?>
+<?import java.lang.*?>
+<?import javafx.scene.layout.*?>
+<?import ru.unn.agile.Matrix.viewmodel.*?>
+
+<AnchorPane prefHeight="330.0" prefWidth="625.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.Matrix.view.Matrix">
+       <fx:define>
+           <ViewModel fx:id="viewModel" />
+       </fx:define>
+   <children>
+      <Button fx:id="buttonCompare" layoutX="280.0" layoutY="30.0" mnemonicParsing="false" text="Compare1">
+         <effect>
+            <Blend />
+         </effect>
+      </Button>
+      <Button fx:id="sumButton" layoutX="291.0" layoutY="152.0" mnemonicParsing="false" text="Sum" />
+      <Button fx:id="transposeFirst" layoutX="62.0" layoutY="152.0" mnemonicParsing="false" text="Transpose" />
+      <Button fx:id="transposeSecond" layoutX="466.0" layoutY="152.0" mnemonicParsing="false" text="Transpose" />
+      <Label fx:id="result" layoutX="260.0" layoutY="75.0" maxWidth="1.7976931348623157E308" prefHeight="37.0" prefWidth="124.0" text="${viewModel.result}" HBox.hgrow="ALWAYS">
+         <padding>
+            <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+         </padding></Label>
+      <Separator prefWidth="200.0" visible="false" />
+      <GridPane fx:id="firstMatrix" gridLinesVisible="true" layoutX="32.0" layoutY="30.0" prefHeight="90.0" prefWidth="216.0">
+        <columnConstraints>
+          <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+          <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+        </columnConstraints>
+        <rowConstraints>
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+          <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+        </rowConstraints>
+         <children>
+            <TextField fx:id="first00" />
+            <TextField fx:id="first10" GridPane.columnIndex="1" />
+            <TextField fx:id="first20" GridPane.columnIndex="2" />
+            <TextField fx:id="first01" GridPane.rowIndex="1" />
+            <TextField fx:id="first11" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <TextField fx:id="first21" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <TextField fx:id="first02" GridPane.rowIndex="2" />
+            <TextField fx:id="first12" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <TextField fx:id="first22" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+         </children>
+      </GridPane>
+      <GridPane fx:id="secondMatrix" gridLinesVisible="true" layoutX="396.0" layoutY="30.0" prefHeight="90.0" prefWidth="216.0">
+         <children>
+            <TextField fx:id="second00" />
+            <TextField fx:id="second10" GridPane.columnIndex="1" />
+            <TextField fx:id="second20" GridPane.columnIndex="2" />
+            <TextField fx:id="second01" GridPane.rowIndex="1" />
+            <TextField fx:id="second11" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <TextField fx:id="second21" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <TextField fx:id="second02" GridPane.rowIndex="2" />
+            <TextField fx:id="second12" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <TextField fx:id="second22" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+         </children>
+         <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+         </columnConstraints>
+         <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+         </rowConstraints>
+      </GridPane>
+      <GridPane gridLinesVisible="true" layoutX="207.0" layoutY="206.0" prefHeight="90.0" prefWidth="216.0">
+         <columnConstraints>
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+         </columnConstraints>
+         <rowConstraints>
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+         </rowConstraints>
+         <children>
+            <Label fx:id="result00" prefHeight="17.0" prefWidth="68.0" />
+            <Label fx:id="result10" prefHeight="17.0" prefWidth="67.0" GridPane.columnIndex="1" />
+            <Label fx:id="result20" prefHeight="17.0" prefWidth="69.0" GridPane.columnIndex="2" />
+            <Label fx:id="result01" prefHeight="17.0" prefWidth="68.0" GridPane.rowIndex="1" />
+            <Label fx:id="result11" prefHeight="17.0" prefWidth="67.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+            <Label fx:id="result21" prefHeight="17.0" prefWidth="67.0" GridPane.columnIndex="2" GridPane.rowIndex="1" />
+            <Label fx:id="result02" prefHeight="17.0" prefWidth="70.0" GridPane.rowIndex="2" />
+            <Label fx:id="result12" prefHeight="17.0" prefWidth="66.0" GridPane.columnIndex="1" GridPane.rowIndex="2" />
+            <Label fx:id="result22" prefHeight="17.0" prefWidth="67.0" GridPane.columnIndex="2" GridPane.rowIndex="2" />
+         </children>
+      </GridPane>
+   </children>
+</AnchorPane>
diff --git a/code/matrix/viewmodel/build.gradle b/code/matrix/viewmodel/build.gradle
new file mode 100644
index 000000000..d95b22871
--- /dev/null
+++ b/code/matrix/viewmodel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':matrix-model')
+}
\ No newline at end of file
diff --git a/code/matrix/viewmodel/src/main/java/ru/unn/agile/Matrix/viewmodel/ViewModel.java b/code/matrix/viewmodel/src/main/java/ru/unn/agile/Matrix/viewmodel/ViewModel.java
new file mode 100644
index 000000000..108da83a3
--- /dev/null
+++ b/code/matrix/viewmodel/src/main/java/ru/unn/agile/Matrix/viewmodel/ViewModel.java
@@ -0,0 +1,175 @@
+package ru.unn.agile.Matrix.viewmodel;
+import ru.unn.agile.Matrix.Model.Matrix;
+import javafx.beans.property.*;
+
+public class ViewModel {
+
+    private static final int DEFAULT_MATRIX_SIZE = 3;
+    private Matrix firstMatrix = new Matrix(DEFAULT_MATRIX_SIZE);
+    private Matrix secondMatrix = new Matrix(DEFAULT_MATRIX_SIZE);
+    private StringProperty[] firstMatrixProperties =
+            new SimpleStringProperty[DEFAULT_MATRIX_SIZE * DEFAULT_MATRIX_SIZE];
+    private StringProperty[] secondMatrixProperties =
+            new SimpleStringProperty[DEFAULT_MATRIX_SIZE * DEFAULT_MATRIX_SIZE];
+    private StringProperty[] resultMatrixProperties =
+            new SimpleStringProperty[DEFAULT_MATRIX_SIZE * DEFAULT_MATRIX_SIZE];
+    private final StringProperty result = new SimpleStringProperty();
+
+    public ViewModel() {
+        for (int i = 0; i < firstMatrixProperties.length; i++) {
+            firstMatrixProperties[i] = new SimpleStringProperty("");
+        }
+        for (int i = 0; i < secondMatrixProperties.length; i++) {
+            secondMatrixProperties[i] = new SimpleStringProperty("");
+        }
+        for (int i = 0; i < resultMatrixProperties.length; i++) {
+            resultMatrixProperties[i] = new SimpleStringProperty("");
+        }
+        result.set("");
+    }
+
+    public boolean canTranspose() {
+        boolean result = true;
+        StringProperty[] properties = getFirstMatrixProperties();
+        for (int i = 0; i < properties.length; i++) {
+            if (properties[i].get().isEmpty()) {
+                result = false;
+            }
+        }
+        return result;
+    }
+
+    public StringProperty[] getFirstMatrixProperties() {
+        return firstMatrixProperties;
+    }
+
+    public StringProperty getFirstMatrixPropertiesByIndex(final String index) {
+        return firstMatrixProperties[Integer.parseInt(index)];
+    }
+
+    public StringProperty getSecondMatrixPropertiesByIndex(final String index) {
+        return secondMatrixProperties[Integer.parseInt(index)];
+    }
+
+    public StringProperty getResultMatrixPropertiesByIndex(final String index) {
+        return resultMatrixProperties[Integer.parseInt(index)];
+    }
+
+    public void setFirstMatrixProperties(final StringProperty[] firstMatrixProperties) {
+        this.firstMatrixProperties = firstMatrixProperties;
+    }
+
+    public StringProperty[] getSecondMatrixProperties() {
+        return secondMatrixProperties;
+    }
+
+    public void setSecondMatrixProperties(final StringProperty[] secondMatrixProperties) {
+        this.secondMatrixProperties = secondMatrixProperties;
+    }
+
+    private boolean isPossibleToProcess(final int matrixNumber) {
+        boolean result = true;
+        StringProperty[] matrixProperties;
+        switch (matrixNumber) {
+            case 1:
+                matrixProperties = firstMatrixProperties;
+                break;
+            case 2:
+                matrixProperties = secondMatrixProperties;
+                break;
+            default:
+                return false;
+        }
+        for (int i = 0; i < matrixProperties.length; i++) {
+            if (!matrixProperties[i].get().isEmpty()) {
+                try {
+                    Double.parseDouble(matrixProperties[i].get());
+                } catch (NumberFormatException e) {
+                    result = false;
+                }
+            } else {
+                result = false;
+            }
+
+        }
+        return result;
+    }
+
+    public final String getResult() {
+        return result.get();
+    }
+
+    public void compareMatrices() {
+        if (!isPossibleToProcess(1) || !isPossibleToProcess(2)) {
+            throw new NumberFormatException("Matrices full filled with wrong args");
+        }
+        firstMatrix.initByArray(getFirstMatrixValues());
+        secondMatrix.initByArray(getSecondMatrixValues());
+        result.set(Boolean.toString(firstMatrix.equals(secondMatrix)));
+        System.out.println(result.get());
+    }
+
+    public void transposeFirstMatrix() {
+        if (!isPossibleToProcess(1)) {
+            throw new NumberFormatException("Matrix must be filled");
+        }
+        firstMatrix.initByArray(getFirstMatrixValues());
+        double[] transposedValues = convertMatrixToArray(firstMatrix.transpos());
+        int i;
+        for (i = 0; i < firstMatrixProperties.length; i++) {
+            firstMatrixProperties[i].set(String.valueOf(transposedValues[i]));
+        }
+    }
+
+    public void transposeSecondMatrix() {
+        if (!isPossibleToProcess(2)) {
+            throw new NumberFormatException("Matrix must be filled with correct numeric arguments");
+        }
+        secondMatrix.initByArray(getSecondMatrixValues());
+        double[] transposedValues = convertMatrixToArray(secondMatrix.transpos());
+        int i;
+        for (i = 0; i < secondMatrixProperties.length; i++) {
+            secondMatrixProperties[i].set(String.valueOf(transposedValues[i]));
+        }
+    }
+
+    public void sumMatrices() {
+        if (!isPossibleToProcess(1) || !isPossibleToProcess(2)) {
+            throw new NumberFormatException("Matrices must be filled with correct numeric args");
+        }
+        firstMatrix.initByArray(getFirstMatrixValues());
+        secondMatrix.initByArray(getSecondMatrixValues());
+        Matrix resultMatrix = firstMatrix.add(secondMatrix);
+        double[] sumValues = convertMatrixToArray(resultMatrix);
+        for (int i = 0; i < resultMatrixProperties.length; i++) {
+            resultMatrixProperties[i].set(String.valueOf(sumValues[i]));
+        }
+    }
+
+    private double[] convertMatrixToArray(final Matrix matrix) {
+        double[] result = new double[matrix.getSize() * matrix.getSize()];
+        for (int i = 0; i < matrix.getSize(); i++) {
+            int j;
+            for (j = 0; j < matrix.getSize(); j++) {
+                result[i * matrix.getSize() + j] = matrix.getValue(i, j);
+            }
+        }
+        return result;
+    }
+
+    private double[] getFirstMatrixValues() {
+        double[] result = new double[firstMatrixProperties.length];
+        for (int i = 0; i < firstMatrixProperties.length; i++) {
+            result[i] = Double.parseDouble(firstMatrixProperties[i].get());
+        }
+        return result;
+    }
+
+    private double[] getSecondMatrixValues() {
+        double[] result = new double[secondMatrixProperties.length];
+        for (int i = 0; i < secondMatrixProperties.length; i++) {
+            result[i] = Double.parseDouble(secondMatrixProperties[i].get());
+        }
+        return result;
+    }
+}
diff --git a/code/matrix/viewmodel/src/test/java/ru/unn/agile/Matrix/viewmodel/ViewModelTests.java b/code/matrix/viewmodel/src/test/java/ru/unn/agile/Matrix/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..38f545f90
--- /dev/null
+++ b/code/matrix/viewmodel/src/test/java/ru/unn/agile/Matrix/viewmodel/ViewModelTests.java
@@ -0,0 +1,103 @@
+package ru.unn.agile.Matrix.viewmodel;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+
+    private static final double DELTA = 1e-3;
+    private ViewModel viewModel;
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+    @Test
+    public void canSetDefaultValuesToFirstMatrix() {
+        assertEquals("", viewModel.getFirstMatrixProperties()[0].get());
+    }
+
+    @Test
+    public void canSetDefaultValuesToSecondMatrix() {
+        assertEquals("", viewModel.getSecondMatrixProperties()[0].get());
+    }
+
+    @Test (expected = NumberFormatException.class)
+    public void canNotTransposeMatrixIfNotFullFilled() {
+        setWrongInputData();
+        viewModel.transposeFirstMatrix();
+    }
+
+    @Test
+    public void canTransposeFirstMatrixIfFilledWithCorrectValues() {
+        setCorrectInputData();
+        viewModel.transposeFirstMatrix();
+        assertEquals(4.0, Double.parseDouble(viewModel.getFirstMatrixProperties()[1].get()), DELTA);
+    }
+
+
+    @Test
+    public void canTransposeSecondMatrixIfFilledWithCorrectValues() {
+        setCorrectInputData();
+        viewModel.transposeSecondMatrix();
+        assertEquals(4.0, Double.parseDouble(viewModel.getSecondMatrixProperties()[1].get()),
+                DELTA);
+    }
+
+    @Test (expected = NumberFormatException.class)
+    public void canNotTransposeMatrixWithNotNumericValues() {
+        setWrongInputData();
+        viewModel.transposeSecondMatrix();
+    }
+
+    @Test
+    public void canCompareMatrices() {
+        setCorrectInputData();
+        viewModel.compareMatrices();
+        assertTrue(Boolean.parseBoolean(viewModel.getResult()));
+    }
+    @Test (expected = NumberFormatException.class)
+    public void canCompareOnlyCorrectFilledMatrices() {
+        setWrongInputData();
+        viewModel.compareMatrices();
+    }
+    @Test (expected = NumberFormatException.class)
+    public void canNotSumMatricesIfNotFilledWithCorrectArgs() {
+        setWrongInputData();
+        viewModel.sumMatrices();
+    }
+
+    private void setCorrectInputData() {
+        viewModel.setFirstMatrixProperties(new StringProperty[] {
+                new SimpleStringProperty("1"),
+                new SimpleStringProperty("2"),
+                new SimpleStringProperty("3"),
+                new SimpleStringProperty("4"),
+                new SimpleStringProperty("5"),
+                new SimpleStringProperty("6"),
+                new SimpleStringProperty("7"),
+                new SimpleStringProperty("8"),
+                new SimpleStringProperty("9"),
+        });
+        viewModel.setSecondMatrixProperties(viewModel.getFirstMatrixProperties());
+    }
+
+    private void setWrongInputData() {
+        viewModel.setFirstMatrixProperties(new StringProperty[] {
+                new SimpleStringProperty("3"),
+                new SimpleStringProperty("trash"),
+                new SimpleStringProperty("1"),
+                new SimpleStringProperty("f"),
+                new SimpleStringProperty("fad"),
+                new SimpleStringProperty(";;;"),
+                new SimpleStringProperty("/r/n"),
+                new SimpleStringProperty("1e"),
+                new SimpleStringProperty("9="),
+        });
+        viewModel.setSecondMatrixProperties(viewModel.getFirstMatrixProperties());
+    }
+
+}
diff --git a/code/mortgage-calculator/Infrastructure/build.gradle b/code/mortgage-calculator/Infrastructure/build.gradle
new file mode 100644
index 000000000..3ef9e3aa3
--- /dev/null
+++ b/code/mortgage-calculator/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':mortgage-calculator-ViewModel')
+    testCompile project(':mortgage-calculator-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/mortgage-calculator/Infrastructure/src/main/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLogger.java b/code/mortgage-calculator/Infrastructure/src/main/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLogger.java
new file mode 100644
index 000000000..e146dea42
--- /dev/null
+++ b/code/mortgage-calculator/Infrastructure/src/main/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLogger.java
@@ -0,0 +1,64 @@
+package ru.unn.agile.mortgagecalculator.infrastructure;
+
+import ru.unn.agile.mortgagecalculator.viewmodel.MortgageCalculatorILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class MortgageCalculatorTxtLogger implements MortgageCalculatorILogger {
+    private static final String DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private final String filename;
+
+    public MortgageCalculatorTxtLogger(final String filename) {
+        this.filename = filename;
+        BufferedWriter writer = null;
+        try {
+            writer = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        this.writer = writer;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            writer.write(getNowDate() + " > " + s);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader reader;
+        ArrayList<String> logs = new ArrayList<>();
+        try {
+            reader = new BufferedReader(new FileReader(filename));
+            String line = reader.readLine();
+            while (line != null) {
+                logs.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+        return logs;
+    }
+
+    private static String getNowDate() {
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT, Locale.ENGLISH);
+        return sdf.format(calendar.getTime());
+    }
+}
diff --git a/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLoggerTests.java b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLoggerTests.java
new file mode 100644
index 000000000..9d1880b1c
--- /dev/null
+++ b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorTxtLoggerTests.java
@@ -0,0 +1,71 @@
+package ru.unn.agile.mortgagecalculator.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.fail;
+import static ru.unn.agile.mortgagecalculator.infrastructure.RegexMatcher.matchesPattern;
+
+public class MortgageCalculatorTxtLoggerTests {
+    private static final String FILE_NAME = "./MortgageCalculatorTxtLogger_Tests.log";
+    private MortgageCalculatorTxtLogger logger;
+
+    @Before
+    public void setUp() {
+        logger = new MortgageCalculatorTxtLogger(FILE_NAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(logger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(FILE_NAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILE_NAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        String testMessage = "Test message";
+
+        logger.log(testMessage);
+
+        String message = logger.getLog().get(0);
+        assertThat(message, matchesPattern(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        logger.log(messages[0]);
+        logger.log(messages[1]);
+
+        List<String> actualMsg = logger.getLog();
+        for (int i = 0; i < actualMsg.size(); i++) {
+            assertThat(actualMsg.get(i), matchesPattern(".*" + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String testMessage = "Test message";
+
+        logger.log(testMessage);
+
+        String message = logger.getLog().get(0);
+        assertThat(message, matchesPattern("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*"));
+    }
+}
diff --git a/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorViewModelWithTxtLoggerTests.java b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..2241af353
--- /dev/null
+++ b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/MortgageCalculatorViewModelWithTxtLoggerTests.java
@@ -0,0 +1,16 @@
+package ru.unn.agile.mortgagecalculator.infrastructure;
+
+import ru.unn.agile.mortgagecalculator.viewmodel.MortgageCalculatorViewModel;
+import ru.unn.agile.mortgagecalculator.viewmodel.MortgageCalculatorViewModelTests;
+
+public class MortgageCalculatorViewModelWithTxtLoggerTests
+        extends MortgageCalculatorViewModelTests {
+    @Override
+    public void setUp() {
+        MortgageCalculatorTxtLogger realLogger =
+                new MortgageCalculatorTxtLogger(
+                        "./MortgageCalculatorViewModel_with_TxtLogger_Tests.log"
+                );
+        super.setExternalViewModel(new MortgageCalculatorViewModel(realLogger));
+    }
+}
diff --git a/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/RegexMatcher.java b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/RegexMatcher.java
new file mode 100644
index 000000000..a5755cc3b
--- /dev/null
+++ b/code/mortgage-calculator/Infrastructure/src/test/java/ru/unn/agile/mortgagecalculator/infrastructure/RegexMatcher.java
@@ -0,0 +1,31 @@
+package ru.unn.agile.mortgagecalculator.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class RegexMatcher extends BaseMatcher {
+    private final String regex;
+
+    private RegexMatcher(final String regex) {
+        this.regex = regex;
+    }
+
+    @Override
+    public boolean matches(final Object o) {
+        return ((String) o).matches(regex);
+    }
+
+    @Override
+    public void describeTo(final Description description) {
+        description.appendText("matches regex = ");
+        description.appendText(regex);
+    }
+
+    static Matcher<? super String> matchesPattern(final String regex) {
+        RegexMatcher regexMatcher = new RegexMatcher(regex);
+        @SuppressWarnings(value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>) regexMatcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/mortgage-calculator/View/build.gradle b/code/mortgage-calculator/View/build.gradle
index 83132c52c..150bb586b 100644
--- a/code/mortgage-calculator/View/build.gradle
+++ b/code/mortgage-calculator/View/build.gradle
@@ -14,4 +14,5 @@ javafx {
 
 dependencies {
     compile project(':mortgage-calculator-ViewModel')
+    compile project(':mortgage-calculator-Infrastructure')
 }
\ No newline at end of file
diff --git a/code/mortgage-calculator/View/src/main/java/ru/unn/agile/MortgageCalculator/view/Main.java b/code/mortgage-calculator/View/src/main/java/ru/unn/agile/mortgagecalculator/view/Main.java
similarity index 100%
rename from code/mortgage-calculator/View/src/main/java/ru/unn/agile/MortgageCalculator/view/Main.java
rename to code/mortgage-calculator/View/src/main/java/ru/unn/agile/mortgagecalculator/view/Main.java
diff --git a/code/mortgage-calculator/View/src/main/java/ru/unn/agile/MortgageCalculator/view/MortgageCalculatorView.java b/code/mortgage-calculator/View/src/main/java/ru/unn/agile/mortgagecalculator/view/MortgageCalculatorView.java
similarity index 60%
rename from code/mortgage-calculator/View/src/main/java/ru/unn/agile/MortgageCalculator/view/MortgageCalculatorView.java
rename to code/mortgage-calculator/View/src/main/java/ru/unn/agile/mortgagecalculator/view/MortgageCalculatorView.java
index 646c95421..31de7fa3c 100644
--- a/code/mortgage-calculator/View/src/main/java/ru/unn/agile/MortgageCalculator/view/MortgageCalculatorView.java
+++ b/code/mortgage-calculator/View/src/main/java/ru/unn/agile/mortgagecalculator/view/MortgageCalculatorView.java
@@ -2,6 +2,7 @@
 
 import javafx.fxml.FXML;
 import javafx.scene.control.*;
+import ru.unn.agile.mortgagecalculator.infrastructure.MortgageCalculatorTxtLogger;
 import ru.unn.agile.mortgagecalculator.viewmodel.MortgageCalculatorViewModel;
 
 public class MortgageCalculatorView {
@@ -17,37 +18,41 @@
     @FXML
     private TextField interestRate;
     @FXML
-    private TextField mothlyComissions;
+    private TextField monthlyCommissions;
     @FXML
-    private TextField oneTimeComissions;
+    private TextField oneTimeCommissions;
     @FXML
     private TextArea result;
     @FXML
     private ChoiceBox<String> loanPeriodType;
     @FXML
-    private ChoiceBox<String> mothlyComissionType;
+    private ChoiceBox<String> monthlyCommissionType;
     @FXML
-    private ChoiceBox<String> oneTimeComissionType;
+    private ChoiceBox<String> oneTimeCommissionType;
     @FXML
     private ChoiceBox<String> typeOfPayment;
     @FXML
     private Button calculate;
+    @FXML
+    private TextArea areaLog;
 
     @FXML
     void initialize() {
+        viewModel.setLogger(new MortgageCalculatorTxtLogger("./MortgageCalculatorTxtLogger.log"));
         apartmentPrice.textProperty().bindBidirectional(viewModel.apartmentPriceProperty());
         firstPayment.textProperty().bindBidirectional(viewModel.firstPaymentProperty());
         loanPeriod.textProperty().bindBidirectional(viewModel.loanPeriodProperty());
         interestRate.textProperty().bindBidirectional(viewModel.interestRateProperty());
-        mothlyComissions.textProperty().bindBidirectional(viewModel.monthlyComissionsProperty());
-        oneTimeComissions.textProperty().bindBidirectional(viewModel.oneTimeComisionsProperty());
+        monthlyCommissions.textProperty().bindBidirectional(viewModel.monthlyCommissionsProperty());
+        oneTimeCommissions.textProperty().bindBidirectional(viewModel.oneTimeCommissionsProperty());
         result.textProperty().bindBidirectional(viewModel.resultProperty());
         loanPeriodType.valueProperty().bindBidirectional(viewModel.loanPeriodTypeProperty());
-        mothlyComissionType.valueProperty().bindBidirectional(
-                viewModel.monthlyComissionsTypeProperty());
-        oneTimeComissionType.valueProperty().bindBidirectional(
-                viewModel.oneTimeComisionsTypeProperty());
+        monthlyCommissionType.valueProperty().bindBidirectional(
+                viewModel.monthlyCommissionsTypeProperty());
+        oneTimeCommissionType.valueProperty().bindBidirectional(
+                viewModel.oneTimeCommissionsTypeProperty());
         typeOfPayment.valueProperty().bindBidirectional(viewModel.typeOfPaymentProperty());
         calculate.setOnAction(event -> viewModel.calculate());
+        areaLog.textProperty().bindBidirectional(viewModel.logsProperty());
     }
 }
diff --git a/code/mortgage-calculator/View/src/main/resources/ru/unn/agile/MortgageCalculator/view/MortgageCalculator.fxml b/code/mortgage-calculator/View/src/main/resources/ru/unn/agile/mortgagecalculator/view/MortgageCalculator.fxml
similarity index 60%
rename from code/mortgage-calculator/View/src/main/resources/ru/unn/agile/MortgageCalculator/view/MortgageCalculator.fxml
rename to code/mortgage-calculator/View/src/main/resources/ru/unn/agile/mortgagecalculator/view/MortgageCalculator.fxml
index 42bd81331..552f74d0c 100644
--- a/code/mortgage-calculator/View/src/main/resources/ru/unn/agile/MortgageCalculator/view/MortgageCalculator.fxml
+++ b/code/mortgage-calculator/View/src/main/resources/ru/unn/agile/mortgagecalculator/view/MortgageCalculator.fxml
@@ -1,27 +1,26 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<?import javafx.scene.text.*?>
 <?import java.lang.*?>
+<?import javafx.collections.*?>
 <?import javafx.scene.control.*?>
 <?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
 
-<?import javafx.collections.FXCollections?>
 <?import ru.unn.agile.mortgagecalculator.viewmodel.MortgageCalculatorViewModel?>
-
-<AnchorPane prefHeight="513.0" prefWidth="552.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.mortgagecalculator.view.MortgageCalculatorView">
-   <fx:define>
-      <MortgageCalculatorViewModel fx:id="viewModel" />
-   </fx:define>
-      <Button fx:id="calculate" layoutX="55.0" layoutY="427.0" mnemonicParsing="false" text="Calculate" />
+<AnchorPane prefHeight="513.0" prefWidth="552.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.mortgagecalculator.view.MortgageCalculatorView">
+      <fx:define>
+         <MortgageCalculatorViewModel fx:id="viewModel" />
+      </fx:define>
+      <Button fx:id="calculate" layoutX="92.0" layoutY="461.0" mnemonicParsing="false" text="Calculate" />
       <TextField fx:id="apartmentPrice" layoutX="157.0" layoutY="82.0" />
       <TextField fx:id="firstPayment" layoutX="157.0" layoutY="115.0" />
       <TextField fx:id="loanPeriod" layoutX="157.0" layoutY="150.0" />
       <TextField fx:id="interestRate" layoutX="157.0" layoutY="183.0" />
-      <ChoiceBox fx:id="loanPeriodType" layoutX="317.0" layoutY="150.0" prefWidth="150.0" >
+      <ChoiceBox fx:id="loanPeriodType" layoutX="317.0" layoutY="150.0" prefWidth="150.0">
          <items>
             <FXCollections fx:factory="observableArrayList">
-               <String fx:value="Year"/>
-               <String fx:value="Month"/>
+               <String fx:value="Year" />
+               <String fx:value="Month" />
             </FXCollections>
          </items>
       </ChoiceBox>
@@ -30,33 +29,34 @@
       <Text layoutX="56.0" layoutY="167.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Loan Period" />
       <Text layoutX="56.0" layoutY="200.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Interest rate 60 max" />
       <Text layoutX="27.0" layoutY="267.0" strokeType="OUTSIDE" strokeWidth="0.0" text="One-time commissions" />
-      <ChoiceBox fx:id="mothlyComissionType" layoutX="317.0" layoutY="283.0" prefWidth="150.0">
+      <ChoiceBox fx:id="monthlyCommissionType" layoutX="317.0" layoutY="283.0" prefWidth="150.0">
          <items>
             <FXCollections fx:factory="observableArrayList">
-               <String fx:value="Percent"/>
-               <String fx:value="Rubles"/>
+               <String fx:value="Percent" />
+               <String fx:value="Rubles" />
             </FXCollections>
          </items>
       </ChoiceBox>
-      <ChoiceBox fx:id="oneTimeComissionType" layoutX="317.0" layoutY="250.0" prefWidth="150.0" >
+      <ChoiceBox fx:id="oneTimeCommissionType" layoutX="317.0" layoutY="250.0" prefWidth="150.0">
          <items>
             <FXCollections fx:factory="observableArrayList">
-               <String fx:value="Percent"/>
-               <String fx:value="Rubles"/>
+               <String fx:value="Percent" />
+               <String fx:value="Rubles" />
             </FXCollections>
          </items>
       </ChoiceBox>
-      <TextField fx:id="mothlyComissions" layoutX="157.0" layoutY="283.0" />
-      <TextField fx:id="oneTimeComissions" layoutX="157.0" layoutY="250.0" />
+      <TextField fx:id="monthlyCommissions" layoutX="157.0" layoutY="283.0" />
+      <TextField fx:id="oneTimeCommissions" layoutX="157.0" layoutY="250.0" />
       <Text layoutX="32.0" layoutY="300.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Monthly commission" />
       <Text layoutX="43.0" layoutY="336.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Type of payment" />
-      <ChoiceBox fx:id="typeOfPayment" layoutX="157.0" layoutY="319.0" prefWidth="150.0" >
+      <ChoiceBox fx:id="typeOfPayment" layoutX="157.0" layoutY="319.0" prefWidth="150.0">
          <items>
             <FXCollections fx:factory="observableArrayList">
-               <String fx:value="Annuity"/>
-               <String fx:value="Differential"/>
+               <String fx:value="Annuity" />
+               <String fx:value="Differential" />
             </FXCollections>
          </items>
       </ChoiceBox>
-      <TextArea fx:id="result" layoutX="147.0" layoutY="408.0" prefHeight="63.0" prefWidth="194.0" promptText="Result" />
+      <TextArea fx:id="result" layoutX="27.0" layoutY="378.0" prefHeight="63.0" prefWidth="194.0" promptText="Result" />
+      <TextArea fx:id="areaLog" editable="false" layoutX="247.0" layoutY="351.0" prefHeight="156.0" prefWidth="276.0" VBox.vgrow="ALWAYS" />
 </AnchorPane>
diff --git a/code/mortgage-calculator/View/src/test/java/ru/unn/agile/MortgageCalculator/view/FakeViewTests.java b/code/mortgage-calculator/View/src/test/java/ru/unn/agile/mortgagecalculator/view/FakeViewTests.java
similarity index 100%
rename from code/mortgage-calculator/View/src/test/java/ru/unn/agile/MortgageCalculator/view/FakeViewTests.java
rename to code/mortgage-calculator/View/src/test/java/ru/unn/agile/mortgagecalculator/view/FakeViewTests.java
diff --git a/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorILogger.java b/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorILogger.java
new file mode 100644
index 000000000..cb5991a7d
--- /dev/null
+++ b/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.mortgagecalculator.viewmodel;
+
+import java.util.List;
+
+public interface MortgageCalculatorILogger {
+    void log(String s);
+
+    List<String> getLog();
+}
diff --git a/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModel.java b/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModel.java
similarity index 61%
rename from code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModel.java
rename to code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModel.java
index 56098c450..dc3669e4d 100644
--- a/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModel.java
+++ b/code/mortgage-calculator/ViewModel/src/main/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModel.java
@@ -15,6 +15,9 @@
 import ru.unn.agile.mortgagecalculator.model.report.MortgageMonthReport;
 import ru.unn.agile.mortgagecalculator.model.report.MortgageReport;
 
+import java.util.Collections;
+import java.util.List;
+
 
 public class MortgageCalculatorViewModel {
     private StringProperty apartmentPrice = new SimpleStringProperty();
@@ -22,23 +25,42 @@
     private StringProperty loanPeriod = new SimpleStringProperty();
     private StringProperty loanPeriodType = new SimpleStringProperty();
     private StringProperty interestRate = new SimpleStringProperty();
-    private StringProperty oneTimeComisions = new SimpleStringProperty();
-    private StringProperty oneTimeComisionsType = new SimpleStringProperty();
-    private StringProperty monthlyComissions = new SimpleStringProperty();
-    private StringProperty monthlyComissionsType = new SimpleStringProperty();
+    private StringProperty oneTimeCommissions = new SimpleStringProperty();
+    private StringProperty oneTimeCommissionsType = new SimpleStringProperty();
+    private StringProperty monthlyCommissions = new SimpleStringProperty();
+    private StringProperty monthlyCommissionsType = new SimpleStringProperty();
     private StringProperty typeOfPayment = new SimpleStringProperty();
     private StringProperty result = new SimpleStringProperty();
+    private final StringProperty logs = new SimpleStringProperty();
+
+    private MortgageCalculatorILogger logger;
+
+    public void setLogger(final MortgageCalculatorILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can not be null");
+        }
+        this.logger = logger;
+    }
 
     public MortgageCalculatorViewModel() {
+        init();
+    }
+
+    public MortgageCalculatorViewModel(final MortgageCalculatorILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    private void init() {
         apartmentPrice.set("");
         firstPayment.set("");
         loanPeriod.set("");
         loanPeriodType.set("");
         interestRate.set("");
-        oneTimeComisions.set("");
-        oneTimeComisionsType.set("");
-        monthlyComissions.set("");
-        monthlyComissionsType.set("");
+        oneTimeCommissions.set("");
+        oneTimeCommissionsType.set("");
+        monthlyCommissions.set("");
+        monthlyCommissionsType.set("");
         typeOfPayment.set("");
         result.set("");
 
@@ -74,7 +96,7 @@ public MortgageCalculatorViewModel() {
             }
         });
 
-        oneTimeComisions.addListener((observable, oldValue, newValue) -> {
+        oneTimeCommissions.addListener((observable, oldValue, newValue) -> {
             if (checkInput()) {
                 result.set("");
             } else {
@@ -82,7 +104,7 @@ public MortgageCalculatorViewModel() {
             }
         });
 
-        monthlyComissions.addListener((observable, oldValue, newValue) -> {
+        monthlyCommissions.addListener((observable, oldValue, newValue) -> {
             if (checkInput()) {
                 result.set("");
             } else {
@@ -91,6 +113,10 @@ public MortgageCalculatorViewModel() {
         });
 
         loanPeriodType.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message = new StringBuilder(LogMessages.LOAN_PERIOD_TYPE_WAS_CHANGED);
+            message.append(newValue).append(".");
+            logger.log(message.toString());
+            updateLogs();
             onTypeChange();
         });
 
@@ -98,11 +124,21 @@ public MortgageCalculatorViewModel() {
             onTypeChange();
         });
 
-        monthlyComissionsType.addListener((observable, oldValue, newValue) -> {
+        monthlyCommissionsType.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message =
+                    new StringBuilder(LogMessages.MONTHLY_COMMISSIONS_TYPE_WAS_CHANGED);
+            message.append(newValue).append(".");
+            logger.log(message.toString());
+            updateLogs();
             onTypeChange();
         });
 
-        oneTimeComisionsType.addListener((observable, oldValue, newValue) -> {
+        oneTimeCommissionsType.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message =
+                    new StringBuilder(LogMessages.ONE_TIME_COMMISSIONS_TYPE_WAS_CHANGED);
+            message.append(newValue).append(".");
+            logger.log(message.toString());
+            updateLogs();
             onTypeChange();
         });
 
@@ -182,36 +218,36 @@ public StringProperty interestRateProperty() {
         return interestRate;
     }
 
-    public String getOneTimeComisions() {
-        return oneTimeComisions.get();
+    public String getOneTimeCommissions() {
+        return oneTimeCommissions.get();
     }
 
-    public StringProperty oneTimeComisionsProperty() {
-        return oneTimeComisions;
+    public StringProperty oneTimeCommissionsProperty() {
+        return oneTimeCommissions;
     }
 
-    public String getOneTimeComisionsType() {
-        return oneTimeComisionsType.get();
+    public String getOneTimeCommissionsType() {
+        return oneTimeCommissionsType.get();
     }
 
-    public StringProperty oneTimeComisionsTypeProperty() {
-        return oneTimeComisionsType;
+    public StringProperty oneTimeCommissionsTypeProperty() {
+        return oneTimeCommissionsType;
     }
 
-    public String getMonthlyComissions() {
-        return monthlyComissions.get();
+    public String getMonthlyCommissions() {
+        return monthlyCommissions.get();
     }
 
-    public StringProperty monthlyComissionsProperty() {
-        return monthlyComissions;
+    public StringProperty monthlyCommissionsProperty() {
+        return monthlyCommissions;
     }
 
-    public String getMonthlyComissionsType() {
-        return monthlyComissionsType.get();
+    public String getMonthlyCommissionsType() {
+        return monthlyCommissionsType.get();
     }
 
-    public StringProperty monthlyComissionsTypeProperty() {
-        return monthlyComissionsType;
+    public StringProperty monthlyCommissionsTypeProperty() {
+        return monthlyCommissionsType;
     }
 
     public String getTypeOfPayment() {
@@ -246,16 +282,16 @@ private boolean checkInput() {
         if (!checkDoubleInput(firstPayment.get())) {
             return false;
         }
-        if (!checkDoubleInput(oneTimeComisions.get())) {
+        if (!checkDoubleInput(oneTimeCommissions.get())) {
             return false;
         }
-        if (!checkDoubleInput(monthlyComissions.get())) {
+        if (!checkDoubleInput(monthlyCommissions.get())) {
             return false;
         }
-        if (monthlyComissionsType.get().equals("")) {
+        if (monthlyCommissionsType.get().equals("")) {
             return false;
         }
-        if (oneTimeComisionsType.get().equals("")) {
+        if (oneTimeCommissionsType.get().equals("")) {
             return false;
         }
         return !typeOfPayment.get().equals("");
@@ -272,23 +308,25 @@ private MortgageParameters createMortgageParametersCalculator() {
                 ? PeriodType.YEAR : PeriodType.MONTH;
 
         double initialPayment = Double.parseDouble((firstPayment.get()));
-        double fixedComissionAmount = Double.parseDouble((oneTimeComisions.get()));
-        double monthlyComissionAmount = Double.parseDouble((monthlyComissions.get()));
+        double fixedComissionAmount = Double.parseDouble((oneTimeCommissions.get()));
+        double monthlyComissionAmount = Double.parseDouble((monthlyCommissions.get()));
 
         Commission fixedCommission = null;
         MonthlyCommission monthlyCommission = null;
 
         try {
-            fixedCommission = oneTimeComisionsType.get().equals("Percent")
+            fixedCommission = oneTimeCommissionsType.get().equals("Percent")
                     ? new PercentCommission(fixedComissionAmount)
                     : new FixedCommission(fixedComissionAmount);
-            monthlyCommission = monthlyComissionsType.get().equals("Percent")
+            monthlyCommission = monthlyCommissionsType.get().equals("Percent")
                     ? new PercentAmountMonthlyCommission(monthlyComissionAmount)
                     : new FixedMonthlyCommission(monthlyComissionAmount);
 
             mortgageParameters = new MortgageParameters(amount, percent, periodType, period);
             mortgageParameters.setInitialPayment(initialPayment);
         } catch (Exception e) {
+            logger.log(LogMessages.INCORRECT_INPUT);
+            updateLogs();
             result.set("Incorrect input");
             return null;
         }
@@ -322,5 +360,57 @@ public void calculate() {
                 + "; With month payment " + monthReport.getPayment() + " for "
                 + "" + mortgageParameters.getMonthsPeriod() + " months.";
         this.result.set(resultString);
+
+        StringBuilder message = new StringBuilder(LogMessages.CALCULATE_WAS_PRESSED);
+        message.append("Arguments: Apartment Price = ").append(apartmentPrice.get())
+                .append("; First Payment = ").append(firstPayment.get())
+                .append("; Interest Rate = ").append(interestRate.get())
+                .append("; Loan Period = ").append(loanPeriod.get())
+                .append("; Loan Period Type: ").append(loanPeriodType.get())
+                .append("; Monthly Commissions = ").append(monthlyCommissions.get())
+                .append("; Monthly Commissions Type: ").append(monthlyCommissionsType.get())
+                .append("; One Time Commissions = ").append(oneTimeCommissions.get())
+                .append("; One Time Commissions Type: ").append(oneTimeCommissionsType.get())
+                .append("; Type Of Payment: ").append(typeOfPayment.get()).append(".");
+        logger.log(message.toString());
+        updateLogs();
+    }
+
+    public List<String> getLog() {
+        if (logger != null) {
+            return logger.getLog();
+        }
+        return Collections.emptyList();
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.getLog();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
+
+    final class LogMessages {
+        public static final String CALCULATE_WAS_PRESSED = "Calculate. ";
+        public static final String LOAN_PERIOD_TYPE_WAS_CHANGED =
+                "Loan Period Type was changed to ";
+        public static final String ONE_TIME_COMMISSIONS_TYPE_WAS_CHANGED =
+                "One Time Commissions Type was changed to ";
+        public static final String MONTHLY_COMMISSIONS_TYPE_WAS_CHANGED =
+                "Monthly Commissions Type was changed to ";
+        public static final String INCORRECT_INPUT = "Incorrect input. ";
+
+        private LogMessages() {
+        }
     }
 }
diff --git a/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorFakeLogger.java b/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorFakeLogger.java
new file mode 100644
index 000000000..91e66b813
--- /dev/null
+++ b/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorFakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.mortgagecalculator.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class MortgageCalculatorFakeLogger implements MortgageCalculatorILogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModelTests.java b/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModelTests.java
similarity index 50%
rename from code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModelTests.java
rename to code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModelTests.java
index 780070ca4..a9941a92a 100644
--- a/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/MortgageCalculator/viewmodel/MortgageCalculatorViewModelTests.java
+++ b/code/mortgage-calculator/ViewModel/src/test/java/ru/unn/agile/mortgagecalculator/viewmodel/MortgageCalculatorViewModelTests.java
@@ -4,6 +4,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.util.List;
+
 import static org.junit.Assert.*;
 
 public class MortgageCalculatorViewModelTests {
@@ -15,16 +17,18 @@ private void setCorrectInputs() {
         viewModel.apartmentPriceProperty().set("200");
         viewModel.firstPaymentProperty().set("20");
         viewModel.interestRateProperty().set("3");
-        viewModel.monthlyComissionsProperty().set("1");
-        viewModel.monthlyComissionsTypeProperty().set("Rubles");
-        viewModel.oneTimeComisionsProperty().set("2");
-        viewModel.oneTimeComisionsTypeProperty().set("Percent");
+        viewModel.monthlyCommissionsProperty().set("1");
+        viewModel.monthlyCommissionsTypeProperty().set("Rubles");
+        viewModel.oneTimeCommissionsProperty().set("2");
+        viewModel.oneTimeCommissionsTypeProperty().set("Percent");
         viewModel.typeOfPaymentProperty().set("Annuity");
     }
 
     @Before
     public void setUp() {
-        viewModel = new MortgageCalculatorViewModel();
+        if (viewModel == null) {
+            viewModel = new MortgageCalculatorViewModel(new MortgageCalculatorFakeLogger());
+        }
     }
 
     @After
@@ -34,16 +38,21 @@ public void tearDown() {
 
     @Test
     public void setEmptyStringInTextFieldsByDefault() {
-        assertEquals("", viewModel.getApartmentPrice());
-        assertEquals("", viewModel.getFirstPayment());
-        assertEquals("", viewModel.getInterestRate());
-        assertEquals("", viewModel.getLoanPeriod());
-        assertEquals("", viewModel.getLoanPeriodType());
-        assertEquals("", viewModel.getMonthlyComissions());
-        assertEquals("", viewModel.getMonthlyComissionsType());
-        assertEquals("", viewModel.getOneTimeComisions());
-        assertEquals("", viewModel.getOneTimeComisionsType());
-        assertEquals("", viewModel.getTypeOfPayment());
+        StringBuilder textFields = new StringBuilder(viewModel.getApartmentPrice());
+        textFields.append(viewModel.getFirstPayment())
+                .append(viewModel.getInterestRate())
+                .append(viewModel.getLoanPeriod())
+                .append(viewModel.getLoanPeriodType())
+                .append(viewModel.getMonthlyCommissions())
+                .append(viewModel.getMonthlyCommissionsType())
+                .append(viewModel.getOneTimeCommissions())
+                .append(viewModel.getOneTimeCommissionsType())
+                .append(viewModel.getTypeOfPayment());
+        assertEquals("", textFields.toString());
+    }
+
+    public void setExternalViewModel(final MortgageCalculatorViewModel viewModel) {
+        this.viewModel = viewModel;
     }
 
     @Test
@@ -105,7 +114,7 @@ public void canCalculateWithDifferentialPayment() {
     @Test
     public void canCalculateWithCommisionInPercent() {
         setCorrectInputs();
-        viewModel.monthlyComissionsTypeProperty().set("Percent");
+        viewModel.monthlyCommissionsTypeProperty().set("Percent");
 
         viewModel.calculate();
 
@@ -154,9 +163,9 @@ public void cantCalculateWithEmptyInterestRateProperty() {
     }
 
     @Test
-    public void cantCalculateWithEmptyMonthlyComissionsProperty() {
+    public void cantCalculateWithEmptyMonthlyCommissionsProperty() {
         setCorrectInputs();
-        viewModel.monthlyComissionsProperty().set("");
+        viewModel.monthlyCommissionsProperty().set("");
 
         viewModel.calculate();
 
@@ -164,9 +173,9 @@ public void cantCalculateWithEmptyMonthlyComissionsProperty() {
     }
 
     @Test
-    public void cantCalculateWithEmptyMonthlyComissionsTypeProperty() {
+    public void cantCalculateWithEmptyMonthlyCommissionsTypeProperty() {
         setCorrectInputs();
-        viewModel.monthlyComissionsTypeProperty().set("");
+        viewModel.monthlyCommissionsTypeProperty().set("");
 
         viewModel.calculate();
 
@@ -174,9 +183,9 @@ public void cantCalculateWithEmptyMonthlyComissionsTypeProperty() {
     }
 
     @Test
-    public void cantCalculateWithEmptyOneTimeComisionsProperty() {
+    public void cantCalculateWithEmptyOneTimeCommissionsProperty() {
         setCorrectInputs();
-        viewModel.oneTimeComisionsProperty().set("");
+        viewModel.oneTimeCommissionsProperty().set("");
 
         viewModel.calculate();
 
@@ -184,9 +193,9 @@ public void cantCalculateWithEmptyOneTimeComisionsProperty() {
     }
 
     @Test
-    public void cantCalculateWithEmptyOneTimeComisionsTypeProperty() {
+    public void cantCalculateWithEmptyOneTimeCommissionsTypeProperty() {
         setCorrectInputs();
-        viewModel.oneTimeComisionsTypeProperty().set("");
+        viewModel.oneTimeCommissionsTypeProperty().set("");
 
         viewModel.calculate();
 
@@ -237,11 +246,121 @@ public void cantCalculateWithInterestRateBiggerThen60() {
     @Test
     public void cantCalculateWithPercentBiggerThen100() {
         setCorrectInputs();
-        viewModel.monthlyComissionsProperty().set("101");
-        viewModel.monthlyComissionsTypeProperty().set("Percent");
+        viewModel.monthlyCommissionsProperty().set("101");
+        viewModel.monthlyCommissionsTypeProperty().set("Percent");
 
         viewModel.calculate();
 
         assertEquals("Incorrect input", viewModel.getResult());
     }
+
+    @Test
+    public void viewModelConstructorThrowsExceptionWithNullLogger() {
+        try {
+            new MortgageCalculatorViewModel(null);
+            fail("Exception was not thrown");
+        } catch (IllegalArgumentException ex) {
+            assertEquals("Logger parameter can not be null", ex.getMessage());
+        } catch (Exception ex) {
+            fail("Invalid exception type");
+        }
+    }
+
+    @Test
+    public void logIsEmptyAfterInit() {
+        List<String> log = viewModel.getLog();
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterCalculation() {
+        setCorrectInputs();
+        viewModel.calculate();
+        String message = viewModel.getLog().get(3);
+
+        assertTrue(message.matches(".*" + MortgageCalculatorViewModel.
+                LogMessages.CALCULATE_WAS_PRESSED + ".*"));
+    }
+
+    @Test
+    public void logContainsInputArgumentsAfterCalculation() {
+        setCorrectInputs();
+
+        viewModel.calculate();
+
+        String message = viewModel.getLog().get(3);
+        assertTrue(message.matches(".*" + viewModel.getApartmentPrice()
+                + ".*" + viewModel.getFirstPayment()
+                + ".*" + viewModel.getInterestRate()
+                + ".*" + viewModel.getLoanPeriod()
+                + ".*" + viewModel.getLoanPeriodType()
+                + ".*" + viewModel.getMonthlyCommissions()
+                + ".*" + viewModel.getMonthlyCommissionsType()
+                + ".*" + viewModel.getOneTimeCommissions()
+                + ".*" + viewModel.getOneTimeCommissionsType()
+                + ".*" + viewModel.getTypeOfPayment() + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        setCorrectInputs();
+
+        viewModel.calculate();
+        viewModel.calculate();
+
+        assertEquals(5, viewModel.getLog().size());
+    }
+
+    @Test
+    public void calculateIsNotWorkingWithEmptyParameters() {
+        viewModel.calculate();
+
+        assertTrue(viewModel.getLog().isEmpty());
+    }
+
+    @Test
+    public void canSeeLoanPeriodTypeChangeInLog() {
+        setCorrectInputs();
+
+        viewModel.loanPeriodTypeProperty().set("Year");
+
+        String message = viewModel.getLog().get(3);
+        assertTrue(message.matches(".*" + MortgageCalculatorViewModel.
+                LogMessages.LOAN_PERIOD_TYPE_WAS_CHANGED + ".*"
+        ));
+    }
+
+    @Test
+    public void canSeeOneTimeCommissionTypeChangeInLog() {
+        setCorrectInputs();
+
+        viewModel.oneTimeCommissionsTypeProperty().set("Rubles");
+
+        String message = viewModel.getLog().get(3);
+        assertTrue(message.matches(".*" + MortgageCalculatorViewModel.
+                LogMessages.ONE_TIME_COMMISSIONS_TYPE_WAS_CHANGED + ".*"));
+    }
+
+    @Test
+    public void canSeeMonthlyCommissionTypeChangeInLog() {
+        setCorrectInputs();
+
+        viewModel.monthlyCommissionsTypeProperty().set("Percent");
+
+        String message = viewModel.getLog().get(3);
+        assertTrue(message.matches(".*" + MortgageCalculatorViewModel.
+                LogMessages.MONTHLY_COMMISSIONS_TYPE_WAS_CHANGED + ".*"));
+    }
+
+    @Test
+    public void canSeeIncorrectInputInLog() {
+        setCorrectInputs();
+
+        viewModel.loanPeriodProperty().set("0");
+        viewModel.calculate();
+
+        String message = viewModel.getLog().get(3);
+        assertTrue(message.matches(".*" + MortgageCalculatorViewModel.
+                LogMessages.INCORRECT_INPUT + ".*"));
+    }
 }
diff --git a/code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Line.java b/code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Line.java
similarity index 100%
rename from code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Line.java
rename to code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Line.java
diff --git a/code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Point.java b/code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Point.java
similarity index 100%
rename from code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Point.java
rename to code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Point.java
diff --git a/code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Polygon.java b/code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Polygon.java
similarity index 97%
rename from code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Polygon.java
rename to code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Polygon.java
index 00f6b9bec..1332afe52 100644
--- a/code/polygon-area/src/main/java/ru/unn/agile/polygon/model/Polygon.java
+++ b/code/polygon-area/Model/src/main/java/ru/unn/agile/polygon/model/Polygon.java
@@ -1,5 +1,7 @@
 package ru.unn.agile.polygon.model;
 
+import static java.lang.Math.abs;
+
 public class Polygon {
     private static final int MINIMAL_NUMBER_OF_VERTICES = 3;
     private final Point[] vertices;
@@ -74,6 +76,6 @@ public int getSize() {
     }
 
     public double getArea() {
-        return this.area;
+        return abs(this.area);
     }
 }
diff --git a/code/polygon-area/src/test/java/ru/unn/agile/polygon/model/LineTest.java b/code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/LineTest.java
similarity index 100%
rename from code/polygon-area/src/test/java/ru/unn/agile/polygon/model/LineTest.java
rename to code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/LineTest.java
diff --git a/code/polygon-area/src/test/java/ru/unn/agile/polygon/model/PointTest.java b/code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/PointTest.java
similarity index 100%
rename from code/polygon-area/src/test/java/ru/unn/agile/polygon/model/PointTest.java
rename to code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/PointTest.java
diff --git a/code/polygon-area/src/test/java/ru/unn/agile/polygon/model/PolygonTest.java b/code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/PolygonTest.java
similarity index 100%
rename from code/polygon-area/src/test/java/ru/unn/agile/polygon/model/PolygonTest.java
rename to code/polygon-area/Model/src/test/java/ru/unn/agile/polygon/model/PolygonTest.java
diff --git a/code/polygon-area/View/build.gradle b/code/polygon-area/View/build.gradle
new file mode 100644
index 000000000..53fc98dc7
--- /dev/null
+++ b/code/polygon-area/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.polygon.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':polygon-area-ViewModel')
+}
diff --git a/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/CalcArea.java b/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/CalcArea.java
new file mode 100644
index 000000000..772e9e25c
--- /dev/null
+++ b/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/CalcArea.java
@@ -0,0 +1,87 @@
+package ru.unn.agile.polygon.view;
+
+import javafx.beans.property.Property;
+import javafx.css.PseudoClass;
+import javafx.fxml.FXML;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
+import ru.unn.agile.polygon.model.Point;
+import ru.unn.agile.polygon.viewmodel.ViewModel;
+
+public class CalcArea {
+    private final PseudoClass errorClass = PseudoClass.getPseudoClass("error");
+    private final String pointInputTooltip = "Only numbers allowed";
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField xTextField;
+    @FXML
+    private TextField yTextField;
+    @FXML
+    private Button addPointButton;
+    @FXML
+    private Button calcAreaButton;
+
+    @FXML
+    private TableView<Point> tablePoints;
+    @FXML
+    private TableColumn<Point, Double> xColumn;
+    @FXML
+    private TableColumn<Point, Double> yColumn;
+
+    @FXML
+    private TextArea resultTextArea;
+
+    @FXML
+    void initialize() {
+        initAddPointForm();
+        initTableView();
+        initControlPanel();
+    }
+
+    private void initAddPointForm() {
+        initTextField(xTextField, viewModel.xProperty());
+        initTextField(yTextField, viewModel.yProperty());
+
+        viewModel.xProperty().addListener(obs ->
+                setErrorBorder(xTextField, !viewModel.isCoordinatesInputCorrect()));
+        viewModel.yProperty().addListener(obs ->
+                setErrorBorder(yTextField, !viewModel.isCoordinatesInputCorrect()));
+
+        addPointButton.disableProperty()
+                .bindBidirectional(viewModel.addingNewPointDisabledProperty());
+        addPointButton.setOnAction(e -> viewModel.addPoint());
+    }
+    private void initTableView() {
+        xColumn.setCellValueFactory(
+                new PropertyValueFactory<Point, Double>("X"));
+        yColumn.setCellValueFactory(
+                new PropertyValueFactory<Point, Double>("Y"));
+    }
+
+    private void initControlPanel() {
+        calcAreaButton.setOnAction(e -> viewModel.calcArea());
+        resultTextArea.textProperty().bindBidirectional(viewModel.resultProperty());
+    }
+
+    private void initTextField(final TextField textField,
+                               final Property<String> property) {
+        bindTextFieldProperty(textField, property);
+        setTextFieldTooltip(textField);
+    }
+
+    private void setTextFieldTooltip(final TextField textField) {
+        textField.tooltipProperty().setValue(new Tooltip(pointInputTooltip));
+    }
+
+    private void bindTextFieldProperty(final TextField textField,
+                                       final Property<String> property) {
+        textField.textProperty().bindBidirectional(property);
+    }
+
+    private void setErrorBorder(final TextField textField, final boolean active) {
+        textField.pseudoClassStateChanged(errorClass, active);
+    }
+
+}
diff --git a/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/Main.java b/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/Main.java
new file mode 100644
index 000000000..96646d3cd
--- /dev/null
+++ b/code/polygon-area/View/src/main/java/ru/unn/agile/polygon/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.polygon.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("CalcArea.fxml"));
+        primaryStage.setTitle("CalcArea");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/polygon-area/View/src/main/resources/ru/unn/agile/polygon/view/CalcArea.fxml b/code/polygon-area/View/src/main/resources/ru/unn/agile/polygon/view/CalcArea.fxml
new file mode 100644
index 000000000..2daed8c63
--- /dev/null
+++ b/code/polygon-area/View/src/main/resources/ru/unn/agile/polygon/view/CalcArea.fxml
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Font?>
+
+<?import ru.unn.agile.polygon.viewmodel.ViewModel?>
+
+<AnchorPane prefHeight="374.0" prefWidth="303.0" xmlns="http://javafx.com/javafx/8.0.172-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.polygon.view.CalcArea">
+    <fx:define>
+        <ViewModel fx:id="viewModel"/>
+    </fx:define>
+    <children>
+        <VBox prefHeight="387.0" prefWidth="303.0">
+            <children>
+                <HBox>
+                    <children>
+                        <VBox>
+                            <children>
+                                <Label prefHeight="17.0" prefWidth="82.0" text="Insert X" />
+                                <TextField maxWidth="75.0" minWidth="75.0" prefWidth="75.0" fx:id="xTextField">
+                                    <VBox.margin>
+                                        <Insets top="5.0" />
+                                    </VBox.margin>
+                                </TextField>
+                            </children>
+                            <HBox.margin>
+                                <Insets right="20.0" />
+                            </HBox.margin>
+                        </VBox>
+                        <VBox layoutX="10.0" layoutY="10.0">
+                            <children>
+                                <Label text="Insert Y" />
+                                <TextField fx:id="yTextField" maxWidth="75.0" minWidth="75.0" prefWidth="75.0">
+                                    <VBox.margin>
+                                        <Insets top="5.0" />
+                                    </VBox.margin>
+                                </TextField>
+                            </children>
+                            <HBox.margin>
+                                <Insets right="20.0" />
+                            </HBox.margin>
+                        </VBox>
+                        <Button fx:id="addPointButton" mnemonicParsing="false" prefHeight="25.0" text="Add Point">
+                            <HBox.margin>
+                                <Insets top="22.0" />
+                            </HBox.margin>
+                        </Button>
+                    </children>
+                </HBox>
+                <TableView fx:id="tablePoints" items="${viewModel.pointList}" prefHeight="204.0" prefWidth="283.0">
+                    <columns>
+                        <TableColumn maxWidth="148.0" minWidth="50.0" prefWidth="140.0" sortable="false" text="X" fx:id="xColumn" />
+                        <TableColumn fx:id="yColumn" maxWidth="159.0" minWidth="75.0" prefWidth="119.0" sortable="false" text="Y" />
+                    </columns>
+                    <VBox.margin>
+                        <Insets top="10.0" />
+                    </VBox.margin>
+                </TableView>
+            <HBox alignment="CENTER" prefHeight="65.0" prefWidth="274.0">
+               <children>
+                  <Button fx:id="calcAreaButton" alignment="CENTER" contentDisplay="CENTER" mnemonicParsing="false" prefHeight="40.0" prefWidth="140.0" text="Get Area" textAlignment="CENTER" />
+               </children>
+            </HBox>
+            <HBox prefHeight="23.0" prefWidth="283.0">
+               <children>
+                  <Label prefHeight="120.0" prefWidth="68.0" text="Result:">
+                     <font>
+                        <Font size="18.0" />
+                     </font>
+                  </Label>
+                  <TextArea fx:id="resultTextArea" editable="false" prefHeight="4.0" prefWidth="211.0" wrapText="true" />
+               </children></HBox>
+            </children>
+            <padding>
+                <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+            </padding>
+        </VBox>
+    </children>
+</AnchorPane>
diff --git a/code/polygon-area/View/src/test/java/ru/unn/agile/polygon/view/FakeViewTests.java b/code/polygon-area/View/src/test/java/ru/unn/agile/polygon/view/FakeViewTests.java
new file mode 100644
index 000000000..2c3ac6d06
--- /dev/null
+++ b/code/polygon-area/View/src/test/java/ru/unn/agile/polygon/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.polygon.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/polygon-area/ViewModel/build.gradle b/code/polygon-area/ViewModel/build.gradle
new file mode 100644
index 000000000..c860d99e7
--- /dev/null
+++ b/code/polygon-area/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':polygon-area-Model')
+}
\ No newline at end of file
diff --git a/code/polygon-area/ViewModel/src/main/java/ru/unn/agile/polygon/viewmodel/ViewModel.java b/code/polygon-area/ViewModel/src/main/java/ru/unn/agile/polygon/viewmodel/ViewModel.java
new file mode 100644
index 000000000..55a7e418a
--- /dev/null
+++ b/code/polygon-area/ViewModel/src/main/java/ru/unn/agile/polygon/viewmodel/ViewModel.java
@@ -0,0 +1,106 @@
+package ru.unn.agile.polygon.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.*;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.polygon.model.Polygon;
+import ru.unn.agile.polygon.model.Point;
+
+import java.util.regex.Pattern;
+
+public class ViewModel {
+    private Polygon polygon;
+
+    private static final Pattern COORDINATE_INPUT_ALLOWED_SYMBOLS =
+            Pattern.compile("^[-+]?[0-9]+\\.?[0-9]*$");
+    private final SimpleBooleanProperty addingNewPointDisabled = new SimpleBooleanProperty();
+
+    private final StringProperty xCoordinate = new SimpleStringProperty();
+    private final StringProperty yCoordinate = new SimpleStringProperty();
+    private final ObservableList<Point> pointList = FXCollections.observableArrayList();
+
+    private final StringProperty result = new SimpleStringProperty();
+
+    public ViewModel() {
+        clearFormInput();
+
+        BooleanBinding canCalculateBoolBinding = new BooleanBinding() {
+            {
+                super.bind(xCoordinate, yCoordinate);
+            }
+            @Override
+            protected boolean computeValue() {
+                return (isCoordinatesInputCorrect());
+            }
+        };
+        addingNewPointDisabled.bind(canCalculateBoolBinding.not());
+    }
+
+    public boolean isCoordinatesInputCorrect() {
+        String exprText1 = xCoordinate.get();
+        String exprText2 = yCoordinate.get();
+        return (COORDINATE_INPUT_ALLOWED_SYMBOLS.matcher(exprText1).matches()
+                && COORDINATE_INPUT_ALLOWED_SYMBOLS.matcher(exprText2).matches());
+    }
+
+    public void addPoint() {
+        double x = parseCoordinate(xCoordinate);
+        double y = parseCoordinate(yCoordinate);
+        Point newPoint = new Point(x, y);
+        pointList.add(newPoint);
+
+        clearFormInput();
+    }
+
+    public void calcArea() {
+        if (pointList.isEmpty()) {
+            return;
+        }
+
+        Point[] pointArray = pointList.toArray(Point[]::new);
+
+        try {
+            polygon = new Polygon(pointArray);
+            result.setValue(Double.toString(polygon.getArea()));
+        } catch (IllegalArgumentException e) {
+            result.setValue(e.getMessage());
+        }
+    }
+
+    private void clearFormInput() {
+        xCoordinate.set("");
+        yCoordinate.set("");
+    }
+
+    private double parseCoordinate(final StringProperty coordinate) {
+        if (!isCoordinatesInputCorrect()) {
+            throw new IllegalArgumentException("Can't parse invalid input");
+        }
+        return Double.parseDouble(coordinate.get());
+    }
+
+    public StringProperty xProperty() {
+        return xCoordinate;
+    }
+    public StringProperty yProperty() {
+        return yCoordinate;
+    }
+    public ObservableList<Point> getPointList() {
+        return pointList;
+    }
+
+    public StringProperty resultProperty() {
+        return result;
+    }
+    public final String getResult() {
+        return result.get();
+    }
+
+    public BooleanProperty addingNewPointDisabledProperty() {
+        return addingNewPointDisabled;
+    }
+    public final boolean isAddingNewPointDisabled() {
+        return addingNewPointDisabled.get();
+    }
+}
diff --git a/code/polygon-area/ViewModel/src/test/java/ru/unn/agile/polygon/viewmodel/ViewModelTests.java b/code/polygon-area/ViewModel/src/test/java/ru/unn/agile/polygon/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..bb7d789a8
--- /dev/null
+++ b/code/polygon-area/ViewModel/src/test/java/ru/unn/agile/polygon/viewmodel/ViewModelTests.java
@@ -0,0 +1,120 @@
+package ru.unn.agile.polygon.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.polygon.model.Point;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private final double eps = 1.0E-10;
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void isAddingValidInput() {
+        setInputData("-261.55", "2.645");
+        viewModel.addPoint();
+        assertEquals(new Point(-261.55, 2.645).getX(), viewModel.getPointList().get(0).getX(), eps);
+        assertEquals(new Point(-261.55, 2.645).getY(), viewModel.getPointList().get(0).getY(), eps);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void isNotAddedInvalidInput() {
+        setInputData("-26vrt1.55", "2..645");
+        viewModel.addPoint();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void isNotAddedEmptyInput() {
+        setInputData("", "");
+        viewModel.addPoint();
+    }
+
+    @Test
+    public void cantCalcAreaWhenPointListIsEmpty() {
+        viewModel.calcArea();
+        assertEquals(null, viewModel.getResult());
+    }
+
+    @Test
+    public void canCalcAreaOfThreePointPolygon() {
+        setInputData("1", "0");
+        viewModel.addPoint();
+        setInputData("0", "0");
+        viewModel.addPoint();
+        setInputData("0", "1");
+        viewModel.addPoint();
+        viewModel.calcArea();
+        assertEquals(0.5, Double.parseDouble(viewModel.getResult()), eps);
+    }
+
+    @Test
+    public void isAddPointButtonDisabledForEmptyInput() {
+        setInputData("", "");
+
+        assertTrue(viewModel.isAddingNewPointDisabled());
+    }
+
+    @Test
+    public void isAddPointButtonDisabledForInvalidXInput() {
+        setInputData("256..1", "23");
+
+        assertTrue(viewModel.isAddingNewPointDisabled());
+    }
+
+    @Test
+    public void isAddPointButtonDisabledForInvalidYInput() {
+        setInputData("23", "--235...5");
+
+        assertTrue(viewModel.isAddingNewPointDisabled());
+    }
+
+    @Test
+    public void isFormInputsEmptyAfterAddingNewPoint() {
+        setInputData("-36.516", "-62.52");
+        viewModel.addPoint();
+        assertTrue(viewModel.xProperty().get().isEmpty()
+                && viewModel.yProperty().get().isEmpty()
+        );
+    }
+
+    @Test
+    public void cantCalcAreaForLessThanThreePointsPolygon() {
+        setInputData("1", "0");
+        viewModel.addPoint();
+        setInputData("0", "0");
+        viewModel.addPoint();
+        viewModel.calcArea();
+        assertEquals("A polygon must have at least three vertices", viewModel.getResult());
+    }
+
+    @Test
+    public void cantCalcAreaForSelfIntersectingPolygon() {
+        setInputData("1", "1");
+        viewModel.addPoint();
+        setInputData("0", "0");
+        viewModel.addPoint();
+        setInputData("1", "0");
+        viewModel.addPoint();
+        setInputData("0", "1");
+        viewModel.addPoint();
+        viewModel.calcArea();
+        assertEquals("Sides of polygon must not intersect", viewModel.getResult());
+    }
+
+    private void setInputData(final String x, final String y) {
+        viewModel.xProperty().set(x);
+        viewModel.yProperty().set(y);
+    }
+}
diff --git a/code/polynomialcalculator/src/main/java/ru/unn/agile/polynomialcalculator/model/Polynomial.java b/code/polynomial-calculator/Model/src/main/java/ru/unn/agile/polynomialcalculator/model/Polynomial.java
similarity index 100%
rename from code/polynomialcalculator/src/main/java/ru/unn/agile/polynomialcalculator/model/Polynomial.java
rename to code/polynomial-calculator/Model/src/main/java/ru/unn/agile/polynomialcalculator/model/Polynomial.java
diff --git a/code/polynomialcalculator/src/test/java/ru/unn/agile/polynomialcalculator/model/PolynomialTest.java b/code/polynomial-calculator/Model/src/test/java/ru/unn/agile/polynomialcalculator/model/PolynomialTest.java
similarity index 100%
rename from code/polynomialcalculator/src/test/java/ru/unn/agile/polynomialcalculator/model/PolynomialTest.java
rename to code/polynomial-calculator/Model/src/test/java/ru/unn/agile/polynomialcalculator/model/PolynomialTest.java
diff --git a/code/polynomial-calculator/View/build.gradle b/code/polynomial-calculator/View/build.gradle
new file mode 100644
index 000000000..b3ce9e5fc
--- /dev/null
+++ b/code/polynomial-calculator/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.polynomial.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':polynomial-calculator-viewmodel')
+}
diff --git a/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.java b/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.java
new file mode 100644
index 000000000..1490ae4b0
--- /dev/null
+++ b/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.java
@@ -0,0 +1,54 @@
+package ru.unn.agile.polynomialcalculator.view;
+
+import javafx.beans.property.Property;
+import javafx.css.PseudoClass;
+import javafx.fxml.FXML;
+import javafx.scene.control.*;
+import ru.unn.agile.polynomialcalculator.viewmodel.ViewModel;
+
+public class CalcPolynomial {
+    private final PseudoClass errorClass = PseudoClass.getPseudoClass("error");
+    private final String pointInputTooltip = "Only numbers allowed";
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField degreeTextField;
+    @FXML
+    private TextField coeffTextField;
+    @FXML
+    private Button addPolynomialButton;
+    @FXML
+    private Button calcSumPolynomialButton;
+    @FXML
+    private ListView<String> listPolinomials;
+    @FXML
+    private Label resultTextArea;
+
+    @FXML
+    void initialize() {
+        initTextField(coeffTextField, viewModel.coeffProperty());
+        initTextField(degreeTextField, viewModel.degreeProperty());
+
+        viewModel.coeffProperty().addListener(obs ->
+                setErrorBorder(coeffTextField, !viewModel.isPolynomialInputCorrect()));
+
+        viewModel.degreeProperty().addListener(obs ->
+                setErrorBorder(degreeTextField, !viewModel.isPolynomialInputCorrect()));
+        addPolynomialButton.setOnAction(e -> viewModel.addPolynomial());
+        listPolinomials.itemsProperty().bindBidirectional(viewModel.polynomialsProperty());
+        calcSumPolynomialButton.setOnAction(e -> viewModel.calcPolynomialAdd());
+        resultTextArea.textProperty().bindBidirectional(viewModel.resultProperty());
+    }
+
+    private void initTextField(final TextField textField,
+                               final Property<String> property) {
+        textField.textProperty().bindBidirectional(property);
+        textField.tooltipProperty().setValue(new Tooltip(pointInputTooltip));
+    }
+
+    private void setErrorBorder(final TextField textField, final boolean active) {
+        textField.pseudoClassStateChanged(errorClass, active);
+    }
+
+}
diff --git a/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/Main.java b/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/Main.java
new file mode 100644
index 000000000..b66d4d549
--- /dev/null
+++ b/code/polynomial-calculator/View/src/main/java/ru/unn/agile/polynomialcalculator/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.polynomialcalculator.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("CalcPolynomial.fxml"));
+        primaryStage.setTitle("CalcPolynomial");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/polynomial-calculator/View/src/main/resources/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.fxml b/code/polynomial-calculator/View/src/main/resources/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.fxml
new file mode 100644
index 000000000..edbc664ef
--- /dev/null
+++ b/code/polynomial-calculator/View/src/main/resources/ru/unn/agile/polynomialcalculator/view/CalcPolynomial.fxml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import java.lang.*?>
+<?import javafx.scene.layout.*?>
+
+<?import ru.unn.agile.polynomialcalculator.viewmodel.ViewModel?>
+
+<AnchorPane prefHeight="374.0" prefWidth="303.0" xmlns="http://javafx.com/javafx/8.0.172-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.polynomialcalculator.view.CalcPolynomial">
+    <fx:define>
+        <ViewModel fx:id="viewModel"/>
+    </fx:define>
+    <Pane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="484.0" prefWidth="408.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1">
+        <children>
+            <ListView fx:id="listPolinomials" layoutX="50.0" layoutY="115.0" prefHeight="200.0" prefWidth="310.0" />
+            <TextField fx:id="coeffTextField" layoutX="50.0" layoutY="62.0" prefHeight="25.0" prefWidth="127.0" promptText="Коэфициент" />
+            <TextField fx:id="degreeTextField" layoutX="233.0" layoutY="62.0" prefHeight="25.0" prefWidth="127.0" promptText="Степень" />
+            <Button fx:id="addPolynomialButton" layoutX="49.0" layoutY="97.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="310.0" text="Добавить" />
+            <Button fx:id="calcSumPolynomialButton" layoutX="50.0" layoutY="345.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="87.0" text="Сумма" />
+            <Label fx:id="resultTextArea" layoutX="49.0" layoutY="393.0" prefHeight="17.0" prefWidth="310.0" text="РЕЗУЛЬТАТ" />
+            <Label alignment="CENTER" layoutX="49.0" layoutY="28.0" prefHeight="17.0" prefWidth="310.0" text="ВВОД ПОЛИНОМА" />
+        </children>
+</Pane>
+</AnchorPane>
diff --git a/code/polynomial-calculator/View/src/test/java/ru/unn/agile/polynomialcalculator/view/FakeViewTests.java b/code/polynomial-calculator/View/src/test/java/ru/unn/agile/polynomialcalculator/view/FakeViewTests.java
new file mode 100644
index 000000000..3252d4df3
--- /dev/null
+++ b/code/polynomial-calculator/View/src/test/java/ru/unn/agile/polynomialcalculator/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.polynomialcalculator.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/polynomial-calculator/ViewModel/build.gradle b/code/polynomial-calculator/ViewModel/build.gradle
new file mode 100644
index 000000000..6008933fc
--- /dev/null
+++ b/code/polynomial-calculator/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':polynomial-calculator-model')
+}
diff --git a/code/polynomial-calculator/ViewModel/src/main/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModel.java b/code/polynomial-calculator/ViewModel/src/main/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModel.java
new file mode 100644
index 000000000..b3ee6fec2
--- /dev/null
+++ b/code/polynomial-calculator/ViewModel/src/main/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModel.java
@@ -0,0 +1,103 @@
+package ru.unn.agile.polynomialcalculator.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.*;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.polynomialcalculator.model.Polynomial;
+
+import java.util.regex.Pattern;
+
+public class ViewModel {
+    private final StringProperty degree1 = new SimpleStringProperty();
+    private final StringProperty coeff1 = new SimpleStringProperty();
+
+    private static final Pattern COEFF_INPUT_ALLOWED_SYMBOLS =
+            Pattern.compile("^[-+]?[0-9]+\\.?[0-9]*$");
+
+    private static final Pattern DEGREE_INPUT_ALLOWED_SYMBOLS =
+            Pattern.compile("^[0-9]+$");
+
+    private ListProperty<String> polynomialsListProperty = new SimpleListProperty<>();
+
+    private final ObservableList<Polynomial> polynomialsList = FXCollections.observableArrayList();
+
+    private final StringProperty result = new SimpleStringProperty();
+
+    public ListProperty<String> polynomialsProperty() {
+        return polynomialsListProperty;
+    }
+
+    public boolean isPolynomialInputCorrect() {
+        String degree = degree1.get();
+        String coeff = coeff1.get();
+
+        return (COEFF_INPUT_ALLOWED_SYMBOLS.matcher(coeff).matches()
+                && DEGREE_INPUT_ALLOWED_SYMBOLS.matcher(degree).matches());
+    }
+
+    public ViewModel() {
+        polynomialsListProperty.set(FXCollections.observableArrayList());
+        clearFormInput();
+        BooleanBinding canCalculateBoolBinding = new BooleanBinding() {
+            {
+                super.bind(degree1, coeff1);
+            }
+            @Override
+            protected boolean computeValue() {
+                return (isPolynomialInputCorrect());
+            }
+        };
+    }
+
+    public void addPolynomial() {
+        var polynomial = parsePolynomial(coeff1, degree1);
+        polynomialsList.add(polynomial);
+        polynomialsListProperty.add(polynomial.toString());
+        clearFormInput();
+    }
+
+    public void calcPolynomialAdd() {
+        if (polynomialsList.isEmpty()) {
+            return;
+        }
+        try {
+            Polynomial polySum = new Polynomial(0, 0);
+            for (Polynomial poly : polynomialsList)  {
+                polySum = polySum.plus(poly);
+            }
+            result.set(polySum.toString());
+        } catch (IllegalArgumentException e) {
+            result.setValue(e.getMessage());
+        }
+    }
+
+    private void clearFormInput() {
+        degree1.set("");
+        coeff1.set("");
+    }
+
+    private Polynomial parsePolynomial(final StringProperty coeff, final StringProperty degree) {
+        if (!isPolynomialInputCorrect()) {
+            throw new IllegalArgumentException("Can't parse polynomial. Invalid input");
+        }
+        return new Polynomial(Double.parseDouble(coeff.get()), Integer.parseInt(degree.get()));
+    }
+
+    public StringProperty degreeProperty() {
+        return degree1;
+    }
+    public StringProperty coeffProperty() {
+        return coeff1;
+    }
+    public ObservableList<Polynomial> getPolynomialsList() {
+        return polynomialsList;
+    }
+    public StringProperty resultProperty() {
+        return result;
+    }
+    public final String getResult() {
+        return result.get();
+    }
+
+}
diff --git a/code/polynomial-calculator/ViewModel/src/test/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModelTests.java b/code/polynomial-calculator/ViewModel/src/test/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..bb70285a9
--- /dev/null
+++ b/code/polynomial-calculator/ViewModel/src/test/java/ru/unn/agile/polynomialcalculator/viewmodel/ViewModelTests.java
@@ -0,0 +1,74 @@
+package ru.unn.agile.polynomialcalculator.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.polynomialcalculator.model.Polynomial;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void isAddingValidInput() {
+        setInputData("2.5", "1");
+        viewModel.addPolynomial();
+        assertEquals(new Polynomial(2.5, 1).getCoef(1),
+                viewModel.getPolynomialsList().get(0).getCoef(1), 1e-10);
+        assertEquals(new Polynomial(2.5, 1).getDegree(),
+                viewModel.getPolynomialsList().get(0).getDegree());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void isNotAddedInvalidInput() {
+        setInputData("-26vrt1.55", "2..645");
+        viewModel.addPolynomial();
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void isNotAddedEmptyInput() {
+        setInputData("", "");
+        viewModel.addPolynomial();
+    }
+
+    @Test
+    public void cantCalcPolynomialWhenPointListIsEmpty() {
+        viewModel.calcPolynomialAdd();
+        assertEquals(null, viewModel.getResult());
+    }
+
+    @Test
+    public void canCalcPolyOfTwoPolynomials() {
+        setInputData("1.1", "0");
+        viewModel.addPolynomial();
+        setInputData("2.4", "0");
+        viewModel.addPolynomial();
+        viewModel.calcPolynomialAdd();
+        assertEquals(3.5, Double.parseDouble(viewModel.getResult()), 1e-12);
+    }
+
+    @Test
+    public void isFormInputsEmptyAfterAddingNewPolynomials() {
+        setInputData("-36.516", "3");
+        viewModel.addPolynomial();
+        assertTrue(viewModel.degreeProperty().get().isEmpty()
+                && viewModel.coeffProperty().get().isEmpty()
+        );
+    }
+
+    private void setInputData(final String coeff, final String degree) {
+        viewModel.coeffProperty().set(coeff);
+        viewModel.degreeProperty().set(degree);
+    }
+}
diff --git a/code/prime-number/Model/src/main/java/ru/unn/agile/primenumber/model/PrimeNumberFinder.java b/code/prime-number/Model/src/main/java/ru/unn/agile/primenumber/model/PrimeNumberFinder.java
new file mode 100644
index 000000000..2462ba282
--- /dev/null
+++ b/code/prime-number/Model/src/main/java/ru/unn/agile/primenumber/model/PrimeNumberFinder.java
@@ -0,0 +1,61 @@
+package ru.unn.agile.primenumber.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class PrimeNumberFinder {
+
+    private int startSpan;
+    private int endSpan;
+
+    public PrimeNumberFinder(final int startSpan, final int endSpan) {
+        if (startSpan < 0 || endSpan < 0) {
+            throw new IllegalArgumentException(
+                    "Span's borders should be positive!");
+        }
+        if (startSpan > endSpan) {
+            throw new IllegalArgumentException(
+                    "Span's right border should be bigger than left border!");
+        }
+        this.endSpan = endSpan;
+        this.startSpan = startSpan;
+    }
+
+    public List<Integer> findNumbers() {
+        List<Integer> result = new ArrayList<>();
+        int realStart = Math.max(startSpan, 2);
+        for (int i = realStart; i < endSpan; i++) {
+            if (isOriginalPrimeNumber(i) || isNotDivideNumberWithoutRemainder(i)) {
+                result.add(i);
+            }
+        }
+        return result;
+    }
+
+    private boolean isOriginalPrimeNumber(final int number) {
+        return (number == Originals.TWO.number
+                || number == Originals.THREE.number
+                || number == Originals.FIVE.number
+                || number == Originals.SEVEN.number);
+    }
+
+    private boolean isNotDivideNumberWithoutRemainder(final int number) {
+        return (number % Originals.TWO.number != 0
+                && number % Originals.THREE.number != 0
+                && number % Originals.FIVE.number != 0
+                && number % Originals.SEVEN.number != 0);
+    }
+
+    enum Originals {
+        TWO(2),
+        THREE(3),
+        FIVE(5),
+        SEVEN(7);
+
+        private final int number;
+
+        Originals(final int number) {
+            this.number = number;
+        }
+    }
+}
diff --git a/code/prime-number/Model/src/test/java/ru/unn/agile/primenumber/model/PrimeNumberFinderTest.java b/code/prime-number/Model/src/test/java/ru/unn/agile/primenumber/model/PrimeNumberFinderTest.java
new file mode 100644
index 000000000..ef117b13c
--- /dev/null
+++ b/code/prime-number/Model/src/test/java/ru/unn/agile/primenumber/model/PrimeNumberFinderTest.java
@@ -0,0 +1,117 @@
+package ru.unn.agile.primenumber.model;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+public class PrimeNumberFinderTest {
+
+    @Test
+    public void canInitFinder() {
+        var finder = new PrimeNumberFinder(0, 10);
+        assertNotNull(finder);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotInitFinderWithNegativeStart() {
+        var finder = new PrimeNumberFinder(-1, 10);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotInitFinderWithNegativeEnd() {
+        var finder = new PrimeNumberFinder(0, -1);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void cannotInitFinderWithEndBiggerThanStart() {
+        var finder = new PrimeNumberFinder(10, 0);
+    }
+
+    @Test
+    public void cannotFindPrimeNumberBefore2() {
+        var finder = new PrimeNumberFinder(0, 2);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>();
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber1() {
+        var finder = new PrimeNumberFinder(0, 3);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>() {{
+            add(2);
+        }};
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber3() {
+        var finder = new PrimeNumberFinder(0, 4);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>() {{
+            add(2);
+            add(3);
+        }};
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber5() {
+        var finder = new PrimeNumberFinder(0, 6);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>() {{
+            add(2);
+            add(3);
+            add(5);
+        }};
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber7() {
+        var finder = new PrimeNumberFinder(0, 8);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>() {{
+            add(2);
+            add(3);
+            add(5);
+            add(7);
+        }};
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber11() {
+        var finder = new PrimeNumberFinder(0, 12);
+        var result = finder.findNumbers();
+        List<Integer> expectedResult = new ArrayList<>() {{
+            add(2);
+            add(3);
+            add(5);
+            add(7);
+            add(11);
+        }};
+        assertEquals(expectedResult, result);
+    }
+
+    @Test
+    public void canFindPrimeNumber101() {
+        var finder = new PrimeNumberFinder(0, 102);
+        var result = finder.findNumbers();
+        assertTrue(result.contains(101));
+    }
+
+    @Test
+    public void canFindPrimeNumber907() {
+        var finder = new PrimeNumberFinder(0, 1000);
+        var result = finder.findNumbers();
+        assertTrue(result.contains(907));
+    }
+
+}
diff --git a/code/prime-number/View/build.gradle b/code/prime-number/View/build.gradle
new file mode 100644
index 000000000..3903a370c
--- /dev/null
+++ b/code/prime-number/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.primenumber.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':prime-number-ViewModel')
+}
diff --git a/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/Main.java b/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/Main.java
new file mode 100644
index 000000000..15e7a7122
--- /dev/null
+++ b/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.primenumber.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("PrimeNumber.fxml"));
+        primaryStage.setTitle("Prime number finder");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/PrimeNumber.java b/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/PrimeNumber.java
new file mode 100644
index 000000000..864a5fdbb
--- /dev/null
+++ b/code/prime-number/View/src/main/java/ru/unn/agile/primenumber/view/PrimeNumber.java
@@ -0,0 +1,30 @@
+package ru.unn.agile.primenumber.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import ru.unn.agile.primenumber.viewmodel.ViewModel;
+
+public class PrimeNumber {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField startElement;
+    @FXML
+    private TextField endElement;
+    @FXML
+    private Button btnOk;
+    @FXML
+    private TextArea outputField;
+
+    @FXML
+    void initialize() {
+
+        startElement.textProperty().bindBidirectional(viewModel.startElemProperty());
+        endElement.textProperty().bindBidirectional(viewModel.endElemProperty());
+        outputField.textProperty().bindBidirectional(viewModel.outputProperty());
+
+        btnOk.setOnAction(event -> viewModel.findPrimaryNums());
+    }
+}
diff --git a/code/prime-number/View/src/main/resources/ru/unn/agile/primenumber/view/PrimeNumber.fxml b/code/prime-number/View/src/main/resources/ru/unn/agile/primenumber/view/PrimeNumber.fxml
new file mode 100644
index 000000000..4896ec3fe
--- /dev/null
+++ b/code/prime-number/View/src/main/resources/ru/unn/agile/primenumber/view/PrimeNumber.fxml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextArea?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.VBox?>
+<?import ru.unn.agile.primenumber.viewmodel.*?>
+
+<AnchorPane prefHeight="361.0" prefWidth="392.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.primenumber.view.PrimeNumber">
+   <fx:define>
+      <ViewModel fx:id="viewModel" />
+   </fx:define>
+   <children>
+      <VBox prefHeight="361.0" prefWidth="392.0" AnchorPane.bottomAnchor="10.0" AnchorPane.leftAnchor="10.0" AnchorPane.rightAnchor="10.0" AnchorPane.topAnchor="10.0">
+         <children>
+            <HBox prefHeight="30.0" prefWidth="392.0">
+               <children>
+                  <Label text="Start" />
+                  <TextField fx:id="startElement" prefHeight="25.0" prefWidth="100.0">
+                     <HBox.margin>
+                        <Insets left="5.0" right="10.0" />
+                     </HBox.margin>
+                  </TextField>
+                  <Label text="End" />
+                  <TextField fx:id="endElement" prefHeight="25.0" prefWidth="100.0">
+                     <HBox.margin>
+                        <Insets left="5.0" right="10.0" />
+                     </HBox.margin>
+                  </TextField>
+                  <Button fx:id="btnOk" mnemonicParsing="false" text="Find">
+                     <HBox.margin>
+                        <Insets left="5.0" right="10.0" />
+                     </HBox.margin>
+                  </Button>
+               </children>
+            </HBox>
+            <HBox prefHeight="329.0" prefWidth="392.0">
+               <children>
+                  <TextArea fx:id="outputField" prefHeight="526.0" prefWidth="392.0">
+                     <HBox.margin>
+                        <Insets top="10.0" />
+                     </HBox.margin>
+                  </TextArea>
+               </children>
+            </HBox>
+         </children>
+      </VBox>
+   </children>
+</AnchorPane>
diff --git a/code/prime-number/View/src/test/java/ru/unn/agile/primenumber/view/FakeViewTests.java b/code/prime-number/View/src/test/java/ru/unn/agile/primenumber/view/FakeViewTests.java
new file mode 100644
index 000000000..115e369a4
--- /dev/null
+++ b/code/prime-number/View/src/test/java/ru/unn/agile/primenumber/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.primenumber.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/prime-number/ViewModel/build.gradle b/code/prime-number/ViewModel/build.gradle
new file mode 100644
index 000000000..5ed2eb003
--- /dev/null
+++ b/code/prime-number/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':prime-number-Model')
+}
diff --git a/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/Status.java b/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/Status.java
new file mode 100644
index 000000000..c44092798
--- /dev/null
+++ b/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/Status.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.primenumber.viewmodel;
+
+enum Status {
+    WAITING("Please provide input data"),
+    READY("Press 'Find' or Enter"),
+    BAD_FORMAT("Bad format"),
+    SUCCESS("Success");
+
+    private final String name;
+
+    Status(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/ViewModel.java b/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/ViewModel.java
new file mode 100644
index 000000000..f746664d1
--- /dev/null
+++ b/code/prime-number/ViewModel/src/main/java/ru/unn/agile/primenumber/viewmodel/ViewModel.java
@@ -0,0 +1,119 @@
+package ru.unn.agile.primenumber.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.primenumber.model.PrimeNumberFinder;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+    private final StringProperty startElement = new SimpleStringProperty();
+    private final StringProperty endElement = new SimpleStringProperty();
+    private final StringProperty outputField = new SimpleStringProperty();
+    private final BooleanProperty findBtnDisabled = new SimpleBooleanProperty();
+    private final StringProperty status = new SimpleStringProperty();
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+    private final List<StringProperty> fields = new ArrayList<>() {
+        {
+            add(startElement);
+            add(endElement);
+        }
+    };
+
+    public BooleanProperty findBtnDisabledProperty() {
+        return findBtnDisabled;
+    }
+
+    public StringProperty startElemProperty() {
+        return startElement;
+    }
+
+    public StringProperty endElemProperty() {
+        return endElement;
+    }
+
+    public StringProperty outputProperty() {
+        return outputField;
+    }
+
+    public StringProperty statusProperty() {
+        return status;
+    }
+
+    public void findPrimaryNums() {
+        if (findBtnDisabled.get()) {
+            return;
+        }
+
+        try {
+            PrimeNumberFinder setOfPrimeNums = new PrimeNumberFinder(
+                    Integer.parseInt(fields.get(0).get()), Integer.parseInt(fields.get(1).get()));
+            List<Integer> primeNumsList = setOfPrimeNums.findNumbers();
+            outputField.set(primeNumsList.toString());
+            status.set(Status.SUCCESS.toString());
+        } catch (IllegalArgumentException e) {
+            outputField.set(e.getMessage());
+        }
+    }
+
+    public ViewModel() {
+        fields.get(0).set("");
+        fields.get(1).set("");
+        outputField.set("");
+        status.set(Status.WAITING.toString());
+
+        BooleanBinding couldFind = new BooleanBinding() {
+            {
+                super.bind(fields.get(0), fields.get(1));
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return getInputStatus() == Status.READY;
+            }
+        };
+        findBtnDisabled.bind(couldFind.not());
+
+        for (StringProperty field : fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    private Status getInputStatus() {
+        Status status = Status.READY;
+        if (fields.get(0).get().isEmpty() || fields.get(1).get().isEmpty()) {
+            status = Status.WAITING;
+        }
+        try {
+            if (!fields.get(0).get().isEmpty()) {
+                Integer.parseInt(fields.get(0).get());
+            }
+            if (!fields.get(1).get().isEmpty()) {
+                Integer.parseInt(fields.get(1).get());
+            }
+        } catch (NumberFormatException e) {
+            status = Status.BAD_FORMAT;
+        }
+        return status;
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            Status currentStatus = getInputStatus();
+            status.set(currentStatus.toString());
+            if (!currentStatus.equals(Status.SUCCESS)) {
+                outputField.set(status.get());
+            }
+        }
+    }
+}
diff --git a/code/prime-number/ViewModel/src/test/java/ru/unn/agile/primenumber/viewmodel/ViewModelTests.java b/code/prime-number/ViewModel/src/test/java/ru/unn/agile/primenumber/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..53dbe24a2
--- /dev/null
+++ b/code/prime-number/ViewModel/src/test/java/ru/unn/agile/primenumber/viewmodel/ViewModelTests.java
@@ -0,0 +1,124 @@
+package ru.unn.agile.primenumber.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void checkStartElemDefaultValue() {
+        assertEquals("", viewModel.startElemProperty().get());
+    }
+
+    @Test
+    public void checkEndElemDefaultValue() {
+        assertEquals("", viewModel.endElemProperty().get());
+    }
+
+    @Test
+    public void checkOutputFieldDefaultValues() {
+        assertEquals("", viewModel.outputProperty().get());
+    }
+
+    @Test
+    public void checkDefaultStatus() {
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsWaitingWhenCalculateWithEmptyFields() {
+        viewModel.findPrimaryNums();
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsReadyWhenFieldsAreFill() {
+        viewModel.startElemProperty().set("1");
+        viewModel.endElemProperty().set("10");
+
+        assertEquals(Status.READY.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void canReportBadFormat() {
+        viewModel.startElemProperty().set("a");
+        viewModel.endElemProperty().set("b");
+
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsWaitingIfValuesAreNotSet() {
+        assertEquals(Status.WAITING.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledInitially() {
+        assertTrue(viewModel.findBtnDisabledProperty().get());
+    }
+
+    @Test
+    public void findButtonIsDisabledWhenReportBadFormat() {
+        viewModel.startElemProperty().set("null");
+        viewModel.endElemProperty().set("NaN");
+
+        assertTrue(viewModel.findBtnDisabledProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledWithIncompleteInput() {
+        viewModel.startElemProperty().set("1");
+
+        assertTrue(viewModel.findBtnDisabledProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsEnabledWithCorrectInput() {
+        viewModel.startElemProperty().set("1");
+        viewModel.endElemProperty().set("4");
+
+        assertFalse(viewModel.findBtnDisabledProperty().get());
+    }
+
+    @Test
+    public void operationAddHasCorrectResult() {
+        viewModel.startElemProperty().set("1");
+        viewModel.endElemProperty().set("4");
+
+        viewModel.findPrimaryNums();
+
+        assertEquals("[2, 3]", viewModel.outputProperty().get());
+    }
+
+    @Test
+    public void canSetSuccessMessage() {
+        viewModel.startElemProperty().set("1");
+        viewModel.endElemProperty().set("2");
+
+        viewModel.findPrimaryNums();
+
+        assertEquals(Status.SUCCESS.toString(), viewModel.statusProperty().get());
+    }
+
+    @Test
+    public void statusIsReadyWhenSetProperValues() {
+        viewModel.startElemProperty().set("1");
+        viewModel.endElemProperty().set("2");
+
+        assertEquals(Status.READY.toString(), viewModel.statusProperty().get());
+    }
+}
diff --git a/code/quadratic-equation/Infrastructure/build.gradle b/code/quadratic-equation/Infrastructure/build.gradle
new file mode 100644
index 000000000..699432900
--- /dev/null
+++ b/code/quadratic-equation/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':quadratic-equation-ViewModel')
+    testCompile project(':quadratic-equation-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/quadratic-equation/Infrastructure/src/main/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLogger.java b/code/quadratic-equation/Infrastructure/src/main/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLogger.java
new file mode 100644
index 000000000..f9380d200
--- /dev/null
+++ b/code/quadratic-equation/Infrastructure/src/main/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLogger.java
@@ -0,0 +1,69 @@
+package ru.unn.agile.quadraticequation.infrastructure;
+
+import ru.unn.agile.quadraticequation.viewmodel.QuadraticEquationILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class QuadraticEquationTxtLogger implements QuadraticEquationILogger {
+
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss.SSS";
+    private static final String LOG_FORMAT = "%s > %s";
+    private final BufferedWriter writer;
+    private final String logFilename;
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    public QuadraticEquationTxtLogger(final String logFilename) {
+        this.logFilename = logFilename;
+
+        BufferedWriter writer = null;
+        try {
+            writer = new BufferedWriter(new FileWriter(logFilename));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        this.writer = writer;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            writer.write(String.format(LOG_FORMAT, now(), s));
+            writer.newLine();
+            writer.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader bufferedReader;
+        ArrayList<String> logs = new ArrayList<String>();
+        try {
+            bufferedReader = new BufferedReader(new FileReader(logFilename));
+            String newLine = bufferedReader.readLine();
+
+            while (newLine != null) {
+                logs.add(newLine);
+                newLine = bufferedReader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+
+        return logs;
+    }
+}
diff --git a/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ExtendedRegexMatcher.java b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ExtendedRegexMatcher.java
new file mode 100644
index 000000000..8a7474d38
--- /dev/null
+++ b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ExtendedRegexMatcher.java
@@ -0,0 +1,31 @@
+package ru.unn.agile.quadraticequation.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class ExtendedRegexMatcher extends BaseMatcher {
+    private final String regex;
+
+    private ExtendedRegexMatcher(final String regex) {
+        this.regex = regex;
+    }
+
+    @Override
+    public boolean matches(final Object o) {
+        return ((String) o).matches(regex);
+    }
+
+    @Override
+    public void describeTo(final Description expansion) {
+        expansion.appendText("matches regex = ");
+        expansion.appendText(regex);
+    }
+
+    static Matcher<? super String> matches(final String regex) {
+        ExtendedRegexMatcher matcher = new ExtendedRegexMatcher(regex);
+        @SuppressWarnings (value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>)   matcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLoggerTests.java b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLoggerTests.java
new file mode 100644
index 000000000..a4736b800
--- /dev/null
+++ b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/QuadraticEquationTxtLoggerTests.java
@@ -0,0 +1,70 @@
+package ru.unn.agile.quadraticequation.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.*;
+import static ru.unn.agile.quadraticequation.infrastructure.ExtendedRegexMatcher.matches;
+
+public class QuadraticEquationTxtLoggerTests {
+
+    private static final String LOG_FILENAME = "./QuadraticEquationViewModel_with_TxtLogger.log";
+    private QuadraticEquationTxtLogger textLogger;
+
+    @Before
+    public void setUp() {
+        textLogger = new QuadraticEquationTxtLogger(LOG_FILENAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(textLogger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(LOG_FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + LOG_FILENAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        String testLog = "Test log";
+        textLogger.log(testLog);
+        String message = textLogger.getLog().get(0);
+        assertThat(message, matches(".*" + testLog + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] testLogs = new String[]{"Test log 1", "Test log 2"};
+        for (String testLog: testLogs) {
+            textLogger.log(testLog);
+        }
+
+        List<String> actualMessages = textLogger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertThat(actualMessages.get(i), matches(".*" + testLogs[i] + "$"));
+        }
+    }
+
+    @Test
+    public void doesLogContainDate() {
+        String testMessage = "Test message";
+
+        textLogger.log(testMessage);
+
+        String message = textLogger.getLog().get(0);
+        assertThat(message,
+                matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} > .*"));
+    }
+}
diff --git a/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ViewModelWithTxtLoggerTests.java b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..ceb61da22
--- /dev/null
+++ b/code/quadratic-equation/Infrastructure/src/test/java/ru/unn/agile/quadraticequation/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,15 @@
+package ru.unn.agile.quadraticequation.infrastructure;
+
+
+import ru.unn.agile.quadraticequation.viewmodel.QuadraticEquationViewModel;
+import ru.unn.agile.quadraticequation.viewmodel.QuadraticEquationViewModelTest;
+
+public class ViewModelWithTxtLoggerTests extends QuadraticEquationViewModelTest {
+
+    @Override
+    public void setUp() {
+        QuadraticEquationTxtLogger realLogger =
+                new QuadraticEquationTxtLogger("./QuadraticEquationViewModel_with_TxtLogger.log");
+        super.setExternalViewModel(new QuadraticEquationViewModel(realLogger));
+    }
+}
diff --git a/code/quadratic-equasion/build.gradle b/code/quadratic-equation/Model/build.gradle
similarity index 100%
rename from code/quadratic-equasion/build.gradle
rename to code/quadratic-equation/Model/build.gradle
diff --git a/code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/Formatter.java b/code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/Formatter.java
similarity index 92%
rename from code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/Formatter.java
rename to code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/Formatter.java
index b65c7dfe4..d2d880972 100644
--- a/code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/Formatter.java
+++ b/code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/Formatter.java
@@ -1,10 +1,10 @@
-package ru.unn.agile.QuadraticEquasion.model;
+package ru.unn.agile.quadraticequation.model;
 
 public final class Formatter {
 
     private Formatter() { }
 
-    public static String getFormatted(final QuadraticEquasion qe) {
+    public static String getFormatted(final QuadraticEquation qe) {
         StringBuilder formattedString = new StringBuilder();
         double a = qe.getACoeff();
         double b = qe.getBCoeff();
diff --git a/code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/QuadraticEquasion.java b/code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/QuadraticEquation.java
similarity index 91%
rename from code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/QuadraticEquasion.java
rename to code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/QuadraticEquation.java
index 9f49a9589..234d31cf7 100644
--- a/code/quadratic-equasion/src/main/java/ru/unn/agile/QuadraticEquasion/model/QuadraticEquasion.java
+++ b/code/quadratic-equation/Model/src/main/java/ru/unn/agile/quadraticequation/model/QuadraticEquation.java
@@ -1,15 +1,15 @@
-package ru.unn.agile.QuadraticEquasion.model;
+package ru.unn.agile.quadraticequation.model;
 
 import ru.unn.agile.ComplexNumber.model.ComplexNumber;
 
-public final class QuadraticEquasion {
+public final class QuadraticEquation {
 
     private final double determinantCoeff = 4;
     private final double a;
     private final double b;
     private final double c;
 
-    public QuadraticEquasion(final double a, final double b, final double c) {
+    public QuadraticEquation(final double a, final double b, final double c) {
         if ((a == 0) && (b == 0)) {
             throw new IllegalArgumentException();
         }
@@ -35,7 +35,7 @@ public boolean equals(final Object object) {
         if (this == object) {
             return true;
         }
-        if (!(object instanceof QuadraticEquasion)) {
+        if (!(object instanceof QuadraticEquation)) {
             return false;
         }
         return hashCode() == object.hashCode();
diff --git a/code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/FormatterTests.java b/code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/FormatterTests.java
similarity index 73%
rename from code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/FormatterTests.java
rename to code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/FormatterTests.java
index 72c532f8f..881234b84 100644
--- a/code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/FormatterTests.java
+++ b/code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/FormatterTests.java
@@ -1,8 +1,6 @@
-package ru.unn.agile.QuadraticEquasion.Model;
+package ru.unn.agile.quadraticequation.model;
 
 import org.junit.Test;
-import ru.unn.agile.QuadraticEquasion.model.Formatter;
-import ru.unn.agile.QuadraticEquasion.model.QuadraticEquasion;
 
 import static org.junit.Assert.assertEquals;
 
@@ -39,49 +37,49 @@ public void canFormatZeroCoeff() {
 
     @Test
     public void canConvertToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(2.0, 2.0, 3.0);
+        QuadraticEquation qe = new QuadraticEquation(2.0, 2.0, 3.0);
         assertEquals("2.00(x^2) + 2.00x + 3.00", qe.toString());
     }
 
     @Test
     public void canConvertFloatingCoeffsToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(1.11, 2.22, 3.33);
+        QuadraticEquation qe = new QuadraticEquation(1.11, 2.22, 3.33);
        assertEquals("1.11(x^2) + 2.22x + 3.33", qe.toString());
     }
 
     @Test
     public void canConvertNegativeCoeffsToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(-1.0, -2.0, -3.0);
+        QuadraticEquation qe = new QuadraticEquation(-1.0, -2.0, -3.0);
         assertEquals(" - (x^2) - 2.00x - 3.00", qe.toString());
     }
 
     @Test
     public void canConvertCoeffsEqualsToOneToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(1.0, -1.0, 1.0);
+        QuadraticEquation qe = new QuadraticEquation(1.0, -1.0, 1.0);
         assertEquals("(x^2) - x + 1.00", qe.toString());
     }
 
     @Test
     public void canConvertWithZeroACoeffToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(0.0, -1.0, 1.0);
+        QuadraticEquation qe = new QuadraticEquation(0.0, -1.0, 1.0);
         assertEquals(" - x + 1.00", qe.toString());
     }
 
     @Test
     public void canConvertWithZeroBCoeffToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(1.0, 0.0, 1.0);
+        QuadraticEquation qe = new QuadraticEquation(1.0, 0.0, 1.0);
         assertEquals("(x^2) + 1.00", qe.toString());
     }
 
     @Test
     public void canConvertWithZeroCCoeffToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(1.0, -1.0, 0.0);
+        QuadraticEquation qe = new QuadraticEquation(1.0, -1.0, 0.0);
         assertEquals("(x^2) - x", qe.toString());
     }
 
     @Test
     public void canConvertWithTwoZeroCoeffsToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(0.0, 1.0, 0.0);
+        QuadraticEquation qe = new QuadraticEquation(0.0, 1.0, 0.0);
         assertEquals("x", qe.toString());
     }
 }
diff --git a/code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/QuadraticEquasionTests.java b/code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/QuadraticEquationTests.java
similarity index 58%
rename from code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/QuadraticEquasionTests.java
rename to code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/QuadraticEquationTests.java
index 31d8b596b..3ded54c89 100644
--- a/code/quadratic-equasion/src/test/java/ru/unn/agile/QuadraticEquasion/Model/QuadraticEquasionTests.java
+++ b/code/quadratic-equation/Model/src/test/java/ru/unn/agile/quadraticequation/model/QuadraticEquationTests.java
@@ -1,45 +1,44 @@
-package ru.unn.agile.QuadraticEquasion.Model;
+package ru.unn.agile.quadraticequation.model;
 
 import org.junit.Test;
 import ru.unn.agile.ComplexNumber.model.ComplexNumber;
-import ru.unn.agile.QuadraticEquasion.model.QuadraticEquasion;
 
 import static org.junit.Assert.*;
 
-public class QuadraticEquasionTests {
+public class QuadraticEquationTests {
 
     private final double delta = 0.01;
 
     @Test
     public void canCreateWithPositiveIndexes() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 2, 3);
+        QuadraticEquation qe = new QuadraticEquation(1, 2, 3);
         assertNotNull(qe);
     }
 
     @Test
     public void canCreateWithNegativeIndexes() {
-        QuadraticEquasion qe = new QuadraticEquasion(-1, -2, -3);
+        QuadraticEquation qe = new QuadraticEquation(-1, -2, -3);
         assertNotNull(qe);
     }
 
     @Test
     public void canCreateWithZeroIndexes() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 0, 0);
+        QuadraticEquation qe = new QuadraticEquation(1, 0, 0);
         assertNotNull(qe);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void canNotCreateWithAllZeroIndexes() {
-        QuadraticEquasion qe = new QuadraticEquasion(0, 0, 0);
+        QuadraticEquation qe = new QuadraticEquation(0, 0, 0);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void canNotCreateWithAAndBZeroIndexes() {
-        QuadraticEquasion qe = new QuadraticEquasion(0, 0, 10);
+        QuadraticEquation qe = new QuadraticEquation(0, 0, 10);
     }
 
-    @Test public void canSolveSimpleEquasion() {
-        QuadraticEquasion qe = new QuadraticEquasion(2, 2, -4);
+    @Test public void canSolveSimpleEquation() {
+        QuadraticEquation qe = new QuadraticEquation(2, 2, -4);
         ComplexNumber[] solution = new ComplexNumber[2];
         solution[0] = new ComplexNumber(1, 0);
         solution[1] = new ComplexNumber(-2, 0);
@@ -50,8 +49,8 @@ public void canNotCreateWithAAndBZeroIndexes() {
         assertEquals(solution[1], actual[1]);
     }
 
-    @Test public void canSolveEquasionWithZeroACoeff() {
-        QuadraticEquasion qe = new QuadraticEquasion(0, 3, -9);
+    @Test public void canSolveEquationWithZeroACoeff() {
+        QuadraticEquation qe = new QuadraticEquation(0, 3, -9);
         ComplexNumber[] solution = new ComplexNumber[1];
         solution[0] = new ComplexNumber(3, 0);
 
@@ -61,7 +60,7 @@ public void canNotCreateWithAAndBZeroIndexes() {
     }
 
     @Test public void solutionWithZeroACoeffGivesOneX() {
-        QuadraticEquasion qe = new QuadraticEquasion(0, 4, -16);
+        QuadraticEquation qe = new QuadraticEquation(0, 4, -16);
         ComplexNumber[] solution = new ComplexNumber[1];
         solution[0] = new ComplexNumber(4, 0);
 
@@ -70,8 +69,8 @@ public void canNotCreateWithAAndBZeroIndexes() {
         assertEquals(1, solution.length);
     }
 
-    @Test public void canSolveEquasionWithZeroBCoeff() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 0, -49);
+    @Test public void canSolveEquationWithZeroBCoeff() {
+        QuadraticEquation qe = new QuadraticEquation(1, 0, -49);
         ComplexNumber[] solution = new ComplexNumber[2];
         solution[0] = new ComplexNumber(7, 0);
         solution[1] = new ComplexNumber(-7, 0);
@@ -82,8 +81,8 @@ public void canNotCreateWithAAndBZeroIndexes() {
         assertEquals(solution[1], actual[1]);
     }
 
-    @Test public void canSolveEquasionWithZeroCCoeff() {
-        QuadraticEquasion qe = new QuadraticEquasion(4, 12, 0);
+    @Test public void canSolveEquationWithZeroCCoeff() {
+        QuadraticEquation qe = new QuadraticEquation(4, 12, 0);
         ComplexNumber[] solution = new ComplexNumber[2];
         solution[0] = new ComplexNumber(0, 0);
         solution[1] = new ComplexNumber(-3, 0);
@@ -94,8 +93,8 @@ public void canNotCreateWithAAndBZeroIndexes() {
         assertEquals(solution[1], actual[1]);
     }
 
-    @Test public void canSolveEquasionWithComplexSolution() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 1, 4);
+    @Test public void canSolveEquationWithComplexSolution() {
+        QuadraticEquation qe = new QuadraticEquation(1, 1, 4);
         ComplexNumber[] solution = new ComplexNumber[2];
         solution[0] = new ComplexNumber(-0.5, 1.93);
         solution[1] = new ComplexNumber(-0.5, -1.93);
@@ -109,48 +108,48 @@ public void canNotCreateWithAAndBZeroIndexes() {
     }
 
     @Test public void canConvertToString() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 1, 4);
+        QuadraticEquation qe = new QuadraticEquation(1, 1, 4);
         assertEquals("(x^2) + x + 4.00", qe.toString());
     }
 
     @Test
     public void canGiveHashCode() {
-        QuadraticEquasion qe = new QuadraticEquasion(1, 1, 1);
+        QuadraticEquation qe = new QuadraticEquation(1, 1, 1);
         assertTrue((qe.hashCode() >= 0));
     }
 
     @Test
-    public void notEqualEquasionAreNotEqual() {
-        QuadraticEquasion qe1 = new QuadraticEquasion(1, 1, 1);
-        QuadraticEquasion qe2 = new QuadraticEquasion(2, 2, 2);
+    public void notEqualEquationAreNotEqual() {
+        QuadraticEquation qe1 = new QuadraticEquation(1, 1, 1);
+        QuadraticEquation qe2 = new QuadraticEquation(2, 2, 2);
         assertNotEquals(qe1, qe2);
     }
 
     @Test
-    public void equalEquasionAreEqual() {
-        QuadraticEquasion qe1 = new QuadraticEquasion(1, 1, 1);
-        QuadraticEquasion qe2 = new QuadraticEquasion(1, 1, 1);
+    public void equalEquationAreEqual() {
+        QuadraticEquation qe1 = new QuadraticEquation(1, 1, 1);
+        QuadraticEquation qe2 = new QuadraticEquation(1, 1, 1);
         assertEquals(qe1, qe2);
     }
 
     @Test
-    public void equasionsWithDifferentACoeffsNotEqual() {
-        QuadraticEquasion qe1 = new QuadraticEquasion(2, 1, 1);
-        QuadraticEquasion qe2 = new QuadraticEquasion(1, 1, 1);
+    public void equationsWithDifferentACoeffsNotEqual() {
+        QuadraticEquation qe1 = new QuadraticEquation(2, 1, 1);
+        QuadraticEquation qe2 = new QuadraticEquation(1, 1, 1);
         assertNotEquals(qe1, qe2);
     }
 
     @Test
-    public void equasionsWithDifferentBCoeffsNotEqual() {
-        QuadraticEquasion qe1 = new QuadraticEquasion(1, 2, 1);
-        QuadraticEquasion qe2 = new QuadraticEquasion(1, 1, 1);
+    public void equationsWithDifferentBCoeffsNotEqual() {
+        QuadraticEquation qe1 = new QuadraticEquation(1, 2, 1);
+        QuadraticEquation qe2 = new QuadraticEquation(1, 1, 1);
         assertNotEquals(qe1, qe2);
     }
 
     @Test
-    public void equasionsWithDifferentCCoeffsNotEqual() {
-        QuadraticEquasion qe1 = new QuadraticEquasion(1, 1, 2);
-        QuadraticEquasion qe2 = new QuadraticEquasion(1, 1, 1);
+    public void equationsWithDifferentCCoeffsNotEqual() {
+        QuadraticEquation qe1 = new QuadraticEquation(1, 1, 2);
+        QuadraticEquation qe2 = new QuadraticEquation(1, 1, 1);
         assertNotEquals(qe1, qe2);
     }
 }
diff --git a/code/quadratic-equation/View/build.gradle b/code/quadratic-equation/View/build.gradle
new file mode 100644
index 000000000..5ad658428
--- /dev/null
+++ b/code/quadratic-equation/View/build.gradle
@@ -0,0 +1,17 @@
+plugins {
+	id 'application'
+	id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.quadraticequation.view.Main'
+
+javafx {
+	version = "11.0.2"
+	modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+	compile project(':quadratic-equation-ViewModel')
+	compile project(':quadratic-equation-Infrastructure')
+}
\ No newline at end of file
diff --git a/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/Main.java b/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/Main.java
new file mode 100644
index 000000000..ec38e106f
--- /dev/null
+++ b/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.quadraticequation.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("QuadraticEquation.fxml"));
+        primaryStage.setTitle("Quadratic Equation");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/QuadraticEquationView.java b/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/QuadraticEquationView.java
new file mode 100644
index 000000000..b053bf0bc
--- /dev/null
+++ b/code/quadratic-equation/View/src/main/java/ru/unn/agile/quadraticequation/view/QuadraticEquationView.java
@@ -0,0 +1,40 @@
+package ru.unn.agile.quadraticequation.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.quadraticequation.infrastructure.QuadraticEquationTxtLogger;
+import ru.unn.agile.quadraticequation.viewmodel.QuadraticEquationViewModel;
+
+public class QuadraticEquationView {
+    @FXML
+    private QuadraticEquationViewModel viewModel;
+    @FXML
+    private Button btnCalc;
+    @FXML
+    private TextField txtCoeffA;
+    @FXML
+    private TextField txtCoeffB;
+    @FXML
+    private TextField txtCoeffC;
+    @FXML
+    private Label lblResult;
+    @FXML
+    private Label lblError;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(
+                new QuadraticEquationTxtLogger("./QuadraticEquationViewModel_with_TxtLogger.log"));
+        btnCalc.disableProperty().bindBidirectional(viewModel.isCalculateButtonDisabled());
+        txtCoeffA.textProperty().bindBidirectional(viewModel.getTxtCoeffAProperty());
+        txtCoeffB.textProperty().bindBidirectional(viewModel.getTxtCoeffBProperty());
+        txtCoeffC.textProperty().bindBidirectional(viewModel.getTxtCoeffCProperty());
+        lblResult.textProperty().bindBidirectional(viewModel.getTxtResultProperty());
+        lblError.textProperty().bindBidirectional(viewModel.getTxtErrorProperty());
+        btnCalc.setOnAction(event -> {
+            viewModel.calculate();
+        });
+    }
+}
diff --git a/code/quadratic-equation/View/src/main/resources/ru/unn/agile/quadraticequation/view/QuadraticEquation.fxml b/code/quadratic-equation/View/src/main/resources/ru/unn/agile/quadraticequation/view/QuadraticEquation.fxml
new file mode 100644
index 000000000..e8a932e3c
--- /dev/null
+++ b/code/quadratic-equation/View/src/main/resources/ru/unn/agile/quadraticequation/view/QuadraticEquation.fxml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<?import ru.unn.agile.quadraticequation.viewmodel.QuadraticEquationViewModel?>
+<AnchorPane prefHeight="343.0" prefWidth="311.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.quadraticequation.view.QuadraticEquationView">
+   <fx:define>
+      <QuadraticEquationViewModel fx:id="viewModel" />
+   </fx:define>
+   <Label fx:id="lblResult" layoutX="14.0" layoutY="187.0" prefHeight="25.0" prefWidth="297.0" text="Label" />
+   <Label layoutX="142.0" layoutY="167.0" prefHeight="25.0" prefWidth="42.0" text="Result" />
+   <Label layoutX="21.0" layoutY="120.0" text="C" />
+   <TextField fx:id="txtCoeffC" layoutX="49.0" layoutY="116.0" prefHeight="25.0" prefWidth="128.0" />
+   <TextField fx:id="txtCoeffB" layoutX="49.0" layoutY="76.0" prefHeight="25.0" prefWidth="128.0" />
+   <TextField fx:id="txtCoeffA" layoutX="49.0" layoutY="37.0" prefHeight="25.0" prefWidth="128.0" />
+   <Label layoutX="21.0" layoutY="80.0" text="B" />
+   <Label layoutX="20.0" layoutY="41.0" text="A" />
+   <Label layoutX="48.0" layoutY="14.0" prefHeight="17.0" prefWidth="229.0" text="Format of equation: A * x^2 + B * x + C" />
+   <Button fx:id="btnCalc" layoutX="207.0" layoutY="76.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="71.0" text="Calculate" />
+   <Label fx:id="lblError" alignment="CENTER" layoutX="99.0" layoutY="141.0" prefHeight="25.0" prefWidth="128.0" text="Label" />
+   <TextArea fx:id="areaLog" editable="false" layoutX="21.0" layoutY="219.0" prefHeight="113.0" prefWidth="270.0" text="${viewModel.logs}" VBox.vgrow="ALWAYS" />
+</AnchorPane>
diff --git a/code/quadratic-equation/ViewModel/build.gradle b/code/quadratic-equation/ViewModel/build.gradle
new file mode 100644
index 000000000..d695023ef
--- /dev/null
+++ b/code/quadratic-equation/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':quadratic-equation-Model')
+}
\ No newline at end of file
diff --git a/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationILogger.java b/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationILogger.java
new file mode 100644
index 000000000..e94512364
--- /dev/null
+++ b/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationILogger.java
@@ -0,0 +1,10 @@
+package ru.unn.agile.quadraticequation.viewmodel;
+
+import java.util.List;
+
+public interface QuadraticEquationILogger {
+
+    void log(String message);
+
+    List<String> getLog();
+}
diff --git a/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModel.java b/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModel.java
new file mode 100644
index 000000000..8309b145a
--- /dev/null
+++ b/code/quadratic-equation/ViewModel/src/main/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModel.java
@@ -0,0 +1,155 @@
+package ru.unn.agile.quadraticequation.viewmodel;
+
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+import ru.unn.agile.quadraticequation.model.QuadraticEquation;
+
+import java.util.List;
+
+public class QuadraticEquationViewModel {
+    private BooleanProperty btnCalcDisabledProp = new SimpleBooleanProperty();
+    private StringProperty txtCoeffAProp = new SimpleStringProperty();
+    private StringProperty txtCoeffBProp = new SimpleStringProperty();
+    private StringProperty txtCoeffCProp = new SimpleStringProperty();
+    private StringProperty txtResultProp = new SimpleStringProperty();
+    private StringProperty getTxtErrorProp = new SimpleStringProperty();
+    private final StringProperty logs = new SimpleStringProperty();
+    private QuadraticEquationILogger logger;
+
+    public QuadraticEquationViewModel() {
+        init();
+    }
+
+    public QuadraticEquationViewModel(final QuadraticEquationILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+        init();
+    }
+
+    private void init() {
+        btnCalcDisabledProp.setValue(true);
+        txtCoeffAProp.setValue("");
+        txtCoeffBProp.setValue("");
+        txtCoeffCProp.setValue("");
+        txtResultProp.setValue("");
+        getTxtErrorProp.setValue("");
+
+        txtCoeffAProp.addListener((observable, oldValue, newValue) -> {
+            inputValue(txtCoeffAProp, newValue);
+        });
+        txtCoeffBProp.addListener((observable, oldValue, newValue) -> {
+            inputValue(txtCoeffBProp, newValue);
+        });
+        txtCoeffCProp.addListener((observable, oldValue, newValue) -> {
+            inputValue(txtCoeffCProp, newValue);
+        });
+    }
+
+    private void inputValue(final StringProperty property, final String newValue) {
+        property.setValue(newValue);
+        btnCalcDisabledProp.setValue(!areTxtFieldsNotEmpty() || !canConvertCoeffsToDouble());
+        getTxtErrorProp.setValue("");
+    }
+
+    public BooleanProperty isCalculateButtonDisabled() {
+        return btnCalcDisabledProp;
+    }
+
+    public StringProperty getTxtCoeffAProperty() {
+        return txtCoeffAProp;
+    }
+
+    public StringProperty getTxtCoeffBProperty() {
+        return txtCoeffBProp;
+    }
+
+    public StringProperty getTxtCoeffCProperty() {
+        return txtCoeffCProp;
+    }
+
+    public StringProperty getTxtResultProperty() {
+        return txtResultProp;
+    }
+
+    private boolean areTxtFieldsNotEmpty() {
+        return !getTxtCoeffAProperty().get().isEmpty()
+                && !getTxtCoeffBProperty().get().isEmpty()
+                && !getTxtCoeffCProperty().get().isEmpty();
+    }
+
+    public void calculate() {
+        QuadraticEquation qe;
+        try {
+            qe = new QuadraticEquation(Double.parseDouble(txtCoeffAProp.get()),
+                    Double.parseDouble(txtCoeffBProp.get()),
+                    Double.parseDouble(txtCoeffCProp.get()));
+        } catch (IllegalArgumentException e) {
+            getTxtErrorProp.setValue("Incorrect Input Data");
+            return;
+        }
+        ComplexNumber[] result = qe.solve();
+        String res = formatResult(result);
+        String message = "Calculate for: " + "A = " + txtCoeffAProp.get()
+                + " B = " + txtCoeffBProp.get()
+                + " C = " + txtCoeffCProp.get()
+                + " Result: " + res;
+        logger.log(message);
+        updateLogs();
+        setTxtResultProp(res);
+    }
+
+    private String formatResult(final ComplexNumber[] result) {
+        StringBuilder res = new StringBuilder();
+        res.append("X1 = ").append(result[0]);
+        if (result.length > 1) {
+            res.append("; X2 = ").append(result[1]);
+        }
+
+        return res.toString();
+    }
+
+    private void setTxtResultProp(final String result) {
+        txtResultProp.setValue(result);
+    }
+
+    private boolean canConvertCoeffsToDouble() {
+        try {
+            Double.parseDouble(txtCoeffAProp.get());
+            Double.parseDouble(txtCoeffBProp.get());
+            Double.parseDouble(txtCoeffCProp.get());
+            return true;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+
+    public StringProperty getTxtErrorProperty() {
+        return getTxtErrorProp;
+    }
+
+    public List<String> getLog() {
+        return logger.getLog();
+    }
+
+    public void setLogger(final QuadraticEquationILogger logger) {
+        this.logger = logger;
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.getLog();
+        StringBuilder record = new StringBuilder("");
+        for (String log : fullLog) {
+            record.append(log).append("\n");
+        }
+        logs.set(record.toString());
+    }
+}
diff --git a/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationFakeLogger.java b/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationFakeLogger.java
new file mode 100644
index 000000000..9852ba72e
--- /dev/null
+++ b/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationFakeLogger.java
@@ -0,0 +1,19 @@
+package ru.unn.agile.quadraticequation.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class QuadraticEquationFakeLogger implements QuadraticEquationILogger {
+
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String message) {
+        log.add(message);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModelTest.java b/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModelTest.java
new file mode 100644
index 000000000..d7711b06f
--- /dev/null
+++ b/code/quadratic-equation/ViewModel/src/test/java/ru/unn/agile/quadraticequation/viewmodel/QuadraticEquationViewModelTest.java
@@ -0,0 +1,197 @@
+package ru.unn.agile.quadraticequation.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.ComplexNumber.model.ComplexNumber;
+
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+public class QuadraticEquationViewModelTest {
+    private QuadraticEquationViewModel viewModel;
+
+    public void setExternalViewModel(final QuadraticEquationViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        if (viewModel == null) {
+            viewModel = new QuadraticEquationViewModel(new QuadraticEquationFakeLogger());
+        }
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void viewModelConstructorThrowsExceptionWithNullLogger() {
+        QuadraticEquationViewModel viewModel = new QuadraticEquationViewModel(null);
+    }
+
+    @Test
+    public void whenNoDataInputCalcButtonIsDisable() {
+        assertTrue(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void afterInputCalcButtonIsEnabled() {
+        setParams("10", "10", "10");
+        assertFalse(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void afterInputNotAllDataCalcButtonIsDisabled() {
+        viewModel.getTxtCoeffAProperty().setValue("10");
+        assertTrue(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void afterCleanButtonIsDisabled() {
+        setParams("10", "10", "10");
+        viewModel.getTxtCoeffAProperty().setValue("");
+        assertTrue(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void canCalculateByClick() {
+        setParams("2", "2", "-4");
+
+        viewModel.calculate();
+        ComplexNumber[] solution = new ComplexNumber[2];
+        solution[0] = new ComplexNumber(1, 0);
+        solution[1] = new ComplexNumber(-2, 0);
+        assertEquals(
+                "X1 = 1.0 + 0.0i; X2 = -2.0 + 0.0i",
+                viewModel.getTxtResultProperty().get()
+        );
+    }
+
+    @Test
+    public void getErrorWhenInputIsNumbersButIncorrect() {
+        setParams("0", "0", "10");
+        viewModel.calculate();
+        assertEquals("Incorrect Input Data", viewModel.getTxtErrorProperty().get());
+    }
+
+    @Test
+    public void calcButtonIsDisabledWhenNotNumbersInput() {
+        setParams("abc", "0", "10");
+        assertTrue(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void canOutputWhenOneSolution() {
+        setParams("0", "3", "-9");
+
+        viewModel.calculate();
+        ComplexNumber[] solution = new ComplexNumber[1];
+        solution[0] = new ComplexNumber(3, 0);
+        assertEquals(
+                "X1 = 3.0 + 0.0i",
+                viewModel.getTxtResultProperty().get()
+        );
+    }
+
+    @Test
+    public void canCleanErrorLabelAfterInputCorrectData() {
+        setParams("0", "0", "10");
+        viewModel.calculate();
+        viewModel.getTxtCoeffAProperty().setValue("10");
+        viewModel.calculate();
+        assertEquals("", viewModel.getTxtErrorProperty().get());
+    }
+
+    @Test
+    public void canEnabledCalcButtonAfterChangeIncorrectCoeff() {
+        setParams("abc", "0", "10");
+        viewModel.getTxtCoeffAProperty().setValue("10");
+        assertFalse(viewModel.isCalculateButtonDisabled().get());
+    }
+
+    @Test
+    public void canParseAndCalculateWithDoubleValue() {
+        setParams("-0.2", "0.2", "0.4");
+
+        viewModel.calculate();
+        ComplexNumber[] solution = new ComplexNumber[2];
+        solution[0] = new ComplexNumber(-1, 0);
+        solution[1] = new ComplexNumber(2, 0);
+        assertEquals(
+                "X1 = -1.0 + 0.0i; X2 = 2.0 + 0.0i",
+                viewModel.getTxtResultProperty().get()
+        );
+    }
+
+    @Test
+    public void logIsEmptyInTheBeginning() {
+        List<String> log = viewModel.getLog();
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logIsNotEmptyAfterCalculation() {
+        setParams("-2", "2", "4");
+
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertFalse(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsInputArgumentsAfterCalculation() {
+        setParams("-2", "2", "4");
+
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + viewModel.getTxtCoeffAProperty().get()
+                + ".*" + viewModel.getTxtCoeffBProperty().get()
+                + ".*" + viewModel.getTxtCoeffCProperty().get() + ".*"));
+    }
+
+    @Test
+    public void argumentsInfoIsProperlyFormatted() {
+        setParams("-2", "2", "4");
+
+        viewModel.calculate();
+
+        String message = viewModel.getLog().get(0);
+        assertTrue(message.matches(".*"
+                + ": A = " + viewModel.getTxtCoeffAProperty().get()
+                + " B = " + viewModel.getTxtCoeffBProperty().get()
+                + " C = " + viewModel.getTxtCoeffCProperty().get() + ".*"));
+    }
+
+    @Test
+    public void logContainsResult() {
+        setParams("-2", "2", "4");
+
+        viewModel.calculate();
+
+        String message = viewModel.getLog().get(0);
+        assertTrue(message.matches(".*" + "Result" + ".*"));
+    }
+
+    @Test
+    public void resultProperlyFormattedInLog() {
+        setParams("-2", "2", "4");
+
+        viewModel.calculate();
+
+        String message = viewModel.getLog().get(0);
+        String resultMessage = message.substring(message.indexOf("Result"));
+        assertEquals("Result: " + viewModel.getTxtResultProperty().get(), resultMessage);
+    }
+
+    private void setParams(final String a, final String b, final String c) {
+        viewModel.getTxtCoeffAProperty().setValue(a);
+        viewModel.getTxtCoeffBProperty().setValue(b);
+        viewModel.getTxtCoeffCProperty().setValue(c);
+    }
+}
diff --git a/code/queue/src/main/java/ru/unn/agile/Queue/model/Queue.java b/code/queue/Model/src/main/java/ru/unn/agile/Queue/model/Queue.java
similarity index 94%
rename from code/queue/src/main/java/ru/unn/agile/Queue/model/Queue.java
rename to code/queue/Model/src/main/java/ru/unn/agile/Queue/model/Queue.java
index a3f59f53f..9a2162757 100644
--- a/code/queue/src/main/java/ru/unn/agile/Queue/model/Queue.java
+++ b/code/queue/Model/src/main/java/ru/unn/agile/Queue/model/Queue.java
@@ -41,6 +41,10 @@ public boolean isEmpty() {
         return list.isEmpty();
     }
 
+    public void clear() {
+        list.clear();
+    }
+
     private void checkIsNotEmpty() {
         if (isEmpty()) {
             throw new NullPointerException("Queue is empty");
diff --git a/code/queue/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java b/code/queue/Model/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java
similarity index 96%
rename from code/queue/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java
rename to code/queue/Model/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java
index 198c699ab..9332be324 100644
--- a/code/queue/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java
+++ b/code/queue/Model/src/test/java/ru/unn/agile/Queue/Model/QueueTest.java
@@ -131,6 +131,17 @@ public void throwWhenGetTailStringElementFromEmptyQueue() {
         newQueue.getTail();
     }
 
+    @Test
+    public void canClearQueue() {
+        Queue<String> newQueue = new Queue<>();
+        String firstElement = "Test string number one";
+        newQueue.push(firstElement);
+
+        newQueue.clear();
+
+        assertTrue(newQueue.isEmpty());
+    }
+
     @Test
     public void canPopIntegerElementFromQueue() {
         Queue<Integer> newQueue = new Queue<>();
diff --git a/code/queue/View/build.gradle b/code/queue/View/build.gradle
new file mode 100644
index 000000000..e10aacc92
--- /dev/null
+++ b/code/queue/View/build.gradle
@@ -0,0 +1,16 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.queue.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':queue-ViewModel')
+}
diff --git a/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Main.java b/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Main.java
new file mode 100644
index 000000000..b986f4058
--- /dev/null
+++ b/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.queue.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("Queue.fxml"));
+        primaryStage.setTitle("Queue");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Queue.java b/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Queue.java
new file mode 100644
index 000000000..5c200f4de
--- /dev/null
+++ b/code/queue/View/src/main/java/ru/unn/agile/Queue/view/Queue.java
@@ -0,0 +1,73 @@
+package ru.unn.agile.queue.view;
+
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import ru.unn.agile.queue.viewmodel.ViewModel;
+
+public class Queue {
+
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField queueNewElement;
+    @FXML
+    private Button addElement;
+    @FXML
+    private Button popElement;
+    @FXML
+    private Button clearQueue;
+    @FXML
+    private Button getHead;
+    @FXML
+    private Button getTail;
+    @FXML
+    private Label queueResult;
+    @FXML
+    private Label status;
+
+    @FXML
+    void initialize() {
+        queueNewElement.textProperty().bindBidirectional(viewModel.queueElementProperty());
+        queueResult.textProperty().bindBidirectional(viewModel.queueResultProperty());
+        status.textProperty().bindBidirectional(viewModel.queueStatusProperty());
+
+        addElement.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.pushProcess();
+            }
+        });
+
+        popElement.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.popProcess();
+            }
+        });
+
+        clearQueue.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.clearProcess();
+            }
+        });
+
+        getHead.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.getHeadProcess();
+            }
+        });
+
+        getTail.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.getTailProcess();
+            }
+        });
+    }
+}
diff --git a/code/queue/View/src/main/resources/ru/unn/agile/Queue/view/Queue.fxml b/code/queue/View/src/main/resources/ru/unn/agile/Queue/view/Queue.fxml
new file mode 100644
index 000000000..037f0ff4e
--- /dev/null
+++ b/code/queue/View/src/main/resources/ru/unn/agile/Queue/view/Queue.fxml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import java.lang.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+<?import ru.unn.agile.queue.viewmodel.*?>
+
+<AnchorPane prefHeight="274.0" prefWidth="393.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.Queue.view.Queue">
+   <fx:define>
+      <ViewModel fx:id="viewModel" />
+   </fx:define>
+   <children>
+      <Pane prefHeight="274.0" prefWidth="393.0">
+         <children>
+            <Label layoutX="15.0" layoutY="14.0" prefHeight="25.0" prefWidth="117.0" text="Element to add:">
+               <font>
+                  <Font size="16.0" />
+               </font>
+            </Label>
+            <TextField fx:id="queueNewElement" layoutX="153.0" layoutY="12.0" prefHeight="25.0" prefWidth="117.0" />
+            <Button fx:id="addElement" layoutX="294.0" layoutY="12.0" mnemonicParsing="false" text="Add element" />
+            <Button fx:id="popElement" layoutX="294.0" layoutY="46.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="84.0" text="Pop element" />
+            <Label layoutX="15.0" layoutY="235.0" prefHeight="25.0" prefWidth="101.0" text="Queue status:">
+               <font>
+                  <Font size="16.0" />
+               </font>
+            </Label>
+            <Label fx:id="queueResult" layoutX="125.0" layoutY="235.0" prefHeight="25.0" prefWidth="254.0">
+               <opaqueInsets>
+                  <Insets />
+               </opaqueInsets>
+            </Label>
+            <Button fx:id="clearQueue" layoutX="294.0" layoutY="80.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="84.0" text="Clear queue" />
+            <Label layoutX="15.0" layoutY="63.0" text="Status:" />
+            <Label fx:id="status" layoutX="60.0" layoutY="63.0" prefHeight="17.0" prefWidth="188.0" />
+            <Button fx:id="getHead" layoutX="294.0" layoutY="112.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="84.0" text="Get head" />
+            <Button fx:id="getTail" layoutX="294.0" layoutY="146.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="84.0" text="Get tail" />
+         </children>
+      </Pane>
+   </children>
+</AnchorPane>
diff --git a/code/queue/View/src/test/java/ru/unn/agile/Queue/view/FakeViewTests.java b/code/queue/View/src/test/java/ru/unn/agile/Queue/view/FakeViewTests.java
new file mode 100644
index 000000000..50e329d9b
--- /dev/null
+++ b/code/queue/View/src/test/java/ru/unn/agile/Queue/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.queue.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/queue/ViewModel/build.gradle b/code/queue/ViewModel/build.gradle
new file mode 100644
index 000000000..ce14141df
--- /dev/null
+++ b/code/queue/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':queue-Model')
+}
\ No newline at end of file
diff --git a/code/queue/ViewModel/src/main/java/ru/unn/agile/Queue/ViewModel/ViewModel.java b/code/queue/ViewModel/src/main/java/ru/unn/agile/Queue/ViewModel/ViewModel.java
new file mode 100644
index 000000000..11a468dd7
--- /dev/null
+++ b/code/queue/ViewModel/src/main/java/ru/unn/agile/Queue/ViewModel/ViewModel.java
@@ -0,0 +1,155 @@
+package ru.unn.agile.queue.viewmodel;
+
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.queue.model.Queue;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+
+    private Queue<Double> queue = new Queue<>();
+    private final StringProperty queueElementInput = new SimpleStringProperty();
+    private final StringProperty queueResult = new SimpleStringProperty();
+    private final StringProperty queueStatus = new SimpleStringProperty();
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+    private double key;
+
+    public ViewModel() {
+        queueElementInput.set("");
+        queueResult.set("");
+        queueStatus.set("");
+
+        final List<StringProperty> fields = new ArrayList<>() { {
+            add(queueElementInput);
+            add(queueResult);
+            add(queueStatus);
+        }};
+        for (StringProperty field: fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            queueStatus.set(getStatus().toString());
+        }
+    }
+
+    public StringProperty queueElementProperty() {
+        return queueElementInput;
+    }
+    public StringProperty queueResultProperty() {
+        return queueResult;
+    }
+
+    public StringProperty queueStatusProperty() {
+        return queueStatus;
+    }
+
+    public void setQueueInputElement(final String input) {
+        queueElementInput.set(input);
+    }
+
+    public void setQueueResult(final String input) {
+        queueResult.set(input);
+    }
+
+    public void setQueueStatus(final String input) {
+        queueStatus.set(input);
+    }
+
+    public String getQueueElement() {
+        return queueElementInput.get();
+    }
+
+    public String getQueueResult() {
+        return queueResult.get();
+    }
+
+    public String getQueueStatus() {
+        return queueStatus.get();
+    }
+
+    public void pushProcess() {
+        try {
+            queue.push(key);
+            queueStatus.set(Status.SUCCESS.toString());
+            queueResult.set("Push element: " + Double.toString(key));
+        } catch (IllegalArgumentException iae) {
+            queueResult.set("The item cannot be empty.");
+        }
+    }
+
+    public void popProcess() {
+        try {
+            double popElement = queue.pop();
+            queueStatus.set(Status.SUCCESS.toString());
+            queueResult.set("Pop element: " + Double.toString(popElement));
+        } catch (NullPointerException npe) {
+            queueResult.set("Queue is empty.");
+        }
+    }
+
+    public void clearProcess() {
+        queue.clear();
+        queueStatus.set(Status.SUCCESS.toString());
+        queueResult.set("Queue cleared");
+    }
+
+    public void getHeadProcess() {
+        try {
+            double head = queue.getHead();
+            queueStatus.set(Status.SUCCESS.toString());
+            queueResult.set("Head is: " + Double.toString(head));
+        } catch (NullPointerException npe) {
+            queueResult.set("Queue is empty.");
+        }
+    }
+
+    public void getTailProcess() {
+        try {
+            double tail = queue.getTail();
+            queueStatus.set(Status.SUCCESS.toString());
+            queueResult.set("Tail is: " + Double.toString(tail));
+        } catch (NullPointerException npe) {
+            queueResult.set("Queue is empty.");
+        }
+    }
+
+    public Status getStatus() {
+        Status status = Status.READY;
+        try {
+            key = Double.parseDouble(queueElementInput.get());
+        } catch (NumberFormatException nfe) {
+            status = Status.BAD_ELEMENT_FORMAT;
+        }
+        if (getQueueElement().isEmpty()) {
+            status = Status.WAITING;
+        }
+
+        return status;
+    }
+}
+
+enum Status {
+    WAITING("Waiting for input"),
+    READY("Press Add element"),
+    BAD_ELEMENT_FORMAT("Bad element format."),
+    SUCCESS("Success");
+
+    private final String name;
+    Status(final String name) {
+        this.name = name;
+    }
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/queue/ViewModel/src/test/java/ru/unn/agile/Queue/viewmodel/ViewModelTests.java b/code/queue/ViewModel/src/test/java/ru/unn/agile/Queue/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..6fe66eaa0
--- /dev/null
+++ b/code/queue/ViewModel/src/test/java/ru/unn/agile/Queue/viewmodel/ViewModelTests.java
@@ -0,0 +1,171 @@
+package ru.unn.agile.queue.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+    @Before
+    public void creatingViewModel() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void deletingViewModel() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canInitDefaultQueueInputValue() {
+        assertEquals("", viewModel.getQueueElement());
+    }
+
+    @Test
+    public void canInitDefaultResult() {
+        assertEquals("", viewModel.getQueueResult());
+    }
+
+    @Test
+    public void canInitDefaultStatus() {
+        assertEquals("", viewModel.getQueueStatus());
+    }
+
+
+    @Test
+    public void canSetElementInputValue() {
+        String expectedValue = "2";
+
+        viewModel.setQueueInputElement("2");
+        var actualValue = viewModel.getQueueElement();
+
+        assertEquals(expectedValue, actualValue);
+    }
+
+    @Test
+    public void canGetElementInputProperty() {
+        viewModel.setQueueInputElement("1");
+
+        assertEquals(viewModel.getQueueElement(), viewModel.queueElementProperty().get());
+    }
+
+    @Test
+    public void canGetResultProperty() {
+        viewModel.setQueueResult("1,2,3");
+
+        assertEquals(viewModel.getQueueResult(), viewModel.queueResultProperty().get());
+    }
+
+    @Test
+    public void isStatusPushElementWhenPushElementToQueue() {
+        String expectedStatusValue = "Push element: 3.0";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusPushElementChangesWhenPushMoreThenOneElementToQueue() {
+        String expectedStatusValue = "Push element: 5.0";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        viewModel.setQueueInputElement("5");
+        viewModel.pushProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusPopElementWhenPopElementFromQueue() {
+        String expectedStatusValue = "Pop element: 3.0";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        viewModel.popProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusQueueIsEmptyWhenPopElementFromEmptyQueue() {
+        String expectedStatusValue = "Queue is empty.";
+
+        viewModel.popProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusQueueClearedWhenClearQueueWithElements() {
+        String expectedStatusValue = "Queue cleared";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        viewModel.clearProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusQueueClearedWhenClearQueueWithoutElements() {
+        String expectedStatusValue = "Queue cleared";
+
+        viewModel.clearProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusHeadIsWhenGetHeadFromQueueWithElements() {
+        String expectedStatusValue = "Head is: 3.0";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        viewModel.getHeadProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusQueueIsEmptyWhenGetHeadFromQueueWithoutElements() {
+        String expectedStatusValue = "Queue is empty.";
+
+        viewModel.getHeadProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusTailIsWhenGetTailFromQueueWithElements() {
+        String expectedStatusValue = "Tail is: 3.0";
+
+        viewModel.setQueueInputElement("3");
+        viewModel.pushProcess();
+        viewModel.getTailProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+
+    @Test
+    public void isStatusQueueIsEmptyWhenGetTailFromQueueWithoutElements() {
+        String expectedStatusValue = "Queue is empty.";
+
+        viewModel.getTailProcess();
+        var actualStatusValue = viewModel.getQueueResult();
+
+        assertEquals(expectedStatusValue, actualStatusValue);
+    }
+}
diff --git a/code/range/Model/src/main/java/ru/unn/agile/range/model/Range.java b/code/range/Model/src/main/java/ru/unn/agile/range/model/Range.java
new file mode 100644
index 000000000..a56e8037e
--- /dev/null
+++ b/code/range/Model/src/main/java/ru/unn/agile/range/model/Range.java
@@ -0,0 +1,85 @@
+package ru.unn.agile.range.model;
+
+import java.util.Arrays;
+import java.util.Objects;
+
+import static ru.unn.agile.range.model.Utils.isRange;
+
+public class Range {
+    private int startingElement;
+    private int finiteElement;
+
+    public Range(final String rangeString) {
+        if (!isRange(rangeString)) {
+            throw new IllegalArgumentException("Incorrect Input!");
+        }
+
+        String trimRangeString = rangeString.trim();
+        String[] sentences = trimRangeString.split("[\\[(,\\])]+");
+        startingElement = Integer.parseInt(sentences[1]);
+        finiteElement = Integer.parseInt(sentences[2]);
+        if (trimRangeString.startsWith("(")) {
+            startingElement++;
+        }
+        if (trimRangeString.endsWith(")")) {
+            finiteElement--;
+        }
+        if (startingElement > finiteElement) {
+            throw new IllegalArgumentException("No numbers in the given interval!");
+        }
+    }
+
+    public boolean containsSet(final int[] set) {
+        for (int element : set) {
+            if (!this.containsValue(element)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public boolean containsValue(final int number) {
+        return number >= startingElement && number <= finiteElement;
+    }
+
+    public int[] getAllPoints() {
+        int[] points = new int[finiteElement - startingElement + 1];
+        for (int i = startingElement; i <= finiteElement; i++) {
+            points[i - startingElement] = i;
+        }
+        return points;
+    }
+
+    public boolean containsRange(final Range range) {
+        return this.startingElement <= range.startingElement
+                && this.finiteElement >= range.finiteElement;
+    }
+
+    public int[] endPoints() {
+        return new int[]{startingElement, finiteElement};
+    }
+
+    public boolean overlapsRange(final Range range) {
+        long matchElements = Arrays.stream(range.getAllPoints())
+                .filter(x -> Arrays.stream(this.getAllPoints()).anyMatch(y -> y == x))
+                .count();
+        return matchElements > 0;
+    }
+
+    @Override
+    public boolean equals(final Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        Range range = (Range) o;
+        return startingElement == range.startingElement && finiteElement == range.finiteElement;
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(startingElement, finiteElement);
+    }
+}
diff --git a/code/range/Model/src/main/java/ru/unn/agile/range/model/Utils.java b/code/range/Model/src/main/java/ru/unn/agile/range/model/Utils.java
new file mode 100644
index 000000000..fe99bcfae
--- /dev/null
+++ b/code/range/Model/src/main/java/ru/unn/agile/range/model/Utils.java
@@ -0,0 +1,20 @@
+package ru.unn.agile.range.model;
+
+public final class Utils {
+
+    private Utils() {
+    }
+
+    public static boolean isInteger(final String input) {
+        return input.matches("-?\\d+");
+    }
+
+    public static boolean isIntegerSet(final String input) {
+        return input.matches("\\{-?\\d+(,-?\\d+)+?\\}");
+    }
+
+    public static boolean isRange(final String input) {
+        return input.matches("[(|\\[]-?\\d+,-?\\d+[\\]|)]");
+    }
+
+}
diff --git a/code/range/Model/src/test/java/ru/unn/agile/range/model/RangeTest.java b/code/range/Model/src/test/java/ru/unn/agile/range/model/RangeTest.java
new file mode 100644
index 000000000..9b62ce9de
--- /dev/null
+++ b/code/range/Model/src/test/java/ru/unn/agile/range/model/RangeTest.java
@@ -0,0 +1,223 @@
+package ru.unn.agile.range.model;
+
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.*;
+
+public class RangeTest {
+
+    @Test
+    public void containsIntegerValue() {
+        Range range = new Range("[10,11)");
+
+        assertTrue(range.containsValue(10));
+    }
+
+    @Test
+    public void notContainsIntegerValue() {
+        Range range = new Range("[10,11)");
+
+        assertFalse(range.containsValue(11));
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void throwWhenInitRangeIncorrectly() {
+        new Range("[11,11)");
+    }
+
+    @Test
+    public void containsSetOfIntegers() {
+        Range range = new Range("[10,15)");
+
+        assertTrue(range.containsSet(new int[]{10, 11, 13}));
+    }
+
+    @Test
+    public void notContainsSetWhenOneElementContains() {
+        Range range = new Range("[10,15)");
+
+        assertFalse(range.containsSet(new int[]{10, 16}));
+    }
+
+    @Test
+    public void notContainsSetOfIntegers() {
+        Range range = new Range("[10,15)");
+
+        assertFalse(range.containsSet(new int[]{9, 16}));
+    }
+
+    @Test
+    public void canGetAllPointsWhenMissedPoints() {
+        Range range = new Range("[10,15)");
+
+        assertNotEquals(Arrays.toString(new int[]{10, 14}), Arrays.toString(range.getAllPoints()));
+    }
+
+    @Test
+    public void canGetAllPointsWhenExtraPoints() {
+        Range range = new Range("(10,15)");
+
+        assertNotEquals(Arrays.toString(new int[]{10, 11, 12, 13, 14, 15}),
+                Arrays.toString(range.getAllPoints()));
+    }
+
+    @Test
+    public void canGetAllPoints() {
+        Range range = new Range("[10,15)");
+
+        assertEquals(Arrays.toString(new int[]{10, 11, 12, 13, 14}),
+                Arrays.toString(range.getAllPoints()));
+    }
+
+    @Test
+    public void cantContainRangeWithLargerEndElement() {
+        Range range = new Range("[10,15)");
+
+        assertFalse(range.containsRange(new Range("[9,16]")));
+    }
+
+    @Test
+    public void cantContainRangeWithLesserStartElement() {
+        Range range = new Range("[10,15)");
+
+        assertFalse(range.containsRange(new Range("[9,13]")));
+    }
+
+    @Test
+    public void cantContainLargerRange() {
+        Range range = new Range("[10,15)");
+
+        assertFalse(range.containsRange(new Range("[11,16]")));
+    }
+
+    @Test
+    public void canContainLesserRange() {
+        Range range = new Range("[10,15)");
+
+        assertTrue(range.containsRange(new Range("[11,13]")));
+    }
+
+    @Test
+    public void cantGetEndPointsWhenNonInclusiveBoundaries() {
+        Range range = new Range("(10,15)");
+
+        assertNotEquals(Arrays.toString(new int[]{10, 15}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void cantGetEndPointsWhenInclusiveBoundaries() {
+        Range range = new Range("[10,15]");
+
+        assertNotEquals(Arrays.toString(new int[]{11, 14}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void cantGetEndPointsWhenEndBoundaryIsInclusive() {
+        Range range = new Range("(10,15]");
+
+        assertNotEquals(Arrays.toString(new int[]{11, 14}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void cantGetEndPointsWhenStartBoundaryIsInclusive() {
+        Range range = new Range("[10,15)");
+
+        assertNotEquals(Arrays.toString(new int[]{11, 14}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void canGetEndPointsWhenStartBoundaryIsInclusive() {
+        Range range = new Range("[10,15)");
+
+        assertEquals(Arrays.toString(new int[]{10, 14}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void canGetEndPointsWhenInclusiveBoundaries() {
+        Range range = new Range("[10,15]");
+
+        assertEquals(Arrays.toString(new int[]{10, 15}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void canGetEndPointsWhenNonInclusiveBoundaries() {
+        Range range = new Range("(10,15)");
+
+        assertEquals(Arrays.toString(new int[]{11, 14}), Arrays.toString(range.endPoints()));
+    }
+
+    @Test
+    public void cantOverlapsWithRangeWithInclusiveStartBoundary() {
+        Range range1 = new Range("[10,15)");
+        Range range2 = new Range("[15,20)");
+
+        assertFalse(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void cantOverlapsWithRangeWithNonInclusiveStartBoundary() {
+        Range range1 = new Range("[10,15]");
+        Range range2 = new Range("(15,20)");
+
+        assertFalse(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void cantOverlapsWithRangeWithNonInclusiveEndBoundary() {
+        Range range1 = new Range("[10,15]");
+        Range range2 = new Range("(5,10)");
+
+        assertFalse(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void cantOverlapsWithRangeWhenOverlapsIsMissing() {
+        Range range1 = new Range("[11,15]");
+        Range range2 = new Range("(5,9)");
+
+        assertFalse(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void canOverlapsWithRangeWhenOverlapsIsPresent() {
+        Range range1 = new Range("[11,15]");
+        Range range2 = new Range("(9,19)");
+
+        assertTrue(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void canOverlapsWithSameRange() {
+        Range range1 = new Range("[11,20]");
+        Range range2 = new Range("[11,20]");
+
+        assertTrue(range1.overlapsRange(range2));
+    }
+
+    @Test
+    public void canEqualsWithSameRange() {
+        Range range1 = new Range("[11,20]");
+        Range range2 = new Range("[11,20]");
+
+        assertEquals(range1, range2);
+    }
+
+    @Test
+    public void canEqualsWithRangeWithNonInclusiveBoundaries() {
+        Range range1 = new Range("[11,20]");
+        Range range2 = new Range("(10,21)");
+
+        assertEquals(range1, range2);
+    }
+
+    @Test
+    public void cantEqualsWithAnotherRange() {
+        Range range1 = new Range("[11,20]");
+        Range range2 = new Range("(11,20)");
+
+        assertNotEquals(range1, range2);
+    }
+
+}
diff --git a/code/range/View/build.gradle b/code/range/View/build.gradle
new file mode 100644
index 000000000..7ca55fb35
--- /dev/null
+++ b/code/range/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.range.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':range-ViewModel')
+}
\ No newline at end of file
diff --git a/code/range/View/src/main/java/ru/unn/agile/range/view/Main.java b/code/range/View/src/main/java/ru/unn/agile/range/view/Main.java
new file mode 100644
index 000000000..72e74b957
--- /dev/null
+++ b/code/range/View/src/main/java/ru/unn/agile/range/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.range.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("Range.fxml"));
+        primaryStage.setTitle("Range");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/range/View/src/main/java/ru/unn/agile/range/view/Range.java b/code/range/View/src/main/java/ru/unn/agile/range/view/Range.java
new file mode 100644
index 000000000..3b7aeb799
--- /dev/null
+++ b/code/range/View/src/main/java/ru/unn/agile/range/view/Range.java
@@ -0,0 +1,52 @@
+package ru.unn.agile.range.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+import ru.unn.agile.range.viewmodel.ViewModel;
+
+public class Range {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private Button btnContains;
+    @FXML
+    private Button btnOverlaps;
+    @FXML
+    private Button btnEquals;
+    @FXML
+    private Button btnGetEndPoints;
+    @FXML
+    private Button btnGetAllPoints;
+    @FXML
+    private TextField txtResult;
+    @FXML
+    private TextField txtRange;
+    @FXML
+    private TextField txtInput;
+
+    @FXML
+    void initialize() {
+        viewModel = new ViewModel();
+        btnContains.disableProperty()
+                .bindBidirectional(viewModel.isContainsButtonDisabled());
+        btnOverlaps.disableProperty()
+                .bindBidirectional(viewModel.isOverlapsButtonDisabled());
+        btnEquals.disableProperty()
+                .bindBidirectional(viewModel.isEqualsButtonDisabled());
+        btnGetAllPoints.disableProperty()
+                .bindBidirectional(viewModel.isGetAllPointsButtonDisabled());
+        btnGetEndPoints.disableProperty()
+                .bindBidirectional(viewModel.isGetEndPointsButtonDisabled());
+
+        txtInput.textProperty().bindBidirectional(viewModel.getTxtInput());
+        txtRange.textProperty().bindBidirectional(viewModel.getTxtRange());
+        txtResult.textProperty().bindBidirectional(viewModel.getTxtResult());
+
+        btnContains.setOnAction(event -> viewModel.containsInput());
+        btnOverlaps.setOnAction(event -> viewModel.overlapsRange());
+        btnEquals.setOnAction(event -> viewModel.equalsRange());
+        btnGetEndPoints.setOnAction(event -> viewModel.getEndPoints());
+        btnGetAllPoints.setOnAction(event -> viewModel.getAllPoints());
+    }
+}
diff --git a/code/range/View/src/main/resources/ru/unn/agile/range/view/Range.fxml b/code/range/View/src/main/resources/ru/unn/agile/range/view/Range.fxml
new file mode 100644
index 000000000..248bdc3a7
--- /dev/null
+++ b/code/range/View/src/main/resources/ru/unn/agile/range/view/Range.fxml
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import java.lang.*?>
+<?import javafx.geometry.*?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import ru.unn.agile.range.viewmodel.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.range.view.Range">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+    <children>
+        <VBox alignment="TOP_CENTER" layoutX="6.0" spacing="10.0">
+            <padding>
+                <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+            </padding>
+            <children>
+                <HBox>
+                    <children>
+                        <Label minWidth="-Infinity" text="Enter Range: ">
+                            <opaqueInsets>
+                                <Insets />
+                            </opaqueInsets>
+                        </Label>
+                        <TextField fx:id="txtRange" />
+                    </children>
+                </HBox>
+                <HBox>
+                    <children>
+                        <Button fx:id="btnGetAllPoints" defaultButton="true" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Get All Points" HBox.hgrow="ALWAYS" />
+                        <Separator prefWidth="200.0" visible="false" />
+                        <Button fx:id="btnGetEndPoints" defaultButton="true" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Get End Points" HBox.hgrow="ALWAYS" />
+                    </children>
+                </HBox>
+                <HBox>
+                    <children>
+                        <Label minWidth="-Infinity" text="Enter Input: ">
+                            <opaqueInsets>
+                                <Insets />
+                            </opaqueInsets>
+                        </Label>
+                        <TextField fx:id="txtInput" />
+                    </children>
+                </HBox>
+                <HBox>
+                    <children>
+                        <Button fx:id="btnContains" defaultButton="true" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Contains" HBox.hgrow="ALWAYS" />
+                        <Separator prefWidth="200.0" visible="false" />
+                        <Button fx:id="btnOverlaps" defaultButton="true" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Overlaps" HBox.hgrow="ALWAYS" />
+                        <Separator prefWidth="200.0" visible="false" />
+                        <Button fx:id="btnEquals" defaultButton="true" mnemonicParsing="false" prefHeight="39.0" prefWidth="216.0" text="Equals" HBox.hgrow="ALWAYS" />
+                    </children>
+                </HBox>
+                <HBox>
+                    <children>
+                        <Label text="Result: " />
+                        <TextField fx:id="txtResult" editable="false" layoutX="350.0" layoutY="63.0" />
+                    </children>
+                </HBox>
+            </children>
+        </VBox>
+    </children>
+</AnchorPane>
diff --git a/code/range/View/src/test/java/ru/unn/agile/range/view/FakeViewTests.java b/code/range/View/src/test/java/ru/unn/agile/range/view/FakeViewTests.java
new file mode 100644
index 000000000..5a8220af0
--- /dev/null
+++ b/code/range/View/src/test/java/ru/unn/agile/range/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.range.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/range/ViewModel/build.gradle b/code/range/ViewModel/build.gradle
new file mode 100644
index 000000000..a5cca9482
--- /dev/null
+++ b/code/range/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':range-Model')
+}
diff --git a/code/range/ViewModel/src/main/java/ru/unn/agile/range/viewmodel/ViewModel.java b/code/range/ViewModel/src/main/java/ru/unn/agile/range/viewmodel/ViewModel.java
new file mode 100644
index 000000000..300de8fb7
--- /dev/null
+++ b/code/range/ViewModel/src/main/java/ru/unn/agile/range/viewmodel/ViewModel.java
@@ -0,0 +1,180 @@
+package ru.unn.agile.range.viewmodel;
+
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+import ru.unn.agile.range.model.Range;
+import ru.unn.agile.range.model.Utils;
+
+import java.util.Arrays;
+
+import static ru.unn.agile.range.model.Utils.*;
+
+public class ViewModel {
+
+    private BooleanProperty btnGetEndPointsDisabled = new SimpleBooleanProperty();
+    private BooleanProperty btnGetAllPointsDisabled = new SimpleBooleanProperty();
+    private BooleanProperty btnContainsDisabled = new SimpleBooleanProperty();
+    private BooleanProperty btnEqualsDisabled = new SimpleBooleanProperty();
+    private BooleanProperty btnOverlapsDisabled = new SimpleBooleanProperty();
+    private StringProperty txtInput = new SimpleStringProperty();
+    private StringProperty txtRange = new SimpleStringProperty();
+    private StringProperty txtResult = new SimpleStringProperty();
+    private final String yes = "Yes";
+    private final String no = "No";
+
+    private Range range;
+
+    public ViewModel() {
+        btnGetEndPointsDisabled.setValue(true);
+        btnGetAllPointsDisabled.setValue(true);
+        btnOverlapsDisabled.setValue(true);
+        btnEqualsDisabled.setValue(true);
+        btnContainsDisabled.setValue(true);
+
+        txtResult.setValue("");
+        txtRange.setValue("");
+        txtInput.setValue("");
+
+        txtRange.addListener((observable, oldValue, newValue) -> {
+            setRange(newValue);
+        });
+        txtInput.addListener((observable, oldValue, newValue) -> {
+            setInput(newValue);
+        });
+    }
+
+    public BooleanProperty isGetEndPointsButtonDisabled() {
+        return btnGetEndPointsDisabled;
+    }
+
+    public BooleanProperty isGetAllPointsButtonDisabled() {
+        return btnGetAllPointsDisabled;
+    }
+
+    public BooleanProperty isContainsButtonDisabled() {
+        return btnContainsDisabled;
+    }
+
+    public BooleanProperty isEqualsButtonDisabled() {
+        return btnEqualsDisabled;
+    }
+
+    public BooleanProperty isOverlapsButtonDisabled() {
+        return btnOverlapsDisabled;
+    }
+
+    public StringProperty getTxtRange() {
+        return txtRange;
+    }
+
+    public StringProperty getTxtResult() {
+        return txtResult;
+    }
+
+    public StringProperty getTxtInput() {
+        return txtInput;
+    }
+
+    public void containsInput() {
+        String input = txtInput.get();
+
+        if (isInteger(input)) {
+            if (range.containsValue(Integer.parseInt(input))) {
+                txtResult.setValue(yes);
+            } else {
+                txtResult.setValue(no);
+            }
+        }
+        if (isIntegerSet(input)) {
+            if (range.containsSet(Arrays.stream(input.substring(1, input.length() - 1).split(","))
+                    .map(String::trim).mapToInt(Integer::parseInt).toArray())) {
+                txtResult.setValue(yes);
+            } else {
+                txtResult.setValue(no);
+            }
+        }
+        if (isRange(input)) {
+            if (range.containsRange(new Range(input))) {
+                txtResult.setValue(yes);
+            } else {
+                txtResult.setValue(no);
+            }
+        }
+    }
+
+    public void overlapsRange() {
+        String input = txtInput.get();
+        if (isRange(input)) {
+            if (range.overlapsRange(new Range(input))) {
+                txtResult.setValue(yes);
+            } else {
+                txtResult.setValue(no);
+            }
+        }
+    }
+
+    public void equalsRange() {
+        String input = txtInput.get();
+        if (isRange(input)) {
+            if (range.equals(new Range(input))) {
+                txtResult.setValue(yes);
+            } else {
+                txtResult.setValue(no);
+            }
+        }
+    }
+
+    public void getAllPoints() {
+        txtResult.setValue(Arrays.toString(range.getAllPoints()));
+    }
+
+    public void getEndPoints() {
+        txtResult.setValue(Arrays.toString(range.endPoints()));
+    }
+
+
+    private void setRange(final String input) {
+
+        var isCorrectInput = Utils.isRange(input);
+
+        if (isCorrectInput) {
+            this.range = new Range(input);
+        }
+
+        btnGetAllPointsDisabled.setValue(!isCorrectInput);
+        btnGetEndPointsDisabled.setValue(!isCorrectInput);
+        disableAllButtonsConnectedWithInput();
+    }
+
+    private void setInput(final String input) {
+        disableAllButtonsConnectedWithInput();
+
+        if (btnGetEndPointsDisabled.get()) {
+            return;
+        }
+
+        if (isInteger(input) || isIntegerSet(input)) {
+            setEnable(btnContainsDisabled);
+        } else if (isRange(input)) {
+            setEnable(btnContainsDisabled);
+            setEnable(btnOverlapsDisabled);
+            setEnable(btnEqualsDisabled);
+        }
+    }
+
+    private void disableAllButtonsConnectedWithInput() {
+        setDisable(btnContainsDisabled);
+        setDisable(btnOverlapsDisabled);
+        setDisable(btnEqualsDisabled);
+    }
+
+    private void setDisable(final BooleanProperty booleanProperty) {
+        booleanProperty.setValue(true);
+    }
+
+    private void setEnable(final BooleanProperty booleanProperty) {
+        booleanProperty.setValue(true);
+    }
+}
diff --git a/code/range/ViewModel/src/test/java/ru/unn/agile/range/viewmodel/ViewModelTests.java b/code/range/ViewModel/src/test/java/ru/unn/agile/range/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..e311b1b8c
--- /dev/null
+++ b/code/range/ViewModel/src/test/java/ru/unn/agile/range/viewmodel/ViewModelTests.java
@@ -0,0 +1,258 @@
+package ru.unn.agile.range.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+
+    private ViewModel viewModel;
+    private final String yes = "Yes";
+    private final String no = "No";
+
+    @Before
+    public void setUp() {
+        setViewModel(new ViewModel());
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    protected void setViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Test
+    public void containsButtonIsDisabledByDefault() {
+        assertTrue(viewModel.isContainsButtonDisabled().get());
+    }
+
+    @Test
+    public void equalsButtonIsDisabledByDefault() {
+        assertTrue(viewModel.isEqualsButtonDisabled().get());
+    }
+
+    @Test
+    public void overlapsButtonIsDisabledByDefault() {
+        assertTrue(viewModel.isOverlapsButtonDisabled().get());
+    }
+
+    @Test
+    public void getAllPointsButtonIsDisabledByDefault() {
+        assertTrue(viewModel.isGetAllPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void getEndPointsButtonIsDisabledByDefault() {
+        assertTrue(viewModel.isGetEndPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void containsButtonIsDisabledWithIncorrectRange() {
+        viewModel.getTxtRange().setValue("word");
+        assertTrue(viewModel.isContainsButtonDisabled().get());
+    }
+
+    @Test
+    public void equalsButtonIsDisabledWithIncorrectRange() {
+        viewModel.getTxtRange().setValue("word");
+        assertTrue(viewModel.isEqualsButtonDisabled().get());
+    }
+
+    @Test
+    public void overlapsButtonIsDisabledWithIncorrectRange() {
+        viewModel.getTxtRange().setValue("word");
+        assertTrue(viewModel.isOverlapsButtonDisabled().get());
+    }
+
+    @Test
+    public void getAllPointsButtonIsDisabledWithIncorrectRange() {
+        viewModel.getTxtRange().setValue("word");
+        assertTrue(viewModel.isGetAllPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void getEndPointsButtonIsDisabledWithIncorrectRange() {
+        viewModel.getTxtRange().setValue("word");
+        assertTrue(viewModel.isGetEndPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void getAllPointsButtonIsEnabledWithCorrectRange() {
+        viewModel.getTxtRange().setValue("[1,2]");
+        assertFalse(viewModel.isGetAllPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void getEndPointsButtonIsEnabledWithCorrectRange() {
+        viewModel.getTxtRange().setValue("(-1,3)");
+        assertFalse(viewModel.isGetEndPointsButtonDisabled().get());
+    }
+
+    @Test
+    public void equalsButtonIsDisabledWithIncorrectInput() {
+        viewModel.getTxtRange().setValue("(-1,3)");
+        viewModel.getTxtInput().setValue("word");
+        assertTrue(viewModel.isEqualsButtonDisabled().get());
+    }
+
+    @Test
+    public void overlapsButtonIsDisabledWithIncorrectInput() {
+        viewModel.getTxtRange().setValue("(-1,3)");
+        viewModel.getTxtInput().setValue("word");
+        assertTrue(viewModel.isOverlapsButtonDisabled().get());
+    }
+
+    @Test
+    public void containsButtonIsDisabledWithIncorrectInput() {
+        viewModel.getTxtRange().setValue("(-1,3)");
+        viewModel.getTxtInput().setValue("word");
+        assertTrue(viewModel.isContainsButtonDisabled().get());
+    }
+
+    @Test
+    public void equalsButtonIsDisabledWithIncorrectRangeAndCorrectInput() {
+        viewModel.getTxtRange().setValue("word");
+        viewModel.getTxtInput().setValue("(-1,3)");
+        assertTrue(viewModel.isEqualsButtonDisabled().get());
+    }
+
+    @Test
+    public void overlapsButtonIsDisabledWithIncorrectRangeAndCorrectInput() {
+        viewModel.getTxtRange().setValue("word");
+        viewModel.getTxtInput().setValue("(-1,3)");
+        assertTrue(viewModel.isOverlapsButtonDisabled().get());
+    }
+
+    @Test
+    public void containsButtonIsDisabledWithIncorrectRangeAndCorrectInput() {
+        viewModel.getTxtRange().setValue("word");
+        viewModel.getTxtInput().setValue("(-1,3)");
+        assertTrue(viewModel.isContainsButtonDisabled().get());
+    }
+
+    @Test
+    public void getAllPointsButtonReturnsCorrectResult() {
+        viewModel.getTxtRange().setValue("[1,4]");
+
+        viewModel.getAllPoints();
+
+        assertEquals(Arrays.toString(new int[]{1, 2, 3, 4}), viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void getEndPointsButtonReturnsCorrectResult() {
+        viewModel.getTxtRange().setValue("[1,4]");
+
+        viewModel.getEndPoints();
+
+        assertEquals(Arrays.toString(new int[]{1, 4}), viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void overlapsWithRangeWhenOverlapsIsPresent() {
+        viewModel.getTxtRange().setValue("[11,15]");
+        viewModel.getTxtInput().setValue("(9,19)");
+
+        viewModel.overlapsRange();
+
+        assertEquals(yes, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void cantOverlapsWithRangeWhenOverlapsIsMissing() {
+        viewModel.getTxtRange().setValue("[11,15]");
+        viewModel.getTxtInput().setValue("(5,9)");
+
+        viewModel.overlapsRange();
+
+        assertEquals(no, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void canEqualsWithRangeWithNonInclusiveBoundaries() {
+        viewModel.getTxtRange().setValue("[11,20]");
+        viewModel.getTxtInput().setValue("(10,21)");
+
+        viewModel.equalsRange();
+
+        assertEquals(yes, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void cantEqualsWithAnotherRange() {
+        viewModel.getTxtRange().setValue("[11,20]");
+        viewModel.getTxtInput().setValue("(11,20)");
+
+        viewModel.equalsRange();
+
+        assertEquals(no, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void containsIntegerValue() {
+        viewModel.getTxtRange().setValue("[10,11)");
+        viewModel.getTxtInput().setValue("10");
+
+        viewModel.containsInput();
+
+        assertEquals(yes, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void notContainsIntegerValue() {
+        viewModel.getTxtRange().setValue("[10,11)");
+        viewModel.getTxtInput().setValue("11");
+
+        viewModel.containsInput();
+
+        assertEquals(no, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void containsSetOfIntegers() {
+        viewModel.getTxtRange().setValue("[10,15)");
+        viewModel.getTxtInput().setValue("{10,11,13}");
+
+        viewModel.containsInput();
+
+        assertEquals(yes, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void notContainsSetWhenOneElementContains() {
+        viewModel.getTxtRange().setValue("[10,15)");
+        viewModel.getTxtInput().setValue("{10,16}");
+
+        viewModel.containsInput();
+
+        assertEquals(no, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void canContainLesserRange() {
+        viewModel.getTxtRange().setValue("[10,15)");
+        viewModel.getTxtInput().setValue("[11,13]");
+
+        viewModel.containsInput();
+
+        assertEquals(yes, viewModel.getTxtResult().get());
+    }
+
+    @Test
+    public void cantContainLargerRange() {
+        viewModel.getTxtRange().setValue("[10,15)");
+        viewModel.getTxtInput().setValue("[11,16]");
+
+        viewModel.containsInput();
+        assertEquals(no, viewModel.getTxtResult().get());
+    }
+
+
+}
diff --git a/code/sorting/Infrastructure/build.gradle b/code/sorting/Infrastructure/build.gradle
new file mode 100644
index 000000000..93a721d5e
--- /dev/null
+++ b/code/sorting/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':sorting-ViewModel')
+    testCompile project(':sorting-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/sorting/Infrastructure/src/main/java/ru/unn/agile/sorting/infrastructure/TxtLogger.java b/code/sorting/Infrastructure/src/main/java/ru/unn/agile/sorting/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..34995445b
--- /dev/null
+++ b/code/sorting/Infrastructure/src/main/java/ru/unn/agile/sorting/infrastructure/TxtLogger.java
@@ -0,0 +1,68 @@
+package ru.unn.agile.sorting.infrastructure;
+
+import ru.unn.agile.sorting.viewmodel.ISortingLogger;
+
+import java.io.*;
+import java.io.BufferedWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class TxtLogger implements ISortingLogger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private final String filename;
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    public TxtLogger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        writer = logWriter;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            writer.write("[" + now() + "] " + s);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception ex) {
+            System.out.println(ex.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader bufferedReader;
+        ArrayList<String> log = new ArrayList<String>();
+        try {
+            bufferedReader = new BufferedReader(new FileReader(filename));
+            String line = bufferedReader.readLine();
+
+            while (line != null) {
+                log.add(line);
+                line = bufferedReader.readLine();
+            }
+        } catch (Exception ex) {
+            System.out.println(ex.getMessage());
+        }
+
+        return log;
+    }
+
+}
+
+
diff --git a/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/RegexMatcher.java b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/RegexMatcher.java
new file mode 100644
index 000000000..0bcf52267
--- /dev/null
+++ b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/RegexMatcher.java
@@ -0,0 +1,29 @@
+package ru.unn.agile.sorting.infrastructure;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+
+public class RegexMatcher extends BaseMatcher {
+    private final String regex;
+
+    public RegexMatcher(final String regex) {
+        this.regex = regex;
+    }
+
+    public boolean matches(final Object o) {
+        return ((String) o).matches(regex);
+    }
+
+    public void describeTo(final Description description) {
+        description.appendText("match regex = ");
+        description.appendText(regex);
+    }
+
+    public static Matcher<? super String> matchesPattern(final String regularExpression) {
+        RegexMatcher matcher = new RegexMatcher(regularExpression);
+        @SuppressWarnings (value = "unchecked")
+        Matcher<? super String> castedMatcher = (Matcher<? super String>)   matcher;
+        return castedMatcher;
+    }
+}
diff --git a/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/TxtLoggerTests.java b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/TxtLoggerTests.java
new file mode 100644
index 000000000..9e0358d80
--- /dev/null
+++ b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/TxtLoggerTests.java
@@ -0,0 +1,71 @@
+package ru.unn.agile.sorting.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.fail;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static ru.unn.agile.sorting.infrastructure.RegexMatcher.matchesPattern;
+
+public class TxtLoggerTests {
+    private static final String FILENAME = "./TxtLogger_Tests-lab3.log";
+    private TxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TxtLogger(FILENAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        String testMessage = "Test message";
+
+        txtLogger.log(testMessage);
+
+        String message = txtLogger.getLog().get(0);
+        assertThat(message, matchesPattern(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        txtLogger.log(messages[0]);
+        txtLogger.log(messages[1]);
+
+        List<String> actualMessages = txtLogger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertThat(actualMessages.get(i), matchesPattern(".*" + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String testMessage = "Test message";
+
+        txtLogger.log(testMessage);
+
+        String message = txtLogger.getLog().get(0);
+        assertThat(message, matchesPattern("^\\[\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\] .*"));
+    }
+}
diff --git a/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/ViewModelWithTxtLoggerTests.java b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..c7ae157ba
--- /dev/null
+++ b/code/sorting/Infrastructure/src/test/java/ru/unn/agile/sorting/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.sorting.infrastructure;
+
+import ru.unn.agile.sorting.viewmodel.ViewModel;
+import ru.unn.agile.sorting.viewmodel.ViewModelTests;
+
+public class ViewModelWithTxtLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        TxtLogger realLogger =
+                new TxtLogger("./ViewModel_with_TxtLogger_Tests-lab3.log");
+        super.setExternalViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/sorting/View/build.gradle b/code/sorting/View/build.gradle
index b94dcdcad..11775e6a4 100644
--- a/code/sorting/View/build.gradle
+++ b/code/sorting/View/build.gradle
@@ -12,5 +12,6 @@ javafx {
 }
 
 dependencies {
-	compile project(':sorting-ViewModel')
-}
\ No newline at end of file
+    compile project(':sorting-ViewModel')
+    compile project(':sorting-Infrastructure')
+}
diff --git a/code/sorting/View/src/main/java/ru/unn/agile/sorting/view/Sorting.java b/code/sorting/View/src/main/java/ru/unn/agile/sorting/view/Sorting.java
index a56a1b19d..d8fd580bd 100644
--- a/code/sorting/View/src/main/java/ru/unn/agile/sorting/view/Sorting.java
+++ b/code/sorting/View/src/main/java/ru/unn/agile/sorting/view/Sorting.java
@@ -6,6 +6,7 @@
 import javafx.scene.control.TextField;
 import ru.unn.agile.sorting.model.api.Direction;
 import ru.unn.agile.sorting.viewmodel.ViewModel;
+import ru.unn.agile.sorting.infrastructure.TxtLogger;
 
 public class Sorting {
     @FXML
@@ -19,6 +20,7 @@
 
     @FXML
     void initialize() {
+        viewModel.setLogger(new TxtLogger("./TxtLogger-lab3.log"));
         txtArray.textProperty().bindBidirectional(viewModel.inputArrayProperty());
         cbDirection.valueProperty().bindBidirectional(viewModel.directionProperty());
         btnSort.disableProperty().bindBidirectional(viewModel.sortButtonDisabledProperty());
diff --git a/code/sorting/View/src/main/resources/ru/unn/agile/sorting/view/Sorting.fxml b/code/sorting/View/src/main/resources/ru/unn/agile/sorting/view/Sorting.fxml
index cb1e5ffb6..7b1936701 100644
--- a/code/sorting/View/src/main/resources/ru/unn/agile/sorting/view/Sorting.fxml
+++ b/code/sorting/View/src/main/resources/ru/unn/agile/sorting/view/Sorting.fxml
@@ -10,13 +10,14 @@
         <ViewModel fx:id="viewModel" />
       </fx:define>
   <children>
-    <Button fx:id="btnSort" layoutX="299.0" layoutY="101.0" mnemonicParsing="false" prefWidth="70.0" text="Sort" />
+    <Button fx:id="btnSort" layoutX="299.0" layoutY="101.0" mnemonicParsing="false" prefHeight="33.99" prefWidth="70.0" text="Sort" />
     <Label layoutX="14.0" layoutY="15.0" prefHeight="34.0" prefWidth="374.0" text="Enter numbers with a space" />
     <TextField fx:id="txtArray" layoutX="14.0" layoutY="57.0" prefHeight="33.99" prefWidth="554.0" />
     <Label layoutX="14.0" layoutY="101.0" prefHeight="34.0" prefWidth="147.0" text="Sort direction:" />
-    <Label layoutX="14.0" layoutY="159.0" prefHeight="27.0" prefWidth="57.0" text="Result:" />
-    <Label fx:id="lbResult" layoutX="14.0" layoutY="186.0" prefHeight="34.0" prefWidth="540.0" text="${viewModel.sortedArray}" />
+    <Label layoutX="14.0" layoutY="150.0" prefHeight="27.0" prefWidth="57.0" text="Result:" />
+    <Label fx:id="lbResult" layoutX="14.0" layoutY="180.0" prefHeight="34.0" prefWidth="540.0" text="${viewModel.sortedArray}" />
     <ComboBox fx:id="cbDirection" layoutX="161.0" layoutY="101.0" prefHeight="33.99" items="${viewModel.directions}" />
-    <Label fx:id="lbError" layoutX="71.0" layoutY="160.99" prefWidth="496.99" text="${viewModel.error}" />
+    <Label fx:id="lbError" layoutX="71.0" layoutY="150.0" prefHeight="27.0" prefWidth="100.0" text="${viewModel.error}" />
   </children>
+  <TextArea fx:id="areaLog" text="${viewModel.logs}" layoutX="14.0" layoutY="220.0" editable="false" prefHeight="200.0" prefWidth="554.0" VBox.vgrow="ALWAYS" />
 </AnchorPane>
diff --git a/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ISortingLogger.java b/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ISortingLogger.java
new file mode 100644
index 000000000..f1527fcb6
--- /dev/null
+++ b/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ISortingLogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.sorting.viewmodel;
+
+import java.util.List;
+
+public interface ISortingLogger {
+    void log(String s);
+
+    List<String> getLog();
+}
diff --git a/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ViewModel.java b/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ViewModel.java
index 9149a0561..1f3a9c189 100644
--- a/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ViewModel.java
+++ b/code/sorting/ViewModel/src/main/java/ru/unn/agile/sorting/viewmodel/ViewModel.java
@@ -8,6 +8,7 @@
 import ru.unn.agile.sorting.model.impl.NumberSorting;
 
 import java.util.Arrays;
+import java.util.List;
 
 public class ViewModel {
     private final StringProperty inputArray = new SimpleStringProperty();
@@ -17,8 +18,26 @@
     private final ObjectProperty<Direction> direction = new SimpleObjectProperty<>();
     private final StringProperty sortedArray = new SimpleStringProperty();
     private final StringProperty error = new SimpleStringProperty();
+    private final StringProperty logs = new SimpleStringProperty();
+    private ISortingLogger logger;
+
+    public final void setLogger(final ISortingLogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
 
     public ViewModel() {
+        init();
+    }
+
+    public ViewModel(final ISortingLogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    private void init() {
         inputArray.set("");
         direction.set(Direction.ASC);
         sortButtonDisabled.set(true);
@@ -27,6 +46,12 @@ public ViewModel() {
         inputArray.addListener((observable, oldValue, newValue) -> {
             onInput(newValue);
         });
+        direction.addListener((observable, oldValue, newValue) -> {
+            StringBuilder message = new StringBuilder(LogMessages.CHANGE_DIRECTION);
+            message.append(newValue).append(".");
+            logger.log(message.toString());
+            updateLogs();
+        });
     }
 
     public void sort() {
@@ -39,9 +64,18 @@ public void sort() {
             }
             String result = Arrays.toString(numberSorting.sort(numbers));
             sortedArray.set(result.substring(1, result.length() - 1));
+            StringBuilder message = new StringBuilder(LogMessages.SORTED);
+            message.append(Arrays.toString(strInputArray))
+                    .append(" to ")
+                    .append("[" + sortedArray.getValue() + "] ")
+                    .append(directionProperty().get());
+            logger.log(message.toString());
         } catch (NumberFormatException ex) {
             error.set("Bad format");
             sortedArray.set("");
+            logger.log(LogMessages.INCORRECT_INPUT);
+        } finally {
+            updateLogs();
         }
     }
 
@@ -90,4 +124,35 @@ public final String getError() {
     public BooleanProperty sortButtonDisabledProperty() {
         return sortButtonDisabled;
     }
+
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    public final List<String> getLog() {
+        return logger.getLog();
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.getLog();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
 }
+
+final class LogMessages {
+    public static final String SORTED = "Sorted following: ";
+    public static final String CHANGE_DIRECTION = "Direction swapped to: ";
+    public static final String INCORRECT_INPUT = "Incorrect input. ";
+
+    private LogMessages() {
+    }
+}
+
diff --git a/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/SortingFakeLogger.java b/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/SortingFakeLogger.java
new file mode 100644
index 000000000..7b85ecb7b
--- /dev/null
+++ b/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/SortingFakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.sorting.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class SortingFakeLogger implements ISortingLogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/ViewModelTests.java b/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/ViewModelTests.java
index 70610ea11..8b9f6b8b7 100644
--- a/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/ViewModelTests.java
+++ b/code/sorting/ViewModel/src/test/java/ru/unn/agile/sorting/viewmodel/ViewModelTests.java
@@ -5,15 +5,26 @@
 import org.junit.Test;
 import ru.unn.agile.sorting.model.api.Direction;
 
-import static org.junit.Assert.assertEquals;
+import java.util.List;
+
+import static org.junit.Assert.*;
 
 public class ViewModelTests {
 
     private ViewModel viewModel;
 
+    public void setExternalViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    private void setCorrectInput() {
+        viewModel.inputArrayProperty().set("2 4 3");
+        viewModel.directionProperty().set(Direction.ASC);
+    }
+
     @Before
     public void setUp() {
-        viewModel = new ViewModel();
+        viewModel = new ViewModel(new SortingFakeLogger());
     }
 
     @After
@@ -117,5 +128,66 @@ public void canSortWrongValue() {
         viewModel.sort();
         assertEquals("Bad format", viewModel.errorProperty().get());
     }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void viewModelConstructorThrowsExceptionWithNullLogger() {
+            new ViewModel(null);
+    }
+
+    @Test
+    public void logIsEmptyInTheBeginning() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterSorting() {
+        setCorrectInput();
+        viewModel.sort();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.SORTED + ".*"));
+    }
+
+    @Test
+    public void logContainsInputArgumentsAfterSorting() {
+        setCorrectInput();
+        String inputStr = "2, 4, 3";
+        viewModel.sort();
+
+        String message = viewModel.getLog().get(0);
+        assertTrue(message.matches(".*" + inputStr + ".*"
+                + viewModel.directionProperty().get() + ".*"));
+    }
+
+    @Test
+    public void canSeeDirectionChangeInLog() {
+        setCorrectInput();
+
+        viewModel.directionProperty().set(Direction.DESC);
+
+        String message = viewModel.getLog().get(0);
+        assertTrue(message.matches(".*" + LogMessages.CHANGE_DIRECTION + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        setCorrectInput();
+
+        viewModel.sort();
+        viewModel.sort();
+
+        assertEquals(2, viewModel.getLog().size());
+    }
+
+    @Test
+    public void directionIsNotLoggedIfNotChanged() {
+        viewModel.directionProperty().set(Direction.ASC);
+
+        assertEquals(0, viewModel.getLog().size());
+    }
+
 }
 
+
diff --git a/code/stack/Infrastructure/build.gradle b/code/stack/Infrastructure/build.gradle
new file mode 100644
index 000000000..778d0cea8
--- /dev/null
+++ b/code/stack/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':stack-ViewModel')
+    testCompile project(':stack-ViewModel').sourceSets.test.output
+}
diff --git a/code/stack/Infrastructure/src/main/java/ru/unn/agile/stack/infrastructure/TxtLogger.java b/code/stack/Infrastructure/src/main/java/ru/unn/agile/stack/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..d557fd1de
--- /dev/null
+++ b/code/stack/Infrastructure/src/main/java/ru/unn/agile/stack/infrastructure/TxtLogger.java
@@ -0,0 +1,59 @@
+package ru.unn.agile.stack.infrastructure;
+
+import ru.unn.agile.stack.viewmodel.ILogger;
+
+import java.io.*;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+public class TxtLogger implements ILogger {
+    private static final String DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
+
+    private final String filename;
+    private final BufferedWriter writer;
+
+    public TxtLogger(final String filename) {
+        this.filename = filename;
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception exc) {
+            System.out.println(exc.getMessage());
+        }
+        writer = logWriter;
+    }
+
+    private static String now() {
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_TIME_FORMAT, Locale.ENGLISH);
+        return sdf.format(calendar.getTime());
+    }
+
+    @Override
+    public void log(final String message) {
+        try {
+            writer.write(now() + " > " + message);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception exc) {
+            System.out.println(exc.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader reader;
+        ArrayList<String> log = new ArrayList<String>();
+        try {
+            reader = new BufferedReader(new FileReader(filename));
+            String line = reader.readLine();
+            while (line != null) {
+                log.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception exc) {
+            System.out.println(exc.getMessage());
+        }
+        return log;
+    }
+}
diff --git a/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/TxtLoggerTests.java b/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/TxtLoggerTests.java
new file mode 100644
index 000000000..e21d1c501
--- /dev/null
+++ b/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/TxtLoggerTests.java
@@ -0,0 +1,76 @@
+package ru.unn.agile.stack.infrastructure;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.*;
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+public class TxtLoggerTests {
+    private static final String FILE_NAME = "./TxtLoggerTests.log";
+    private static final String LOG_PATTERN = "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} > .*";
+
+    private TxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TxtLogger(FILE_NAME);
+    }
+
+    @After
+    public void tearDown() {
+        txtLogger = null;
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canCreateLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(FILE_NAME));
+        } catch (FileNotFoundException ex) {
+            fail("File " + FILE_NAME + " was not found!");
+        }
+    }
+
+    @Test
+    public void areDateAndTimeContainedInLog() {
+        String testMessage = "Test message";
+
+        txtLogger.log(testMessage);
+
+        String logMessage = txtLogger.getLog().get(0);
+        assertTrue(logMessage.matches(LOG_PATTERN));
+    }
+
+    @Test
+    public void canWriteOneLogMessage() {
+        String testMessage = "Test message";
+
+        txtLogger.log(testMessage);
+
+        String logMessage = txtLogger.getLog().get(0);
+        assertTrue(logMessage.matches(".*" + logMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessages() {
+        String[] testMessages = {"Test message 1", "Test message 2"};
+
+        for (String testMessage : testMessages) {
+            txtLogger.log(testMessage);
+        }
+
+        List<String> logMessages = txtLogger.getLog();
+        for (int i = 0; i < logMessages.size(); i++) {
+            String logMessage = logMessages.get(i);
+            assertTrue(logMessage.matches(".*" + logMessage + "$"));
+        }
+    }
+}
diff --git a/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/ViewModelWithTxtLoggerTests.java b/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..f0571373a
--- /dev/null
+++ b/code/stack/Infrastructure/src/test/java/ru/unn/agile/stack/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,12 @@
+package ru.unn.agile.stack.infrastructure;
+
+import ru.unn.agile.stack.viewmodel.ViewModel;
+import ru.unn.agile.stack.viewmodel.ViewModelTests;
+
+public class ViewModelWithTxtLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        TxtLogger realLogger = new TxtLogger("./ViewModelWithTxtLoggerTests.log");
+        super.setViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/stack/src/main/java/ru/unn/agile/stack/model/Stack.java b/code/stack/Model/src/main/java/ru/unn/agile/stack/model/Stack.java
similarity index 93%
rename from code/stack/src/main/java/ru/unn/agile/stack/model/Stack.java
rename to code/stack/Model/src/main/java/ru/unn/agile/stack/model/Stack.java
index f9f00d55f..05d82bf8a 100644
--- a/code/stack/src/main/java/ru/unn/agile/stack/model/Stack.java
+++ b/code/stack/Model/src/main/java/ru/unn/agile/stack/model/Stack.java
@@ -30,6 +30,10 @@ public T peek() {
         return list.get(list.size() - 1);
     }
 
+    public int size() {
+        return list.size();
+    }
+
     public boolean isEmpty() {
         return list.isEmpty();
     }
diff --git a/code/stack/src/test/java/ru/unn/agile/stack/Model/StackTest.java b/code/stack/Model/src/test/java/ru/unn/agile/stack/Model/StackTest.java
similarity index 100%
rename from code/stack/src/test/java/ru/unn/agile/stack/Model/StackTest.java
rename to code/stack/Model/src/test/java/ru/unn/agile/stack/Model/StackTest.java
diff --git a/code/stack/View/build.gradle b/code/stack/View/build.gradle
new file mode 100644
index 000000000..bf7cd80f5
--- /dev/null
+++ b/code/stack/View/build.gradle
@@ -0,0 +1,17 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.stack.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':stack-ViewModel')
+    compile project(':stack-Infrastructure')
+}
\ No newline at end of file
diff --git a/code/stack/View/src/main/java/ru/unn/agile/stack/view/Main.java b/code/stack/View/src/main/java/ru/unn/agile/stack/view/Main.java
new file mode 100644
index 000000000..4b3b7fa25
--- /dev/null
+++ b/code/stack/View/src/main/java/ru/unn/agile/stack/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.stack.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("StackView.fxml"));
+        primaryStage.setTitle("Stack");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/stack/View/src/main/java/ru/unn/agile/stack/view/StackView.java b/code/stack/View/src/main/java/ru/unn/agile/stack/view/StackView.java
new file mode 100644
index 000000000..e0210af19
--- /dev/null
+++ b/code/stack/View/src/main/java/ru/unn/agile/stack/view/StackView.java
@@ -0,0 +1,42 @@
+package ru.unn.agile.stack.view;
+
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.TextField;
+
+import ru.unn.agile.stack.viewmodel.ViewModel;
+import ru.unn.agile.stack.infrastructure.TxtLogger;
+
+public class StackView {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private Button popElementButton;
+    @FXML
+    private Button pushElementButton;
+    @FXML
+    private TextField inputNewElementField;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(new TxtLogger("./Stack.log"));
+
+        inputNewElementField.textProperty().bindBidirectional(viewModel.pushElementProperty());
+
+        pushElementButton.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.pushNewElement();
+            }
+        });
+
+        popElementButton.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.popElement();
+            }
+        });
+    }
+}
diff --git a/code/stack/View/src/main/resources/ru/unn/agile/stack/view/StackView.fxml b/code/stack/View/src/main/resources/ru/unn/agile/stack/view/StackView.fxml
new file mode 100644
index 000000000..780ef78ee
--- /dev/null
+++ b/code/stack/View/src/main/resources/ru/unn/agile/stack/view/StackView.fxml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import java.lang.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+<?import ru.unn.agile.stack.viewmodel.*?>
+
+<AnchorPane prefHeight="306.0" prefWidth="424.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1"
+            fx:controller="ru.unn.agile.stack.view.StackView">
+    <fx:define>
+        <ViewModel fx:id="viewModel"/>
+    </fx:define>
+    <Pane layoutY="298.0" prefHeight="15.0" prefWidth="455.0">
+        <Pane layoutY="-196.0" prefHeight="95.0" prefWidth="455.0">
+            <Label layoutX="14.0" layoutY="21.0" text="Pop element">
+                <font>
+                    <Font size="20.0"/>
+                </font>
+            </Label>
+            <Label fx:id="stackPopElement" layoutX="157.0" layoutY="26.0" text="${viewModel.popElement}"/>
+            <Button fx:id="popElementButton" layoutX="297.0" layoutY="21.0" mnemonicParsing="false"
+                    prefWidth="81.0" text="POP" visible="${viewModel.popButtonState}"/>
+        </Pane>
+    </Pane>
+    <Pane prefHeight="95.0" prefWidth="455.0">
+        <Label layoutX="14.0" layoutY="14.0" text="Stack status:">
+            <font>
+                <Font size="20.0"/>
+            </font>
+        </Label>
+        <Label fx:id="stackEmptyStatus" layoutX="158.0" layoutY="19.0" text="${viewModel.isStackEmptyInfo}"/>
+        <Label layoutX="297.0" layoutY="15.0" text="Size:">
+            <font>
+                <Font size="20.0" fx:id="x2"/>
+            </font>
+        </Label>
+        <Label fx:id="stackSize" layoutX="367.0" layoutY="20.0" text="${viewModel.stackSize}"/>
+        <Label font="$x2" layoutX="12.0" layoutY="66.0" text="Top element:"/>
+        <Label fx:id="stackTopElement" layoutX="158.0" layoutY="71.0" text="${viewModel.topElement}"/>
+    </Pane>
+    <Label layoutX="14.0" layoutY="189.0" text="Push element">
+        <font>
+            <Font size="20.0" fx:id="x1"/>
+        </font>
+    </Label>
+    <TextField fx:id="inputNewElementField" layoutX="14.0" layoutY="232.0" prefWidth="200.0"/>
+    <Button fx:id="pushElementButton" layoutX="304.0" layoutY="232.0" mnemonicParsing="false" prefWidth="81.0"
+            text="PUSH"/>
+    <Label layoutX="14.0" layoutY="274.0" text="Status:">
+        <font>
+            <Font size="20.0" fx:id="x11"/>
+        </font>
+    </Label>
+    <Label fx:id="stackStatus" layoutX="104.0" layoutY="279.0" text="${viewModel.status}"/>
+    <SplitPane dividerPositions="" focusTraversable="true" layoutX="9.0" layoutY="315.0" orientation="VERTICAL"
+               prefHeight="200.0" prefWidth="420.0">
+        <items>
+            <ScrollPane prefHeight="198.0" prefWidth="450.0">
+                <content>
+                    <AnchorPane id="Content" minHeight="0.0" minWidth="0.0" prefHeight="198.0" prefWidth="200.0">
+                        <children>
+                            <TextArea text="${viewModel.textLog}" layoutX="-2.0" layoutY="-2.0" prefHeight="198.0"
+                                      prefWidth="420.0"
+                                      wrapText="true"/>
+                        </children>
+                    </AnchorPane>
+                </content>
+            </ScrollPane>
+        </items>
+    </SplitPane>
+</AnchorPane>
diff --git a/code/stack/View/src/test/java/ru/unn/agile/stack/view/FakeViewTests.java b/code/stack/View/src/test/java/ru/unn/agile/stack/view/FakeViewTests.java
new file mode 100644
index 000000000..198d5d1e3
--- /dev/null
+++ b/code/stack/View/src/test/java/ru/unn/agile/stack/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.stack.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/stack/ViewModel/build.gradle b/code/stack/ViewModel/build.gradle
new file mode 100644
index 000000000..a3c768a22
--- /dev/null
+++ b/code/stack/ViewModel/build.gradle
@@ -0,0 +1,13 @@
+
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':stack-Model')
+}
\ No newline at end of file
diff --git a/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ILogger.java b/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ILogger.java
new file mode 100644
index 000000000..a7c98ba1b
--- /dev/null
+++ b/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.stack.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void log(String message);
+
+    List<String> getLog();
+}
diff --git a/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ViewModel.java b/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ViewModel.java
new file mode 100644
index 000000000..0b191ca58
--- /dev/null
+++ b/code/stack/ViewModel/src/main/java/ru/unn/agile/stack/viewmodel/ViewModel.java
@@ -0,0 +1,196 @@
+package ru.unn.agile.stack.viewmodel;
+
+import ru.unn.agile.stack.model.Stack;
+import javafx.beans.property.*;
+
+import java.util.List;
+
+public class ViewModel {
+    private Stack<Double> stackDouble;
+    private final StringProperty isStackEmptyInfo = new SimpleStringProperty();
+    private final StringProperty stackSize = new SimpleStringProperty();
+    private final StringProperty topElement = new SimpleStringProperty();
+    private final StringProperty popElement = new SimpleStringProperty();
+    private final StringProperty pushElement = new SimpleStringProperty();
+    private final StringProperty status = new SimpleStringProperty();
+    private final BooleanProperty popButtonState = new SimpleBooleanProperty();
+
+    private StringProperty textLog = new SimpleStringProperty();
+
+    private ILogger logger;
+
+    public ViewModel() {
+        init();
+    }
+
+    public ViewModel(final ILogger logger) {
+        setLogger(logger);
+
+        init();
+    }
+
+    private void init() {
+        stackDouble = new Stack<Double>();
+        isStackEmptyInfo.set(Status.STACK_IS_EMPTY.toString());
+        stackSize.set("0");
+        topElement.set("None");
+        popElement.set("None");
+        pushElement.set("");
+        status.set(Status.WAITING.toString());
+        textLog.set("");
+        popButtonState.set(false);
+    }
+
+    public List<String> getLogList() {
+        return logger.getLog();
+    }
+
+    public String getIsStackEmptyInfo() {
+        return isStackEmptyInfo.get();
+    }
+
+    public StringProperty isStackEmptyInfoProperty() {
+        return isStackEmptyInfo;
+    }
+
+    public String getStackSize() {
+        return stackSize.get();
+    }
+
+    public StringProperty stackSizeProperty() {
+        return stackSize;
+    }
+
+    public String getTopElement() {
+        return topElement.get();
+    }
+
+    public StringProperty topElementProperty() {
+        return topElement;
+    }
+
+    public String getPopElement() {
+        return popElement.get();
+    }
+
+    public StringProperty popElementProperty() {
+        return popElement;
+    }
+
+    public String getPushElement() {
+        return pushElement.get();
+    }
+
+    public StringProperty pushElementProperty() {
+        return pushElement;
+    }
+
+    public String getStatus() {
+        return status.get();
+    }
+
+    public StringProperty getStatusProperty() {
+        return status;
+    }
+
+    public boolean getPopButtonState() {
+        return popButtonState.get();
+    }
+
+    public BooleanProperty popButtonStateProperty() {
+        return popButtonState;
+    }
+
+    public void setPushElement(final String inputElement) {
+        pushElement.set(inputElement);
+    }
+
+    public StringProperty textLogProperty() {
+        return textLog;
+    }
+
+    public String getTextLog() {
+        return textLog.get();
+    }
+
+    public final void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    private void writeLog(final String message) {
+        logger.log(message);
+        StringBuilder logMessages = new StringBuilder();
+        List<String> logList = getLogList();
+        for (String log : logList) {
+            logMessages.append(log).append("\n");
+        }
+        textLog.set(logMessages.toString());
+    }
+
+
+    private void changeStackProperties() {
+        int doubleStackSize = stackDouble.size();
+        stackSize.set(Integer.toString(doubleStackSize));
+        if (stackDouble.isEmpty()) {
+            isStackEmptyInfo.set(Status.STACK_IS_EMPTY.toString());
+            topElement.set("None");
+            popButtonState.set(false);
+        } else {
+            isStackEmptyInfo.set(Status.STACK_IS_NOT_EMPTY.toString());
+            topElement.set(Double.toString(stackDouble.peek()));
+            popButtonState.set(true);
+        }
+    }
+
+    public void pushNewElement() {
+        String pushElement = getPushElement();
+        try {
+            if (pushElement.isEmpty()) {
+                status.set(Status.WAITING.toString());
+                writeLog("Pushing element is empty");
+            } else {
+                Double doubleElement = Double.parseDouble(pushElement);
+                stackDouble.push(doubleElement);
+                status.set(Status.READY.toString());
+                changeStackProperties();
+                writeLog("Push element " + doubleElement + " into stack."
+                        + " Size of stack: " + stackDouble.size());
+            }
+        } catch (NumberFormatException e) {
+            status.set(Status.BAD_FORMAT.toString());
+            writeLog("Pushing element " + pushElement + " has invalid format");
+        }
+    }
+
+
+
+    public void popElement() {
+        if (!stackDouble.isEmpty()) {
+            popElement.set(Double.toString(stackDouble.pop()));
+            changeStackProperties();
+            writeLog("Pop element " + getPopElement() + " from stack."
+                    + " Size of stack: " + stackDouble.size());
+        }
+    }
+}
+
+enum Status {
+    WAITING("Waiting for new element"),
+    READY("Ready to push new element"),
+    BAD_FORMAT("Invalid format of the pushing element"),
+    STACK_IS_EMPTY("Stack is empty"),
+    STACK_IS_NOT_EMPTY("Stack is not empty");
+
+    private final String name;
+
+    Status(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/FakeLogger.java b/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..e2c989e18
--- /dev/null
+++ b/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.stack.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements ILogger {
+    private List<String> log = new ArrayList<String>();
+
+    @Override
+    public void log(final String message) {
+        log.add(message);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/ViewModelTests.java b/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..ffb6daf9a
--- /dev/null
+++ b/code/stack/ViewModel/src/test/java/ru/unn/agile/stack/viewmodel/ViewModelTests.java
@@ -0,0 +1,351 @@
+package ru.unn.agile.stack.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    public void setViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel(new FakeLogger());
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canCreateViewModelWithoutLogger() {
+        ViewModel newViewModel = new ViewModel();
+
+        assertNotNull(newViewModel);
+    }
+
+    @Test
+    public void canCreateViewModelWithNotEmptyLogger() {
+        ViewModel newViewModel = new ViewModel(new FakeLogger());
+
+        assertNotNull(newViewModel);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void canNotCreateViewModelWithNullLogger() {
+        ViewModel newViewModel = new ViewModel(null);
+    }
+
+    @Test
+    public void canSetDefaultLogValue() {
+        assertEquals(0, viewModel.getLogList().size());
+    }
+
+    @Test
+    public void logIsCorrectWhenPushElement() {
+        Double element = 11.0;
+        viewModel.setPushElement(Double.toString(element));
+
+        viewModel.pushNewElement();
+
+        String expectedLogMessage = viewModel.getLogList().get(0);
+        assertTrue(expectedLogMessage.matches("(.*)" + element + "(.*)"));
+    }
+
+    @Test
+    public void logIsCorrectWhenPopElement() {
+        Double element = 10.0;
+        viewModel.setPushElement(Double.toString(element));
+        viewModel.pushNewElement();
+
+        viewModel.popElement();
+
+        String expectedLogMessage = viewModel.getLogList().get(1);
+        assertTrue(expectedLogMessage.matches("(.*)" + element + "(.*)"));
+    }
+
+    @Test
+    public void logIsCorrectWhenPushNonValidElement() {
+        String element = "!";
+        viewModel.setPushElement(element);
+
+        viewModel.pushNewElement();
+
+        String expectedLogMessage = viewModel.getLogList().get(0);
+        assertTrue(expectedLogMessage.matches("(.*)" + element + "(.*)"));
+    }
+
+    @Test
+    public void checkDefaultEmptyStatus() {
+        var emptyStatus = "Stack is empty";
+        assertEquals(emptyStatus, viewModel.getIsStackEmptyInfo());
+    }
+
+    @Test
+    public void checkDefaultStackSize() {
+        var defaultSize = "0";
+        assertEquals(defaultSize, viewModel.getStackSize());
+    }
+
+    @Test
+    public void checkDefaultTopElement() {
+        var defaultTopElement = "None";
+        assertEquals(defaultTopElement, viewModel.getTopElement());
+    }
+
+    @Test
+    public void checkDefaultPopElement() {
+        var defaultPopElement = "None";
+        assertEquals(defaultPopElement, viewModel.getPopElement());
+    }
+
+    @Test
+    public void checkDefaultPushElement() {
+        var defaultPushElement = "";
+        assertEquals(defaultPushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void checkDefaultStatus() {
+        var defaultStatus = "Waiting for new element";
+        assertEquals(defaultStatus, viewModel.getStatus());
+    }
+
+    @Test
+    public void checkDefaultPopButtonState() {
+        assertFalse(viewModel.getPopButtonState());
+    }
+
+    @Test
+    public void canSetDefaultTextLog() {
+        assertEquals("", viewModel.getTextLog());
+    }
+
+    @Test
+    public void correctDefaultTextLog() {
+        assertEquals("", viewModel.textLogProperty().get());
+    }
+
+    @Test
+    public void canPushNewElement() {
+        viewModel.setPushElement("5");
+        viewModel.pushNewElement();
+
+        var stackSize = "1";
+        var notNoneTopElement = "5.0";
+        var pushElement = "5";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(notNoneTopElement, viewModel.getTopElement());
+        assertEquals(pushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void stackIsNotEmptyAfterPush() {
+        viewModel.setPushElement("5");
+        viewModel.pushNewElement();
+
+        var stackEmptyStatus = "Stack is not empty";
+        assertEquals(stackEmptyStatus, viewModel.getIsStackEmptyInfo());
+    }
+
+    @Test
+    public void checkReadyStatusAfterPush() {
+        viewModel.setPushElement("5");
+        viewModel.pushNewElement();
+
+        var status = "Ready to push new element";
+        assertEquals(status, viewModel.getStatus());
+    }
+
+    @Test
+    public void canNotPushInvalidFormat() {
+        viewModel.setPushElement("k");
+        viewModel.pushNewElement();
+
+        var stackSize = "0";
+        var noneTopElement = "None";
+        var pushElement = "k";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(noneTopElement, viewModel.getTopElement());
+        assertEquals(pushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void checkIsEmptyStatusAfterFailedPush() {
+        viewModel.setPushElement("k");
+        viewModel.pushNewElement();
+
+        var stackEmptyStatus = "Stack is empty";
+        assertEquals(stackEmptyStatus, viewModel.getIsStackEmptyInfo());
+    }
+
+    @Test
+    public void checkBadInputStatusAfterFailedPush() {
+        viewModel.setPushElement("k");
+        viewModel.pushNewElement();
+
+        var status = "Invalid format of the pushing element";
+        assertEquals(status, viewModel.getStatus());
+    }
+
+    @Test
+    public void canNotPushEmptyElement() {
+        viewModel.setPushElement("");
+        viewModel.pushNewElement();
+
+        var stackSize = "0";
+        var noneTopElement = "None";
+        var emptyPushElement = "";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(noneTopElement, viewModel.getTopElement());
+        assertEquals(emptyPushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void checkIsEmptyAfterPushEmptyElement() {
+        viewModel.setPushElement("");
+        viewModel.pushNewElement();
+
+        var stackEmptyStatus = "Stack is empty";
+        assertEquals(stackEmptyStatus, viewModel.getIsStackEmptyInfo());
+    }
+
+    @Test
+    public void checkWaitingStatusAfterPushEmptyElement() {
+        viewModel.setPushElement("");
+        viewModel.pushNewElement();
+
+        var status = "Waiting for new element";
+        assertEquals(status, viewModel.getStatus());
+    }
+
+    @Test
+    public void canPopElement() {
+        viewModel.setPushElement("1");
+        viewModel.pushNewElement();
+        viewModel.popElement();
+
+        var stackSize = "0";
+        var noneTopElement = "None";
+        var notNonePopElement = "1.0";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(noneTopElement, viewModel.getTopElement());
+        assertEquals(notNonePopElement, viewModel.getPopElement());
+    }
+
+    @Test
+    public void checkIsEmptyStatusAfterOnePop() {
+        viewModel.setPushElement("1");
+        viewModel.pushNewElement();
+        viewModel.popElement();
+
+        var stackEmptyStatus = "Stack is empty";
+
+        assertEquals(stackEmptyStatus, viewModel.getIsStackEmptyInfo());
+    }
+
+    @Test
+    public void checkReadyStatusAfterOnePop() {
+        viewModel.setPushElement("1");
+        viewModel.pushNewElement();
+        viewModel.popElement();
+
+        var status = "Ready to push new element";
+
+        assertEquals(status, viewModel.getStatus());
+    }
+
+    @Test
+    public void canNotPopElementFromEmptyStack() {
+        viewModel.popElement();
+
+        var nullStackSize = "0";
+        var nonePopElement = "None";
+
+        assertEquals(nullStackSize, viewModel.getStackSize());
+        assertEquals(nonePopElement, viewModel.getPopElement());
+    }
+
+    @Test
+    public void isPopButtonEnabledForNotEmptyStack() {
+        viewModel.setPushElement("1.0");
+        viewModel.pushNewElement();
+        assertTrue(viewModel.getPopButtonState());
+    }
+
+    @Test
+    public void isPopButtonDisabledForEmptyStack() {
+        viewModel.setPushElement("1.0");
+        viewModel.pushNewElement();
+        viewModel.popElement();
+        assertFalse(viewModel.getPopButtonState());
+    }
+
+    @Test
+    public void isPopButtonDisabledAfterFailedPush() {
+        viewModel.setPushElement("k");
+        viewModel.pushNewElement();
+        assertFalse(viewModel.getPopButtonState());
+    }
+
+    @Test
+    public void canWorkCorrectlyWithSeveralPush() {
+        viewModel.setPushElement("1.0");
+        viewModel.setPushElement("2.0");
+        viewModel.setPushElement("3.0");
+        viewModel.pushNewElement();
+        viewModel.pushNewElement();
+        viewModel.pushNewElement();
+
+        var stackSize = "3";
+        var notNoneTopElement = "3.0";
+        var notNullPushElement = "3.0";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(notNoneTopElement, viewModel.getTopElement());
+        assertEquals(notNullPushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void canWorkCorrectlyWithSeveralPop() {
+        viewModel.setPushElement("1.0");
+        viewModel.pushNewElement();
+        viewModel.setPushElement("2.0");
+        viewModel.pushNewElement();
+        viewModel.setPushElement("3.0");
+        viewModel.pushNewElement();
+        viewModel.popElement();
+        viewModel.popElement();
+
+        var stackSize = "1";
+        var notNoneTopElement = "1.0";
+        var notNonePopElement = "2.0";
+        var notNullPushElement = "3.0";
+
+        assertEquals(stackSize, viewModel.getStackSize());
+        assertEquals(notNoneTopElement, viewModel.getTopElement());
+        assertEquals(notNonePopElement, viewModel.getPopElement());
+        assertEquals(notNullPushElement, viewModel.getPushElement());
+    }
+
+    @Test
+    public void logIsCorrectWhenPushingEmptyElement() {
+        String textLog = "Pushing element is empty";
+        viewModel.setPushElement("");
+
+        viewModel.pushNewElement();
+
+        String logMessage = viewModel.getLogList().get(0);
+        assertTrue(logMessage.matches("(.*)" + textLog + "(.*)"));
+    }
+}
diff --git a/code/statistics-calculation/Infrastructure/build.gradle b/code/statistics-calculation/Infrastructure/build.gradle
new file mode 100644
index 000000000..72804194e
--- /dev/null
+++ b/code/statistics-calculation/Infrastructure/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(':statistics-calculation-ViewModel')
+	testCompile project(':statistics-calculation-ViewModel').sourceSets.test.output
+}
+
+
diff --git a/code/statistics-calculation/Infrastructure/src/main/java/ru/unn/agile/statisticscalculation/infrastructure/TextLogger.java b/code/statistics-calculation/Infrastructure/src/main/java/ru/unn/agile/statisticscalculation/infrastructure/TextLogger.java
new file mode 100644
index 000000000..6d9d29594
--- /dev/null
+++ b/code/statistics-calculation/Infrastructure/src/main/java/ru/unn/agile/statisticscalculation/infrastructure/TextLogger.java
@@ -0,0 +1,67 @@
+package ru.unn.agile.statisticscalculation.infrastructure;
+import ru.unn.agile.statisticscalculation.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class TextLogger implements ILogger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private String filename;
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    public TextLogger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        writer = logWriter;
+    }
+
+    @Override
+    public void addLog(final String s) {
+        try {
+            writer.write(now() + " --> " + s + "\n");
+            writer.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader reader;
+        ArrayList<String> listLog = new ArrayList<String>();
+        try {
+            reader = new BufferedReader(new FileReader(filename));
+            String line = reader.readLine();
+
+            while (line != null) {
+                listLog.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+
+        return listLog;
+    }
+
+}
+
diff --git a/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/TextLoggerTest.java b/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/TextLoggerTest.java
new file mode 100644
index 000000000..52c882f1c
--- /dev/null
+++ b/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/TextLoggerTest.java
@@ -0,0 +1,69 @@
+package ru.unn.agile.statisticscalculation.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.*;
+
+public class TextLoggerTest {
+    private static final String FILENAME = "./TextLogger_Tests-statistics-calculation.log";
+    private TextLogger textLogger;
+
+    @Before
+    public void setUp() {
+        textLogger = new TextLogger(FILENAME);
+    }
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(textLogger);
+    }
+
+    @Test
+    public void canCreateTextLogFileOnDisk() {
+        try {
+            new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " wasn't found!");
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        String testMessage = "Test message";
+
+        textLogger.addLog(testMessage);
+
+        String message = textLogger.getLog().get(0);
+        assertTrue(message.matches(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void canWriteSeveralLogMessage() {
+        String[] messages = {"Test message 1", "Test message 2"};
+
+        textLogger.addLog(messages[0]);
+        textLogger.addLog(messages[1]);
+
+        List<String> actualMessages = textLogger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertTrue(actualMessages.get(i).matches(".*"
+                    + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String testMessage = "Test message";
+
+        textLogger.addLog(testMessage);
+
+        String message = textLogger.getLog().get(0);
+        assertTrue(message.matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} --> .*"));
+    }
+}
diff --git a/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/ViewModelWithTextLoggerTests.java b/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/ViewModelWithTextLoggerTests.java
new file mode 100644
index 000000000..634827724
--- /dev/null
+++ b/code/statistics-calculation/Infrastructure/src/test/java/ru/unn/agile/statisticscalculation/infrastructure/ViewModelWithTextLoggerTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.statisticscalculation.infrastructure;
+
+import ru.unn.agile.statisticscalculation.viewmodel.ViewModel;
+import ru.unn.agile.statisticscalculation.viewmodel.ViewModelTests;
+
+public class ViewModelWithTextLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        TextLogger realLogger =
+            new TextLogger("./ViewModel_with_TxtLogger_Tests-lab3.log");
+        super.setExternalViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DiscreteRandomVariable.java b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariable.java
similarity index 92%
rename from code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DiscreteRandomVariable.java
rename to code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariable.java
index c4fec080c..a60996b11 100644
--- a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DiscreteRandomVariable.java
+++ b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariable.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.StatisticsCalculation.model;
+package ru.unn.agile.statisticscalculation.model;
 
 public class DiscreteRandomVariable {
     private Number[] values;
diff --git a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DistributionChecker.java b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DistributionChecker.java
similarity index 98%
rename from code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DistributionChecker.java
rename to code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DistributionChecker.java
index f036795f7..4e72c181d 100644
--- a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/DistributionChecker.java
+++ b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/DistributionChecker.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.StatisticsCalculation.model;
+package ru.unn.agile.statisticscalculation.model;
 
 final class DistributionChecker {
     public static void validate(final Number[] values, final Double[] probabilities) {
diff --git a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/MomentOrderChecker.java b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/MomentOrderChecker.java
similarity index 92%
rename from code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/MomentOrderChecker.java
rename to code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/MomentOrderChecker.java
index 3a3cdac7a..0c3372368 100644
--- a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/MomentOrderChecker.java
+++ b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/MomentOrderChecker.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.StatisticsCalculation.model;
+package ru.unn.agile.statisticscalculation.model;
 
 final class MomentOrderChecker {
     public static void checkOrder(final Integer order) {
diff --git a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/StatisticsCalculation.java b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculation.java
similarity index 96%
rename from code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/StatisticsCalculation.java
rename to code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculation.java
index 601e399e2..cd88a256e 100644
--- a/code/statistics-calculation/src/main/java/ru/unn/agile/StatisticsCalculation/model/StatisticsCalculation.java
+++ b/code/statistics-calculation/Model/src/main/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculation.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.StatisticsCalculation.model;
+package ru.unn.agile.statisticscalculation.model;
 
 public final class StatisticsCalculation {
     public static Double calculateExpectedValue(final DiscreteRandomVariable variable) {
diff --git a/code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/DiscreteRandomVariableTest.java b/code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariableTest.java
similarity index 97%
rename from code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/DiscreteRandomVariableTest.java
rename to code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariableTest.java
index f217ac308..20f9c710b 100644
--- a/code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/DiscreteRandomVariableTest.java
+++ b/code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/DiscreteRandomVariableTest.java
@@ -1,7 +1,6 @@
-package ru.unn.agile.StatisticsCalculation.Model;
+package ru.unn.agile.statisticscalculation.model;
 
 import org.junit.Test;
-import ru.unn.agile.StatisticsCalculation.model.DiscreteRandomVariable;
 
 import static org.junit.Assert.*;
 
diff --git a/code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/StatisticsCalculationTest.java b/code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculationTest.java
similarity index 98%
rename from code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/StatisticsCalculationTest.java
rename to code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculationTest.java
index a10e13ef0..e5937bc05 100644
--- a/code/statistics-calculation/src/test/java/ru/unn/agile/StatisticsCalculation/Model/StatisticsCalculationTest.java
+++ b/code/statistics-calculation/Model/src/test/java/ru/unn/agile/statisticscalculation/model/StatisticsCalculationTest.java
@@ -1,11 +1,7 @@
-package ru.unn.agile.StatisticsCalculation.Model;
+package ru.unn.agile.statisticscalculation.model;
 
 import org.junit.Test;
-import ru.unn.agile.StatisticsCalculation.model.DiscreteRandomVariable;
-import ru.unn.agile.StatisticsCalculation.model.StatisticsCalculation;
-
 import java.util.Arrays;
-
 import static org.junit.Assert.*;
 
 public class StatisticsCalculationTest {
diff --git a/code/statistics-calculation/View/build.gradle b/code/statistics-calculation/View/build.gradle
new file mode 100644
index 000000000..0220bca7a
--- /dev/null
+++ b/code/statistics-calculation/View/build.gradle
@@ -0,0 +1,19 @@
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.statisticscalculation.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':statistics-calculation-ViewModel')
+    compile project(':statistics-calculation-Infrastructure')
+}
+
+
diff --git a/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Calculator.java b/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Calculator.java
new file mode 100644
index 000000000..bb6faa62f
--- /dev/null
+++ b/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Calculator.java
@@ -0,0 +1,121 @@
+package ru.unn.agile.statisticscalculation.view;
+
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.Node;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.AnchorPane;
+import ru.unn.agile.statisticscalculation.infrastructure.TextLogger;
+import ru.unn.agile.statisticscalculation.viewmodel.ViewModel;
+import ru.unn.agile.statisticscalculation.viewmodel.Operation;
+import ru.unn.agile.statisticscalculation.viewmodel.TableElement;
+
+public class Calculator {
+    @FXML
+    private ViewModel viewModel;
+
+    @FXML
+    private TextField textfieldNewValue;
+    @FXML
+    private TextField textfieldNewProbability;
+    @FXML
+    private TextField textfieldParameter;
+
+    @FXML
+    private ComboBox<Operation> comboBoxOperation;
+
+    @FXML
+    private AnchorPane anchorPaneSettings;
+
+    @FXML
+    private Button buttonUpdate;
+    @FXML
+    private Button buttonDelete;
+    @FXML
+    private Button buttonCalculate;
+
+    @FXML
+    private TableView<TableElement> tableViewData;
+    @FXML
+    private TableColumn<TableElement, String> columnValue;
+    @FXML
+    private TableColumn<TableElement, String> columnProbability;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(new TextLogger("./TextLogger-StatisticsCalculation.log"));
+        textfieldNewValue.textProperty().bindBidirectional(viewModel.newValueProperty());
+        textfieldNewProbability.textProperty().bindBidirectional(
+                viewModel.newProbabilityProperty());
+        textfieldParameter.textProperty().bindBidirectional(
+                viewModel.operationParameterProperty());
+
+        comboBoxOperation.valueProperty().bindBidirectional(viewModel.operationProperty());
+
+        columnValue.setCellValueFactory(
+                new PropertyValueFactory<>("value"));
+        columnProbability.setCellValueFactory(
+                new PropertyValueFactory<>("probability"));
+
+        buttonUpdate.setOnAction(new EventHandler<>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.updateTableElement();
+                tableViewData.setItems(viewModel.getListData());
+                tableViewData.getSelectionModel().clearSelection();
+            }
+        });
+
+        buttonDelete.setOnAction(new EventHandler<>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.deleteTableElement(tableViewData.getSelectionModel().getFocusedIndex());
+                tableViewData.setItems(viewModel.getListData());
+                tableViewData.getSelectionModel().clearSelection();
+            }
+        });
+
+        tableViewData.setOnMousePressed(new EventHandler<>() {
+            @Override
+            public void handle(final MouseEvent event) {
+                viewModel.setSelectedElement(tableViewData.getSelectionModel().getFocusedIndex());
+            }
+        });
+
+        tableViewData.setOnMouseClicked(new EventHandler<>() {
+            @Override
+            public void handle(final MouseEvent event) {
+                Node source = event.getPickResult().getIntersectedNode();
+
+                // move up through the node hierarchy until a TableRow or scene root is found
+                while (source != null && !(source instanceof TableRow)) {
+                    source = source.getParent();
+                }
+
+                // clear selection on click anywhere but on a filled row
+                if (source == null || (source instanceof TableRow
+                        && ((TableRow) source).isEmpty())) {
+                    viewModel.resetSelectedElement();
+                    tableViewData.getSelectionModel().clearSelection();
+                }
+            }
+        });
+
+        comboBoxOperation.setOnAction(new EventHandler<>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.updateOperation();
+            }
+        });
+
+        buttonCalculate.setOnAction(new EventHandler<>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.calculate();
+            }
+        });
+    }
+}
diff --git a/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Main.java b/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Main.java
new file mode 100644
index 000000000..18e0d236d
--- /dev/null
+++ b/code/statistics-calculation/View/src/main/java/ru/unn/agile/statisticscalculation/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.statisticscalculation.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("StatisticsCalculation.fxml"));
+        primaryStage.setTitle("StatisticsCalculation");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/statistics-calculation/View/src/main/resources/ru/unn/agile/StatisticsCalculation/view/StatisticsCalculation.fxml b/code/statistics-calculation/View/src/main/resources/ru/unn/agile/StatisticsCalculation/view/StatisticsCalculation.fxml
new file mode 100644
index 000000000..651dcd889
--- /dev/null
+++ b/code/statistics-calculation/View/src/main/resources/ru/unn/agile/StatisticsCalculation/view/StatisticsCalculation.fxml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<?import ru.unn.agile.statisticscalculation.viewmodel.*?>
+<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="500.0" prefWidth="819.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.statisticscalculation.view.Calculator">
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+    <children>
+        <SplitPane dividerPositions="0.2827417380660955" layoutY="1.0" prefHeight="498.0" prefWidth="819.0" AnchorPane.bottomAnchor="1.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="1.0">
+            <items>
+                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
+                    <children>
+                        <SplitPane dividerPositions="0.08299595141700405" orientation="VERTICAL" prefHeight="496.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
+                            <items>
+                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0">
+                                    <children>
+                                        <Label alignment="CENTER" text="Data" textAlignment="JUSTIFY" AnchorPane.bottomAnchor="6.0" AnchorPane.leftAnchor="83.0" AnchorPane.rightAnchor="83.0" AnchorPane.topAnchor="6.0" />
+                                    </children>
+                                </AnchorPane>
+                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="451.0" prefWidth="183.0" SplitPane.resizableWithParent="false">
+                                    <children>
+                                        <TableView fx:id="tableViewData" prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="1.0" AnchorPane.leftAnchor="1.0" AnchorPane.rightAnchor="1.0" AnchorPane.topAnchor="1.0">
+                                            <columns>
+                                                <TableColumn fx:id="columnValue" prefWidth="100.0" sortable="false" text="Value" />
+                                                <TableColumn fx:id="columnProbability" prefWidth="100.0" sortable="false" text="Probability" />
+                                            </columns>
+                                        </TableView>
+                                    </children>
+                                </AnchorPane>
+                            </items>
+                        </SplitPane>
+                    </children>
+                </AnchorPane>
+                <AnchorPane fx:id="anchorPaneSettings" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="0.0" minWidth="0.0" prefHeight="497.0" prefWidth="583.0">
+                    <children>
+                        <Label layoutX="40.0" layoutY="149.0" text="Data status:" />
+                        <Label layoutX="41.0" layoutY="298.0" text="Operation status:" />
+                        <ComboBox fx:id="comboBoxOperation" items="${viewModel.operations}" layoutX="40.0" layoutY="204.0" prefHeight="27.0" prefWidth="277.0" />
+                        <Button fx:id="buttonCalculate" disable="${viewModel.calculationDisabled}" layoutX="44.0" layoutY="346.0" mnemonicParsing="false" prefHeight="27.0" prefWidth="277.0" text="Calculate" />
+                        <Label layoutX="45.0" layoutY="413.0" text="Result:" />
+                        <Label layoutX="41.0" layoutY="187.0" text="Operation:" />
+                        <Label fx:id="labelDataStatus" layoutX="135.0" layoutY="149.0" prefHeight="17.0" prefWidth="179.0" text="${viewModel.dataStatus}" />
+                        <Label fx:id="labelOperationStatus" layoutX="155.0" layoutY="298.0" prefHeight="17.0" prefWidth="165.0" text="${viewModel.operationStatus}" />
+                        <Label fx:id="labelResult" layoutX="98.0" layoutY="413.0" prefHeight="17.0" prefWidth="223.0" text="${viewModel.result}" />
+                        <Button fx:id="buttonUpdate" defaultButton="true" disable="${viewModel.updateDisabled}" layoutX="261.0" layoutY="32.0" mnemonicParsing="false" prefHeight="27.0" prefWidth="65.0" text="Update" />
+                        <Button fx:id="buttonDelete" defaultButton="true" disable="${viewModel.deleteDisabled}" layoutX="261.0" layoutY="68.0" mnemonicParsing="false" prefHeight="27.0" prefWidth="65.0" text="Delete" />
+                  <TextField fx:id="textfieldNewValue" layoutX="37.0" layoutY="32.0" prefHeight="27.0" prefWidth="87.0" />
+                  <TextField fx:id="textfieldNewProbability" layoutX="145.0" layoutY="32.0" prefHeight="27.0" prefWidth="96.0" />
+                  <Label layoutX="40.0" layoutY="14.0" text="Value:" />
+                  <Label layoutX="145.0" layoutY="14.0" text="Probability:" />
+                  <Label layoutX="40.0" layoutY="113.0" text="Input data status:" />
+                  <Label fx:id="labelInputDataStatus" layoutX="160.0" layoutY="113.0" prefHeight="17.0" prefWidth="154.0" text="${viewModel.inputDataStatus}" />
+                  <Label fx:id="labelParameter" layoutX="41.0" layoutY="260.0" prefHeight="17.0" prefWidth="107.0" text="Order:" visible="${viewModel.enterParameterVisible}" />
+                  <TextField fx:id="textfieldParameter" layoutX="170.0" layoutY="255.0" prefHeight="27.0" prefWidth="154.0" visible="${viewModel.enterParameterVisible}" />
+                  <TextArea fx:id="textAreaLog" editable="false" layoutX="383.0" layoutY="13.0" prefHeight="483.0" prefWidth="200.0" text="${viewModel.logs}" />
+                    </children>
+               <opaqueInsets>
+                  <Insets />
+               </opaqueInsets>
+                </AnchorPane>
+            </items>
+        </SplitPane>
+    </children>
+</AnchorPane>
diff --git a/code/statistics-calculation/View/src/test/java/ru/unn/agile/StatisticsCalculation/view/FakeViewTests.java b/code/statistics-calculation/View/src/test/java/ru/unn/agile/StatisticsCalculation/view/FakeViewTests.java
new file mode 100644
index 000000000..77a4db9b0
--- /dev/null
+++ b/code/statistics-calculation/View/src/test/java/ru/unn/agile/StatisticsCalculation/view/FakeViewTests.java
@@ -0,0 +1,12 @@
+package ru.unn.agile.statisticscalculation.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/statistics-calculation/ViewModel/build.gradle b/code/statistics-calculation/ViewModel/build.gradle
new file mode 100644
index 000000000..727faef26
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':statistics-calculation-Model')
+}
diff --git a/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/FakeLogger.java b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..411dc2da9
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class FakeLogger implements ILogger {
+    private ArrayList<String> log = new ArrayList<String>();
+
+    @Override
+    public void addLog(final String mes) {
+        log.add(mes);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ILogger.java b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ILogger.java
new file mode 100644
index 000000000..8c81b7351
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void addLog(String mes);
+
+    List<String> getLog();
+}
diff --git a/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/Operation.java b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/Operation.java
new file mode 100644
index 000000000..c43db951f
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/Operation.java
@@ -0,0 +1,39 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+import ru.unn.agile.statisticscalculation.model.StatisticsCalculation;
+import ru.unn.agile.statisticscalculation.model.DiscreteRandomVariable;
+
+public enum Operation {
+    EXPECTED_VALUE("Calculate expected value") {
+        public Double apply(final DiscreteRandomVariable drv, final String ... params) {
+            return StatisticsCalculation.calculateExpectedValue(drv);
+        }
+    },
+    DISPERSION("Calculate dispersion") {
+        public Double apply(final DiscreteRandomVariable drv, final String ... params) {
+            return StatisticsCalculation.calculateDispersion(drv);
+        }
+    },
+    RAW_MOMENT("Calculate raw moment") {
+        public Double apply(final DiscreteRandomVariable drv, final String ... params) {
+            return StatisticsCalculation.calculateRawMoment(drv, Integer.parseInt(params[0]));
+        }
+    },
+    CENTRAL_MOMENT("Calculate central moment") {
+        public Double apply(final DiscreteRandomVariable drv, final String ... params) {
+            return StatisticsCalculation.calculateCentralMoment(drv, Integer.parseInt(params[0]));
+        }
+    };
+
+    private final String name;
+    Operation(final String name) {
+        this.name = name;
+    }
+
+    @Override
+    public String toString() {
+        return name;
+    }
+
+    public abstract Double apply(DiscreteRandomVariable drv, String ... params);
+}
diff --git a/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/TableElement.java b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/TableElement.java
new file mode 100644
index 000000000..e4de2cd65
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/TableElement.java
@@ -0,0 +1,27 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+public class TableElement {
+    private String value;
+    private String probability;
+
+    public TableElement(final String value, final String probability) {
+        this.value = value;
+        this.probability = probability;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(final String value) {
+        this.value = value;
+    }
+
+    public String getProbability() {
+        return probability;
+    }
+
+    public void setProbability(final String probabilitie) {
+        this.probability = probabilitie;
+    }
+}
diff --git a/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModel.java b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModel.java
new file mode 100644
index 000000000..06d21a36b
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/main/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModel.java
@@ -0,0 +1,516 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.*;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import ru.unn.agile.statisticscalculation.model.DiscreteRandomVariable;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+enum InputDataStatus {
+    WAITING("Enter data"),
+    READY("Input data is correct"),
+    BAD_FORMAT("Input data error");
+
+    private final String name;
+
+    InputDataStatus(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
+
+enum DataStatus {
+    WAITING("Enter data"),
+    READY("Data is correct"),
+    BAD_FORMAT("Data normalization error");
+
+    private final String name;
+
+    DataStatus(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
+
+enum OperationStatus {
+    WAITING_OPERATION("Choose an operation"),
+    WAITING_DATA("Waiting correct data"),
+    READY("Press 'Calculate'"),
+    WAITING_PARAMETER("Enter parameter"),
+    BAD_FORMAT("Error in parameter"),
+    SUCCESS("Success");
+
+    private final String name;
+
+    OperationStatus(final String name) {
+        this.name = name;
+    }
+
+    public String toString() {
+        return name;
+    }
+}
+
+final class LogMessages {
+    public static final String CALCULATE_WAS_PRESSED = "Calculate. ";
+    public static final String OPERATION_WAS_CHANGED = "Operation was changed to ";
+    public static final String UPDATE_TABLE = "Updated input. ";
+    public static final String DELETE_ELEMENT_IN_TABLE = "Deleted element. ";
+    public static final String SELECTED_ELEMENT_IN_TABLE = "Selected element in table. ";
+
+    private LogMessages() { }
+}
+
+public class ViewModel {
+    private final StringProperty newValue = new SimpleStringProperty();
+    private final StringProperty newProbability = new SimpleStringProperty();
+    private final StringProperty operationParameter = new SimpleStringProperty();
+
+    private final StringProperty result = new SimpleStringProperty();
+    private final StringProperty operationStatus = new SimpleStringProperty();
+    private final StringProperty dataStatus = new SimpleStringProperty();
+    private final StringProperty inputDataStatus = new SimpleStringProperty();
+
+    private final BooleanProperty calculationDisabled = new SimpleBooleanProperty();
+    private final BooleanProperty deleteDisabled = new SimpleBooleanProperty();
+    private final BooleanProperty updateDisabled = new SimpleBooleanProperty();
+    private final BooleanProperty enterParameterVisible = new SimpleBooleanProperty();
+    private final BooleanProperty isOperationParameterCorrect = new SimpleBooleanProperty();
+
+    private final IntegerProperty selectedListIndex = new SimpleIntegerProperty();
+
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    private final StringProperty logs = new SimpleStringProperty();
+
+    private final ObjectProperty<ObservableList<Operation>> operations =
+            new SimpleObjectProperty<>(FXCollections.observableArrayList(Operation.values()));
+    private final ObjectProperty<Operation> operation = new SimpleObjectProperty<>();
+
+    private final ObservableList<TableElement> listData = FXCollections.observableArrayList();
+    private final List<UpdateDataChangeListener> updateDataChangedListeners = new ArrayList<>();
+    private static final int NOT_SELECTED = -1;
+    private static final String EMPTY = "";
+    private DiscreteRandomVariable discreteRandomVariable;
+
+    private ILogger logger;
+
+    public final void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    // FXML needs default c-tor for binding
+    public ViewModel() {
+        init();
+    }
+
+    public ViewModel(final ILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    public void init() {
+        setInputFieldsToEmpty();
+        operationParameter.set(EMPTY);
+
+        selectedListIndex.set(NOT_SELECTED);
+
+        result.set(EMPTY);
+        operationStatus.set(OperationStatus.WAITING_DATA.toString());
+        dataStatus.set(DataStatus.WAITING.toString());
+        inputDataStatus.set(InputDataStatus.WAITING.toString());
+        operation.set(null);
+
+        operationParameter.addListener(
+                (observable, oldValue, newValue) -> {
+                    operationParameter.set(newValue);
+                    try {
+                        if (Integer.parseInt(operationParameterProperty().get()) > 0) {
+                            isOperationParameterCorrect.set(true);
+                        }
+                    } catch (NumberFormatException nfe) {
+                        isOperationParameterCorrect.set(false);
+                    }
+                    operationStatus.set(calculateOperationStatus().toString());
+                });
+
+        BooleanBinding couldUpdateData = new BooleanBinding() {
+            {
+                super.bind(newValue, newProbability);
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return calculateInputDataStatus() == InputDataStatus.READY;
+            }
+        };
+        updateDisabled.bind(couldUpdateData.not());
+
+        BooleanBinding couldDelete = new BooleanBinding() {
+            {
+                super.bind(newValue, newProbability);
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return !(newValue.isEmpty().get() && newProbability.isEmpty().get());
+            }
+        };
+        deleteDisabled.bind(couldDelete.not());
+
+        BooleanBinding couldCalculate = new BooleanBinding() {
+            {
+                super.bind(operationStatus, dataStatus);
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return calculateDataStatus() == DataStatus.READY
+                        && calculateOperationStatus() == OperationStatus.READY;
+            }
+        };
+        calculationDisabled.bind(couldCalculate.not());
+
+        BooleanBinding couldEnterParameter = new BooleanBinding() {
+            {
+                super.bind(operation, operationStatus);
+            }
+
+            @Override
+            protected boolean computeValue() {
+                return calculateDataStatus() == DataStatus.READY
+                        && (operation.get() == Operation.RAW_MOMENT
+                        || operation.get() == Operation.CENTRAL_MOMENT);
+            }
+        };
+        enterParameterVisible.bind(couldEnterParameter);
+
+        final List<StringProperty> fields = new ArrayList<>() {
+            {
+                add(newValue);
+                add(newProbability);
+                add(operationParameter);
+            }
+        };
+
+        for (StringProperty field : fields) {
+            final UpdateDataChangeListener listener = new UpdateDataChangeListener();
+            field.addListener(listener);
+            updateDataChangedListeners.add(listener);
+        }
+    }
+
+    public StringProperty newValueProperty() {
+        return newValue;
+    }
+
+    public StringProperty newProbabilityProperty() {
+        return newProbability;
+    }
+
+    public StringProperty operationParameterProperty() {
+        return operationParameter;
+    }
+
+
+    public StringProperty resultProperty() {
+        return result;
+    }
+
+    public final String getResult() {
+        return result.get();
+    }
+
+    public StringProperty operationStatusProperty() {
+        return operationStatus;
+    }
+
+    public final String getOperationStatus() {
+        return operationStatus.get();
+    }
+
+    public StringProperty dataStatusProperty() {
+        return dataStatus;
+    }
+
+    public final String getDataStatus() {
+        return dataStatus.get();
+    }
+
+    public StringProperty inputDataStatusProperty() {
+        return inputDataStatus;
+    }
+
+    public final String getInputDataStatus() {
+        return inputDataStatus.get();
+    }
+
+    public ObservableList<TableElement> getListData() {
+        return listData;
+    }
+
+    public BooleanProperty calculationDisabledProperty() {
+        return calculationDisabled;
+    }
+
+    public final boolean isCalculationDisabled() {
+        return calculationDisabled.get();
+    }
+
+    public BooleanProperty deleteDisabledProperty() {
+        return deleteDisabled;
+    }
+
+    public final boolean isDeleteDisabled() {
+        return deleteDisabled.get();
+    }
+
+    public BooleanProperty updateDisabledProperty() {
+        return updateDisabled;
+    }
+
+    public final boolean isUpdateDisabled() {
+        return updateDisabled.get();
+    }
+
+    public BooleanProperty enterParameterVisibleProperty() {
+        return enterParameterVisible;
+    }
+
+    public final boolean isEnterParameterVisible() {
+        return enterParameterVisible.get();
+    }
+
+    public ObjectProperty<ObservableList<Operation>> operationsProperty() {
+        return operations;
+    }
+
+    public final ObservableList<Operation> getOperations() {
+        return operations.get();
+    }
+
+    public ObjectProperty<Operation> operationProperty() {
+        return operation;
+    }
+    public final String getLogs() {
+        return logs.get();
+    }
+    public void updateTableElement() {
+        inputDataStatus.set(calculateInputDataStatus().toString());
+        if (calculateInputDataStatus() == InputDataStatus.READY) {
+            if (selectedListIndex.get() >= 0) {
+                listData.set(selectedListIndex.get(),
+                        new TableElement(newValue.getValue(), newProbability.getValue()));
+            } else {
+                listData.add(new TableElement(newValue.getValue(), newProbability.getValue()));
+            }
+
+            StringBuilder message = new StringBuilder(LogMessages.UPDATE_TABLE);
+            message.append("Value = ").append(newValue.get())
+                    .append("; Probability = ").append(newProbability.getValue())
+                    .append(" Operation: ").append(getOperationStatus()).append(".");
+            logger.addLog(message.toString());
+            updateLogstoView();
+
+            setInputFieldsToEmpty();
+            inputDataStatus.set(calculateInputDataStatus().toString());
+        }
+        dataStatus.set(calculateDataStatus().toString());
+        operationStatus.set(calculateOperationStatus().toString());
+    }
+
+    public void deleteTableElement(final int focusedIndex) {
+        if (focusedIndex >= 0 && focusedIndex < listData.size()) {
+            StringBuilder message = new StringBuilder(LogMessages.DELETE_ELEMENT_IN_TABLE);
+            message.append("Value = ").append(listData.get(focusedIndex).getValue())
+                    .append("; Probability = ").append(listData.get(focusedIndex).getProbability())
+                    .append(" Operation: ").append(getOperationStatus()).append(".");
+            logger.addLog(message.toString());
+            updateLogstoView();
+            listData.remove(focusedIndex);
+        }
+        setInputFieldsToEmpty();
+        inputDataStatus.set(calculateInputDataStatus().toString());
+        dataStatus.set(calculateDataStatus().toString());
+        operationStatus.set(calculateOperationStatus().toString());
+    }
+
+    public void setSelectedElement(final int focusedIndex) {
+        selectedListIndex.set(focusedIndex);
+        if (selectedListIndex.get() != NOT_SELECTED) {
+            newValue.set(listData.get(selectedListIndex.get()).getValue());
+            newProbability.set(listData.get(selectedListIndex.get()).getProbability());
+            inputDataStatus.set(calculateInputDataStatus().toString());
+        }
+        StringBuilder message = new StringBuilder(LogMessages.SELECTED_ELEMENT_IN_TABLE);
+        message.append("Index in table: ").append(selectedListIndex.get())
+                .append("; Value = ").append(listData.get(selectedListIndex.get()).getValue())
+                .append("; Probability = ")
+                .append(listData.get(selectedListIndex.get()).getProbability())
+                .append(".");
+        logger.addLog(message.toString());
+        updateLogstoView();
+    }
+
+    public void updateOperation() {
+        operationStatus.set(calculateOperationStatus().toString());
+        StringBuilder message = new StringBuilder(LogMessages.OPERATION_WAS_CHANGED);
+        message.append(operation.get().toString()).append(".");
+        logger.addLog(message.toString());
+        updateLogstoView();
+    }
+
+    public void calculate() {
+        try {
+            Double operationResult = operation.get().apply(
+                    discreteRandomVariable, operationParameter.get());
+            operationStatus.set(OperationStatus.SUCCESS.toString());
+            result.set(operationResult.toString());
+
+            StringBuilder message = new StringBuilder(LogMessages.CALCULATE_WAS_PRESSED);
+            message.append("Operation = ").append(operation.get().toString())
+                    .append("; Operation parameter = ").append(operationParameter.get())
+                    .append("; Values = ")
+                    .append(Arrays.toString(discreteRandomVariable.getValues()))
+                    .append("; Probabilities = ")
+                    .append(Arrays.toString(discreteRandomVariable.getProbabilities()))
+                    .append("; Result = ").append(operationResult)
+                    .append(".");
+            logger.addLog(message.toString());
+            updateLogstoView();
+
+        } catch (IllegalArgumentException exception) {
+            result.set(exception.toString());
+        }
+    }
+
+    public void resetSelectedElement() {
+        selectedListIndex.set(NOT_SELECTED);
+        setInputFieldsToEmpty();
+        inputDataStatus.set(calculateInputDataStatus().toString());
+    }
+
+    private InputDataStatus calculateInputDataStatus() {
+        if (newValueProperty().get().isEmpty() || newProbabilityProperty().get().isEmpty()) {
+            return InputDataStatus.WAITING;
+        }
+        try {
+            if (!newValueProperty().get().isEmpty()) {
+                Double.parseDouble(newValueProperty().get());
+            }
+            if (!newProbabilityProperty().get().isEmpty()) {
+                Double.parseDouble(newProbabilityProperty().get());
+                if (Double.parseDouble(newProbabilityProperty().get()) > 1.0) {
+                    return InputDataStatus.BAD_FORMAT;
+                }
+            }
+        } catch (NumberFormatException nfe) {
+            return InputDataStatus.BAD_FORMAT;
+        }
+
+        return InputDataStatus.READY;
+    }
+
+    private DataStatus calculateDataStatus() {
+        if (listData.isEmpty()) {
+            return DataStatus.WAITING;
+        }
+        Number[] values = createArrayValuesFromList();
+        Double[] probabilities = createArrayProbabilitiesFromList();
+        try {
+            discreteRandomVariable = new DiscreteRandomVariable(values, probabilities);
+        } catch (IllegalArgumentException exception) {
+            return DataStatus.BAD_FORMAT;
+        }
+
+        return DataStatus.READY;
+    }
+
+    private OperationStatus calculateOperationStatus() {
+        if (calculateDataStatus() != DataStatus.READY) {
+            return OperationStatus.WAITING_DATA;
+        }
+        if (calculateDataStatus() == DataStatus.READY
+                && operation.get() == null) {
+            return OperationStatus.WAITING_OPERATION;
+        }
+        if (operation.get() == Operation.EXPECTED_VALUE
+                || operation.get() == Operation.DISPERSION) {
+            return OperationStatus.READY;
+        }
+        if ((operation.get() == Operation.CENTRAL_MOMENT
+                || operation.get() == Operation.RAW_MOMENT)
+                && operationParameter.get().equals(EMPTY)) {
+            return OperationStatus.WAITING_PARAMETER;
+        }
+        if (!isOperationParameterCorrect.get()) {
+            return OperationStatus.BAD_FORMAT;
+        }
+        return OperationStatus.READY;
+    }
+
+    private Number[] createArrayValuesFromList() {
+        Number[] values = new Number[listData.size()];
+        int i = 0;
+        for (TableElement element : listData) {
+            values[i++] = Double.parseDouble(element.getValue());
+        }
+
+        return values;
+    }
+
+    private Double[] createArrayProbabilitiesFromList() {
+        Double[] probabilities = new Double[listData.size()];
+        int i = 0;
+        for (TableElement element : listData) {
+            probabilities[i++] = Double.parseDouble(element.getProbability());
+        }
+
+        return probabilities;
+    }
+
+    private void setInputFieldsToEmpty() {
+        newValue.set(EMPTY);
+        newProbability.set(EMPTY);
+    }
+
+    public List<String> getLog() {
+        return logger.getLog();
+    }
+
+    private void updateLogstoView() {
+        List<String> fullLog = logger.getLog();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
+
+    private class UpdateDataChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            inputDataStatus.set(calculateInputDataStatus().toString());
+        }
+    }
+}
+
+
diff --git a/code/statistics-calculation/ViewModel/src/test/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModelTests.java b/code/statistics-calculation/ViewModel/src/test/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..4148407f0
--- /dev/null
+++ b/code/statistics-calculation/ViewModel/src/test/java/ru/unn/agile/StatisticsCalculation/viewmodel/ViewModelTests.java
@@ -0,0 +1,733 @@
+package ru.unn.agile.statisticscalculation.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        if (viewModel == null) {
+            viewModel = new ViewModel(new FakeLogger());
+        }
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    public void setExternalViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Test
+    public void canSetDefaultValuesLabels() {
+        assertEquals("", viewModel.resultProperty().get());
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+        assertEquals(DataStatus.WAITING.toString(), viewModel.getDataStatus());
+        assertEquals(InputDataStatus.WAITING.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetDefaultValuesTextFields() {
+        assertEquals("", viewModel.newProbabilityProperty().get());
+        assertEquals("", viewModel.newValueProperty().get());
+        assertEquals("", viewModel.operationParameterProperty().get());
+    }
+    @Test
+    public void canSetDefaultButtons() {
+        assertTrue(viewModel.calculationDisabledProperty().get());
+        assertTrue(viewModel.deleteDisabledProperty().get());
+    }
+    @Test
+    public void canSetParametersPartInvisibleByDefault() {
+        assertFalse(viewModel.isEnterParameterVisible());
+    }
+    @Test
+    public void canAddCorrectTableElement() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.2");
+
+        viewModel.updateTableElement();
+
+        assertEquals("1", viewModel.getListData().get(0).getValue());
+        assertEquals("0.2", viewModel.getListData().get(0).getProbability());
+    }
+    @Test
+    public void canAddCorrectTableElementAndCheckStatusWaiting() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.2");
+
+        viewModel.updateTableElement();
+
+        assertEquals(InputDataStatus.WAITING.toString(), viewModel.inputDataStatusProperty().get());
+    }
+    @Test
+    public void canNotAddTableElementWithProbabilityMoreThen1() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.1");
+
+        viewModel.updateTableElement();
+
+        assertTrue(viewModel.getListData().isEmpty());
+        assertEquals(InputDataStatus.BAD_FORMAT.toString(),
+                viewModel.inputDataStatusProperty().get());
+    }
+    @Test
+    public void canNotAddTableElementWithProbabilityMoreThen1AndStatusBad() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.1");
+
+        viewModel.updateTableElement();
+
+        assertEquals(InputDataStatus.BAD_FORMAT.toString(),
+                viewModel.inputDataStatusProperty().get());
+    }
+    @Test
+    public void canPushUpdateButtonWithCorrectInput() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("0.5");
+
+        assertFalse(viewModel.isUpdateDisabled());
+    }
+    @Test
+    public void canPushUpdateButtonWithDoubleInputInValue() {
+        viewModel.newValueProperty().set("2.1");
+        viewModel.newProbabilityProperty().set("0.2");
+
+        assertFalse(viewModel.isUpdateDisabled());
+    }
+    @Test
+    public void canNotPushUpdateButtonWithIncorrectInput() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("1.5");
+
+        assertTrue(viewModel.isUpdateDisabled());
+    }
+    @Test
+    public void canPushDeleteButtonWithNotEmptyInput() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("0.5");
+
+        assertFalse(viewModel.isDeleteDisabled());
+    }
+    @Test
+    public void canSetInputDataWaitingWithEmptyProperty() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("");
+
+        assertEquals(InputDataStatus.WAITING.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetInputDataBadFormatWithErrorProbability() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("10");
+
+        assertEquals(InputDataStatus.BAD_FORMAT.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetInputDataBadFormatWithString() {
+        viewModel.newValueProperty().set("hello");
+        viewModel.newProbabilityProperty().set("!");
+
+        assertEquals(InputDataStatus.BAD_FORMAT.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetInputDataBadFormatWithOneError() {
+        viewModel.newValueProperty().set("hello");
+        viewModel.newProbabilityProperty().set("0.1");
+
+        assertEquals(InputDataStatus.BAD_FORMAT.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetInputDataReadyWithDoubleInValue() {
+        viewModel.newValueProperty().set("1.1");
+        viewModel.newProbabilityProperty().set("0.1");
+
+        assertEquals(InputDataStatus.READY.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canSetInputDataReady() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("0.4");
+
+        assertEquals(InputDataStatus.READY.toString(), viewModel.getInputDataStatus());
+    }
+    @Test
+    public void canUpdateSelectedElement() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.1");
+        viewModel.updateTableElement();
+
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+
+        assertEquals("20", viewModel.getListData().get(0).getValue());
+        assertEquals("0.2", viewModel.getListData().get(0).getProbability());
+    }
+    @Test
+    public void canDeleteInputData() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.1");
+
+        viewModel.deleteTableElement(-1);
+
+        assertTrue(viewModel.getListData().isEmpty());
+        assertEquals("", viewModel.newValueProperty().get());
+        assertEquals("", viewModel.newProbabilityProperty().get());
+    }
+    @Test
+    public void canDeleteSelectedElement() {
+        viewModel.newValueProperty().set("100");
+        viewModel.newProbabilityProperty().set("0.1");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("200");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(1);
+
+        assertEquals(1, viewModel.getListData().size());
+        assertEquals("100", viewModel.getListData().get(0).getValue());
+        assertEquals("0.1", viewModel.getListData().get(0).getProbability());
+    }
+    @Test
+    public void canHandleDeleteWithInvalidIndex() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.4");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(2);
+
+        assertEquals(1, viewModel.getListData().size());
+        assertEquals("10", viewModel.getListData().get(0).getValue());
+        assertEquals("0.4", viewModel.getListData().get(0).getProbability());
+    }
+    @Test
+    public void canSetDataStatusEnterDataByDefolt() {
+        assertEquals(DataStatus.WAITING.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetDataStatusEnterDataWithEmptyData() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.9");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(0);
+
+        assertEquals(DataStatus.WAITING.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetDataStatusBadFormat() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.1");
+        viewModel.updateTableElement();
+
+        assertEquals(DataStatus.BAD_FORMAT.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetDataStatusBadFormatAfterDelete() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.9");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.1");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(1);
+
+        assertEquals(DataStatus.BAD_FORMAT.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetDataStatusReady() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1");
+        viewModel.updateTableElement();
+
+        assertEquals(DataStatus.READY.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetDataStatusReadyAfterDelete() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("30");
+        viewModel.newProbabilityProperty().set("0.3");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(2);
+
+        assertEquals(DataStatus.READY.toString(), viewModel.getDataStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingDataByDefolt() {
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingOperationAfterEnteringCorrectData() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        assertEquals(OperationStatus.WAITING_OPERATION.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusReadyAfterChoosingDispersion() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.operationProperty().set(Operation.DISPERSION);
+        viewModel.updateOperation();
+
+        assertEquals(OperationStatus.READY.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusReadyAfterChoosingExpectedValue() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.operationProperty().set(Operation.EXPECTED_VALUE);
+        viewModel.updateOperation();
+
+        assertEquals(OperationStatus.READY.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingDataAfterDelete() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(1);
+
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingDataAfterAdd() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingDataAfterUpdate() {
+        viewModel.newValueProperty().set("100");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingDataAfterSetOperationAndUpdate() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.operationProperty().set(Operation.DISPERSION);
+        viewModel.updateOperation();
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("100");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+
+        assertEquals(OperationStatus.WAITING_DATA.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingParametrAfterChoosingRawMoment() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        assertEquals(OperationStatus.WAITING_PARAMETER.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canSetOperationStatusWaitingParameterAfterChoosingCentralMoment() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+
+        viewModel.operationProperty().set(Operation.CENTRAL_MOMENT);
+        viewModel.updateOperation();
+
+        assertEquals(OperationStatus.WAITING_PARAMETER.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canPushCalculateButtonWithCorrectInputAndOperation() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.DISPERSION);
+        viewModel.updateOperation();
+
+        assertFalse(viewModel.isCalculationDisabled());
+    }
+    @Test
+    public void canNotPushCalculateButtonWithUncorrectInput() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.DISPERSION);
+        viewModel.updateOperation();
+
+        assertTrue(viewModel.isCalculationDisabled());
+    }
+    @Test
+    public void canNotPushCalculateButtonWithoutOperationParameter() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.CENTRAL_MOMENT);
+        viewModel.updateOperation();
+
+        assertTrue(viewModel.isCalculationDisabled());
+    }
+    @Test
+    public void canSetParametersPartVisibleWithDataAndCentralMoment() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.CENTRAL_MOMENT);
+        viewModel.updateOperation();
+
+        assertTrue(viewModel.isEnterParameterVisible());
+    }
+    @Test
+    public void canSetParametersPartVisibleWithDataAndRawMoment() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        assertTrue(viewModel.isEnterParameterVisible());
+    }
+    @Test
+    public void canSetParametersPartInvisibleWithDataAndDispersion() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        viewModel.operationProperty().set(Operation.DISPERSION);
+        viewModel.updateOperation();
+
+        assertFalse(viewModel.isEnterParameterVisible());
+    }
+    @Test
+    public void canSetParametersPartInvisibleAfterUpdateData() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+
+        assertFalse(viewModel.isEnterParameterVisible());
+    }
+    @Test
+    public void canSetOperationParameter() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.CENTRAL_MOMENT);
+        viewModel.updateOperation();
+
+        viewModel.operationParameterProperty().set("2");
+
+        assertEquals(OperationStatus.READY.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canNotSetErrorOperationParameter() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        viewModel.operationParameterProperty().set("error");
+
+        assertEquals(OperationStatus.BAD_FORMAT.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canNotSetOperationParameterLess0() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        viewModel.operationParameterProperty().set("-1");
+
+        assertEquals(OperationStatus.BAD_FORMAT.toString(), viewModel.getOperationStatus());
+    }
+    @Test
+    public void canCalculateExpectedValue() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("1.0");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.EXPECTED_VALUE);
+        viewModel.updateOperation();
+
+        viewModel.calculate();
+
+        assertEquals("1.0", viewModel.getResult());
+    }
+    @Test
+    public void canCalculateRawMoment() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.5");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("5");
+        viewModel.newProbabilityProperty().set("0.5");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+        viewModel.operationParameterProperty().set("1");
+
+        viewModel.calculate();
+
+        assertEquals("3.0", viewModel.getResult());
+    }
+    @Test
+    public void canResetSelectedElement() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.5");
+        viewModel.updateTableElement();
+        viewModel.setSelectedElement(0);
+
+        viewModel.resetSelectedElement();
+
+        assertEquals(InputDataStatus.WAITING.toString(), viewModel.getInputDataStatus());
+        assertEquals("", viewModel.newValueProperty().get());
+        assertEquals("", viewModel.newProbabilityProperty().get());
+    }
+    @Test
+    public void canSetDoubleValues() {
+        viewModel.newValueProperty().set("-2.0");
+        viewModel.newProbabilityProperty().set("0.5");
+
+        viewModel.updateTableElement();
+
+        assertEquals("-2.0", viewModel.getListData().get(0).getValue());
+    }
+    @Test
+    public void createViewModelWithLogger() {
+        FakeLogger fakeLogger = new FakeLogger();
+        ViewModel viewModel = new ViewModel(fakeLogger);
+
+        assertNotNull(viewModel);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void throwWhenCreateViewModelWithNullLogger() {
+        ViewModel viewModel = new ViewModel(null);
+    }
+
+    @Test
+    public void logContainsMessageZeroMessageInitially() {
+        List<String> log = viewModel.getLog();
+        assertEquals(0, log.size());
+    }
+
+    @Test
+    public void logContainsFullMessageCorrectValuesInTableAfterUpdate() {
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(0).matches(".*" + "Updated input. "
+                + ".*" + viewModel.getListData().get(0).getValue()
+                + ".*" + viewModel.getListData().get(0).getProbability()
+                + ".*" + viewModel.getOperationStatus() + ".*"));
+    }
+
+    @Test
+    public void logContainsMessageCorrectValuesInTableAfterUpdate() {
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("0.3");
+        viewModel.updateTableElement();
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(0).matches(".*"
+                + " Value = " + viewModel.getListData().get(0).getValue()
+                + "; Probability = " + viewModel.getListData().get(0).getProbability()
+                + ".*"));
+    }
+
+    @Test
+    public void logContainsMessageOperationAfterUpdateTable() {
+        viewModel.newValueProperty().set("8");
+        viewModel.newProbabilityProperty().set("0.9");
+        viewModel.updateTableElement();
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(0).matches(".*" + viewModel.getOperationStatus() + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        viewModel.newValueProperty().set("3");
+        viewModel.newProbabilityProperty().set("0.6");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("1");
+        viewModel.newProbabilityProperty().set("0.4");
+        viewModel.updateTableElement();
+
+        assertEquals(2, viewModel.getLog().size());
+    }
+
+    @Test
+    public void logContainsMessageAfterDeleteLineInEmptyTable() {
+        viewModel.newValueProperty().set("3");
+        viewModel.newProbabilityProperty().set("0.1");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("2");
+        viewModel.newProbabilityProperty().set("0.3");
+        viewModel.updateTableElement();
+
+        viewModel.deleteTableElement(1);
+        List<String> log = viewModel.getLog();
+        assertEquals(3, log.size());
+        assertTrue(log.get(2).matches(".*" + "Deleted element. "
+                + "Value = 2; "
+                + "Probability = 0.3" + ".*"));
+    }
+
+    @Test
+    public void logNotContainWhenDeleteLineInEmptyTable() {
+        viewModel.deleteTableElement(0);
+
+        List<String> log = viewModel.getLog();
+        assertEquals(0, log.size());
+    }
+
+    @Test
+    public void logContainsArgumentsAfterCalculate() {
+        viewModel.newValueProperty().set("3");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("5");
+        viewModel.newProbabilityProperty().set("0.8");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+        viewModel.operationParameterProperty().set("1");
+
+        viewModel.calculate();
+
+        assertEquals(4, viewModel.getLog().size());
+        assertTrue(viewModel.getLog().get(3).matches(".*" + "Calculate. "
+                + ".*" + viewModel.operationProperty().get().toString()
+                + ".*" + viewModel.operationParameterProperty().get()
+                + "; Values = \\[3.0, 5.0\\]; Probabilities = \\[0.2, 0.8\\]"
+                + ".*" + viewModel.getResult() + ".*"));
+    }
+
+    @Test
+    public void logContainsFullMessageAfterCalculate() {
+        viewModel.newValueProperty().set("3");
+        viewModel.newProbabilityProperty().set("0.4");
+        viewModel.updateTableElement();
+        viewModel.newValueProperty().set("4");
+        viewModel.newProbabilityProperty().set("0.6");
+        viewModel.updateTableElement();
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+        viewModel.operationParameterProperty().set("1");
+
+        viewModel.calculate();
+
+        assertTrue(viewModel.getLog().get(3).matches(".*"
+                + "Operation = " + viewModel.operationProperty().get().toString()
+                + "; Operation parameter = " + viewModel.operationParameterProperty().get()
+                + "; Values = \\[3.0, 4.0\\]" + "; Probabilities = \\[0.4, 0.6\\]"
+                + "; Result = " + viewModel.getResult() + ".*"));
+    }
+
+    @Test
+    public void logContainsMessageWhenOperationIsChanged() {
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(0).matches(".*" + "Operation was changed to " + ".*"));
+    }
+
+    @Test
+    public void logContainsArgumentsMessageWhenOperationIsChanged() {
+        viewModel.operationProperty().set(Operation.RAW_MOMENT);
+        viewModel.updateOperation();
+
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(0).matches(".*" + "Operation was changed to "
+                + viewModel.operationProperty().get().toString()
+                + ".*"));
+    }
+
+    @Test
+    public void logContainsFullMessageWhenSelectedItemInTable() {
+        viewModel.newValueProperty().set("9");
+        viewModel.newProbabilityProperty().set("0.6");
+        viewModel.updateTableElement();
+
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("20");
+        viewModel.newProbabilityProperty().set("0.2");
+        viewModel.updateTableElement();
+
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(1).matches(".*" + "Selected element in table. " + ".*"));
+    }
+
+    @Test
+    public void logContainsArgumentsMessageWhenSelectedItemInTable() {
+        viewModel.newValueProperty().set("10");
+        viewModel.newProbabilityProperty().set("0.25");
+        viewModel.updateTableElement();
+
+        viewModel.setSelectedElement(0);
+        viewModel.newValueProperty().set("30");
+        viewModel.newProbabilityProperty().set("0.4");
+        viewModel.updateTableElement();
+
+        List<String> log = viewModel.getLog();
+        assertTrue(log.get(1).matches(".*" + "Selected element in table. "
+                + "Index in table: 0"
+                + "; Value = 10"
+                + "; Probability = 0.25"
+                + ".*"));
+    }
+
+}
diff --git a/code/string-calculator/infrastructure/build.gradle b/code/string-calculator/infrastructure/build.gradle
new file mode 100644
index 000000000..695012f82
--- /dev/null
+++ b/code/string-calculator/infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':string-calculator-viewmodel')
+    testCompile project(':string-calculator-viewmodel').sourceSets.test.output
+}
diff --git a/code/string-calculator/infrastructure/src/main/java/ru/unn/agile/calc/infrastructure/TxtLogger.java b/code/string-calculator/infrastructure/src/main/java/ru/unn/agile/calc/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..9277d11c7
--- /dev/null
+++ b/code/string-calculator/infrastructure/src/main/java/ru/unn/agile/calc/infrastructure/TxtLogger.java
@@ -0,0 +1,66 @@
+package ru.unn.agile.calc.infrastructure;
+
+import ru.unn.agile.calc.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
+import java.util.ArrayList;
+import java.util.List;
+
+public class TxtLogger implements ILogger {
+    private static final String DATE_TIME_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
+    private static final String LOG_MESSAGE_FORMAT = "%s >> %s";
+    private final String fileName;
+    private final BufferedWriter bufferedWriter;
+
+    private static String currentLocalDataTime() {
+        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(DATE_TIME_FORMAT));
+    }
+
+    public TxtLogger(final String fileName) {
+        BufferedWriter logWriter = null;
+        this.fileName = fileName;
+
+        try {
+            logWriter = new BufferedWriter(new FileWriter(fileName));
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+        bufferedWriter = logWriter;
+    }
+
+    @Override
+    public void log(final String s) {
+
+        try {
+            bufferedWriter.write(String.format(LOG_MESSAGE_FORMAT, currentLocalDataTime(), s));
+            bufferedWriter.newLine();
+            bufferedWriter.flush();
+        } catch (Exception exception) {
+            System.out.println(exception.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader logReader;
+        ArrayList<String> log = new ArrayList<String>();
+        try {
+            logReader = new BufferedReader(new FileReader(fileName));
+            String line = logReader.readLine();
+
+            while (line != null) {
+                log.add(line);
+                line = logReader.readLine();
+            }
+        } catch (Exception exception) {
+            System.out.println(exception.getMessage());
+        }
+
+        return log;
+    }
+}
diff --git a/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/StringCalcViewModelWithTxtLoggerTests.java b/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/StringCalcViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..00cfa78eb
--- /dev/null
+++ b/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/StringCalcViewModelWithTxtLoggerTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.calc.infrastructure;
+
+import ru.unn.agile.calc.viewmodel.StringCalcViewModel;
+import ru.unn.agile.calc.viewmodel.StringCalcViewModelTests;
+
+public class StringCalcViewModelWithTxtLoggerTests extends StringCalcViewModelTests {
+    @Override
+    public void setUp() {
+        TxtLogger realLogger =
+                new TxtLogger("./ViewModel_with_TxtLogger_Tests-lab3.log");
+        super.setExternalViewModel(new StringCalcViewModel(realLogger));
+    }
+}
diff --git a/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/TxtLoggerTests.java b/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/TxtLoggerTests.java
new file mode 100644
index 000000000..0340e765f
--- /dev/null
+++ b/code/string-calculator/infrastructure/src/test/java/ru/unn/agile/calc/infrastructure/TxtLoggerTests.java
@@ -0,0 +1,72 @@
+package ru.unn.agile.calc.infrastructure;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static org.junit.Assert.*;
+
+public class TxtLoggerTests {
+    private static final String FILENAME = "./TxtLogger_Tests-lab3_string_calculator.log";
+    public static final String FILE_NOT_FOUND_MESSAGE = "File not found.";
+    private TxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TxtLogger(FILENAME);
+    }
+
+    @After
+    public void tearDown() {
+        txtLogger = null;
+    }
+
+    @Test
+    public void isLogFileCreated() {
+        BufferedReader reader;
+
+        try {
+            reader = new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException exception) {
+            fail(FILE_NOT_FOUND_MESSAGE);
+        }
+    }
+
+    @Test
+    public void isMessageLogged() {
+        String testMessage = "Test message";
+        txtLogger.log(testMessage);
+
+        assertTrue(txtLogger.getLog().get(0).matches(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void areSeveralMessagesLogged() {
+        String message1 = "Test message 1";
+        String message2 = "Test message 2";
+        String message3 = "Test message 3";
+        txtLogger.log(message1);
+        txtLogger.log(message2);
+        txtLogger.log(message3);
+
+        List<String> actualMessages = txtLogger.getLog();
+        for (int i = 0; i < actualMessages.size(); i++) {
+            assertEquals(3, actualMessages.size());
+        }
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String testMessage = "Test message";
+        txtLogger.log(testMessage);
+
+        String message = txtLogger.getLog().get(0);
+        assertTrue(message.matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} >> .*"));
+    }
+}
+
diff --git a/code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/Operation.java b/code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/Operation.java
new file mode 100644
index 000000000..8560afe52
--- /dev/null
+++ b/code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/Operation.java
@@ -0,0 +1,49 @@
+package ru.unn.agile.calc.model;
+
+public enum Operation {
+
+    SUMMARY {
+        public double action(final double x, final double y) {
+            return x + y;
+        }
+        public String value() {
+            return "+";
+        }
+    },
+    SUBTRACT {
+        public double action(final double x, final double y) {
+            return x - y;
+        }
+        public String value() {
+            return "-";
+        }
+    },
+    MULTIPLY {
+        public double action(final double x, final double y) {
+            return x * y;
+        }
+        public String value() {
+            return "*";
+        }
+    },
+    DIVIDE {
+        public double action(final double x, final double y) {
+            return x / y;
+        }
+        public String value() {
+            return "/";
+        }
+    };
+
+    public abstract double action(double x, double y);
+    public abstract String value();
+
+    public static Operation getOperationBySymbol(final String operationSymbol) {
+        for (Operation v : values()) {
+            if (v.value().equals(operationSymbol)) {
+                return v;
+            }
+        }
+        return null;
+    }
+}
diff --git a/code/string-calculator/src/main/java/ru/unn/agile/calc/model/StringCalc.java b/code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/StringCalc.java
similarity index 96%
rename from code/string-calculator/src/main/java/ru/unn/agile/calc/model/StringCalc.java
rename to code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/StringCalc.java
index 188bc34f2..390685ebf 100644
--- a/code/string-calculator/src/main/java/ru/unn/agile/calc/model/StringCalc.java
+++ b/code/string-calculator/model/src/main/java/ru/unn/agile/calc/model/StringCalc.java
@@ -83,6 +83,10 @@ private double calcKernel(final double[] numbersArray, final Operation[] operati
         double result = 0;
         for (Operation operation : operationsArray) {
             switch (operation) {
+                case DIVIDE:
+                case MULTIPLY:
+                    numbersArray[i + 1] = numbersArray[i];
+                    break;
                 case SUMMARY:
                 case SUBTRACT:
                     result = secondPriorityAction(numbersArray, i, operation);
diff --git a/code/string-calculator/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java b/code/string-calculator/model/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java
similarity index 77%
rename from code/string-calculator/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java
rename to code/string-calculator/model/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java
index 3bd43d641..488ce6e2b 100644
--- a/code/string-calculator/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java
+++ b/code/string-calculator/model/src/test/java/ru/unn/agile/calc/model/StringCalcTest.java
@@ -1,22 +1,36 @@
 package ru.unn.agile.calc.model;
 
 import java.util.concurrent.ThreadLocalRandom;
+
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
 
 public class StringCalcTest {
+
     private final double delta = 0.00000001;
+    private StringCalc calc;
+
+    @Before
+    public void setUp() {
+        calc = new StringCalc();
+    }
+
+    @After
+    public void tearDown() {
+        calc = null;
+    }
+
     @Test
     public void canParseNumber1() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("1");
         assertEquals(1, number, delta);
     }
 
     @Test
     public void canParseNumber143() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("143");
         assertEquals(143, number, delta);
     }
@@ -24,53 +38,46 @@ public void canParseNumber143() {
     @Test
     public void canParseRandomNumber() {
         int randomNum = ThreadLocalRandom.current().nextInt(0, 100000);
-        StringCalc calc = new StringCalc();
         var number = calc.result(Integer.toString(randomNum));
         assertEquals(randomNum, number, delta);
     }
 
     @Test
     public void canParseNotInt() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("143.26");
         assertEquals(143.26, number, delta);
     }
 
     @Test
     public void canParseSumOfTwoNumbers() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("143.26+2352.549");
         assertEquals(143.26 + 2352.549, number, delta);
     }
 
     @Test
     public void canParseSumOfThreeNumbers() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("143.26+2352.549+25436.25");
         assertEquals(143.26 + 2352.549 + 25436.25, number, delta);
     }
 
     @Test(expected = NumberFormatException.class)
     public void cantParseSumOfNumbersAndStrings() {
-        StringCalc calc = new StringCalc();
-        var number = calc.result("143.26+2352.549+ewffwfe");
+        calc.result("143.26+2352.549+ewffwfe");
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void cantParseNullStrings() {
-        StringCalc calc = new StringCalc();
-        var number = calc.result(null);
+        calc.result(null);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void cantParseEmptyStrings() {
         StringCalc calc = new StringCalc();
-        var number = calc.result("");
+        calc.result("");
     }
 
     @Test
     public void canParseSumAndResidualOfThreeNumbers() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("1+1-1");
         assertEquals(1 + 1 - 1, number, delta);
     }
@@ -78,28 +85,24 @@ public void canParseSumAndResidualOfThreeNumbers() {
 
     @Test
     public void canParseSumAndResidualOfThreeNumbers2() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("-1+1-1");
         assertEquals(-1 + 1 - 1, number, delta);
     }
 
     @Test
     public void canParseMultiplication() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("5*6");
         assertEquals(5 * 6, number, delta);
     }
 
     @Test
     public void canParseMultiplicationWithSum() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("-7+5*6");
         assertEquals(-7 + 5 * 6, number, delta);
     }
 
     @Test
     public void canParseMultiplicationWithSum2() {
-        StringCalc calc = new StringCalc();
         var number = calc.result("-7*5+1+5*6");
         assertEquals(-7 * 5 + 1 + 5 * 6, number, delta);
     }
diff --git a/code/string-calculator/src/main/java/ru/unn/agile/calc/model/Operation.java b/code/string-calculator/src/main/java/ru/unn/agile/calc/model/Operation.java
deleted file mode 100644
index a5b17bc96..000000000
--- a/code/string-calculator/src/main/java/ru/unn/agile/calc/model/Operation.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package ru.unn.agile.calc.model;
-
-public enum Operation {
-
-        SUMMARY {
-            public double action(final double x, final double y) {
-                return x + y;
-            }
-            public String value() {
-                return "+";
-            }
-        },
-        SUBTRACT {
-            public double action(final double x, final double y) {
-                return x - y;
-            }
-            public String value() {
-                return "-";
-            }
-        },
-        MULTIPLY {
-            public double action(final double x, final double y) {
-                return x * y;
-            }
-            public String value() {
-                return "*";
-            }
-        },
-        DIVIDE {
-            public double action(final double x, final double y) {
-                return x / y;
-            }
-            public String value() {
-                return "/";
-            }
-        };
-
-        public abstract double action(double x, double y);
-        public abstract String value();
-
-        public static Operation getOperationBySymbol(final String operationSymbol) {
-            for (Operation v : values()) {
-                if (v.value().equals(operationSymbol)) {
-                    return v;
-                }
-            }
-            return null;
-        }
-}
diff --git a/code/string-calculator/view/build.gradle b/code/string-calculator/view/build.gradle
new file mode 100644
index 000000000..9c97f4e73
--- /dev/null
+++ b/code/string-calculator/view/build.gradle
@@ -0,0 +1,18 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+    id 'application'
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.calc.view.StringCalcApp'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':string-calculator-viewmodel')
+    compile project(':string-calculator-infrastructure')
+}
\ No newline at end of file
diff --git a/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcApp.java b/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcApp.java
new file mode 100644
index 000000000..8cd63e942
--- /dev/null
+++ b/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcApp.java
@@ -0,0 +1,35 @@
+package ru.unn.agile.calc.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class StringCalcApp extends Application {
+
+    private static final String APP_TITLE = "String Calculator";
+    private static final String APP_FXML = "StringCalculator.fxml";
+    private static final String STYLE_RESOURCES = "style.css";
+    private static final int APP_HEIGHT = 550;
+    private static final int APP_WIDTH = 600;
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+
+        Parent root = FXMLLoader.load(getClass().getResource(APP_FXML));
+        Scene scene = new Scene(root);
+        scene.getStylesheets().add(getClass().getResource(STYLE_RESOURCES).toExternalForm());
+
+        primaryStage.setTitle(APP_TITLE);
+        primaryStage.setHeight(APP_HEIGHT);
+        primaryStage.setWidth(APP_WIDTH);
+        primaryStage.setResizable(false);
+        primaryStage.setScene(scene);
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcView.java b/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcView.java
new file mode 100644
index 000000000..2fa6530e6
--- /dev/null
+++ b/code/string-calculator/view/src/main/java/ru/unn/agile/calc/view/StringCalcView.java
@@ -0,0 +1,53 @@
+package ru.unn.agile.calc.view;
+
+import javafx.css.PseudoClass;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.Label;
+import javafx.scene.control.TextField;
+import javafx.scene.control.Tooltip;
+import ru.unn.agile.calc.infrastructure.TxtLogger;
+import ru.unn.agile.calc.viewmodel.StringCalcViewModel;
+
+public class StringCalcView {
+
+    private final PseudoClass errorClass = PseudoClass.getPseudoClass("error");
+    private final String tooltip = "Allowed symbols: 0-9,+,-,*,/,.";
+
+    @FXML
+    private StringCalcViewModel viewModel;
+    @FXML
+    private TextField expressionTf;
+    @FXML
+    private Label resultLbl;
+    @FXML
+    private Button calcBtn;
+
+    @FXML
+    void initialize() {
+        viewModel.setLogger(new TxtLogger("./TxtLogger-lab3.log"));
+
+        expressionTf.textProperty().bindBidirectional(viewModel.expressionTfProperty());
+        expressionTf.textProperty().addListener((observable, oldValue, newValue) -> {
+                    expressionTf.textProperty().setValue(newValue.replaceAll("\\s", ""));
+                    setErrorBorder(!viewModel.isExpressionValid());
+                }
+        );
+        expressionTf.tooltipProperty().setValue(new Tooltip(tooltip));
+        expressionTf.focusedProperty().addListener((observable, oldValue, newValue) -> {
+            if (!newValue) {
+                viewModel.onExpressionTfFocusChanged();
+            }
+        });
+
+        resultLbl.textProperty().bindBidirectional(viewModel.resultLblProperty());
+
+        calcBtn.disableProperty().bindBidirectional(viewModel.calculationDisabledProperty());
+
+        calcBtn.setOnAction(e -> viewModel.calculate());
+    }
+
+    private void setErrorBorder(final boolean active) {
+        expressionTf.pseudoClassStateChanged(errorClass, active);
+    }
+}
diff --git a/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/StringCalculator.fxml b/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/StringCalculator.fxml
new file mode 100644
index 000000000..03a65ce2e
--- /dev/null
+++ b/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/StringCalculator.fxml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.*?>
+<?import java.lang.*?>
+<?import javafx.scene.text.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.text.Font?>
+
+<?import ru.unn.agile.calc.viewmodel.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.calc.view.StringCalcView">
+   <children>
+       <fx:define>
+           <StringCalcViewModel fx:id="viewModel"/>
+       </fx:define>
+       <Label alignment="CENTER" layoutX="150.0" layoutY="50" prefHeight="45.0" prefWidth="300.0" text="Basic String Calculator">
+           <font>
+               <Font size="30.0" />
+           </font>
+       </Label>
+       <TextField fx:id="expressionTf" layoutX="100.0" layoutY="150.0" prefHeight="40.0" prefWidth="360.0" text="Type your expression ... " />
+       <Button fx:id="calcBtn" layoutX="485.0" layoutY="150.0" mnemonicParsing="false" prefWidth="75" text="=">
+           <font>
+               <Font size="16.0" />
+           </font>
+       </Button>
+       <Label fx:id="resultLbl" alignment="CENTER" layoutX="140.0" layoutY="206.0" prefHeight="30.0" prefWidth="280.0">
+           <font>
+               <Font size="19.0" />
+           </font>
+       </Label>
+       <TextArea fx:id="areaLog" editable="false" layoutX="100.0" layoutY="251.0" prefHeight="200.0" prefWidth="360.0" text="${viewModel.logs}" wrapText="true" VBox.vgrow="ALWAYS" />
+   </children>
+   <padding>
+      <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
+   </padding>
+</AnchorPane>
diff --git a/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/style.css b/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/style.css
new file mode 100644
index 000000000..ac02cca48
--- /dev/null
+++ b/code/string-calculator/view/src/main/resources/ru/unn/agile/calc/view/style.css
@@ -0,0 +1,4 @@
+.text-field:error {
+    -fx-text-box-border: red ;
+    -fx-focus-color: red ;
+}
\ No newline at end of file
diff --git a/code/string-calculator/viewmodel/build.gradle b/code/string-calculator/viewmodel/build.gradle
new file mode 100644
index 000000000..497c1a488
--- /dev/null
+++ b/code/string-calculator/viewmodel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':string-calculator-model')
+}
diff --git a/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/ILogger.java b/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/ILogger.java
new file mode 100644
index 000000000..46cc36337
--- /dev/null
+++ b/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.calc.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void log(String s);
+
+    List<String> getLog();
+}
diff --git a/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/StringCalcViewModel.java b/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/StringCalcViewModel.java
new file mode 100644
index 000000000..03121345c
--- /dev/null
+++ b/code/string-calculator/viewmodel/src/main/java/ru/unn/agile/calc/viewmodel/StringCalcViewModel.java
@@ -0,0 +1,162 @@
+package ru.unn.agile.calc.viewmodel;
+
+import ru.unn.agile.calc.model.StringCalc;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.regex.Pattern;
+
+public class StringCalcViewModel {
+
+    private static final Pattern ALLOWED_SYMBOLS = Pattern.compile("[\\d-+*/.\\s]");
+    private static final String ERROR_MESSAGE = "Error. Check your input";
+
+    private final StringProperty logs = new SimpleStringProperty();
+    private final SimpleStringProperty expressionTf = new SimpleStringProperty();
+    private final SimpleStringProperty resultLbl = new SimpleStringProperty();
+    private final SimpleBooleanProperty calculationDisabled = new SimpleBooleanProperty();
+
+    private final StringCalc calculator = new StringCalc();
+    private ILogger logger;
+
+    public StringCalcViewModel() {
+        init();
+    }
+
+    public StringCalcViewModel(final ILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    public final void setLogger(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    private void init() {
+        expressionTf.set("");
+        resultLbl.set("");
+        expressionTf.addListener((observable, oldValue, newValue) ->
+                    expressionTf.setValue(newValue.replaceAll("\\s", ""))
+        );
+        BooleanBinding canCalculateBoolBinding = new BooleanBinding() {
+            {
+                super.bind(expressionTf);
+            }
+            @Override
+            protected boolean computeValue() {
+                return isExpressionValid();
+            }
+        };
+        calculationDisabled.bind(canCalculateBoolBinding.not());
+    }
+
+    public void calculate() {
+        if (!isCalculationDisabled()) {
+            StringBuilder message = new StringBuilder(LogMessages.CALCULATE_WAS_PRESSED);
+            message.append("\"")
+                    .append(expressionTf.getValue())
+                    .append("\"");
+            logger.log(message.toString());
+            updateLogs();
+
+            try {
+                String calcResult = String.valueOf(calculator.result(getExpression()));
+                resultLbl.setValue((calcResult));
+
+                logger.log(LogMessages.CALCULATION_WAS_SUCCESSFUL);
+                updateLogs();
+            } catch (Exception e) {
+                resultLbl.setValue(ERROR_MESSAGE);
+                logger.log(LogMessages.CALCULATION_WAS_UNSUCCESSFUL);
+                updateLogs();
+            }
+        }
+    }
+
+    public boolean isExpressionValid() {
+        String exprText = getExpression();
+        return !(exprText.isEmpty() || hasRestrictedSymbols(exprText));
+    }
+
+    private boolean hasRestrictedSymbols(final String input) {
+        return input.chars()
+                .mapToObj(c -> String.valueOf((char) c))
+                .anyMatch(symbol -> !ALLOWED_SYMBOLS.matcher(symbol).matches());
+    }
+
+    public StringProperty expressionTfProperty() {
+        return expressionTf;
+    }
+
+    private String getExpression() {
+        return expressionTf.get().replaceAll("\\s", "");
+    }
+
+    public void onExpressionTfFocusChanged() {
+        String message = LogMessages.EDITING_FINISHED;
+        if (isExpressionValid()) {
+            message += LogMessages.EXPRESSION_IS_VALID;
+        } else {
+            message += LogMessages.EXPRESSION_IS_INVALID;
+        }
+
+        logger.log(message);
+        updateLogs();
+    }
+
+    private void updateLogs() {
+        List<String> fullLog = logger.getLog();
+        String record = new String("");
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
+
+    public StringProperty resultLblProperty() {
+        return resultLbl;
+    }
+
+    private boolean isCalculationDisabled() {
+        return calculationDisabled.get();
+    }
+
+    public BooleanProperty calculationDisabledProperty() {
+        return calculationDisabled;
+    }
+
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
+    public final List<String> getLog() {
+        if (logger != null) {
+            return logger.getLog();
+        }
+        return Collections.emptyList();
+    }
+}
+
+final class LogMessages {
+    public static final String CALCULATE_WAS_PRESSED = "Calculating ";
+    public static final String CALCULATION_WAS_SUCCESSFUL = "Calculation completed.";
+    public static final String CALCULATION_WAS_UNSUCCESSFUL = "Calculation failed. Incorrect input";
+    public static final String EDITING_FINISHED = "Updated input. ";
+    public static final String EXPRESSION_IS_VALID = "Expression is valid.";
+    public static final String EXPRESSION_IS_INVALID = "Expression is invalid.";
+
+    private LogMessages() { }
+}
diff --git a/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/FakeLogger.java b/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..c08c4eded
--- /dev/null
+++ b/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.calc.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements ILogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/StringCalcViewModelTests.java b/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/StringCalcViewModelTests.java
new file mode 100644
index 000000000..f4e7d62a6
--- /dev/null
+++ b/code/string-calculator/viewmodel/src/test/java/ru/unn/agile/calc/viewmodel/StringCalcViewModelTests.java
@@ -0,0 +1,207 @@
+package ru.unn.agile.calc.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+public class StringCalcViewModelTests {
+
+    private static final String ERROR_MESSAGE = "Error. Check your input";
+
+    private StringCalcViewModel viewModel;
+
+    public void setExternalViewModel(final StringCalcViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Before
+    public void setUp() {
+        viewModel = new StringCalcViewModel(new FakeLogger());
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canCalculateExpression1() {
+        setExpression("1+1");
+        calculate();
+        assertEquals("2.0", getResult());
+    }
+
+    @Test
+    public void canCalculateExpression2() {
+        setExpression("1+2*3-4/5");
+        calculate();
+        assertEquals("6.2", getResult());
+    }
+
+    @Test
+    public void canCalculateValidExpressionWithSpaces() {
+        setExpression(" 1 + 1 * 3 - 5 / 10");
+        calculate();
+        assertEquals("3.5", getResult());
+    }
+
+    @Test
+    public void canCalculateSingleDigitExpression() {
+        setExpression("111");
+        calculate();
+        assertEquals("111.0", getResult());
+    }
+
+    @Test
+    public void isResultTheSameForSameExpression() {
+        setExpression("1+1");
+
+        calculate();
+        String r1 = getResult();
+
+        calculate();
+        String r2 = getResult();
+
+        assertEquals(r1, r2);
+    }
+
+    @Test
+    public void canNotCalculateInvalidExpression1() {
+        setExpression("+-*/");
+        calculate();
+        assertEquals(ERROR_MESSAGE, getResult());
+    }
+
+    @Test
+    public void isCalculateButtonDisabledForSpaceSymbol() {
+        setExpression(" ");
+        assertTrue(isCalculateButtonDisabled());
+    }
+
+    @Test
+    public void isCalculateButtonDisabledForLetterString() {
+        setExpression("ABC");
+        assertTrue(isCalculateButtonDisabled());
+    }
+
+    @Test
+    public void areSpacesRemoving() {
+        setExpression("1 + 2 + 3");
+        assertEquals("1+2+3", getExpression());
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void viewModelConstructorThrowsExceptionWithNullLogger() {
+        viewModel = new StringCalcViewModel(null);
+    }
+
+    @Test
+    public void canGetEmptyLogsAfterAppStart() {
+        List<String> log = getLog();
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterCalculation() {
+        setExpressionAndCalculate("1+2*3-4/5");
+        String message = getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.CALCULATE_WAS_PRESSED + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterSuccessfulCalculation() {
+        setExpressionAndCalculate("1+2*3-4/5");
+        String message = getLog().get(1);
+
+        assertTrue(message.matches(".*" + LogMessages.CALCULATION_WAS_SUCCESSFUL + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterUnsuccessfulCalculation() {
+        setExpressionAndCalculate("1+2*3--4/5");
+        String message = getLog().get(1);
+
+        assertTrue(message.matches(".*" + LogMessages.CALCULATION_WAS_UNSUCCESSFUL + ".*"));
+    }
+
+    @Test
+    public void logContainsInputExpressionAfterCalculation() {
+        setExpressionAndCalculate("225 / 5 / 5");
+        String message = getLog().get(0);
+
+        assertTrue(message.matches(".*" + getExpression() + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterFocusChanged() {
+        setExpression("1 + 3 + 7 + 7");
+        viewModel.onExpressionTfFocusChanged();
+        String message = getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.EDITING_FINISHED + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterFocusChangedWhenExpressionIsValid() {
+        setExpression("1 + 3 + 7 + 7");
+        viewModel.onExpressionTfFocusChanged();
+        String message = getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.EXPRESSION_IS_VALID + ".*"));
+    }
+
+    @Test
+    public void logContainsProperMessageAfterFocusChangedWhenExpressionIsInValid() {
+        setExpression("1 + 3 + 7 + A");
+        viewModel.onExpressionTfFocusChanged();
+        String message = getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.EXPRESSION_IS_INVALID + ".*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        setExpression("255 / 5 / 5");
+
+        calculate();
+        calculate();
+        calculate();
+
+        assertEquals(6, getLog().size());
+    }
+
+    private boolean isCalculateButtonDisabled() {
+        return viewModel.calculationDisabledProperty().get();
+    }
+
+    private void setExpression(final String expression) {
+        viewModel.expressionTfProperty().setValue(expression);
+    }
+
+    private String getExpression() {
+        return viewModel.expressionTfProperty().getValue();
+    }
+
+    private void calculate() {
+        viewModel.calculate();
+    }
+
+    private String getResult() {
+        return viewModel.resultLblProperty().get();
+    }
+
+    private void setExpressionAndCalculate(final String expression) {
+        setExpression(expression);
+        calculate();
+    }
+
+    private List<String> getLog() {
+        return viewModel.getLog();
+    }
+}
diff --git a/code/students-performance/src/main/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculator.java b/code/students-performance/model/src/main/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculator.java
similarity index 100%
rename from code/students-performance/src/main/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculator.java
rename to code/students-performance/model/src/main/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculator.java
diff --git a/code/students-performance/src/main/java/ru/unn/agile/StudentsPerformance/Model/Student.java b/code/students-performance/model/src/main/java/ru/unn/agile/StudentsPerformance/Model/Student.java
similarity index 100%
rename from code/students-performance/src/main/java/ru/unn/agile/StudentsPerformance/Model/Student.java
rename to code/students-performance/model/src/main/java/ru/unn/agile/StudentsPerformance/Model/Student.java
diff --git a/code/students-performance/src/test/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculatorTest.java b/code/students-performance/model/src/test/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculatorTest.java
similarity index 100%
rename from code/students-performance/src/test/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculatorTest.java
rename to code/students-performance/model/src/test/java/ru/unn/agile/StudentsPerformance/Model/PerformanceCalculatorTest.java
diff --git a/code/students-performance/src/test/java/ru/unn/agile/StudentsPerformance/Model/StudentsTest.java b/code/students-performance/model/src/test/java/ru/unn/agile/StudentsPerformance/Model/StudentsTest.java
similarity index 100%
rename from code/students-performance/src/test/java/ru/unn/agile/StudentsPerformance/Model/StudentsTest.java
rename to code/students-performance/model/src/test/java/ru/unn/agile/StudentsPerformance/Model/StudentsTest.java
diff --git a/code/students-performance/view/build.gradle b/code/students-performance/view/build.gradle
new file mode 100644
index 000000000..cbede23a6
--- /dev/null
+++ b/code/students-performance/view/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.studentsperformance.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':students-performance-viewmodel')
+}
diff --git a/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/Main.java b/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/Main.java
new file mode 100644
index 000000000..9aa8caf4d
--- /dev/null
+++ b/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/Main.java
@@ -0,0 +1,25 @@
+package ru.unn.agile.studentsperformance.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    private static final String APPLICATION_TITLE = "Students Performance";
+    private static final String APPLICATION_SCENE = "StudentPerformance.fxml";
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        primaryStage.setTitle(APPLICATION_TITLE);
+        primaryStage.setScene(
+                new Scene(FXMLLoader.load(getClass().getResource(APPLICATION_SCENE)))
+        );
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/StudentPerformance.java b/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/StudentPerformance.java
new file mode 100644
index 000000000..6137f28f8
--- /dev/null
+++ b/code/students-performance/view/src/main/java/ru/unn/agile/studentsperformance/view/StudentPerformance.java
@@ -0,0 +1,47 @@
+package ru.unn.agile.studentsperformance.view;
+
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.Label;
+import javafx.scene.control.ListView;
+import ru.unn.agile.studentsperformance.viewmodel.ViewModel;
+
+public class StudentPerformance {
+
+    @FXML private ViewModel viewModel;
+
+    @FXML private ChoiceBox<Integer> mathsMark;
+    @FXML private ChoiceBox<Integer> englishMarks;
+    @FXML private ChoiceBox<Integer> historyMarks;
+    @FXML private ChoiceBox<Integer> programmingMarks;
+    @FXML private Button addStudentMarksButton;
+    @FXML private Button clearButton;
+
+    @FXML private ListView<String> marksList;
+
+    @FXML private Label average;
+    @FXML private Label excellentCount;
+    @FXML private Label goodCount;
+    @FXML private Label satisfactoryCount;
+    @FXML private Label badCount;
+
+    @FXML
+    void initialize() {
+        mathsMark.valueProperty().bindBidirectional(viewModel.mathsMarkProperty());
+        englishMarks.valueProperty().bindBidirectional(viewModel.englishMarkProperty());
+        historyMarks.valueProperty().bindBidirectional(viewModel.historyMarkProperty());
+        programmingMarks.valueProperty().bindBidirectional(viewModel.programmingMarkProperty());
+
+        average.textProperty().bindBidirectional(viewModel.averageProperty());
+        excellentCount.textProperty().bindBidirectional(viewModel.excellentCountProperty());
+        goodCount.textProperty().bindBidirectional(viewModel.goodCountProperty());
+        satisfactoryCount.textProperty().bindBidirectional(viewModel.satisfactoryCountProperty());
+        badCount.textProperty().bindBidirectional(viewModel.badCountProperty());
+
+        marksList.itemsProperty().bindBidirectional(viewModel.marksListProperty());
+
+        addStudentMarksButton.setOnAction(event -> viewModel.addStudent());
+        clearButton.setOnAction(event -> viewModel.clearEnteredMarks());
+    }
+}
diff --git a/code/students-performance/view/src/main/resources/ru/unn/agile/studentsperformance/view/StudentPerformance.fxml b/code/students-performance/view/src/main/resources/ru/unn/agile/studentsperformance/view/StudentPerformance.fxml
new file mode 100644
index 000000000..5d1006a37
--- /dev/null
+++ b/code/students-performance/view/src/main/resources/ru/unn/agile/studentsperformance/view/StudentPerformance.fxml
@@ -0,0 +1,105 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.text.*?>
+<?import ru.unn.agile.studentsperformance.viewmodel.ViewModel?>
+<AnchorPane prefHeight="464.0" prefWidth="429.0" xmlns="http://javafx.com/javafx/10.0.2-internal" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.studentsperformance.view.StudentPerformance">
+
+    <fx:define>
+        <ViewModel fx:id="viewModel" />
+    </fx:define>
+
+    <Label layoutX="14.0" layoutY="21.0" text="Maths">
+      <font>
+         <Font size="14.0" />
+      </font>
+    </Label>
+
+    <ChoiceBox fx:id="mathsMark" items="${viewModel.marksProperty}" layoutX="127.0" layoutY="17.0" prefHeight="27.0" prefWidth="53.0" />
+
+    <Label layoutX="14.0" layoutY="66.0" text="English">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <ChoiceBox fx:id="englishMarks" items="${viewModel.marksProperty}" layoutX="127.0" layoutY="62.0" prefHeight="27.0" prefWidth="53.0" />
+
+    <Label layoutX="14.0" layoutY="114.0" text="History">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <ChoiceBox fx:id="historyMarks" items="${viewModel.marksProperty}" layoutX="127.0" layoutY="110.0" prefHeight="27.0" prefWidth="53.0" />
+
+    <Label layoutX="14.0" layoutY="166.0" text="Programming">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+   <ChoiceBox fx:id="programmingMarks" items="${viewModel.marksProperty}" layoutX="127.0" layoutY="162.0" prefHeight="27.0" prefWidth="53.0" />
+
+    <Button fx:id="addStudentMarksButton" layoutX="14.0" layoutY="210.0" mnemonicParsing="false" text="Add student marks" />
+
+    <ListView fx:id="marksList" layoutX="207.0" layoutY="10.0" prefHeight="181.0" prefWidth="200.0" />
+
+    <Label layoutX="14.0" layoutY="255.0" text="Average Rating:">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Label fx:id="average" layoutX="164.0" layoutY="255.0" text="0">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <Label layoutX="14.0" layoutY="300.0" text="Excellent students:">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Label fx:id="excellentCount" layoutX="164.0" layoutY="300.0" text="0">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <Label layoutX="14.0" layoutY="345.0" text="Good students:">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Label fx:id="goodCount" layoutX="164.0" layoutY="345.0" text="0">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <Label layoutX="14.0" layoutY="390.0" text="Satisfactory students:">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Label fx:id="satisfactoryCount" layoutX="164.0" layoutY="390.0" text="0">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <Label layoutX="14.0" layoutY="435.0" text="Bad students:">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+    <Label fx:id="badCount" layoutX="164.0" layoutY="435.0" text="0">
+        <font>
+            <Font size="14.0" />
+        </font>
+    </Label>
+
+    <Button layoutX="178.0" layoutY="210.0" mnemonicParsing="false" text="Clear" fx:id="clearButton" />
+
+
+</AnchorPane>
diff --git a/code/students-performance/view/src/test/java/ru/unn/agile/studentsperformance/view/FakeViewTests.java b/code/students-performance/view/src/test/java/ru/unn/agile/studentsperformance/view/FakeViewTests.java
new file mode 100644
index 000000000..c0e9d348d
--- /dev/null
+++ b/code/students-performance/view/src/test/java/ru/unn/agile/studentsperformance/view/FakeViewTests.java
@@ -0,0 +1,15 @@
+package ru.unn.agile.studentsperformance.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+
+}
diff --git a/code/students-performance/viewmodel/build.gradle b/code/students-performance/viewmodel/build.gradle
new file mode 100644
index 000000000..cb0f9333d
--- /dev/null
+++ b/code/students-performance/viewmodel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+    id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':students-performance-model')
+}
diff --git a/code/students-performance/viewmodel/src/main/java/ru/unn/agile/studentsperformance/viewmodel/ViewModel.java b/code/students-performance/viewmodel/src/main/java/ru/unn/agile/studentsperformance/viewmodel/ViewModel.java
new file mode 100644
index 000000000..9c3b42eb3
--- /dev/null
+++ b/code/students-performance/viewmodel/src/main/java/ru/unn/agile/studentsperformance/viewmodel/ViewModel.java
@@ -0,0 +1,179 @@
+package ru.unn.agile.studentsperformance.viewmodel;
+
+import javafx.beans.property.*;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.StudentsPerformance.Model.PerformanceCalculator;
+import ru.unn.agile.StudentsPerformance.Model.Student;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+
+    private static final int EXCELLENT_MARK = 5;
+    private static final int GOOD_MARK = 4;
+    private static final int SATISFACTORY_MARK = 3;
+    private static final int BAD_MARK = 2;
+
+    private static final String MARKS_DELIMITER = " ";
+    private static final String EMPTY = "";
+
+    private ListProperty<Integer> marksProperty = new SimpleListProperty<>(
+            FXCollections.observableArrayList(
+                    BAD_MARK,
+                    SATISFACTORY_MARK,
+                    GOOD_MARK,
+                    EXCELLENT_MARK
+            )
+    );
+
+    private ObjectProperty<Integer> mathsMarkProperty = new SimpleObjectProperty<>();
+    private ObjectProperty<Integer> englishMarkProperty = new SimpleObjectProperty<>();
+    private ObjectProperty<Integer> historyMarkProperty = new SimpleObjectProperty<>();
+    private ObjectProperty<Integer> programmingMarkProperty = new SimpleObjectProperty<>();
+    private ListProperty<String> marksListProperty = new SimpleListProperty<>();
+
+    private StringProperty averageProperty = new SimpleStringProperty();
+    private StringProperty excellentCountProperty = new SimpleStringProperty();
+    private StringProperty goodCountProperty = new SimpleStringProperty();
+    private StringProperty satisfactoryCountProperty = new SimpleStringProperty();
+    private StringProperty badCountProperty = new SimpleStringProperty();
+
+    private List<Student> students = new ArrayList<>();
+
+    public ViewModel() {
+        mathsMarkProperty.setValue(BAD_MARK);
+        englishMarkProperty.setValue(BAD_MARK);
+        historyMarkProperty.setValue(BAD_MARK);
+        programmingMarkProperty.setValue(BAD_MARK);
+        marksListProperty.set(FXCollections.observableArrayList());
+        averageProperty.set(EMPTY);
+    }
+
+    public ObservableList<Integer> marksProperty() {
+        return marksProperty.get();
+    }
+
+    public Property<Integer> mathsMarkProperty() {
+        return mathsMarkProperty;
+    }
+
+    public Property<Integer> englishMarkProperty() {
+        return englishMarkProperty;
+    }
+
+    public Property<Integer> historyMarkProperty() {
+        return historyMarkProperty;
+    }
+
+    public Property<Integer> programmingMarkProperty() {
+        return programmingMarkProperty;
+    }
+
+    public ListProperty<String> marksListProperty() {
+        return marksListProperty;
+    }
+
+    public StringProperty averageProperty() {
+        return averageProperty;
+    }
+
+    public StringProperty excellentCountProperty() {
+        return excellentCountProperty;
+    }
+
+    public StringProperty goodCountProperty() {
+        return goodCountProperty;
+    }
+
+    public StringProperty satisfactoryCountProperty() {
+        return satisfactoryCountProperty;
+    }
+
+    public StringProperty badCountProperty() {
+        return badCountProperty;
+    }
+
+    public void addStudent() {
+        var marks = new ArrayList<Integer>() {{
+            add(mathsMarkProperty.get());
+            add(englishMarkProperty.get());
+            add(historyMarkProperty.get());
+            add(programmingMarkProperty.get());
+        }};
+        students.add(new Student(marks));
+        marksListProperty.add(
+                String.join(
+                        MARKS_DELIMITER, marks.stream().map(String::valueOf).toArray(String[]::new)
+                )
+        );
+        calculateAll();
+    }
+
+    public void clearEnteredMarks() {
+        students.clear();
+        marksListProperty.clear();
+        calculateAll();
+    }
+
+    private void calculateAll() {
+        calculateAverage();
+        calculateExcellentStudentsCount();
+        calculateGoodStudentsCount();
+        calculateSatisfactoryStudentsCount();
+        calculateBadStudentsCount();
+    }
+
+    private void calculateAverage() {
+        if (students.isEmpty()) {
+            averageProperty.set(EMPTY);
+            return;
+        }
+        averageProperty.set(
+                String.valueOf(new PerformanceCalculator(students).getAverageRating())
+        );
+    }
+
+    private void calculateExcellentStudentsCount() {
+        if (students.isEmpty()) {
+            excellentCountProperty.set(EMPTY);
+            return;
+        }
+        excellentCountProperty.set(
+                String.valueOf(new PerformanceCalculator(students).getExcellentStudentsCount())
+        );
+    }
+
+    private void calculateGoodStudentsCount() {
+        if (students.isEmpty()) {
+            goodCountProperty.set(EMPTY);
+            return;
+        }
+        goodCountProperty.set(
+                String.valueOf(new PerformanceCalculator(students).getGoodStudentsCount())
+        );
+    }
+
+    private void calculateSatisfactoryStudentsCount() {
+        if (students.isEmpty()) {
+            satisfactoryCountProperty.set(EMPTY);
+            return;
+        }
+        satisfactoryCountProperty.set(
+                String.valueOf(
+                        new PerformanceCalculator(students).getSatisfactoryStudentsCount()
+                )
+        );
+    }
+
+    private void calculateBadStudentsCount() {
+        if (students.isEmpty()) {
+            badCountProperty.set(EMPTY);
+            return;
+        }
+        badCountProperty.set(
+                String.valueOf(new PerformanceCalculator(students).getBadStudentsCount())
+        );
+    }
+}
diff --git a/code/students-performance/viewmodel/src/test/java/ru/unn/agile/studentsperformance/viewmodel/ViewModelTest.java b/code/students-performance/viewmodel/src/test/java/ru/unn/agile/studentsperformance/viewmodel/ViewModelTest.java
new file mode 100644
index 000000000..1bcb14cd8
--- /dev/null
+++ b/code/students-performance/viewmodel/src/test/java/ru/unn/agile/studentsperformance/viewmodel/ViewModelTest.java
@@ -0,0 +1,148 @@
+package ru.unn.agile.studentsperformance.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Arrays;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTest {
+
+    private static final double DELTA = 1e-3;
+
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canGetMarkListValues() {
+        var marks = Arrays.asList(2, 3, 4, 5);
+
+        assertTrue(viewModel.marksProperty().containsAll(marks));
+    }
+
+    @Test
+    public void canGetMathsMarkProperty() {
+        var property = viewModel.mathsMarkProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetEnglishProperty() {
+        var property = viewModel.englishMarkProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetHistoryProperty() {
+        var property = viewModel.historyMarkProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetProgrammingProperty() {
+        var property = viewModel.programmingMarkProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetMarksListProperty() {
+        var property = viewModel.marksListProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetAverageProperty() {
+        var property = viewModel.averageProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetExcellentCountProperty() {
+        var property = viewModel.excellentCountProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetGoodCountProperty() {
+        var property = viewModel.goodCountProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetSatisfactoryCountProperty() {
+        var property = viewModel.satisfactoryCountProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canGetBadCountProperty() {
+        var property = viewModel.badCountProperty();
+
+        assertNotNull(property);
+    }
+
+    @Test
+    public void canAddStudent() {
+        viewModel.addStudent();
+
+        assertFalse(viewModel.marksListProperty().isEmpty());
+    }
+
+    @Test
+    public void canCalculateAverageForGoodStudent() {
+        var good = 4;
+        setMarksForAllSubjects(good);
+
+        viewModel.addStudent();
+
+        assertEquals(good, Double.parseDouble(viewModel.averageProperty().get()), DELTA);
+    }
+
+    @Test
+    public void canCalculateCountOfExcellentStudents() {
+        var excellent = 5;
+        setMarksForAllSubjects(excellent);
+
+        viewModel.addStudent();
+        viewModel.addStudent();
+
+        assertEquals(2, Integer.parseInt(viewModel.excellentCountProperty().get()));
+    }
+
+    @Test
+    public void canClear() {
+        setMarksForAllSubjects(3);
+        setMarksForAllSubjects(4);
+        setMarksForAllSubjects(5);
+
+        viewModel.clearEnteredMarks();
+        assertTrue(viewModel.marksListProperty().isEmpty());
+    }
+
+    private void setMarksForAllSubjects(final int mark) {
+        viewModel.mathsMarkProperty().setValue(mark);
+        viewModel.englishMarkProperty().setValue(mark);
+        viewModel.historyMarkProperty().setValue(mark);
+        viewModel.programmingMarkProperty().setValue(mark);
+    }
+}
diff --git a/code/temperature-converter/Infrastructure/build.gradle b/code/temperature-converter/Infrastructure/build.gradle
new file mode 100644
index 000000000..1432f924d
--- /dev/null
+++ b/code/temperature-converter/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':temperature-converter-ViewModel')
+	testCompile project(':temperature-converter-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/temperature-converter/Infrastructure/src/main/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLogger.java b/code/temperature-converter/Infrastructure/src/main/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLogger.java
new file mode 100644
index 000000000..5a6595985
--- /dev/null
+++ b/code/temperature-converter/Infrastructure/src/main/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLogger.java
@@ -0,0 +1,66 @@
+package ru.unn.agile.temperatureconverter.infrastructure;
+
+import ru.unn.agile.temperatureconverter.viewmodel.ILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+
+public class TxtLogger implements ILogger {
+    private String filename;
+    private final BufferedWriter writer;
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+
+    public TxtLogger(final String filename) {
+        this.filename = filename;
+
+        BufferedWriter logWriter = null;
+        try {
+            logWriter = new BufferedWriter(new FileWriter(filename));
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+        writer = logWriter;
+    }
+
+    private static String now() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(cal.getTime());
+    }
+
+    @Override
+    public void addLog(final String message) {
+        try {
+            writer.write(now() + " >> " + message);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLogMessage() {
+        BufferedReader logReader;
+        ArrayList<String> log = new ArrayList<String>();
+        try {
+            logReader = new BufferedReader(new FileReader(filename));
+            String line = logReader.readLine();
+
+            while (line != null) {
+                log.add(line);
+                line = logReader.readLine();
+            }
+        } catch (Exception e) {
+            System.out.println(e.getMessage());
+        }
+        return log;
+    }
+}
diff --git a/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLoggerTests.java b/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLoggerTests.java
new file mode 100644
index 000000000..2231fd6c1
--- /dev/null
+++ b/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/TxtLoggerTests.java
@@ -0,0 +1,69 @@
+package ru.unn.agile.temperatureconverter.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.junit.Assert.*;
+
+public class TxtLoggerTests {
+    private static final String FILENAME = "./TxtLoggerTests-temperature_converter.log";
+    private TxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TxtLogger(FILENAME);
+    }
+
+    @Test
+    public void canCreateLoggerWithFileName() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canLogOneMessage() {
+        String msg = "Test logger";
+
+        txtLogger.addLog(msg);
+
+        List<String> log = txtLogger.getLogMessage();
+        assertTrue(log.get(0).matches(".*" + "Test logger" + ".*"));
+    }
+
+    @Test
+    public void canLogSeveralMessages() {
+        String msg1 = "Test logger 1";
+        String msg2 = "Test logger 2";
+        String msg3 = "Test logger 3";
+
+        txtLogger.addLog(msg1);
+        txtLogger.addLog(msg2);
+        txtLogger.addLog(msg3);
+
+        List<String> log = txtLogger.getLogMessage();
+
+        for (int i = 0; i < log.size(); i++) {
+            assertTrue(log.get(i).matches(".*" + "Test logger "  + ".*"));
+        }
+    }
+
+    @Test
+    public void canGetLogMessages() {
+        String msg1 = "Test logger 1";
+        txtLogger.addLog(msg1);
+
+        assertNotNull(txtLogger.getLogMessage());
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String msg1 = "Test logger 1";
+        txtLogger.addLog(msg1);
+
+        List<String> log = txtLogger.getLogMessage();
+
+        assertTrue(log.get(0).matches("^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} >> .*"));
+    }
+}
diff --git a/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/ViewModelWithTxtLoggerTests.java b/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/ViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..b374a0308
--- /dev/null
+++ b/code/temperature-converter/Infrastructure/src/test/java/ru/unn/agile/temperatureconverter/infrastructure/ViewModelWithTxtLoggerTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.temperatureconverter.infrastructure;
+
+import ru.unn.agile.temperatureconverter.viewmodel.ViewModelTests;
+import ru.unn.agile.temperatureconverter.viewmodel.ViewModel;
+
+public class ViewModelWithTxtLoggerTests extends ViewModelTests {
+    @Override
+    public void setUp() {
+        TxtLogger realLogger = new TxtLogger(
+                "ViewModelWithTxtLoggerTests-temperature-converter.log");
+        super.setViewModel(new ViewModel(realLogger));
+    }
+}
diff --git a/code/temperature-converter/View/build.gradle b/code/temperature-converter/View/build.gradle
index e16fec3e2..1a351fb66 100644
--- a/code/temperature-converter/View/build.gradle
+++ b/code/temperature-converter/View/build.gradle
@@ -1,3 +1,4 @@
 dependencies {
     compile project(':temperature-converter-ViewModel')
+	compile project(':temperature-converter-Infrastructure')
 }
\ No newline at end of file
diff --git a/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.form b/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.form
index 6aca4578e..43b9fa36d 100644
--- a/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.form
+++ b/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.form
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="ru.unn.agile.temperatureconverter.view.TemperatureConverter">
-  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="5" column-count="7" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="6" column-count="7" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
     <margin top="0" left="0" bottom="0" right="0"/>
     <constraints>
       <xy x="20" y="20" width="607" height="293"/>
@@ -147,6 +147,19 @@
           <grid row="2" column="6" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
         </constraints>
       </hspacer>
+      <scrollpane id="1efd3">
+        <constraints>
+          <grid row="5" column="0" row-span="1" col-span="7" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties/>
+        <border type="none"/>
+        <children>
+          <component id="2379c" class="javax.swing.JList" binding="listLogs">
+            <constraints/>
+            <properties/>
+          </component>
+        </children>
+      </scrollpane>
     </children>
   </grid>
 </form>
diff --git a/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.java b/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.java
index 8fe14bc63..68a7dddc0 100644
--- a/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.java
+++ b/code/temperature-converter/View/src/main/java/ru/unn/agile/temperatureconverter/view/TemperatureConverter.java
@@ -1,10 +1,14 @@
 package ru.unn.agile.temperatureconverter.view;
+
+import ru.unn.agile.temperatureconverter.infrastructure.TxtLogger;
 import ru.unn.agile.temperatureconverter.viewmodel.ViewModel;
+
 import javax.swing.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyAdapter;
 import java.awt.event.KeyEvent;
+import java.util.List;
 
 public class TemperatureConverter {
     private JLabel labelHello;
@@ -17,12 +21,14 @@
     private JButton buttonConvert;
     private JLabel labelStatus;
     private JTextField fromField;
+    private JList<String> listLogs;
 
     private ViewModel viewModel;
 
     public static void main(final String[] args) {
         JFrame frame = new JFrame("Temperature Converter");
-        frame.setContentPane(new TemperatureConverter(new ViewModel()).mainPanel);
+        TxtLogger logger = new TxtLogger("./TemperatureConverter.log");
+        frame.setContentPane(new TemperatureConverter(new ViewModel(logger)).mainPanel);
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         frame.pack();
         frame.setVisible(true);
@@ -59,6 +65,10 @@ private void backBind() {
         buttonConvert.setEnabled(viewModel.isConvertButtonEnabled());
         labelResult.setText(viewModel.getResultTemperature());
         labelStatus.setText(viewModel.getStatusText());
+
+        List<String> log = viewModel.getLog();
+        String[] items = log.toArray(new String[log.size()]);
+        listLogs.setListData(items);
     }
 
     private void bind() {
diff --git a/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ILogger.java b/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ILogger.java
new file mode 100644
index 000000000..fc127c473
--- /dev/null
+++ b/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.temperatureconverter.viewmodel;
+
+import java.util.List;
+
+public interface ILogger {
+    void addLog(String message);
+
+    List<String> getLogMessage();
+}
diff --git a/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModel.java b/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModel.java
index b90fbdf90..44060821a 100644
--- a/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModel.java
+++ b/code/temperature-converter/ViewModel/src/main/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModel.java
@@ -7,6 +7,7 @@
 import ru.unn.agile.temperatureconverter.model.KelvinTemperature;
 import ru.unn.agile.temperatureconverter.model.Temperature;
 
+import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -20,6 +21,8 @@
     private boolean isConvertButtonEnabled;
     private boolean isErrorMessageDisplayed;
 
+    private ILogger logger;
+
     private String patternInput = "-?(\\d+)(\\.(\\d+))?";
 
     public enum ListOfTemperatures {
@@ -61,6 +64,10 @@ public ListOfTemperatures getTo() {
         return listTemperaturesTo;
     }
 
+    public List<String> getLog() {
+        return logger.getLogMessage();
+    }
+
     public boolean isConvertButtonEnabled() {
         return isConvertButtonEnabled;
     }
@@ -69,25 +76,43 @@ public boolean isErrorMessageDisplayed() {
         return isErrorMessageDisplayed;
     }
 
-    public ViewModel() {
+    public ViewModel(final ILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+
+        this.logger = logger;
         resultTemperature = "";
         fromTemperature = "";
         listTemperaturesFrom = ListOfTemperatures.CELSIUS;
+        logger.addLog("Input updated: from temperature = " + listTemperaturesFrom);
         listTemperaturesTo = ListOfTemperatures.CELSIUS;
+        logger.addLog("Input updated: to temperature = " + listTemperaturesTo);
         statusText = "";
         isConvertButtonEnabled = false;
     }
 
     public void setFromTemperature(final String fromTemperature) {
-        this.fromTemperature = fromTemperature;
+        if (!fromTemperature.equals(this.fromTemperature)) {
+            this.fromTemperature = fromTemperature;
+            logger.addLog("Input updated: value of from temperature = " + fromTemperature);
+        }
     }
+
     public void setFrom(final ListOfTemperatures listTemperaturesFrom) {
-        this.resultTemperature = "";
-        this.listTemperaturesFrom = listTemperaturesFrom;
+        if (this.listTemperaturesFrom != listTemperaturesFrom) {
+            this.resultTemperature = "";
+            this.listTemperaturesFrom = listTemperaturesFrom;
+            logger.addLog("Input updated: from temperature = " + listTemperaturesFrom);
+        }
     }
+
     public void setTo(final ListOfTemperatures listTemperaturesTo) {
-        this.resultTemperature = "";
-        this.listTemperaturesTo = listTemperaturesTo;
+        if (this.listTemperaturesTo != listTemperaturesTo) {
+            this.resultTemperature = "";
+            this.listTemperaturesTo = listTemperaturesTo;
+            logger.addLog("Input updated: to temperature = " + listTemperaturesTo);
+        }
     }
 
     private boolean matchInput(final String line, final String pattern) {
@@ -124,7 +149,6 @@ public boolean checkTemperature(final String fromTemperature, final ListOfTemper
             }
             return false;
         }
-        statusText = "";
         return true;
     }
 
@@ -137,10 +161,12 @@ public void processInput() {
         } else {
             isConvertButtonEnabled = false;
             isErrorMessageDisplayed = true;
+            logger.addLog("Error is displayed: " + statusText);
         }
     }
 
     public void calculate() {
+        logger.addLog("Calculate");
         processInput();
         if (isConvertButtonEnabled()) {
             resultTemperature = "";
@@ -169,6 +195,10 @@ public void calculate() {
             }
 
             resultTemperature = Double.toString(toClass.getValue());
+            logger.addLog("From: " + getFrom()
+                    + "; To: " + getTo()
+                    + "; Initial temperature = " + getFromTemperature()
+                    + "; Result temperature = " + getResultTemperature());
         }
     }
 }
diff --git a/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/FakeLogger.java b/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..f2a59f7ac
--- /dev/null
+++ b/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.temperatureconverter.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class FakeLogger implements ILogger {
+    private ArrayList<String> log = new ArrayList<String>();
+
+    @Override
+    public void addLog(final String message) {
+        log.add(message);
+    }
+
+    @Override
+    public List<String> getLogMessage() {
+        return log;
+    }
+}
diff --git a/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModelTests.java b/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModelTests.java
index ed4c80787..382412d58 100644
--- a/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModelTests.java
+++ b/code/temperature-converter/ViewModel/src/test/java/ru/unn/agile/temperatureconverter/viewmodel/ViewModelTests.java
@@ -5,6 +5,8 @@
 import org.junit.Test;
 import ru.unn.agile.temperatureconverter.viewmodel.ViewModel.ListOfTemperatures;
 
+import java.util.List;
+
 import static org.junit.Assert.*;
 
 public class ViewModelTests {
@@ -13,7 +15,12 @@
 
     @Before
     public void setUp() {
-        viewModel = new ViewModel();
+        FakeLogger fakeLogger = new FakeLogger();
+        viewModel = new ViewModel(fakeLogger);
+    }
+
+    public void setViewModel(final ViewModel viewModel) {
+        this.viewModel = viewModel;
     }
 
     @After
@@ -251,6 +258,7 @@ public void convertCelsius0ToCelsius0() {
 
         assertEquals("0.0", viewModel.getResultTemperature());
     }
+
     @Test
     public void convertCelsius100ToCelsius100() {
         viewModel.setTo(ListOfTemperatures.CELSIUS);
@@ -260,4 +268,210 @@ public void convertCelsius100ToCelsius100() {
 
         assertEquals("100.0", viewModel.getResultTemperature());
     }
+
+    @Test
+    public void canCreateViewModelWithLogger() {
+        FakeLogger logger = new FakeLogger();
+        ViewModel viewModel = new ViewModel(logger);
+
+        assertNotNull(viewModel);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void throwWhenCreateViewModelWithNullLogger() {
+        ViewModel viewModel = new ViewModel(null);
+    }
+
+    @Test
+    public void doesLogMessageContainTwoMessageInitially() {
+        List<String> log = viewModel.getLog();
+        assertEquals(2, log.size());
+    }
+
+    @Test
+    public void isLogMessageNotEmptyAfterSetFromTemperature() {
+        viewModel.setFromTemperature("0.0");
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*" + "Input updated" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainCorrectTemperature() {
+        viewModel.setFromTemperature("0.0");
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*"
+                + "Input updated: value of from temperature = " + 0.0 + ".*"));
+    }
+
+    @Test
+    public void isLogMessageNotEmptyAfterSetFrom() {
+        viewModel.setFrom(ListOfTemperatures.NEWTON);
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*" + "Input updated" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainCorrectFromOption() {
+        viewModel.setFrom(ListOfTemperatures.KELVIN);
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*" + "Input updated: "
+                + "from temperature = " + ListOfTemperatures.KELVIN + ".*"));
+    }
+
+    @Test
+    public void isLogMessageNotEmptyAfterSetTo() {
+        viewModel.setTo(ListOfTemperatures.FAHRENHEIT);
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*" + "Input updated" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainCorrectToOption() {
+        viewModel.setTo(ListOfTemperatures.FAHRENHEIT);
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(2).matches(".*" + "Input updated: "
+                + "to temperature = " + ListOfTemperatures.FAHRENHEIT + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainErrorMessage() {
+        viewModel.setFromTemperature("abc");
+        viewModel.processInput();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(3).matches(".*" + "Error is displayed" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainErrorMessageWithTextInCaseIncorrectInput() {
+        viewModel.setFromTemperature("abc");
+        viewModel.processInput();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(3).matches(".*" + "Error is displayed: "
+                + viewModel.getStatusText() + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainErrorMessageWithTextInCaseAbsoluteZero() {
+        viewModel.setFromTemperature("-300");
+        viewModel.processInput();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(3).matches(".*" + "Error is displayed: "
+                + viewModel.getStatusText() + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainInfoAboutPressCalculate() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(3).matches(".*" + "Calculate" + ".*"));
+    }
+
+    @Test
+    public void isLogMessageNotUpdatedAfterSetEqualFromTemperature() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.setFromTemperature("0.0");
+        List<String> log = viewModel.getLog();
+
+        assertEquals(3, log.size());
+    }
+
+    @Test
+    public void isLogMessageNotUpdatedAfterSetEqualFrom() {
+        viewModel.setFrom(ListOfTemperatures.KELVIN);
+        viewModel.setFrom(ListOfTemperatures.KELVIN);
+        List<String> log = viewModel.getLog();
+
+        assertEquals(3, log.size());
+    }
+
+    @Test
+    public void doesLogMessageContainDefaultFromTemperature() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(0).matches(".*" + "Input updated: "
+                + "from temperature = " + ListOfTemperatures.CELSIUS + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainDefaultToTemperature() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(1).matches(".*" + "Input updated: "
+                + "to temperature = " + ListOfTemperatures.CELSIUS + ".*"));
+    }
+
+    @Test
+    public void isLogMessageNotUpdatedAfterSetEqualTo() {
+        viewModel.setTo(ListOfTemperatures.KELVIN);
+        viewModel.setTo(ListOfTemperatures.KELVIN);
+        List<String> log = viewModel.getLog();
+
+        assertEquals(3, log.size());
+    }
+
+    @Test
+    public void doesLogMessageContainResultAfterCalculate() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(4).matches(".*" + "Result temperature = 0.0" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageNotContainResultAfterCalculateWithBadInput() {
+        viewModel.setFromTemperature("abc");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertEquals(5, log.size());
+    }
+
+    @Test
+    public void doesLogMessageContainFromForCalculate() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(4).matches(".*" + "From: " + ListOfTemperatures.CELSIUS + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainToForCalculate() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(4).matches(".*" + "To: " + ListOfTemperatures.CELSIUS + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainFromTemperatureForCalculate() {
+        viewModel.setFromTemperature("0.0");
+        viewModel.calculate();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(4).matches(".*" + "Initial temperature = 0.0" + ".*"));
+    }
+
+    @Test
+    public void doesLogMessageContainCorrectError() {
+        viewModel.setFromTemperature("0.");
+        viewModel.processInput();
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.get(3).matches(".*" + "Error is displayed: "
+                + "Error. Please enter correct temperature" + ".*"));
+    }
 }
diff --git a/code/triangle/Infrastructure/build.gradle b/code/triangle/Infrastructure/build.gradle
new file mode 100644
index 000000000..33f7b543d
--- /dev/null
+++ b/code/triangle/Infrastructure/build.gradle
@@ -0,0 +1,4 @@
+dependencies {
+    compile project(':triangle-ViewModel')
+    testCompile project(':triangle-ViewModel').sourceSets.test.output
+}
\ No newline at end of file
diff --git a/code/triangle/Infrastructure/src/main/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLogger.java b/code/triangle/Infrastructure/src/main/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLogger.java
new file mode 100644
index 000000000..b97544c35
--- /dev/null
+++ b/code/triangle/Infrastructure/src/main/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLogger.java
@@ -0,0 +1,66 @@
+package ru.unn.agile.triangle.infrastructure;
+
+import ru.unn.agile.triangle.viewmodel.TriangleILogger;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+public class TriangleTxtLogger implements TriangleILogger {
+    private static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
+    private final BufferedWriter writer;
+    private final String fileName;
+
+    private static String currentDateTime() {
+        Date dateNow = new Date();
+        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW, Locale.ENGLISH);
+        return sdf.format(dateNow.getTime());
+    }
+
+    public TriangleTxtLogger(final String fileName) {
+        BufferedWriter logWriter = null;
+
+        this.fileName = fileName;
+
+        try {
+            logWriter = new BufferedWriter(new FileWriter(fileName));
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        writer = logWriter;
+    }
+
+    @Override
+    public void log(final String s) {
+        try {
+            writer.write(currentDateTime() + " > " + s);
+            writer.newLine();
+            writer.flush();
+        } catch (Exception ex) {
+            System.out.println(ex.getMessage());
+        }
+    }
+
+    @Override
+    public List<String> getLog() {
+        BufferedReader reader;
+        ArrayList<String> log = new ArrayList<>();
+        try {
+            reader = new BufferedReader(new FileReader(fileName));
+            String line = reader.readLine();
+
+            while (line != null) {
+                log.add(line);
+                line = reader.readLine();
+            }
+        } catch (Exception ex) {
+            System.out.println(ex.getMessage());
+        }
+
+        return log;
+    }
+
+}
diff --git a/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLoggerTests.java b/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLoggerTests.java
new file mode 100644
index 000000000..b57178b7b
--- /dev/null
+++ b/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleTxtLoggerTests.java
@@ -0,0 +1,71 @@
+package ru.unn.agile.triangle.infrastructure;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.util.List;
+
+import static junit.framework.TestCase.assertNotNull;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.fail;
+
+public class TriangleTxtLoggerTests {
+    private static final String FILENAME = "./TxtLogger_Tests-lab3.log";
+    private TriangleTxtLogger txtLogger;
+
+    @Before
+    public void setUp() {
+        txtLogger = new TriangleTxtLogger(FILENAME);
+    }
+
+    @Test
+    public void canCreateLogger() {
+        assertNotNull(txtLogger);
+    }
+
+    @Test
+    public void canCreateLogFile() {
+        try {
+            new BufferedReader(new FileReader(FILENAME));
+        } catch (FileNotFoundException e) {
+            fail("File " + FILENAME + " not found!");
+        }
+    }
+
+    @Test
+    public void canWriteSeveralLogMessages() {
+        String[] messages = {"Test message 1", "Test message 2", "Test message 3"};
+
+        txtLogger.log(messages[0]);
+        txtLogger.log(messages[1]);
+
+        List<String> actualMessage = txtLogger.getLog();
+        for (int i = 0; i < actualMessage.size(); i++) {
+            assertThat(actualMessage.get(i), actualMessage.get(i).matches(".*"
+                    + messages[i] + "$"));
+        }
+    }
+
+    @Test
+    public void canWriteLogMessage() {
+        String testMessage = "Test log message";
+
+        txtLogger.log(testMessage);
+
+        String message = txtLogger.getLog().get(0);
+        assertThat(message, message.matches(".*" + testMessage + "$"));
+    }
+
+    @Test
+    public void doesLogContainDateAndTime() {
+        String testMessage = "Test log message";
+
+        txtLogger.log(testMessage);
+
+        String message = txtLogger.getLog().get(0);
+
+    }
+}
diff --git a/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleViewModelWithTxtLoggerTests.java b/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleViewModelWithTxtLoggerTests.java
new file mode 100644
index 000000000..d55fd5bcd
--- /dev/null
+++ b/code/triangle/Infrastructure/src/test/java/ru/unn/agile/triangle/infrastructure/TriangleViewModelWithTxtLoggerTests.java
@@ -0,0 +1,14 @@
+package ru.unn.agile.triangle.infrastructure;
+
+import ru.unn.agile.triangle.viewmodel.TriangleViewModel;
+import ru.unn.agile.triangle.viewmodel.TriangleViewModelTests;
+
+public class TriangleViewModelWithTxtLoggerTests
+        extends TriangleViewModelTests {
+    @Override
+    public void setUp() {
+        TriangleTxtLogger realLogger =
+                new TriangleTxtLogger("./ViewModel_with_TxtLogger_Tests-lab3.log");
+        super.setExternalViewModel(new TriangleViewModel(realLogger));
+    }
+}
diff --git a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Formatter.java b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Formatter.java
similarity index 93%
rename from code/triangle/Model/src/main/java/ru/unn/agile/triangle/Formatter.java
rename to code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Formatter.java
index b9e7d1a04..139ee39ad 100644
--- a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Formatter.java
+++ b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Formatter.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.triangle;
+package ru.unn.agile.triangle.model;
 
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
diff --git a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Point.java b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Point.java
similarity index 96%
rename from code/triangle/Model/src/main/java/ru/unn/agile/triangle/Point.java
rename to code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Point.java
index 1e7877cec..4b9f0807b 100644
--- a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Point.java
+++ b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Point.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.triangle;
+package ru.unn.agile.triangle.model;
 
 import java.util.Objects;
 
diff --git a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Triangle.java b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Triangle.java
similarity index 99%
rename from code/triangle/Model/src/main/java/ru/unn/agile/triangle/Triangle.java
rename to code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Triangle.java
index 658ad71d3..71fdc02a3 100644
--- a/code/triangle/Model/src/main/java/ru/unn/agile/triangle/Triangle.java
+++ b/code/triangle/Model/src/main/java/ru/unn/agile/triangle/model/Triangle.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.triangle;
+package ru.unn.agile.triangle.model;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/code/triangle/Model/src/test/java/ru/unn/agile/triangle/TriangleTests.java b/code/triangle/Model/src/test/java/ru/unn/agile/triangle/model/TriangleTests.java
similarity index 99%
rename from code/triangle/Model/src/test/java/ru/unn/agile/triangle/TriangleTests.java
rename to code/triangle/Model/src/test/java/ru/unn/agile/triangle/model/TriangleTests.java
index aee118955..4d88b8244 100644
--- a/code/triangle/Model/src/test/java/ru/unn/agile/triangle/TriangleTests.java
+++ b/code/triangle/Model/src/test/java/ru/unn/agile/triangle/model/TriangleTests.java
@@ -1,4 +1,4 @@
-package ru.unn.agile.triangle;
+package ru.unn.agile.triangle.model;
 
 import org.junit.Test;
 
diff --git a/code/triangle/View/build.gradle b/code/triangle/View/build.gradle
index 526ed07d7..0c2fe3e13 100644
--- a/code/triangle/View/build.gradle
+++ b/code/triangle/View/build.gradle
@@ -14,4 +14,5 @@ javafx {
 
 dependencies {
     compile project(':triangle-ViewModel')
+    compile project(':triangle-Infrastructure')
 }
diff --git a/code/triangle/View/src/main/java/ru/unn/agile/triangle/view/Calculator.java b/code/triangle/View/src/main/java/ru/unn/agile/triangle/view/Calculator.java
index 7151da4fd..ed9728338 100644
--- a/code/triangle/View/src/main/java/ru/unn/agile/triangle/view/Calculator.java
+++ b/code/triangle/View/src/main/java/ru/unn/agile/triangle/view/Calculator.java
@@ -1,17 +1,20 @@
 package ru.unn.agile.triangle.view;
 
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
 import javafx.fxml.FXML;
 import javafx.scene.control.Button;
 import javafx.scene.control.ComboBox;
 import javafx.scene.control.TextField;
-import ru.unn.agile.triangle.Triangle.*;
-import ru.unn.agile.triangle.viewmodel.ViewModel;
+import ru.unn.agile.triangle.infrastructure.TriangleTxtLogger;
+import ru.unn.agile.triangle.model.Triangle.Operation;
+import ru.unn.agile.triangle.viewmodel.TriangleViewModel;
 
 public class Calculator {
     @FXML
-    private ViewModel viewModel;
+    private TriangleViewModel viewModel;
     @FXML
     private TextField txtAx;
     @FXML
@@ -31,16 +34,45 @@
 
     @FXML
     void initialize() {
+        viewModel.setLogger(new TriangleTxtLogger("./TxtLogger-lab3.log"));
+
+        final ChangeListener<Boolean> focusChangeListener = new ChangeListener<>() {
+            @Override
+            public void changed(final ObservableValue<? extends Boolean> observable,
+                                final Boolean oldValue, final Boolean newValue) {
+                viewModel.onFocusChanged(oldValue, newValue);
+            }
+        };
 
         txtAx.textProperty().bindBidirectional(viewModel.axProperty());
+        txtAx.focusedProperty().addListener(focusChangeListener);
+
         txtAy.textProperty().bindBidirectional(viewModel.ayProperty());
+        txtAy.focusedProperty().addListener(focusChangeListener);
+
         txtBx.textProperty().bindBidirectional(viewModel.bxProperty());
+        txtBx.focusedProperty().addListener(focusChangeListener);
+
         txtBy.textProperty().bindBidirectional(viewModel.byProperty());
+        txtBy.focusedProperty().addListener(focusChangeListener);
+
         txtCx.textProperty().bindBidirectional(viewModel.cxProperty());
+        txtCx.focusedProperty().addListener(focusChangeListener);
+
         txtCy.textProperty().bindBidirectional(viewModel.cyProperty());
+        txtCy.focusedProperty().addListener(focusChangeListener);
 
         cbOperation.valueProperty().bindBidirectional(viewModel.operationProperty());
 
+        cbOperation.valueProperty().addListener(new ChangeListener<Operation>() {
+            @Override
+            public void changed(final ObservableValue<? extends Operation> observable,
+                                final Operation oldValue,
+                                final Operation newValue) {
+                viewModel.onOperationChanged(oldValue, newValue);
+            }
+        });
+
         btnCalc.setOnAction(new EventHandler<ActionEvent>() {
             @Override
             public void handle(final ActionEvent event) {
diff --git a/code/triangle/View/src/main/resources/ru/unn/agile/triangle/view/Calculator.fxml b/code/triangle/View/src/main/resources/ru/unn/agile/triangle/view/Calculator.fxml
index 8d68c9830..ecd699cd0 100644
--- a/code/triangle/View/src/main/resources/ru/unn/agile/triangle/view/Calculator.fxml
+++ b/code/triangle/View/src/main/resources/ru/unn/agile/triangle/view/Calculator.fxml
@@ -9,7 +9,7 @@
 
 <AnchorPane xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.triangle.view.Calculator">
     <fx:define>
-        <ViewModel fx:id="viewModel" />
+        <TriangleViewModel fx:id="viewModel" />
     </fx:define>
     <children>
         <VBox alignment="TOP_CENTER" layoutX="6.0" spacing="10.0">
@@ -64,6 +64,7 @@
                   <Label fx:id="lbStatus" maxWidth="1.7976931348623157E308" text="${viewModel.status}" HBox.hgrow="ALWAYS" />
                </children>
             </HBox>
+             <TextArea fx:id="areaLog" text="${viewModel.logs}" editable="false" prefHeight="200.0" prefWidth="200.0" VBox.vgrow="ALWAYS" />
          </children>
         </VBox>
     </children>
diff --git a/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleILogger.java b/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleILogger.java
new file mode 100644
index 000000000..f8d100a20
--- /dev/null
+++ b/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleILogger.java
@@ -0,0 +1,9 @@
+package ru.unn.agile.triangle.viewmodel;
+
+import java.util.List;
+
+public interface TriangleILogger {
+    void log(String s);
+
+    List<String> getLog();
+}
diff --git a/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/ViewModel.java b/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleViewModel.java
similarity index 61%
rename from code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/ViewModel.java
rename to code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleViewModel.java
index 9dab8b5d3..1a70f2aa2 100644
--- a/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/ViewModel.java
+++ b/code/triangle/ViewModel/src/main/java/ru/unn/agile/triangle/viewmodel/TriangleViewModel.java
@@ -6,13 +6,15 @@
 import javafx.beans.value.ObservableValue;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
-import ru.unn.agile.triangle.*;
-import ru.unn.agile.triangle.Triangle.*;
+import ru.unn.agile.triangle.model.Point;
+import ru.unn.agile.triangle.model.Triangle;
+import ru.unn.agile.triangle.model.Triangle.Operation;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
-public class ViewModel {
+public class TriangleViewModel {
     private final StringProperty ax = new SimpleStringProperty();
     private final StringProperty ay = new SimpleStringProperty();
     private final StringProperty bx = new SimpleStringProperty();
@@ -20,6 +22,7 @@
     private final StringProperty cx = new SimpleStringProperty();
     private final StringProperty cy = new SimpleStringProperty();
 
+    private final StringProperty logs = new SimpleStringProperty();
     private final StringProperty result = new SimpleStringProperty();
     private final StringProperty status = new SimpleStringProperty();
 
@@ -28,10 +31,27 @@
     private final ObjectProperty<Operation> operation = new SimpleObjectProperty<>();
 
     private final BooleanProperty calculationDisabled = new SimpleBooleanProperty();
-
     private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+    private final String arguments = "ax = %s; ay = %s; bx = %s; by = %s; cx = %s; cy = %s";
+    private TriangleILogger logger;
+
+    public TriangleViewModel() {
+        init();
+    }
 
-    public ViewModel() {
+    public TriangleViewModel(final TriangleILogger logger) {
+        setLogger(logger);
+        init();
+    }
+
+    public final void setLogger(final TriangleILogger logger) {
+        if (logger == null) {
+            throw new IllegalArgumentException("Logger parameter can't be null");
+        }
+        this.logger = logger;
+    }
+
+    public void init() {
         ax.set("");
         ay.set("");
         bx.set("");
@@ -52,6 +72,7 @@ protected boolean computeValue() {
                 return getInputStatus() == Status.READY;
             }
         };
+
         calculationDisabled.bind(couldCalculate.not());
 
         final List<StringProperty> fields = new ArrayList<StringProperty>() {
@@ -83,10 +104,47 @@ public void calculate() {
 
         try {
             Triangle triangle = new Triangle(a, b, c);
-            result.set(operation.get().apply(triangle).toString());
+            result.set(operation.get().apply(triangle));
             status.set(Status.SUCCESS.toString());
+            StringBuilder message = new StringBuilder(LogMessages.CALCULATE_WAS_PRESSED);
+            message.append("Arguments: ").append(String.format(arguments,
+                    ax.get(), ay.get(), bx.get(), by.get(), cx.get(), cy.get()))
+                    .append(" Operation: ").append(operation.get().toString()).append(".");
+            logger.log(message.toString());
         } catch (Exception ex) {
             status.set(ex.getMessage());
+            logger.log(LogMessages.INCORRECT_INPUT);
+        } finally {
+            updateLogs();
+        }
+    }
+
+    public void onOperationChanged(final Operation oldValue, final Operation newValue) {
+        if (oldValue.equals(newValue)) {
+            return;
+        }
+        StringBuilder message = new StringBuilder(LogMessages.OPERATION_WAS_CHANGED);
+        message.append(newValue.toString());
+        logger.log(message.toString());
+        updateLogs();
+    }
+
+    public void onFocusChanged(final Boolean oldValue, final Boolean newValue) {
+        if (!oldValue && newValue) {
+            return;
+        }
+
+        for (ValueChangeListener listener : valueChangedListeners) {
+            if (listener.isChanged()) {
+                StringBuilder message = new StringBuilder(LogMessages.EDITING_FINISHED);
+                message.append("Input arguments are: ").append(String.format(arguments,
+                        ax.get(), ay.get(), bx.get(), by.get(), cx.get(), cy.get()));
+                logger.log(message.toString());
+                updateLogs();
+
+                listener.cache();
+                break;
+            }
         }
     }
 
@@ -150,6 +208,21 @@ public final String getStatus() {
         return status.get();
     }
 
+    public StringProperty logsProperty() {
+        return logs;
+    }
+
+    public final List<String> getLog() {
+        if (logger != null) {
+            return logger.getLog();
+        }
+        return Collections.emptyList();
+    }
+
+    public final String getLogs() {
+        return logs.get();
+    }
+
     private Status getInputStatus() {
         Status inputStatus = Status.READY;
         if (ax.get().isEmpty() || ay.get().isEmpty()
@@ -183,11 +256,35 @@ private Status getInputStatus() {
         return inputStatus;
     }
 
+    private void updateLogs() {
+        List<String> fullLog = logger.getLog();
+        String record = "";
+        for (String log : fullLog) {
+            record += log + "\n";
+        }
+        logs.set(record);
+    }
+
     private class ValueChangeListener implements ChangeListener<String> {
+        private String prevValue = "";
+        private String curValue = "";
+
         @Override
         public void changed(final ObservableValue<? extends String> observable,
                             final String oldValue, final String newValue) {
+            if (oldValue.equals(newValue)) {
+                return;
+            }
             status.set(getInputStatus().toString());
+            curValue = newValue;
+        }
+
+        public boolean isChanged() {
+            return !prevValue.equals(curValue);
+        }
+
+        public void cache() {
+            prevValue = curValue;
         }
     }
 }
@@ -208,3 +305,13 @@ public String toString() {
         return name;
     }
 }
+
+final class LogMessages {
+    public static final String CALCULATE_WAS_PRESSED = "Calculate. ";
+    public static final String OPERATION_WAS_CHANGED = "Operation was changed to ";
+    public static final String EDITING_FINISHED = "Updated input. ";
+    public static final String INCORRECT_INPUT = "Incorrect input. ";
+
+    private LogMessages() {
+    }
+}
diff --git a/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/FakeLogger.java b/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/FakeLogger.java
new file mode 100644
index 000000000..2eb9ec460
--- /dev/null
+++ b/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/FakeLogger.java
@@ -0,0 +1,18 @@
+package ru.unn.agile.triangle.viewmodel;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FakeLogger implements TriangleILogger {
+    private final ArrayList<String> log = new ArrayList<>();
+
+    @Override
+    public void log(final String s) {
+        log.add(s);
+    }
+
+    @Override
+    public List<String> getLog() {
+        return log;
+    }
+}
diff --git a/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/ViewModelTests.java b/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/TriangleViewModelTests.java
similarity index 75%
rename from code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/ViewModelTests.java
rename to code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/TriangleViewModelTests.java
index b4b828c07..ecd173c0a 100644
--- a/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/ViewModelTests.java
+++ b/code/triangle/ViewModel/src/test/java/ru/unn/agile/triangle/viewmodel/TriangleViewModelTests.java
@@ -3,16 +3,25 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import ru.unn.agile.triangle.Triangle.*;
+import ru.unn.agile.triangle.model.Triangle.Operation;
+
+import java.util.List;
 
 import static org.junit.Assert.*;
 
-public class ViewModelTests {
-    private ViewModel viewModel;
+public class TriangleViewModelTests {
+    private TriangleViewModel viewModel;
+
+    public void setExternalViewModel(final TriangleViewModel viewModel) {
+
+        this.viewModel = viewModel;
+    }
 
     @Before
     public void setUp() {
-        viewModel = new ViewModel();
+        if (viewModel == null) {
+            viewModel = new TriangleViewModel(new FakeLogger());
+        }
     }
 
     @After
@@ -21,7 +30,7 @@ public void tearDown() {
     }
 
     @Test
-    public void canSetDefaultValues() {
+    public void canSetValuesByDefault() {
         assertEquals("", viewModel.axProperty().get());
         assertEquals("", viewModel.ayProperty().get());
         assertEquals("", viewModel.bxProperty().get());
@@ -361,6 +370,113 @@ public void statusIsReadyWhenSetProperData() {
         assertEquals(Status.READY.toString(), viewModel.statusProperty().get());
     }
 
+    @Test(expected = IllegalArgumentException.class)
+    public void canInitEmptyLogger() {
+        viewModel.setLogger(null);
+    }
+
+    @Test
+    public void logIsEmptyInTheBeginning() {
+        List<String> log = viewModel.getLog();
+
+        assertTrue(log.isEmpty());
+    }
+
+    @Test
+    public void logContainsProperMessageAfterCalculation() {
+        setInputData();
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.CALCULATE_WAS_PRESSED + ".*"));
+    }
+
+    @Test
+    public void logContainsInputArgumentsAfterCalculation() {
+        setInputData();
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + viewModel.axProperty().get()
+                + ".*" + viewModel.ayProperty().get()
+                + ".*" + viewModel.bxProperty().get()
+                + ".*" + viewModel.byProperty().get()
+                + ".*" + viewModel.cxProperty().get()
+                + ".*" + viewModel.cyProperty().get() + ".*"));
+    }
+
+    @Test
+    public void logContainsProperlyFormattedArguments() {
+        setInputData();
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*Arguments"
+                + ": ax = " + viewModel.axProperty().get()
+                + "; ay = " + viewModel.ayProperty().get()
+                + "; bx = " + viewModel.bxProperty().get()
+                + "; by = " + viewModel.byProperty().get()
+                + "; cx = " + viewModel.cxProperty().get()
+                + "; cy = " + viewModel.cyProperty().get() + ".*"));
+    }
+
+    @Test
+    public void operationTypeIsMentionedInTheLog() {
+        setInputData();
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*getAngleA.*"));
+    }
+
+    @Test
+    public void canPutSeveralLogMessages() {
+        setInputData();
+        viewModel.calculate();
+        viewModel.calculate();
+        viewModel.calculate();
+
+        assertEquals(3, viewModel.getLog().size());
+    }
+
+    @Test
+    public void logContainOperationChange() {
+        setInputData();
+        viewModel.onOperationChanged(Operation.GETANGLEA, Operation.GETAREA);
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.OPERATION_WAS_CHANGED + "getArea.*"));
+    }
+
+    @Test
+    public void operationIsNotLoggedIfNotChanged() {
+        viewModel.onOperationChanged(Operation.GETANGLEA, Operation.GETBISECTORA);
+        viewModel.onOperationChanged(Operation.GETBISECTORA, Operation.GETBISECTORA);
+
+        assertEquals(1, viewModel.getLog().size());
+    }
+
+    @Test
+    public void cantCallCalculateWhenButtonIsDisabled() {
+        viewModel.calculate();
+
+        assertTrue(viewModel.getLog().isEmpty());
+    }
+
+    @Test
+    public void logContainsErrorMessageAfterIncorrectInput() {
+        viewModel.axProperty().set("0");
+        viewModel.ayProperty().set("0");
+        viewModel.bxProperty().set("0");
+        viewModel.byProperty().set("0");
+        viewModel.cxProperty().set("0");
+        viewModel.cyProperty().set("0");
+        viewModel.calculate();
+        String message = viewModel.getLog().get(0);
+
+        assertTrue(message.matches(".*" + LogMessages.INCORRECT_INPUT + ".*"));
+    }
+
     private void setInputData() {
         viewModel.axProperty().set("0");
         viewModel.ayProperty().set("0");
diff --git a/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetrics.java b/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetrics.java
new file mode 100644
index 000000000..fa7ab1f1a
--- /dev/null
+++ b/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetrics.java
@@ -0,0 +1,31 @@
+package ru.unn.agile.vectorsdistancescalculator.model;
+
+import java.util.List;
+import java.util.NoSuchElementException;
+
+public final class VectorMetrics {
+
+    public static double calculateLp(final List<Double> vector, final int power)
+            throws IllegalArgumentException {
+        if (power < 1) {
+            throw new IllegalArgumentException("Power can't be lower than one");
+        }
+        return Math.pow(vector.stream()
+                     .map(Math::abs)
+                     .map(x -> Math.pow(x, power))
+                     .reduce((x, y) -> x + y)
+                     .get(), 1. / power);
+    }
+
+    public static double calculateLInf(final List<Double> vector)
+            throws NoSuchElementException {
+        if (vector.isEmpty()) {
+            throw new NoSuchElementException("Vector can't be empty");
+        }
+        return vector.stream()
+                     .map(Math::abs)
+                     .reduce(Double.NEGATIVE_INFINITY, (x, y) -> x < y ? y : x);
+    }
+
+    private VectorMetrics() { }
+}
diff --git a/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculator.java b/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculator.java
new file mode 100644
index 000000000..5a8ac45bf
--- /dev/null
+++ b/code/vectors-distances-calculator/Model/src/main/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculator.java
@@ -0,0 +1,89 @@
+package ru.unn.agile.vectorsdistancescalculator.model;
+
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+public final class VectorsDistancesCalculator {
+
+    public static double calculateLp(final List<Double> x,
+                                     final List<Double> y,
+                                     final int power) {
+        List<Double> dif = calculateVectorsDifference(x, y);
+        return VectorMetrics.calculateLp(dif, power);
+    }
+
+    public static double calculateLInf(final List<Double> x, final List<Double> y) {
+        List<Double> dif = calculateVectorsDifference(x, y);
+        return VectorMetrics.calculateLInf(dif);
+    }
+
+    private static List<Double> calculateVectorsDifference(final List<Double> x,
+                                                           final List<Double> y) {
+        if (x == null || y == null) {
+            throw new NullPointerException("Vector(s) can't be null");
+        }
+        if (x.isEmpty() || y.isEmpty()) {
+            throw new NoSuchElementException("Vector(s) can't be empty");
+        }
+        if (x.size() != y.size()) {
+            throw new IllegalArgumentException("Vectors must have same dimension");
+        }
+        List<Double> dif = new ArrayList<>();
+        for (int i = 0; i < x.size(); ++i) {
+            dif.add(y.get(i) - x.get(i));
+        }
+        return dif;
+    }
+
+    public enum Operation {
+        CALCULATE_L1_DISTANCE("Calculate L1 Distance") {
+            public double apply(final List<Double> x, final List<Double> y) {
+                final int power = 1;
+                return VectorsDistancesCalculator.calculateLp(x, y, power);
+            }
+        },
+        CALCULATE_L2_DISTANCE("Calculate L2 Distance") {
+            public double apply(final List<Double> x, final List<Double> y) {
+                final int power = 2;
+                return VectorsDistancesCalculator.calculateLp(x, y, power);
+            }
+        },
+
+        CALCULATE_L3_DISTANCE("Calculate L3 Distance") {
+            public double apply(final List<Double> x, final List<Double> y) {
+                final int power = 3;
+                return VectorsDistancesCalculator.calculateLp(x, y, power);
+            }
+        },
+
+        CALCULATE_L4_DISTANCE("Calculate L4 Distance") {
+            public double apply(final List<Double> x, final List<Double> y) {
+                final int power = 4;
+                return VectorsDistancesCalculator.calculateLp(x, y, power);
+            }
+        },
+
+        CALCULATE_LInf_DISTANCE("Calculate LInf Distance") {
+            public double apply(final List<Double> x, final List<Double> y) {
+                return VectorsDistancesCalculator.calculateLInf(x, y);
+            }
+        };
+
+        private final String name;
+        Operation(final String name) {
+            this.name = name;
+        }
+
+        @Override
+        public String toString() {
+            return name;
+        }
+
+        public abstract double apply(List<Double> x, List<Double> y);
+    }
+
+    private VectorsDistancesCalculator() { }
+
+}
diff --git a/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetricsTests.java b/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetricsTests.java
new file mode 100644
index 000000000..30d009a72
--- /dev/null
+++ b/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorMetricsTests.java
@@ -0,0 +1,202 @@
+package ru.unn.agile.vectorsdistancescalculator.model;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import static org.junit.Assert.assertEquals;
+
+public class VectorMetricsTests {
+
+    private static final double EPS = 0.01;
+
+    @Test
+    public void canCalculateL1DistanceOneDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(1.0));
+        double expectedL1 = 1.0;
+        int power = 1;
+        double actualL1 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test
+    public void canCalculateL1DistanceTwoDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(1.1, 2.2));
+        double expectedL1 = 3.3f;
+        int power = 1;
+        double actualL1 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test
+    public void canCalculateL1DistanceThreeDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(1.1, 2.2, 3.3));
+        double expectedL1 = 6.6;
+        int power = 1;
+        double actualL1 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test
+    public void canCalculateL1DistanceWithNegativeValues() {
+        List<Double> vector = new ArrayList<>(List.of(-1.1, 2.2, -3.3));
+        double expectedL1 = 6.6;
+        int power = 1;
+        double actualL1 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test(expected = NoSuchElementException.class)
+    public void throwExceptionCalculateLpDistanceEmptyVector() {
+        List<Double> vector = new ArrayList<>();
+        int power = 1;
+        VectorMetrics.calculateLp(vector, power);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void throwNPECalculateLpDistanceNullVector() {
+        List<Double> vector = null;
+        int power = 1;
+        VectorMetrics.calculateLp(vector, power);
+    }
+
+    @Test
+    public void canCalculateL2DistanceOneDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0));
+        double expectedL2 = 2.0;
+        int power = 2;
+        double actualL2 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+    @Test
+    public void canCalculateL2DistanceTwoDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0));
+        double sumSquared = 13.0;
+        int power = 2;
+        double expectedL2 = Math.sqrt(sumSquared);
+        double actualL2 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+    @Test
+    public void canCalculateL2DistanceThreeDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0, 4.0));
+        double sumSquared = 29;
+        int power = 2;
+        double expectedL2 = Math.sqrt(sumSquared);
+        double actualL2 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+    @Test
+    public void canCalculateL2DistanceWithNegativeValues() {
+        List<Double> vector = new ArrayList<>(List.of(-1.0, 3.0, -4.0));
+        double sumSquared = 26;
+        int power = 2;
+        double expectedL2 = Math.sqrt(sumSquared);
+        double actualL2 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+
+    @Test
+    public void canCalculateL3DistanceOneDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0));
+        double expectedL3 = 2.0;
+        int power = 3;
+        double actualL3 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void canCalculateL3DistanceTwoDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0));
+        double sum = 35.0;
+        int power = 3;
+        double expectedL3 = Math.pow(sum, 1. / 3);
+        double actualL3 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void canCalculateL3DistanceThreeDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0, 4.0));
+        double sum = 99;
+        int power = 3;
+        double expectedL3 = Math.pow(sum, 1. / 3);
+        double actualL3 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void canCalculateL3DistanceWithNegativeValues() {
+        List<Double> vector = new ArrayList<>(List.of(-1.0, 3.0, -4.0));
+        double sum = 92;
+        int power = 3;
+        double expectedL3 = Math.pow(sum, 1. / 3);
+        double actualL3 = VectorMetrics.calculateLp(vector, power);
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceOneDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0));
+        double expectedLInf = 2.0;
+        double actualLInf = VectorMetrics.calculateLInf(vector);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceTwoDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0));
+        double expectedLInf = 3.0;
+        double actualLInf = VectorMetrics.calculateLInf(vector);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceThreeDimensionalVector() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0, 4.0));
+        double expectedLInf = 4.0;
+        double actualLInf = VectorMetrics.calculateLInf(vector);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceWithNegativeValues() {
+        List<Double> vector = new ArrayList<>(List.of(-1.0, 3.0, -4.0));
+        double expectedLInf = 4.0;
+        double actualLInf = VectorMetrics.calculateLInf(vector);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test(expected = NoSuchElementException.class)
+    public void throwExceptionCalculateLInfDistanceEmptyVector() {
+        List<Double> vector = new ArrayList<>();
+        VectorMetrics.calculateLInf(vector);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void throwNPECalculateLInfDistanceNullVector() {
+        List<Double> vector = null;
+        VectorMetrics.calculateLInf(vector);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void throwIAECalculateLpPowerZero() {
+        List<Double> vector = new ArrayList<>(List.of(2.0, 3.0, 4.0));
+        int power = 0;
+        VectorMetrics.calculateLp(vector, power);
+    }
+
+    @Test
+    public void canCorrectlyCalculateLInfWithZeroFilledVectors() {
+        List<Double> x = new ArrayList<>(List.of(0.0, 0.0, 0.0));
+        double expectedLInf = 0.0;
+        double actualLInf = VectorMetrics.calculateLInf(x);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+}
diff --git a/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculatorTests.java b/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculatorTests.java
new file mode 100644
index 000000000..a8c95f21c
--- /dev/null
+++ b/code/vectors-distances-calculator/Model/src/test/java/ru/unn/agile/vectorsdistancescalculator/model/VectorsDistancesCalculatorTests.java
@@ -0,0 +1,169 @@
+package ru.unn.agile.vectorsdistancescalculator.model;
+
+import org.junit.Test;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.NoSuchElementException;
+
+import static org.junit.Assert.assertEquals;
+
+
+public class VectorsDistancesCalculatorTests {
+
+    private static final double EPS = 0.01;
+
+    @Test(expected = IllegalArgumentException.class)
+    public void calculateLpThrowExceptionIfVectorsHaveDifferentDimensions() {
+        List<Double> x = new ArrayList<>(List.of(1.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(1.0));
+        int power = 1;
+        VectorsDistancesCalculator.calculateLp(x, y, power);
+    }
+
+    @Test(expected = NoSuchElementException.class)
+    public void calculateLpThrowExceptionIfVectorsEmpty() {
+        List<Double> x = new ArrayList<>(List.of(1.0));
+        List<Double> y = new ArrayList<>();
+        int power = 1;
+        VectorsDistancesCalculator.calculateLp(x, y, power);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void calculateLpThrowExceptionIfVectorNull() {
+        List<Double> x = null;
+        List<Double> y = new ArrayList<>();
+        int power = 1;
+        VectorsDistancesCalculator.calculateLp(x, y, power);
+    }
+
+    @Test
+    public void canCalculateL1DistancePositiveElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(2.0, 1.0));
+        int power = 1;
+        double expectedL1 = 2.0;
+        double actualL1 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL1, actualL1, EPS);
+
+    }
+
+    @Test
+    public void canCalculateL1DistanceMixedElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, -2.0));
+        List<Double> y = new ArrayList<>(List.of(-2.0, 1.0));
+        int power = 1;
+        double expectedL1 = 8.0;
+        double actualL1 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test
+    public void canCalculateL2DistancePositiveElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(2.0, 1.0));
+        int power = 2;
+        double sum = 2.0;
+        double expectedL2 = Math.sqrt(sum);
+        double actualL2 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL2, actualL2, EPS);
+
+    }
+
+    @Test
+    public void canCalculateL2DistanceMixedElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, -2.0));
+        List<Double> y = new ArrayList<>(List.of(-2.0, 1.0));
+        int power = 2;
+        double sum = 34.0;
+        double expectedL2 = Math.sqrt(sum);
+        double actualL2 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+    @Test
+    public void canCalculateL3DistancePositiveElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(2.0, 1.0));
+        int power = 3;
+        double sum = 2.0;
+        double expectedL3 = Math.pow(sum, 1. / 3);
+        double actualL3 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL3, actualL3, EPS);
+
+    }
+
+    @Test
+    public void canCalculateL3DistanceMixedElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, -2.0));
+        List<Double> y = new ArrayList<>(List.of(-2.0, 1.0));
+        int power = 3;
+        double sum = 152;
+        double expectedL3 = Math.pow(sum, 1. / 3);
+        double actualL3 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void canCalculateL4DistancePositiveElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(2.0, 1.0));
+        int power = 4;
+        double sum = 2.0;
+        double expectedL4 = Math.pow(sum, 1. / 4);
+        double actualL4 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL4, actualL4, EPS);
+
+    }
+
+    @Test
+    public void canCalculateL4DistanceMixedElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, -2.0));
+        List<Double> y = new ArrayList<>(List.of(-2.0, 1.0));
+        int power = 4;
+        double sum = 706;
+        double expectedL4 = Math.pow(sum, 1. / 4);
+        double actualL4 = VectorsDistancesCalculator.calculateLp(x, y, power);
+        assertEquals(expectedL4, actualL4, EPS);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void calculateLInfThrowExceptionIfVectorsHaveDifferentDimensions() {
+        List<Double> x = new ArrayList<>(List.of(1.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(1.0));
+        VectorsDistancesCalculator.calculateLInf(x, y);
+    }
+
+    @Test(expected = NoSuchElementException.class)
+    public void calculateLInfThrowExceptionIfVectorsEmpty() {
+        List<Double> x = new ArrayList<>(List.of(1.0));
+        List<Double> y = new ArrayList<>();
+        VectorsDistancesCalculator.calculateLInf(x, y);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void calculateLInfThrowExceptionIfVectorNull() {
+        List<Double> x = null;
+        List<Double> y = new ArrayList<>();
+        VectorsDistancesCalculator.calculateLInf(x, y);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceWithPositiveElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, 2.0));
+        List<Double> y = new ArrayList<>(List.of(2.0, 1.0));
+        double expectedLInf = 1.0;
+        double actualLInf = VectorsDistancesCalculator.calculateLInf(x, y);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test
+    public void canCalculateLInfDistanceWithMixedElems() {
+        List<Double> x = new ArrayList<>(List.of(3.0, -2.0));
+        List<Double> y = new ArrayList<>(List.of(-2.0, 1.0));
+        double expectedLInf = 5.0;
+        double actualLInf = VectorsDistancesCalculator.calculateLInf(x, y);
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+}
+
diff --git a/code/vectors-distances-calculator/View/build.gradle b/code/vectors-distances-calculator/View/build.gradle
new file mode 100644
index 000000000..63e904a9f
--- /dev/null
+++ b/code/vectors-distances-calculator/View/build.gradle
@@ -0,0 +1,17 @@
+// apply from:   rootDir.getAbsolutePath() + '/config/scripts/javafx.plugin'
+plugins {
+  id 'application'
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+apply plugin: 'application'
+mainClassName = 'ru.unn.agile.vectorsdistancescalculator.view.Main'
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.base', 'javafx.fxml' ]
+}
+
+dependencies {
+    compile project(':vectors-distances-calculator-ViewModel')
+}
diff --git a/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/Main.java b/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/Main.java
new file mode 100644
index 000000000..df1f8bbb2
--- /dev/null
+++ b/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/Main.java
@@ -0,0 +1,22 @@
+package ru.unn.agile.vectorsdistancescalculator.view;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    @Override
+    public void start(final Stage primaryStage) throws Exception {
+        Parent root = FXMLLoader.load(getClass().getResource("VectorsDistancesCalculator.fxml"));
+        primaryStage.setTitle("Vectors Distances Calculator");
+        primaryStage.setScene(new Scene(root));
+        primaryStage.show();
+    }
+
+    public static void main(final String[] args) {
+        launch(args);
+    }
+}
diff --git a/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.java b/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.java
new file mode 100644
index 000000000..479a98910
--- /dev/null
+++ b/code/vectors-distances-calculator/View/src/main/java/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.java
@@ -0,0 +1,50 @@
+package ru.unn.agile.vectorsdistancescalculator.view;
+
+import javafx.event.ActionEvent;
+import javafx.event.EventHandler;
+import javafx.fxml.FXML;
+import javafx.scene.control.Button;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.TextField;
+import ru.unn.agile.vectorsdistancescalculator.viewmodel.ViewModel;
+import ru.unn.agile.vectorsdistancescalculator.model.VectorsDistancesCalculator.Operation;
+
+public class VectorsDistancesCalculator {
+    @FXML
+    private ViewModel viewModel;
+    @FXML
+    private TextField txtX1;
+    @FXML
+    private TextField txtY1;
+    @FXML
+    private TextField txtZ1;
+    @FXML
+    private TextField txtX2;
+    @FXML
+    private TextField txtY2;
+    @FXML
+    private TextField txtZ2;
+    @FXML
+    private ComboBox<Operation> comboBoxOperation;
+    @FXML
+    private Button buttonCalc;
+
+    @FXML
+    void initialize() {
+        txtX1.textProperty().bindBidirectional(viewModel.x1Property());
+        txtY1.textProperty().bindBidirectional(viewModel.y1Property());
+        txtZ1.textProperty().bindBidirectional(viewModel.z1Property());
+        txtX2.textProperty().bindBidirectional(viewModel.x2Property());
+        txtY2.textProperty().bindBidirectional(viewModel.y2Property());
+        txtZ2.textProperty().bindBidirectional(viewModel.z2Property());
+
+        comboBoxOperation.valueProperty().bindBidirectional(viewModel.operationProperty());
+
+        buttonCalc.setOnAction(new EventHandler<ActionEvent>() {
+            @Override
+            public void handle(final ActionEvent event) {
+                viewModel.calculate();
+            }
+        });
+    }
+}
diff --git a/code/vectors-distances-calculator/View/src/main/resources/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.fxml b/code/vectors-distances-calculator/View/src/main/resources/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.fxml
new file mode 100644
index 000000000..f3644cd6e
--- /dev/null
+++ b/code/vectors-distances-calculator/View/src/main/resources/ru/unn/agile/vectorsdistancescalculator/view/VectorsDistancesCalculator.fxml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.ComboBox?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.TextField?>
+<?import javafx.scene.layout.AnchorPane?>
+
+<?import ru.unn.agile.vectorsdistancescalculator.viewmodel.ViewModel?>
+<AnchorPane prefHeight="339.0" prefWidth="243.0" xmlns="http://javafx.com/javafx/8.0.172-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="ru.unn.agile.vectorsdistancescalculator.view.VectorsDistancesCalculator">
+   <fx:define>
+      <ViewModel fx:id="viewModel" />
+   </fx:define>
+   <children>
+      <TextField fx:id="txtX1" layoutX="25.0" layoutY="48.0" prefHeight="25.0" prefWidth="54.0" />
+      <TextField fx:id="txtY1" layoutX="93.0" layoutY="48.0" prefHeight="25.0" prefWidth="54.0" />
+      <TextField fx:id="txtZ1" layoutX="160.0" layoutY="48.0" prefHeight="25.0" prefWidth="54.0" />
+      <TextField fx:id="txtX2" layoutX="25.0" layoutY="108.0" prefHeight="25.0" prefWidth="54.0" />
+      <TextField fx:id="txtY2" layoutX="93.0" layoutY="108.0" prefHeight="25.0" prefWidth="54.0" />
+      <TextField fx:id="txtZ2" layoutX="160.0" layoutY="108.0" prefHeight="25.0" prefWidth="54.0" />
+      <Button fx:id="buttonCalc" disable="${viewModel.calculationDisabledFlag}" layoutX="25.0" layoutY="281.0" mnemonicParsing="false" prefHeight="48.0" prefWidth="190.0" text="Calculate" />
+      <Label contentDisplay="TOP" layoutX="25.0" layoutY="206.0" text="Status:" />
+      <Label layoutX="49.0" layoutY="24.0" text="x" />
+      <Label layoutX="117.0" layoutY="24.0" text="y" />
+      <Label layoutX="184.0" layoutY="24.0" text="z" />
+      <Label layoutX="49.0" layoutY="84.0" text="x" />
+      <Label layoutX="117.0" layoutY="84.0" text="y" />
+      <Label layoutX="184.0" layoutY="84.0" text="z" />
+      <ComboBox fx:id="comboBoxOperation" items="${viewModel.operationList}" layoutX="25.0" layoutY="236.0" prefHeight="25.0" prefWidth="190.0" />
+      <Label layoutX="25.0" layoutY="153.0" text="Result:" />
+      <Label fx:id="lbResult" text="${viewModel.resultField}" layoutX="69.0" layoutY="153.0" prefHeight="17.0" prefWidth="140.0" />
+      <Label fx:id="lbStatus" text="${viewModel.statusField}" layoutX="72.0" layoutY="206.0" prefHeight="17.0" prefWidth="140.0" />
+   </children>
+</AnchorPane>
diff --git a/code/vectors-distances-calculator/View/src/test/java/ru/unn/agile/vectorsdistancescalculator/view/FakeViewTests.java b/code/vectors-distances-calculator/View/src/test/java/ru/unn/agile/vectorsdistancescalculator/view/FakeViewTests.java
new file mode 100644
index 000000000..42261a264
--- /dev/null
+++ b/code/vectors-distances-calculator/View/src/test/java/ru/unn/agile/vectorsdistancescalculator/view/FakeViewTests.java
@@ -0,0 +1,13 @@
+package ru.unn.agile.vectorsdistancescalculator.view;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
+import static org.junit.Assert.fail;
+
+public class FakeViewTests {
+    @Ignore @Test
+    public void fakeTest() {
+        fail("No tests for view");
+    }
+}
diff --git a/code/vectors-distances-calculator/ViewModel/build.gradle b/code/vectors-distances-calculator/ViewModel/build.gradle
new file mode 100644
index 000000000..e80713db7
--- /dev/null
+++ b/code/vectors-distances-calculator/ViewModel/build.gradle
@@ -0,0 +1,12 @@
+plugins {
+  id 'org.openjfx.javafxplugin' version '0.0.8'
+}
+
+javafx {
+    version = "11.0.2"
+    modules = [ 'javafx.base' ]
+}
+
+dependencies {
+    compile project(':vectors-distances-calculator-Model')
+}
diff --git a/code/vectors-distances-calculator/ViewModel/src/main/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModel.java b/code/vectors-distances-calculator/ViewModel/src/main/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModel.java
new file mode 100644
index 000000000..fd497b7a1
--- /dev/null
+++ b/code/vectors-distances-calculator/ViewModel/src/main/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModel.java
@@ -0,0 +1,185 @@
+package ru.unn.agile.vectorsdistancescalculator.viewmodel;
+
+import javafx.beans.binding.BooleanBinding;
+import javafx.beans.property.*;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import ru.unn.agile.vectorsdistancescalculator.model.VectorsDistancesCalculator.Operation;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ViewModel {
+    private final StringProperty x1 = new SimpleStringProperty();
+    private final StringProperty y1 = new SimpleStringProperty();
+    private final StringProperty z1 = new SimpleStringProperty();
+    private final StringProperty x2 = new SimpleStringProperty();
+    private final StringProperty y2 = new SimpleStringProperty();
+    private final StringProperty z2 = new SimpleStringProperty();
+
+    private final ObjectProperty<ObservableList<Operation>> operationList =
+            new SimpleObjectProperty<>(FXCollections.observableArrayList(Operation.values()));
+    private final ObjectProperty<Operation> operation = new SimpleObjectProperty<>();
+    private final BooleanProperty calculationDisabledFlag = new SimpleBooleanProperty();
+
+    private final StringProperty resultField = new SimpleStringProperty();
+    private final StringProperty statusField = new SimpleStringProperty();
+
+    private final List<ValueChangeListener> valueChangedListeners = new ArrayList<>();
+
+    public ViewModel() {
+        x1.set("");
+        y1.set("");
+        z1.set("");
+        x2.set("");
+        y2.set("");
+        z2.set("");
+        operation.set(Operation.CALCULATE_L1_DISTANCE);
+        resultField.set("");
+        statusField.set(Status.WAITING.toString());
+
+        BooleanBinding couldCalculate = new BooleanBinding() {
+            {
+                super.bind(x1, y1, z1, x2, y2, z2);
+            }
+            @Override
+            protected boolean computeValue() {
+                return getInputStatus() == Status.READY;
+            }
+        };
+        calculationDisabledFlag.bind(couldCalculate.not());
+
+        final List<StringProperty> fields = new ArrayList<>() { {
+            add(x1);
+            add(y1);
+            add(z1);
+            add(x2);
+            add(y2);
+            add(z2);
+        } };
+
+        for (StringProperty field : fields) {
+            final ValueChangeListener listener = new ValueChangeListener();
+            field.addListener(listener);
+            valueChangedListeners.add(listener);
+        }
+    }
+
+    private Status getInputStatus() {
+        Status inputStatus = Status.READY;
+        if (x1.get().isEmpty() || y1.get().isEmpty()
+                || z1.get().isEmpty() || x2.get().isEmpty()
+                || y2.get().isEmpty() || z2.get().isEmpty()) {
+            inputStatus = Status.WAITING;
+        }
+        try {
+            if (!x1.get().isEmpty()) {
+                Double.parseDouble(x1.get());
+            }
+            if (!y1.get().isEmpty()) {
+                Double.parseDouble(y1.get());
+            }
+            if (!z1.get().isEmpty()) {
+                Double.parseDouble(z1.get());
+            }
+            if (!x2.get().isEmpty()) {
+                Double.parseDouble(x2.get());
+            }
+            if (!y2.get().isEmpty()) {
+                Double.parseDouble(y2.get());
+            }
+            if (!z2.get().isEmpty()) {
+                Double.parseDouble(z2.get());
+            }
+        } catch (NumberFormatException nfe) {
+            inputStatus = Status.BAD_FORMAT;
+        }
+
+        return inputStatus;
+    }
+
+    public StringProperty x1Property() {
+        return x1;
+    }
+    public StringProperty y1Property() {
+        return y1;
+    }
+    public StringProperty z1Property() {
+        return z1;
+    }
+    public StringProperty x2Property() {
+        return x2;
+    }
+    public StringProperty y2Property() {
+        return y2;
+    }
+    public StringProperty z2Property() {
+        return z2;
+    }
+    public ObjectProperty<Operation> operationProperty() {
+        return operation;
+    }
+    public StringProperty resultFieldProperty() {
+        return resultField;
+    }
+    public StringProperty statusFieldProperty() {
+        return statusField;
+    }
+    public BooleanProperty calculationDisabledFlagProperty() {
+        return calculationDisabledFlag;
+    }
+    public final ObservableList<Operation> getOperationList() {
+        return operationList.get();
+    }
+    public final boolean isCalculationDisabledFlag() {
+        return calculationDisabledFlag.get();
+    }
+    public final String getResultField() {
+        return resultField.get();
+    }
+    public final String getStatusField() {
+        return statusField.get();
+    }
+
+    public void calculate() {
+        if (calculationDisabledFlag.get()) {
+            return;
+        }
+        double x1d = Double.parseDouble(x1.get());
+        double y1d = Double.parseDouble(y1.get());
+        double z1d = Double.parseDouble(z1.get());
+        double x2d = Double.parseDouble(x2.get());
+        double y2d = Double.parseDouble(y2.get());
+        double z2d = Double.parseDouble(z2.get());
+        List<Double> x = new ArrayList<>(List.of(x1d, y1d, z1d));
+        List<Double> y = new ArrayList<>(List.of(x2d, y2d, z2d));
+
+        resultField.set(String.valueOf(operation.get().apply(x, y)));
+        statusField.set(Status.SUCCESS.toString());
+    }
+
+    private class ValueChangeListener implements ChangeListener<String> {
+        @Override
+        public void changed(final ObservableValue<? extends String> observable,
+                            final String oldValue, final String newValue) {
+            statusField.set(getInputStatus().toString());
+        }
+    }
+}
+
+enum Status {
+    WAITING("Please enter input data"),
+    READY("Press 'Calculate'"),
+    BAD_FORMAT("Bad format, please fix"),
+    SUCCESS("Success!");
+
+    private final String name;
+    Status(final String name) {
+        this.name = name;
+    }
+    public String toString() {
+        return name;
+    }
+}
diff --git a/code/vectors-distances-calculator/ViewModel/src/test/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModelTests.java b/code/vectors-distances-calculator/ViewModel/src/test/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModelTests.java
new file mode 100644
index 000000000..0efd5f096
--- /dev/null
+++ b/code/vectors-distances-calculator/ViewModel/src/test/java/ru/unn/agile/vectorsdistancescalculator/viewmodel/ViewModelTests.java
@@ -0,0 +1,171 @@
+package ru.unn.agile.vectorsdistancescalculator.viewmodel;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import ru.unn.agile.vectorsdistancescalculator.model.VectorsDistancesCalculator.Operation;
+
+import static org.junit.Assert.*;
+
+public class ViewModelTests {
+
+    private static final double EPS = 0.01;
+
+    private ViewModel viewModel;
+
+    @Before
+    public void setUp() {
+        viewModel = new ViewModel();
+    }
+
+    @After
+    public void tearDown() {
+        viewModel = null;
+    }
+
+    @Test
+    public void canSetDefaultValues() {
+        assertEquals("", viewModel.x1Property().get());
+        assertEquals("", viewModel.y1Property().get());
+        assertEquals("", viewModel.z1Property().get());
+        assertEquals("", viewModel.x2Property().get());
+        assertEquals("", viewModel.y2Property().get());
+        assertEquals("", viewModel.z2Property().get());
+        assertEquals(Operation.CALCULATE_L1_DISTANCE, viewModel.operationProperty().get());
+        assertEquals("", viewModel.resultFieldProperty().get());
+        assertEquals(Status.WAITING.toString(), viewModel.statusFieldProperty().get());
+    }
+
+    @Test
+    public void canReportBadFormat() {
+        viewModel.x1Property().set("@");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.statusFieldProperty().get());
+    }
+
+    @Test
+    public void statusIsWaitingIfNotEnoughCorrectData() {
+        viewModel.x1Property().set("2");
+        assertEquals(Status.WAITING.toString(), viewModel.statusFieldProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledByInit() {
+        assertTrue(viewModel.calculationDisabledFlagProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledWhenFormatIsBad() {
+        setPositiveInputVectors();
+        viewModel.x1Property().set("KABO");
+
+        assertTrue(viewModel.calculationDisabledFlagProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsDisabledIfNotAllFieldsFilled() {
+        viewModel.x1Property().setValue("1");
+        assertTrue(viewModel.calculationDisabledFlagProperty().get());
+    }
+
+    @Test
+    public void calculateButtonIsEnabledIfDataFilledCorrect() {
+        setMixedInputVectors();
+        assertFalse(viewModel.calculationDisabledFlagProperty().get());
+    }
+
+    @Test
+    public void canSetCalculateLInfDistanceOperation() {
+        viewModel.operationProperty().set(Operation.CALCULATE_LInf_DISTANCE);
+        assertEquals(Operation.CALCULATE_LInf_DISTANCE, viewModel.operationProperty().get());
+    }
+
+    @Test
+    public void calculateL1DistanceOperationsHasCorrectResult() {
+        setMixedInputVectors();
+        viewModel.calculate();
+        double expectedL1 = 27.0;
+        double actualL1 = Double.parseDouble(viewModel.resultFieldProperty().get());
+        assertEquals(expectedL1, actualL1, EPS);
+    }
+
+    @Test
+    public void calculateL2DistanceOperationsHasCorrectResult() {
+        setMixedInputVectors();
+        viewModel.operationProperty().set(Operation.CALCULATE_L2_DISTANCE);
+        viewModel.calculate();
+        double expectedL2 = 15.84;
+        double actualL2 = Double.parseDouble(viewModel.resultFieldProperty().get());
+        assertEquals(expectedL2, actualL2, EPS);
+    }
+
+    @Test
+    public void calculateL3DistanceOperationsHasCorrectResult() {
+        setMixedInputVectors();
+        viewModel.operationProperty().set(Operation.CALCULATE_L3_DISTANCE);
+        viewModel.calculate();
+        double expectedL3 = 13.39;
+        double actualL3 = Double.parseDouble(viewModel.resultFieldProperty().get());
+        assertEquals(expectedL3, actualL3, EPS);
+    }
+
+    @Test
+    public void calculateL4DistanceOperationsHasCorrectResult() {
+        setMixedInputVectors();
+        viewModel.operationProperty().set(Operation.CALCULATE_L4_DISTANCE);
+        viewModel.calculate();
+        double expectedL4 = 12.39;
+        double actualL4 = Double.parseDouble(viewModel.resultFieldProperty().get());
+        assertEquals(expectedL4, actualL4, EPS);
+    }
+
+    @Test
+    public void calculateLInfDistanceOperationsHasCorrectResult() {
+        setMixedInputVectors();
+        viewModel.operationProperty().set(Operation.CALCULATE_LInf_DISTANCE);
+        viewModel.calculate();
+        double expectedLInf = 11.0;
+        double actualLInf = Double.parseDouble(viewModel.resultFieldProperty().get());
+        assertEquals(expectedLInf, actualLInf, EPS);
+    }
+
+    @Test
+    public void canSetReadyMessage() {
+        setMixedInputVectors();
+        String expected = Status.READY.toString();
+        String actual = viewModel.statusFieldProperty().get();
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canSetSuccessMessage() {
+        setMixedInputVectors();
+        viewModel.calculate();
+        String expected = Status.SUCCESS.toString();
+        String actual = viewModel.statusFieldProperty().get();
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void canSetBadFormatMessage() {
+        viewModel.x1Property().set("@");
+        assertEquals(Status.BAD_FORMAT.toString(), viewModel.statusFieldProperty().get());
+    }
+
+    private void setPositiveInputVectors() {
+        viewModel.x1Property().set("2");
+        viewModel.y1Property().set("3");
+        viewModel.z1Property().set("4");
+        viewModel.x2Property().set("5");
+        viewModel.y2Property().set("6");
+        viewModel.z2Property().set("7");
+    }
+
+    private void setMixedInputVectors() {
+        viewModel.x1Property().set("-2");
+        viewModel.y1Property().set("3");
+        viewModel.z1Property().set("-4");
+        viewModel.x2Property().set("5");
+        viewModel.y2Property().set("-6");
+        viewModel.z2Property().set("7");
+    }
+}
diff --git a/settings.gradle b/settings.gradle
index 99a4b4863..576b401a2 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -56,21 +56,47 @@ include "code/temperature-converter/ViewModel"
 project(":code/temperature-converter/ViewModel").name = "temperature-converter-ViewModel"
 include "code/temperature-converter/View"
 project(":code/temperature-converter/View").name = "temperature-converter-View"
+include "code/temperature-converter/Infrastructure"
+project(":code/temperature-converter/Infrastructure").name = "temperature-converter-Infrastructure"
 // Власов Антон
-// Гречухин Никита
-include "code/fractioncalculator"
-project(":code/fractioncalculator").name = "fractioncalculator"
+include "code/prime-number/Model"
+project(":code/prime-number/Model").name = "prime-number-Model"
+include "code/prime-number/View"
+project(":code/prime-number/View").name = "prime-number-View"
+include "code/prime-number/ViewModel"
+project(":code/prime-number/ViewModel").name = "prime-number-ViewModel"
+// fractioncalculator
+include "code/fractioncalculator/model"
+project(":code/fractioncalculator/model").name = "fractioncalculator-model"
+include "code/fractioncalculator/view"
+project(":code/fractioncalculator/view").name = "fractioncalculator-view"
+include "code/fractioncalculator/viewmodel"
+project(":code/fractioncalculator/viewmodel").name = "fractioncalculator-viewmodel"
 // Гришин Дмитрий
+include "code/cross-sections/Model"
+project(":code/cross-sections/Model").name = "cross-sections-Model"
+include "code/cross-sections/ViewModel"
+project(":code/cross-sections/ViewModel").name = "cross-sections-ViewModel"
+include "code/cross-sections/View"
+project(":code/cross-sections/View").name = "cross-sections-View"
 // sorting
+include "code/sorting/Infrastructure"
+project(":code/sorting/Infrastructure").name = "sorting-Infrastructure"
 include "code/sorting/Model"
 project(":code/sorting/Model").name = "sorting-Model"
 include "code/sorting/View"
 project(":code/sorting/View").name = "sorting-View"
 include "code/sorting/ViewModel"
 project(":code/sorting/ViewModel").name = "sorting-ViewModel"
-// Кальянов Дмитрий
-include "code/string-calculator"
-project(":code/string-calculator").name = "string-calculator-Model"
+// string-calculator
+include "code/string-calculator/model"
+project(":code/string-calculator/model").name = "string-calculator-model"
+include "code/string-calculator/viewmodel"
+project(":code/string-calculator/viewmodel").name = "string-calculator-viewmodel"
+include "code/string-calculator/view"
+project(":code/string-calculator/view").name = "string-calculator-view"
+include "code/string-calculator/infrastructure"
+project(":code/string-calculator/infrastructure").name = "string-calculator-infrastructure"
 // Карев Борис
 include "code/length-converter/Model"
 project(":code/length-converter/Model").name = "length-converter-Model"
@@ -80,19 +106,46 @@ project(":code/length-converter/View").name = "length-converter-View"
 
 include "code/length-converter/ViewModel"
 project(":code/length-converter/ViewModel").name = "length-converter-ViewModel"
-// Кильдишев Максим
+
+include "code/length-converter/Infrastructure"
+project(":code/length-converter/Infrastructure").name = "length-converter-Infrastructure"
+// Figures Volume Calculator
 include "code/figures-volume-calculator"
 project(":code/figures-volume-calculator").name = "figures-volume-calculator-Model"
+// Vectors Distances Calculator
+include "code/vectors-distances-calculator/Model"
+project(":code/vectors-distances-calculator/Model").name = "vectors-distances-calculator-Model"
+include "code/vectors-distances-calculator/ViewModel"
+project(":code/vectors-distances-calculator/ViewModel").name = "vectors-distances-calculator-ViewModel"
+include "code/vectors-distances-calculator/View"
+project(":code/vectors-distances-calculator/View").name = "vectors-distances-calculator-View"
 // Киселева Ольга
+include "code/huffman/Model"
+project(":code/huffman/Model").name = "huffman-Model"
+include "code/huffman/View"
+project(":code/huffman/View").name = "huffman-View"
+include "code/huffman/ViewModel"
+project(":code/huffman/ViewModel").name = "huffman-ViewModel"
 // Конева Александра
 include "code/numbers-in-words"
 project(":code/numbers-in-words").name = "numbers-in-words-Model"
-// Коневский Виталий
-include "code/deposit-calculator"
-project(":code/deposit-calculator").name = "deposit-calculator-Model"
+
+// Deposit Calculator
+include "code/deposit-calculator/model"
+project(":code/deposit-calculator/model").name = "deposit-calculator-model"
+include "code/deposit-calculator/view"
+project(":code/deposit-calculator/view").name = "deposit-calculator-view"
+include "code/deposit-calculator/viewmodel"
+project(":code/deposit-calculator/viewmodel").name = "deposit-calculator-viewmodel"
+include "code/deposit-calculator/infrastructure"
+project(":code/deposit-calculator/infrastructure").name = "deposit-calculator-infrastructure"
 // Кочетова Дарья
-include "code/kochetova-dasha-lab1-matrix"
-project(":code/kochetova-dasha-lab1-matrix").name = "kochetova-dasha-lab1-matrix"
+include "code/matrix/Model"
+project(":code/matrix/Model").name = "matrix-model"
+include "code/matrix/view"
+project(":code/matrix/view").name = "matrix-view"
+include "code/matrix/viewmodel"
+project(":code/matrix/viewmodel").name = "matrix-viewmodel"
 // Красильников Михаил
 include "code/salary-calculator"
 project(":code/salary-calculator").name = "salary-calculator"
@@ -105,11 +158,19 @@ include "code/complex-number-calculator/View"
 project(":code/complex-number-calculator/View").name = "complex-number-calculator-View"
 include "code/complex-number-calculator/ViewModel"
 project(":code/complex-number-calculator/ViewModel").name = "complex-number-calculator-ViewModel"
-// Купцова Алеся
+// Vector Operations
+include "code/lab1-tdd-vector_operations"
+project(":code/lab1-tdd-vector_operations").name = "lab1-tdd-vector_operations-Model"
 // Кучков Иван
-// Лапин Артем
-include "code/quadratic-equasion"
-project(":code/quadratic-equasion").name = "quadratic-equasion-Model"
+// quadratic equation
+include "code/quadratic-equation/Model"
+project(":code/quadratic-equation/Model").name = "quadratic-equation-Model"
+include "code/quadratic-equation/ViewModel"
+project(":code/quadratic-equation/ViewModel").name = "quadratic-equation-ViewModel"
+include "code/quadratic-equation/View"
+project(":code/quadratic-equation/View").name = "quadratic-equation-View"
+include "code/quadratic-equation/Infrastructure"
+project(":code/quadratic-equation/Infrastructure").name = "quadratic-equation-Infrastructure"
 // Triangle
 include "code/triangle/Model"
 project(":code/triangle/Model").name = "triangle-Model"
@@ -117,48 +178,112 @@ include "code/triangle/ViewModel"
 project(":code/triangle/ViewModel").name = "triangle-ViewModel"
 include "code/triangle/View"
 project(":code/triangle/View").name = "triangle-View"
-// Миронова Анна
-include "code/statistics-calculation"
-project(":code/statistics-calculation").name = "statistics-calculation-Model"
-// Митрохин Никита
-include "code/queue"
-project(":code/queue").name = "queue-Model"
-// Нестеров Александр
+include "code/triangle/Infrastructure"
+project(":code/triangle/Infrastructure").name = "triangle-Infrastructure"
+// statistics-calculation
+include "code/statistics-calculation/Model"
+project(":code/statistics-calculation/Model").name = "statistics-calculation-Model"
+include "code/statistics-calculation/ViewModel"
+project(":code/statistics-calculation/ViewModel").name = "statistics-calculation-ViewModel"
+include "code/statistics-calculation/View"
+project(":code/statistics-calculation/View").name = "statistics-calculation-View"
+include "code/statistics-calculation/Infrastructure"
+project(":code/statistics-calculation/Infrastructure").name = "statistics-calculation-Infrastructure"
+// Queue
+include "code/queue/Model"
+project(":code/queue/Model").name = "queue-Model"
+include "code/queue/View"
+project(":code/queue/View").name = "queue-View"
+include "code/queue/ViewModel"
+project(":code/queue/ViewModel").name = "queue-ViewModel"
+// Нестеров Александр - Bit-array
+include "code/bit-array/Model"
+project(":code/bit-array/Model").name = "bit-array-Model"
+include "code/bit-array/View"
+project(":code/bit-array/View").name = "bit-array-View"
+include "code/bit-array/ViewModel"
+project(":code/bit-array/ViewModel").name = "bit-array-ViewModel"
 // Нечесанов Владимир
-// Овчарук Олег
-include "code/polynomialcalculator"
-project(":code/polynomialcalculator").name = "polynomialcalculator"
-// Петров Кирилл
+// Петров Кирилл - polynomialcalculator
+include "code/polynomial-calculator/Model"
+project(":code/polynomial-calculator/Model").name = "polynomial-calculator-model"
+include "code/polynomial-calculator/View"
+project(":code/polynomial-calculator/View").name = "polynomial-calculator-view"
+include "code/polynomial-calculator/ViewModel"
+project(":code/polynomial-calculator/ViewModel").name = "polynomial-calculator-viewmodel"
+// Петров Кирил
 include "code/interpolationsearch"
 project(":code/interpolationsearch").name = "interpolationsearch"
 // Повеликин Ростислав
 include "code/red-black-tree"
 project(":code/red-black-tree").name = "red-black-tree-Model"
 // Попков Кирилл
+include "code/range/Model"
+project(":code/range/Model").name = "range-Model"
+include "code/range/View"
+project(":code/range/View").name = "range-View"
+include "code/range/ViewModel"
+project(":code/range/ViewModel").name = "range-ViewModel"
 // Разин Вячеслав
-// Сизова Ксения
-include "code/binary-search"
-project(":code/binary-search").name = "binary-search-Model"
-// Симонян Вагинак
-include "code/students-performance"
-project(":code/students-performance").name = "students-performance-Model"
-// Смирнов Андрей
-include "code/dijkstra-algorithm"
-project(":code/dijkstra-algorithm").name = "dijkstra-algorithm-Model"
+// binary-search
+include "code/binary-search/Model"
+project(":code/binary-search/Model").name = "binary-search-Model"
+include "code/binary-search/View"
+project(":code/binary-search/View").name = "binary-search-View"
+include "code/binary-search/ViewModel"
+project(":code/binary-search/ViewModel").name = "binary-search-ViewModel"
+include "code/binary-search/Infrastructure"
+project(":code/binary-search/Infrastructure").name = "binary-search-Infrastructure"
+// Students Performance
+include "code/students-performance/model"
+project(":code/students-performance/model").name = "students-performance-model"
+include "code/students-performance/view"
+project(":code/students-performance/view").name = "students-performance-view"
+include "code/students-performance/viewmodel"
+project(":code/students-performance/viewmodel").name = "students-performance-viewmodel"
+// Dijkstra algorithm
+include "code/dijkstra-algorithm/Model"
+project(":code/dijkstra-algorithm/Model").name = "dijkstra-algorithm-Model"
+include "code/dijkstra-algorithm/View"
+project(":code/dijkstra-algorithm/View").name = "dijkstra-algorithm-View"
+include "code/dijkstra-algorithm/ViewModel"
+project(":code/dijkstra-algorithm/ViewModel").name = "dijkstra-algorithm-ViewModel"
 // Смирнов Егор
 include "code/priority-queue"
 project(":code/priority-queue").name = "priority-queue"
 // Тамилина Дарья
-// Тягунов Владимир
-include "code/polygon-area"
-project(":code/polygon-area").name = "polygon-area-Model"
+// polygon-area
+include "code/polygon-area/Model"
+project(":code/polygon-area/Model").name = "polygon-area-Model"
+include "code/polygon-area/View"
+project(":code/polygon-area/View").name = "polygon-area-View"
+include "code/polygon-area/ViewModel"
+project(":code/polygon-area/ViewModel").name = "polygon-area-ViewModel"
 // Федорова Дарья
-// Федотов Андрей
-include "code/datastructure-set"
-project(":code/datastructure-set").name = "datastructure-set"
-// Широких Виолетта
-include "code/lab1-tdd-arabic-roman-arabicromanconverter"
-project(":code/lab1-tdd-arabic-roman-arabicromanconverter").name = "lab1-tdd-arabic-roman-arabicromanconverter-Model"
+include "code/currency-converter/Model"
+project(":code/currency-converter/Model").name = "currency-converter-Model"
+include "code/currency-converter/View"
+project(":code/currency-converter/View").name = "currency-converter-View"
+include "code/currency-converter/ViewModel"
+project(":code/currency-converter/ViewModel").name = "currency-converter-ViewModel"
+// datastructure-set
+include "code/datastructure-set/Model"
+project(":code/datastructure-set/Model").name = "datastructure-set-Model"
+include "code/datastructure-set/View"
+project(":code/datastructure-set/View").name = "datastructure-set-View"
+include "code/datastructure-set/ViewModel"
+project(":code/datastructure-set/ViewModel").name = "datastructure-set-ViewModel"
+include "code/datastructure-set/Infrastructure"
+project(":code/datastructure-set/Infrastructure").name = "datastructure-set-Infrastructure"
+// Arabic Roman Converter
+include "code/arabic-roman-converter/Model"
+project(":code/arabic-roman-converter/Model").name = "arabic-roman-converter-Model"
+include "code/arabic-roman-converter/View"
+project(":code/arabic-roman-converter/View").name = "arabic-roman-converter-View"
+include "code/arabic-roman-converter/ViewModel"
+project(":code/arabic-roman-converter/ViewModel").name = "arabic-roman-converter-ViewModel"
+include "code/arabic-roman-converter/Infrastructure"
+project(":code/arabic-roman-converter/Infrastructure").name = "arabic-roman-converter-Infrastructure"
 // Шульпин Степан
 include "code/mortgage-calculator/Model"
 project(":code/mortgage-calculator/Model").name = "mortgage-calculator-Model"
@@ -168,9 +293,22 @@ project(":code/mortgage-calculator/View").name = "mortgage-calculator-View"
 
 include "code/mortgage-calculator/ViewModel"
 project(":code/mortgage-calculator/ViewModel").name = "mortgage-calculator-ViewModel"
+
+include "code/mortgage-calculator/Infrastructure"
+project(":code/mortgage-calculator/Infrastructure").name = "mortgage-calculator-Infrastructure"
 // Шумихин Сергей
-include "code/binary-tree"
-project(":code/binary-tree").name = "binary-tree-Model"
-// Юферев Кирилл
-include "code/stack"
-project(":code/stack").name = "stack-Model"
\ No newline at end of file
+include "code/binary-tree/Model"
+project(":code/binary-tree/Model").name = "binary-tree-Model"
+include "code/binary-tree/View"
+project(":code/binary-tree/View").name = "binary-tree-View"
+include "code/binary-tree/ViewModel"
+project(":code/binary-tree/ViewModel").name = "binary-tree-ViewModel"
+// Stack
+include "code/stack/Model"
+project(":code/stack/Model").name = "stack-Model"
+include "code/stack/View"
+project(":code/stack/View").name = "stack-View"
+include "code/stack/ViewModel"
+project(":code/stack/ViewModel").name = "stack-ViewModel"
+include "code/stack/Infrastructure"
+project(":code/stack/Infrastructure").name = "stack-Infrastructure"
