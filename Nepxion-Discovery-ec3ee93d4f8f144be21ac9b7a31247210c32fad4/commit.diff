diff --git a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/AbstractStrategyCondition.java b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/AbstractStrategyCondition.java
index 1a427818b..f4e0f59ea 100644
--- a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/AbstractStrategyCondition.java
+++ b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/AbstractStrategyCondition.java
@@ -10,6 +10,7 @@
  */
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.expression.TypeComparator;
 
 import com.nepxion.discovery.plugin.strategy.context.StrategyContextHolder;
 
@@ -17,7 +18,14 @@
     @Autowired
     protected StrategyContextHolder strategyContextHolder;
 
+    @Autowired
+    protected TypeComparator strategyTypeComparator;
+
     public StrategyContextHolder getStrategyContextHolder() {
         return strategyContextHolder;
     }
+
+    public TypeComparator getStrategyTypeComparator() {
+        return strategyTypeComparator;
+    }
 }
\ No newline at end of file
diff --git a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/DefaultStrategyTypeComparor.java b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/DefaultStrategyTypeComparor.java
new file mode 100644
index 000000000..592eff938
--- /dev/null
+++ b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/DefaultStrategyTypeComparor.java
@@ -0,0 +1,36 @@
+package com.nepxion.discovery.plugin.strategy.condition;
+
+/**
+ * <p>Title: Nepxion Discovery</p>
+ * <p>Description: Nepxion Discovery</p>
+ * <p>Copyright: Copyright (c) 2017-2050</p>
+ * <p>Company: Nepxion</p>
+ * @author Haojun Ren
+ * @version 1.0
+ */
+
+import java.math.BigDecimal;
+
+import org.springframework.expression.spel.SpelEvaluationException;
+import org.springframework.expression.spel.support.StandardTypeComparator;
+import org.springframework.lang.Nullable;
+
+public class DefaultStrategyTypeComparor extends StandardTypeComparator {
+    @Override
+    public int compare(@Nullable Object left, @Nullable Object right) throws SpelEvaluationException {
+        if (left == null) {
+            return 0;
+        }
+
+        try {
+            BigDecimal leftValue = new BigDecimal(left.toString());
+            BigDecimal rightValue = new BigDecimal(right.toString());
+
+            return super.compare(leftValue, rightValue);
+        } catch (Exception e) {
+
+        }
+
+        return super.compare(left, right);
+    }
+}
\ No newline at end of file
diff --git a/discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/util/SpelUtil.java b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyUtil.java
similarity index 72%
rename from discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/util/SpelUtil.java
rename to discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyUtil.java
index 0d1efc9e7..8ac5e8ce1 100644
--- a/discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/util/SpelUtil.java
+++ b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyUtil.java
@@ -1,4 +1,4 @@
-package com.nepxion.discovery.plugin.framework.util;
+package com.nepxion.discovery.plugin.strategy.condition;
 
 /**
  * <p>Title: Nepxion Discovery</p>
@@ -12,21 +12,24 @@
 import java.util.Map;
 
 import org.springframework.expression.ExpressionParser;
+import org.springframework.expression.TypeComparator;
 import org.springframework.expression.spel.standard.SpelExpressionParser;
 import org.springframework.expression.spel.support.StandardEvaluationContext;
 
-public class SpelUtil {
+public class ExpressionStrategyUtil {
     private static final ExpressionParser EXPRESSION_PARSER = new SpelExpressionParser();
 
-    public static boolean eval(String expression, String mapKey, Map<String, String> map) {
+    public static boolean eval(String expression, String key, Map<String, String> map, TypeComparator typeComparator) {
         StandardEvaluationContext context = new StandardEvaluationContext();
-        context.setVariable(mapKey, map);
+        context.setTypeComparator(typeComparator);
+        context.setVariable(key, map);
 
         return eval(expression, context);
     }
 
-    public static boolean eval(String expression, Map<String, Map<String, String>> map) {
+    public static boolean eval(String expression, Map<String, Map<String, String>> map, TypeComparator typeComparator) {
         StandardEvaluationContext context = new StandardEvaluationContext();
+        context.setTypeComparator(typeComparator);
         for (Map.Entry<String, Map<String, String>> entry : map.entrySet()) {
             context.setVariable(entry.getKey(), entry.getValue());
         }
diff --git a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/HeaderExpressionStrategyCondition.java b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/HeaderExpressionStrategyCondition.java
index 685ce7863..897ff2188 100644
--- a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/HeaderExpressionStrategyCondition.java
+++ b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/HeaderExpressionStrategyCondition.java
@@ -18,7 +18,6 @@
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.entity.StrategyConditionEntity;
-import com.nepxion.discovery.plugin.framework.util.SpelUtil;
 
 public class HeaderExpressionStrategyCondition extends AbstractStrategyCondition {
     private Pattern pattern = Pattern.compile(DiscoveryConstant.EXPRESSION_REGEX);
@@ -28,7 +27,7 @@ public boolean isTriggered(StrategyConditionEntity strategyConditionEntity) {
         String conditionHeader = strategyConditionEntity.getConditionHeader();
         Map<String, String> headerMap = createHeaderMap(conditionHeader);
 
-        return SpelUtil.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap);
+        return ExpressionStrategyUtil.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
     }
 
     private Map<String, String> createHeaderMap(String conditionHeader) {
@@ -46,4 +45,8 @@ public boolean isTriggered(StrategyConditionEntity strategyConditionEntity) {
 
         return headerMap;
     }
+
+    public boolean eval(String conditionHeader, Map<String, String> headerMap) {
+        return ExpressionStrategyUtil.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
+    }
 }
\ No newline at end of file
diff --git a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/configuration/StrategyAutoConfiguration.java b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/configuration/StrategyAutoConfiguration.java
index 764ba0cfa..7a2c3ab18 100644
--- a/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/configuration/StrategyAutoConfiguration.java
+++ b/discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/configuration/StrategyAutoConfiguration.java
@@ -14,7 +14,9 @@
 import org.springframework.cloud.netflix.ribbon.RibbonClients;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.expression.TypeComparator;
 
+import com.nepxion.discovery.plugin.strategy.condition.DefaultStrategyTypeComparor;
 import com.nepxion.discovery.plugin.strategy.condition.HeaderExpressionStrategyCondition;
 import com.nepxion.discovery.plugin.strategy.condition.StrategyCondition;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
@@ -61,6 +63,12 @@ public StrategyWrapper strategyWrapper() {
         return new StrategyWrapper();
     }
 
+    @Bean
+    @ConditionalOnMissingBean
+    public TypeComparator strategyTypeComparator() {
+        return new DefaultStrategyTypeComparor();
+    }
+
     @Bean
     @ConditionalOnMissingBean
     public StrategyCondition strategyCondition() {
diff --git a/discovery-plugin-framework/src/test/java/com/nepxion/discovery/plugin/framework/loadbalance/SpelTest.java b/discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
similarity index 73%
rename from discovery-plugin-framework/src/test/java/com/nepxion/discovery/plugin/framework/loadbalance/SpelTest.java
rename to discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
index f5bf4ff3f..26ec9bd8c 100644
--- a/discovery-plugin-framework/src/test/java/com/nepxion/discovery/plugin/framework/loadbalance/SpelTest.java
+++ b/discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
@@ -1,4 +1,4 @@
-package com.nepxion.discovery.plugin.framework.loadbalance;
+package com.nepxion.discovery.plugin.strategy.condition;
 
 /**
  * <p>Title: Nepxion Discovery</p>
@@ -19,9 +19,8 @@
 import org.apache.commons.lang3.StringUtils;
 
 import com.nepxion.discovery.common.util.StringUtil;
-import com.nepxion.discovery.plugin.framework.util.SpelUtil;
 
-public class SpelTest {
+public class ExpressionStrategyTest {
     public static void main(String[] args) {
         System.out.println(test1());
         System.out.println(test2());
@@ -29,24 +28,28 @@ public static void main(String[] args) {
     }
 
     private static boolean test1() {
+        // String expression = "#H['a'] != 'x' || #H['b'] != 'y'";
         // String expression = "#H['a'] == '123' && #H['b'] == '456'";
         // String expression = "#H['a'] == '123' || #H['b'] == '456'";
         // String expression = "#H['a'] >= '123' && #H['b'] <= '456'";
         // String expression = "#H['a'] >= '123' || #H['b'] <= '456'";
-        String expression = "#H['a'] != '123' || #H['b'] != '456'";
+        // String expression = "#H['a'] != '123' || #H['b'] != '456'";
+        String expression = "#H['a'] < '2' && #H['b'] == 'y'";
 
         Map<String, String> headerMap = new HashMap<String, String>();
-        headerMap.put("a", "123");
-        headerMap.put("b", "456");
+        // headerMap.put("a", "123");
+        // headerMap.put("b", "456");
+        headerMap.put("a", "1.2333");
+        headerMap.put("b", "y");
 
-        return SpelUtil.eval(expression, "H", headerMap);
+        return ExpressionStrategyUtil.eval(expression, "H", headerMap, new DefaultStrategyTypeComparor());
     }
 
     private static List<String> test2() {
         String regex = "\\#H\\['\\S+'\\]";
         Pattern pattern = Pattern.compile(regex);
 
-        String expression = "#H['a-A'] != '123' || #H['b//SS'] != '456' && #H['C**44!!66'] = 123";
+        String expression = "#H['a-A'] != '123' || #H['b//SS'] != '456' && #H['C**44!!66'] == '123'";
         Matcher matcher = pattern.matcher(expression);
 
         List<String> list = new ArrayList<String>();
@@ -60,7 +63,7 @@ private static boolean test1() {
     }
 
     private static int test3() {
-        String expression = "#H['a-A'] != '123' || #H['b//SS'] != '456' && #H['C**44!!66'] = 123";
+        String expression = "#H['a-A'] != '123' || #H['b//SS'] != '456' && #H['C**44!!66'] == '123'";
         String key = "#H['";
 
         return StringUtil.count(expression, key);
