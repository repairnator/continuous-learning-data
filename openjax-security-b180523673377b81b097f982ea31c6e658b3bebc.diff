diff --git a/nacl/src/main/java/org/openjax/security/nacl/TweetNacl.java b/nacl/src/main/java/org/openjax/security/nacl/TweetNacl.java
index 600cfef..be7a9fd 100644
--- a/nacl/src/main/java/org/openjax/security/nacl/TweetNacl.java
+++ b/nacl/src/main/java/org/openjax/security/nacl/TweetNacl.java
@@ -750,19 +750,19 @@ private static void core(final byte[] out, final byte[] in, final byte[] k, fina
       y[i] = x[i];
 
     for (i = 0; i < 20; ++i) {
-      for (j = 0; j < 4; j++) {
-        for (m = 0; m < 4; m++)
+      for (j = 0; j < 4; ++j) {
+        for (m = 0; m < 4; ++m)
           t[m] = x[(5 * j + 4 * m) % 16];
 
         t[1] ^= L32(t[0] + t[3], 7);
         t[2] ^= L32(t[1] + t[0], 9);
         t[3] ^= L32(t[2] + t[1], 13);
         t[0] ^= L32(t[3] + t[2], 18);
-        for (m = 0; m < 4; m++)
+        for (m = 0; m < 4; ++m)
           w[4 * j + (j + m) % 4] = t[m];
       }
 
-      for (m = 0; m < 16; m++)
+      for (m = 0; m < 16; ++m)
         x[m] = w[m];
     }
 
@@ -1028,7 +1028,7 @@ private static void M(final long[] o, final int ooff, final int olen, final long
       t[i] = 0;
 
     for (i = 0; i < 16; ++i)
-      for (j = 0; j < 16; j++)
+      for (j = 0; j < 16; ++j)
         t[i + j] += a[i + aoff] * b[j + boff];
 
     for (i = 0; i < 15; ++i)
@@ -1048,7 +1048,7 @@ private static void S(final long[] o, final int ooff, final int olen, final long
   private static void inv25519(final long[] o, final int ooff, final int olen, final long[] i, final int ioff, final int ilen) {
     final long[] c = new long[16];
     int a;
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       c[a] = i[a + ioff];
 
     for (a = 253; a >= 0; --a) {
@@ -1057,7 +1057,7 @@ private static void inv25519(final long[] o, final int ooff, final int olen, fin
         M(c, 0, c.length, c, 0, c.length, i, ioff, ilen);
     }
 
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       o[a + ooff] = c[a];
   }
 
@@ -1377,7 +1377,7 @@ public static int cryptoSign(final byte[] sm, final long dummy /*smlen not used*
       x[i] = r[i] & 0xff;
 
     for (i = 0; i < 32; ++i)
-      for (int j = 0; j < 32; j++)
+      for (int j = 0; j < 32; ++j)
         x[i + j] += (h[i] & 0xff) * (long)(d[j] & 0xff);
 
     modL(sm, 32, sm.length - 32, x);
diff --git a/nacl/src/main/java/org/openjax/security/nacl/TweetNaclFast.java b/nacl/src/main/java/org/openjax/security/nacl/TweetNaclFast.java
index e9a1eea..e83d536 100644
--- a/nacl/src/main/java/org/openjax/security/nacl/TweetNaclFast.java
+++ b/nacl/src/main/java/org/openjax/security/nacl/TweetNaclFast.java
@@ -1353,7 +1353,7 @@ private static void pack25519(final byte[] o, final long[] n, final int noff) {
     car25519(t);
     car25519(t);
     car25519(t);
-    for (j = 0; j < 2; j++) {
+    for (j = 0; j < 2; ++j) {
       m[0] = t[0] - 0xffed;
       for (i = 1; i < 15; ++i) {
         m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
@@ -1851,7 +1851,7 @@ private static void S(final long[] o, final int ooff, final long[] a, final int
   private static void inv25519(final long[] o, final int ooff, final long[] i, final int ioff) {
     final long[] c = new long[16];
     int a;
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       c[a] = i[a + ioff];
 
     for (a = 253; a >= 0; --a) {
@@ -1860,14 +1860,14 @@ private static void inv25519(final long[] o, final int ooff, final long[] i, fin
         M(c, 0, c, 0, i, ioff);
     }
 
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       o[a + ooff] = c[a];
   }
 
   private static void pow2523(final long[] o, final long[] i) {
     final long[] c = new long[16];
     int a;
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       c[a] = i[a];
 
     for (a = 250; a >= 0; --a) {
@@ -1876,7 +1876,7 @@ private static void pow2523(final long[] o, final long[] i) {
         M(c, 0, c, 0, i, 0);
     }
 
-    for (a = 0; a < 16; a++)
+    for (a = 0; a < 16; ++a)
       o[a] = c[a];
   }
 
@@ -2119,13 +2119,13 @@ private static void modL(final byte[] r, final int roff, final long[] x) {
     }
     carry = 0;
 
-    for (j = 0; j < 32; j++) {
+    for (j = 0; j < 32; ++j) {
       x[j] += carry - (x[31] >> 4) * L[j];
       carry = x[j] >> 8;
       x[j] &= 255;
     }
 
-    for (j = 0; j < 32; j++)
+    for (j = 0; j < 32; ++j)
       x[j] -= carry * L[j];
 
     for (i = 0; i < 32; ++i) {
@@ -2186,7 +2186,7 @@ public static int cryptoSign(final byte[] sm, final long dummy /*smlen not used*
       x[i] = r[i] & 0xff;
 
     for (i = 0; i < 32; ++i)
-      for (int j = 0; j < 32; j++)
+      for (int j = 0; j < 32; ++j)
         x[i + j] += (h[i] & 0xff) * (long)(d[j] & 0xff);
 
     modL(sm, 32, x);
