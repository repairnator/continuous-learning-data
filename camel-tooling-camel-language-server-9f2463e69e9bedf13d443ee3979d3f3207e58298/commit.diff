diff --git a/src/main/java/com/github/cameltooling/lsp/internal/CamelTextDocumentService.java b/src/main/java/com/github/cameltooling/lsp/internal/CamelTextDocumentService.java
index 34481ff..77be3be 100644
--- a/src/main/java/com/github/cameltooling/lsp/internal/CamelTextDocumentService.java
+++ b/src/main/java/com/github/cameltooling/lsp/internal/CamelTextDocumentService.java
@@ -16,6 +16,7 @@
  */
 package com.github.cameltooling.lsp.internal;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -64,6 +65,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.github.cameltooling.lsp.internal.codeactions.InvalidEnumQuickfix;
 import com.github.cameltooling.lsp.internal.codeactions.UnknownPropertyQuickfix;
 import com.github.cameltooling.lsp.internal.completion.CamelEndpointCompletionProcessor;
 import com.github.cameltooling.lsp.internal.completion.CamelPropertiesCompletionProcessor;
@@ -175,7 +177,12 @@ public void updateCatalog(String camelVersion, List<Map<?,?>> extraComponents) {
 		LOGGER.info("codeAction: {}", params.getTextDocument());
 		CodeActionContext context = params.getContext();
 		if (context != null && (context.getOnly() == null || context.getOnly().contains(CodeActionKind.QuickFix))) {
-			return new UnknownPropertyQuickfix(this).apply(params);
+			return CompletableFuture.supplyAsync(() -> {
+				List<Either<Command, CodeAction>> allQuickfixes = new ArrayList<>();
+				allQuickfixes.addAll(new UnknownPropertyQuickfix(this).apply(params));
+				allQuickfixes.addAll(new InvalidEnumQuickfix(this).apply(params));
+				return allQuickfixes;
+			});
 		} else {
 			return CompletableFuture.completedFuture(Collections.emptyList());
 		}
diff --git a/src/main/java/com/github/cameltooling/lsp/internal/codeactions/AbstractQuickfix.java b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/AbstractQuickfix.java
new file mode 100644
index 0000000..f2dde8d
--- /dev/null
+++ b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/AbstractQuickfix.java
@@ -0,0 +1,103 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.cameltooling.lsp.internal.codeactions;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
+import java.util.stream.Collectors;
+
+import org.apache.camel.catalog.CamelCatalog;
+import org.apache.commons.text.similarity.LevenshteinDistance;
+import org.eclipse.lsp4j.CodeAction;
+import org.eclipse.lsp4j.CodeActionKind;
+import org.eclipse.lsp4j.CodeActionParams;
+import org.eclipse.lsp4j.Command;
+import org.eclipse.lsp4j.Diagnostic;
+import org.eclipse.lsp4j.Position;
+import org.eclipse.lsp4j.Range;
+import org.eclipse.lsp4j.TextDocumentItem;
+import org.eclipse.lsp4j.TextEdit;
+import org.eclipse.lsp4j.WorkspaceEdit;
+import org.eclipse.lsp4j.jsonrpc.messages.Either;
+
+import com.github.cameltooling.lsp.internal.CamelTextDocumentService;
+import com.github.cameltooling.lsp.internal.parser.ParserFileHelperUtil;
+
+public abstract class AbstractQuickfix {
+	
+	protected CamelTextDocumentService camelTextDocumentService;
+	
+	protected AbstractQuickfix(CamelTextDocumentService camelTextDocumentService) {
+		this.camelTextDocumentService = camelTextDocumentService;
+	}
+	
+	public List<Either<Command, CodeAction>> apply(CodeActionParams params) {
+		TextDocumentItem openedDocument = camelTextDocumentService.getOpenedDocument(params.getTextDocument().getUri());
+		List<Diagnostic> diagnostics = params.getContext().getDiagnostics();
+		List<Either<Command, CodeAction>> res = new ArrayList<>();
+		for(Diagnostic diagnostic : diagnostics) {
+			if(getDiagnosticId().equals(diagnostic.getCode())) {
+				CharSequence currentValueInError = retrieveCurrentErrorValue(openedDocument, diagnostic);
+				if(currentValueInError != null) {
+					List<String> possibleProperties = retrievePossibleValues(openedDocument, camelTextDocumentService.getCamelCatalog(), diagnostic.getRange().getStart());
+					int distanceThreshold = Math.round(currentValueInError.length() * 0.4f);
+					LevenshteinDistance levenshteinDistance = new LevenshteinDistance(distanceThreshold);
+					List<String> mostProbableProperties = possibleProperties.stream()
+							.filter(possibleProperty -> {
+								return levenshteinDistance.apply(possibleProperty, currentValueInError) != -1;
+							})
+							.collect(Collectors.toList());
+					for (String mostProbableProperty : mostProbableProperties) {
+						res.add(Either.forRight(createCodeAction(params, diagnostic, mostProbableProperty)));
+					}
+				}
+			}
+		}
+		return res;
+	}
+
+	protected String retrieveCurrentErrorValue(TextDocumentItem openedDocument, Diagnostic diagnostic) {
+		Range diagnosticRange = diagnostic.getRange();
+		String line = new ParserFileHelperUtil().getLine(openedDocument, diagnosticRange.getStart().getLine());
+		int endCharacter = diagnosticRange.getEnd().getCharacter();
+		if (line.length() > endCharacter) {
+			return line.substring(diagnosticRange.getStart().getCharacter(), endCharacter);
+		} else {
+			return null;
+		}
+	}
+	
+	protected CodeAction createCodeAction(CodeActionParams params, Diagnostic diagnostic, String possibleProperty) {
+		CodeAction codeAction = new CodeAction("Did you mean "+possibleProperty + "?");
+		codeAction.setDiagnostics(Collections.singletonList(diagnostic));
+		codeAction.setKind(CodeActionKind.QuickFix);
+		Map<String, List<TextEdit>> changes = new HashMap<>();
+		TextEdit textEdit = new TextEdit(diagnostic.getRange(), possibleProperty);
+		changes.put(params.getTextDocument().getUri(), Arrays.asList(textEdit));
+		codeAction.setEdit(new WorkspaceEdit(changes));
+		return codeAction;
+	}
+	
+	protected abstract List<String> retrievePossibleValues(TextDocumentItem textDocumentItem, CompletableFuture<CamelCatalog> camelCatalog, Position position);
+	protected abstract String getDiagnosticId();
+	
+}
diff --git a/src/main/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfix.java b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfix.java
new file mode 100644
index 0000000..19fd6c7
--- /dev/null
+++ b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfix.java
@@ -0,0 +1,67 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.cameltooling.lsp.internal.codeactions;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+import java.util.stream.Collectors;
+
+import org.apache.camel.catalog.CamelCatalog;
+import org.eclipse.lsp4j.CompletionItem;
+import org.eclipse.lsp4j.Position;
+import org.eclipse.lsp4j.TextDocumentItem;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.github.cameltooling.lsp.internal.CamelTextDocumentService;
+import com.github.cameltooling.lsp.internal.completion.CamelEndpointCompletionProcessor;
+import com.github.cameltooling.lsp.internal.diagnostic.DiagnosticService;
+
+public class InvalidEnumQuickfix extends AbstractQuickfix {
+	
+	private static final Logger LOGGER = LoggerFactory.getLogger(InvalidEnumQuickfix.class);
+
+	public InvalidEnumQuickfix(CamelTextDocumentService camelTextDocumentService) {
+		super(camelTextDocumentService);
+	}
+
+	@Override
+	protected List<String> retrievePossibleValues(TextDocumentItem textDocumentItem, CompletableFuture<CamelCatalog> camelCatalog, Position position) {
+		try {
+			return new CamelEndpointCompletionProcessor(textDocumentItem, camelCatalog)
+					.getCompletions(position)
+					.thenApply(completionItems -> completionItems.stream().map(CompletionItem::getLabel).collect(Collectors.toList()))
+					.get();
+		} catch (InterruptedException e) {
+			LOGGER.error("Interruption while computing possible properties for quickfix", e);
+			Thread.currentThread().interrupt();
+			return Collections.emptyList();
+		} catch (ExecutionException e) {
+			LOGGER.error("Exception while computing possible properties for quickfix", e);
+			return Collections.emptyList();
+		}
+	}
+
+	@Override
+	protected String getDiagnosticId() {
+		return DiagnosticService.ERROR_CODE_INVALID_ENUM;
+	}
+
+
+}
diff --git a/src/main/java/com/github/cameltooling/lsp/internal/codeactions/UnknownPropertyQuickfix.java b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/UnknownPropertyQuickfix.java
index 8b0765c..3342b36 100644
--- a/src/main/java/com/github/cameltooling/lsp/internal/codeactions/UnknownPropertyQuickfix.java
+++ b/src/main/java/com/github/cameltooling/lsp/internal/codeactions/UnknownPropertyQuickfix.java
@@ -16,96 +16,36 @@
  */
 package com.github.cameltooling.lsp.internal.codeactions;
 
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
 
 import org.apache.camel.catalog.CamelCatalog;
-import org.apache.commons.text.similarity.LevenshteinDistance;
-import org.eclipse.lsp4j.CodeAction;
-import org.eclipse.lsp4j.CodeActionKind;
-import org.eclipse.lsp4j.CodeActionParams;
-import org.eclipse.lsp4j.Command;
 import org.eclipse.lsp4j.CompletionItem;
-import org.eclipse.lsp4j.Diagnostic;
 import org.eclipse.lsp4j.Position;
-import org.eclipse.lsp4j.Range;
 import org.eclipse.lsp4j.TextDocumentItem;
-import org.eclipse.lsp4j.TextEdit;
-import org.eclipse.lsp4j.WorkspaceEdit;
-import org.eclipse.lsp4j.jsonrpc.messages.Either;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.github.cameltooling.lsp.internal.CamelTextDocumentService;
 import com.github.cameltooling.lsp.internal.completion.CamelEndpointCompletionProcessor;
 import com.github.cameltooling.lsp.internal.diagnostic.DiagnosticService;
-import com.github.cameltooling.lsp.internal.parser.ParserFileHelperUtil;
 
-public class UnknownPropertyQuickfix {
+public class UnknownPropertyQuickfix extends AbstractQuickfix {
 	
 	private static final Logger LOGGER = LoggerFactory.getLogger(UnknownPropertyQuickfix.class);
-	private CamelTextDocumentService camelTextDocumentService;
 
 	public UnknownPropertyQuickfix(CamelTextDocumentService camelTextDocumentService) {
-		this.camelTextDocumentService = camelTextDocumentService;
+		super(camelTextDocumentService);
 	}
 
-	public CompletableFuture<List<Either<Command, CodeAction>>> apply(CodeActionParams params) {
-		return CompletableFuture.supplyAsync(() -> {
-			TextDocumentItem openedDocument = camelTextDocumentService.getOpenedDocument(params.getTextDocument().getUri());
-			List<Diagnostic> diagnostics = params.getContext().getDiagnostics();
-			List<Either<Command, CodeAction>> res = new ArrayList<>();
-			for(Diagnostic diagnostic : diagnostics) {
-				if(DiagnosticService.ERROR_CODE_UNKNOWN_PROPERTIES.equals(diagnostic.getCode())) {
-					CharSequence currentValueInError = retrieveCurrentErrorValue(openedDocument, diagnostic);
-					if(currentValueInError != null) {
-						List<String> possibleProperties = retrievePossibleProperties(openedDocument, camelTextDocumentService.getCamelCatalog(), diagnostic.getRange().getStart());
-						int distanceThreshold = Math.round(currentValueInError.length() * 0.4f);
-						LevenshteinDistance levenshteinDistance = new LevenshteinDistance(distanceThreshold);
-						List<String> mostProbableProperties = possibleProperties.stream()
-								.filter(possibleProperty -> levenshteinDistance.apply(possibleProperty, currentValueInError) != -1)
-								.collect(Collectors.toList());
-						for (String mostProbableProperty : mostProbableProperties) {
-							res.add(Either.forRight(createCodeAction(params, diagnostic, mostProbableProperty)));
-						}
-					}
-				}
-			}
-			
-			return res;
-		});
+	protected String getDiagnosticId() {
+		return DiagnosticService.ERROR_CODE_UNKNOWN_PROPERTIES;
 	}
 
-	private String retrieveCurrentErrorValue(TextDocumentItem openedDocument, Diagnostic diagnostic) {
-		Range diagnosticRange = diagnostic.getRange();
-		String line = new ParserFileHelperUtil().getLine(openedDocument, diagnosticRange.getStart().getLine());
-		int endCharacter = diagnosticRange.getEnd().getCharacter();
-		if (line.length() > endCharacter) {
-			return line.substring(diagnosticRange.getStart().getCharacter(), endCharacter);
-		} else {
-			return null;
-		}
-	}
-
-	private CodeAction createCodeAction(CodeActionParams params, Diagnostic diagnostic, String possibleProperty) {
-		CodeAction codeAction = new CodeAction("Did you mean "+possibleProperty + "?");
-		codeAction.setDiagnostics(Collections.singletonList(diagnostic));
-		codeAction.setKind(CodeActionKind.QuickFix);
-		Map<String, List<TextEdit>> changes = new HashMap<>();
-		TextEdit textEdit = new TextEdit(diagnostic.getRange(), possibleProperty);
-		changes.put(params.getTextDocument().getUri(), Arrays.asList(textEdit));
-		codeAction.setEdit(new WorkspaceEdit(changes));
-		return codeAction;
-	}
-
-	private List<String> retrievePossibleProperties(TextDocumentItem textDocumentItem, CompletableFuture<CamelCatalog> camelCatalog, Position position) {
+	protected List<String> retrievePossibleValues(TextDocumentItem textDocumentItem, CompletableFuture<CamelCatalog> camelCatalog, Position position) {
 		try {
 			return new CamelEndpointCompletionProcessor(textDocumentItem, camelCatalog)
 					.getCompletions(position)
diff --git a/src/main/java/com/github/cameltooling/lsp/internal/diagnostic/DiagnosticService.java b/src/main/java/com/github/cameltooling/lsp/internal/diagnostic/DiagnosticService.java
index 4bed8b4..86bd07a 100644
--- a/src/main/java/com/github/cameltooling/lsp/internal/diagnostic/DiagnosticService.java
+++ b/src/main/java/com/github/cameltooling/lsp/internal/diagnostic/DiagnosticService.java
@@ -65,6 +65,7 @@
 	private static final String APACHE_CAMEL_VALIDATION = "Apache Camel validation";
 	private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosticService.class);
 	public static final String ERROR_CODE_UNKNOWN_PROPERTIES = "camel.diagnostic.unknown.properties";
+	public static final String ERROR_CODE_INVALID_ENUM = "camel.diagnostic.invalid.enum";
 	
 	private CompletableFuture<CamelCatalog> camelCatalog;
 	private CamelLanguageServer camelLanguageServer;
@@ -179,7 +180,7 @@ private void logExceptionValidatingDocument(String docUri, Exception e) {
 						new EnumErrorMsg().getErrorMessage(validationResult, invalidEnum),
 						DiagnosticSeverity.Error,
 						APACHE_CAMEL_VALIDATION,
-						null));
+						ERROR_CODE_INVALID_ENUM));
 			}
 		}
 		return lspDiagnostics;
diff --git a/src/test/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfixTest.java b/src/test/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfixTest.java
new file mode 100644
index 0000000..7e45f3f
--- /dev/null
+++ b/src/test/java/com/github/cameltooling/lsp/internal/codeactions/InvalidEnumQuickfixTest.java
@@ -0,0 +1,91 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.github.cameltooling.lsp.internal.codeactions;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.time.Duration;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
+
+import org.eclipse.lsp4j.CodeAction;
+import org.eclipse.lsp4j.CodeActionContext;
+import org.eclipse.lsp4j.CodeActionKind;
+import org.eclipse.lsp4j.CodeActionParams;
+import org.eclipse.lsp4j.Command;
+import org.eclipse.lsp4j.Diagnostic;
+import org.eclipse.lsp4j.DidSaveTextDocumentParams;
+import org.eclipse.lsp4j.Range;
+import org.eclipse.lsp4j.TextDocumentIdentifier;
+import org.eclipse.lsp4j.TextEdit;
+import org.eclipse.lsp4j.jsonrpc.messages.Either;
+import org.junit.jupiter.api.Test;
+
+import com.github.cameltooling.lsp.internal.AbstractCamelLanguageServerTest;
+import com.github.cameltooling.lsp.internal.CamelLanguageServer;
+import com.github.cameltooling.lsp.internal.RangeChecker;
+
+public class InvalidEnumQuickfixTest extends AbstractCamelLanguageServerTest {
+	
+	private static final Duration AWAIT_TIMEOUT = Duration.ofSeconds(10);
+	private CamelLanguageServer camelLanguageServer;
+	
+	@Test
+	public void testReturnCodeActionForQuickfix() throws FileNotFoundException, InterruptedException, ExecutionException {
+		TextDocumentIdentifier textDocumentIdentifier = initAnLaunchDiagnostic();
+	
+		Diagnostic diagnostic = lastPublishedDiagnostics.getDiagnostics().get(0);
+		CodeActionContext context = new CodeActionContext(lastPublishedDiagnostics.getDiagnostics(), Collections.singletonList(CodeActionKind.QuickFix));
+		CompletableFuture<List<Either<Command,CodeAction>>> codeActions = camelLanguageServer.getTextDocumentService().codeAction(new CodeActionParams(textDocumentIdentifier, diagnostic.getRange(), context));
+		
+		checkRetrievedCodeAction(textDocumentIdentifier, diagnostic, codeActions);
+	}
+	
+	private void checkRetrievedCodeAction(TextDocumentIdentifier textDocumentIdentifier, Diagnostic diagnostic, CompletableFuture<List<Either<Command, CodeAction>>> codeActions)
+			throws InterruptedException, ExecutionException {
+		assertThat(codeActions.get()).hasSize(1);
+		CodeAction codeAction = codeActions.get().get(0).getRight();
+		assertThat(codeAction.getDiagnostics()).containsOnly(diagnostic);
+		assertThat(codeAction.getKind()).isEqualTo(CodeActionKind.QuickFix);
+		List<TextEdit> createdChanges = codeAction.getEdit().getChanges().get(textDocumentIdentifier.getUri());
+		assertThat(createdChanges).isNotEmpty();
+		TextEdit textEdit = createdChanges.get(0);
+		Range range = textEdit.getRange();
+		new RangeChecker().check(range, 9, 49, 9, 54);
+		assertThat(textEdit.getNewText()).isEqualTo("InOnly");
+	}
+
+	private TextDocumentIdentifier initAnLaunchDiagnostic() throws FileNotFoundException {
+		File f = new File("src/test/resources/workspace/diagnostic/camel-with-invalid-enum.xml");
+		camelLanguageServer = initializeLanguageServer(new FileInputStream(f), ".xml");
+		
+		TextDocumentIdentifier textDocumentIdentifier = new TextDocumentIdentifier(DUMMY_URI+".xml");
+		DidSaveTextDocumentParams params = new DidSaveTextDocumentParams(textDocumentIdentifier);
+		camelLanguageServer.getTextDocumentService().didSave(params);
+		
+		await().timeout(AWAIT_TIMEOUT).untilAsserted(() -> assertThat(lastPublishedDiagnostics).isNotNull());
+		await().timeout(AWAIT_TIMEOUT).untilAsserted(() -> assertThat(lastPublishedDiagnostics.getDiagnostics()).hasSize(1));
+		return textDocumentIdentifier;
+	}
+	
+}
diff --git a/src/test/java/com/github/cameltooling/lsp/internal/diagnostic/CamelDiagnosticTest.java b/src/test/java/com/github/cameltooling/lsp/internal/diagnostic/CamelDiagnosticTest.java
index 635a096..7966961 100644
--- a/src/test/java/com/github/cameltooling/lsp/internal/diagnostic/CamelDiagnosticTest.java
+++ b/src/test/java/com/github/cameltooling/lsp/internal/diagnostic/CamelDiagnosticTest.java
@@ -93,7 +93,7 @@ public void testInvalidEnum() throws Exception {
 		Diagnostic diagnostic = lastPublishedDiagnostics.getDiagnostics().get(0);
 		assertThat(diagnostic.getMessage()).isNotNull();
 		Range range = diagnostic.getRange();
-		checkRange(range, 9, 49, 9, 65);
+		checkRange(range, 9, 49, 9, 54);
 	}
 	
 	@Test
diff --git a/src/test/resources/workspace/diagnostic/camel-with-invalid-enum.xml b/src/test/resources/workspace/diagnostic/camel-with-invalid-enum.xml
index 8892422..06d9a16 100644
--- a/src/test/resources/workspace/diagnostic/camel-with-invalid-enum.xml
+++ b/src/test/resources/workspace/diagnostic/camel-with-invalid-enum.xml
@@ -7,7 +7,7 @@
 
   <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
     <route id="a route">
-      <from uri="timer:timerName?exchangePattern=InvalidEnumValue"/>
+      <from uri="timer:timerName?exchangePattern=IOnly"/><!-- IOnly is the error that needs to be detected, it should be InOnly. -->
       <to uri="timer:timerName?delay=10"></to>
     </route>
   </camelContext>
