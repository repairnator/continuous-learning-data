diff --git a/src/docs/asciidoc/index.adoc b/src/docs/asciidoc/index.adoc
index 7d19a2b..2df17eb 100644
--- a/src/docs/asciidoc/index.adoc
+++ b/src/docs/asciidoc/index.adoc
@@ -53,7 +53,7 @@ include::{snippets}/refresh_token/http-response.adoc[]
 
 == Member
 
-=== Member API
+=== sign-up API
 
 ==== Request
 
diff --git a/src/main/java/com/depromeet/watni/config/AuthorizationServerConfig.java b/src/main/java/com/depromeet/watni/config/AuthorizationServerConfig.java
index 5869729..a3398a0 100644
--- a/src/main/java/com/depromeet/watni/config/AuthorizationServerConfig.java
+++ b/src/main/java/com/depromeet/watni/config/AuthorizationServerConfig.java
@@ -16,7 +16,7 @@
 @Configuration
 @EnableAuthorizationServer
 @Profile("!local")
-    public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {
+public class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {
 
     private final AuthenticationManager authenticationManager;
     private final RedisConnectionFactory redisConnectionFactory;
diff --git a/src/main/java/com/depromeet/watni/config/LocalSecurityConfig.java b/src/main/java/com/depromeet/watni/config/LocalSecurityConfig.java
index 569bd21..2959219 100644
--- a/src/main/java/com/depromeet/watni/config/LocalSecurityConfig.java
+++ b/src/main/java/com/depromeet/watni/config/LocalSecurityConfig.java
@@ -4,7 +4,6 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
-import org.springframework.http.HttpMethod;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
@@ -24,18 +23,6 @@ public PasswordEncoder passwordEncoder() {
 
     @Override
     protected void configure(HttpSecurity http) throws Exception {
-        http
-                .authorizeRequests()
-                .antMatchers(HttpMethod.POST, "/api/member**")
-                .permitAll()
-                .and()
-                .authorizeRequests()
-                .antMatchers("/oauth/token")
-                .permitAll()
-                .and()
-                .authorizeRequests()
-                .anyRequest()
-                .authenticated();
         http.csrf().disable();
     }
 
@@ -53,5 +40,4 @@ protected void configure(AuthenticationManagerBuilder auth) throws Exception {
     public AuthenticationManager authenticationManagerBean() throws Exception {
         return super.authenticationManagerBean();
     }
-
 }
diff --git a/src/main/java/com/depromeet/watni/config/ResourceServerConfig.java b/src/main/java/com/depromeet/watni/config/ResourceServerConfig.java
index e41e574..59d8af1 100644
--- a/src/main/java/com/depromeet/watni/config/ResourceServerConfig.java
+++ b/src/main/java/com/depromeet/watni/config/ResourceServerConfig.java
@@ -3,14 +3,12 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.redis.connection.RedisConnectionFactory;
-import org.springframework.http.HttpMethod;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
 import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
 import org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;
 import org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;
-import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
 import org.springframework.security.oauth2.provider.token.TokenStore;
 import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;
 
@@ -24,14 +22,6 @@ public ResourceServerConfig(RedisConnectionFactory redisConnectionFactory) {
         this.redisConnectionFactory = redisConnectionFactory;
     }
 
-    @Bean
-    public DefaultTokenServices tokenServices() {
-        DefaultTokenServices tokenServices = new DefaultTokenServices();
-        tokenServices.setTokenStore(tokenStore());
-        tokenServices.setSupportRefreshToken(true);
-        return tokenServices;
-    }
-
     @Bean
     public TokenStore tokenStore() {
         return new RedisTokenStore(this.redisConnectionFactory);
@@ -39,24 +29,27 @@ public TokenStore tokenStore() {
 
     @Override
     public void configure(ResourceServerSecurityConfigurer resources) throws Exception {
-        resources.tokenServices(this.tokenServices());
+        resources.tokenStore(this.tokenStore());
     }
 
 
     @Override
     public void configure(HttpSecurity http) throws Exception {
         http.headers().frameOptions().disable();
-
         http
-                //.authorizeRequests().anyRequest().authenticated() // "error": "unauthorized",
                 .authorizeRequests()
-                .antMatchers(HttpMethod.POST, "/api/member**")
+                .antMatchers("/docs/**", "/oauth/token", "/sign-up")
                 .permitAll()
+            .and()
+                .authorizeRequests()
                 .anyRequest()
                 .authenticated()
             .and()
                 .exceptionHandling()
-                .accessDeniedHandler(new OAuth2AccessDeniedHandler());
+                .accessDeniedHandler(new OAuth2AccessDeniedHandler())
+            .and()
+                .formLogin()
+                .disable();
         http
                 .sessionManagement()
                 .sessionCreationPolicy(SessionCreationPolicy.STATELESS);
diff --git a/src/main/java/com/depromeet/watni/config/SecurityConfig.java b/src/main/java/com/depromeet/watni/config/SecurityConfig.java
index cdc70fa..f5ec7ed 100644
--- a/src/main/java/com/depromeet/watni/config/SecurityConfig.java
+++ b/src/main/java/com/depromeet/watni/config/SecurityConfig.java
@@ -3,8 +3,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Profile;
-import org.springframework.core.annotation.Order;
-import org.springframework.http.HttpMethod;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.builders.WebSecurity;
@@ -13,7 +11,6 @@
 import org.springframework.security.crypto.password.PasswordEncoder;
 
 @Configuration
-@Order(1)
 @Profile("!local")
 public class SecurityConfig extends WebSecurityConfigurerAdapter {
 
@@ -24,30 +21,14 @@ public AuthenticationManager authenticationManagerBean() throws Exception {
 
     @Override
     protected void configure(HttpSecurity http) throws Exception {
-
-        http
-                .authorizeRequests()
-                .antMatchers("/docs/**")
-                .permitAll()
-                .and()
-                .authorizeRequests()
-                .antMatchers(HttpMethod.POST, "/api/member")
-                .permitAll()
-                .and()
-                .authorizeRequests()
-                .antMatchers("/oauth/token")
-                .permitAll()
-                .and()
-                .authorizeRequests()
-                .anyRequest()
-                .authenticated();
         http.csrf().disable();
     }
 
     @Override
     public void configure(WebSecurity web) throws Exception {
-        web.ignoring().antMatchers("/resources/**");
-        web.ignoring().mvcMatchers(HttpMethod.POST, "/api/member");
+        web
+                .ignoring()
+                .antMatchers("/resources/**", "/static/**");
     }
 
     @Bean
diff --git a/src/main/java/com/depromeet/watni/domain/member/MemberApi.java b/src/main/java/com/depromeet/watni/domain/member/MemberApi.java
index ea4d67b..3e5de03 100644
--- a/src/main/java/com/depromeet/watni/domain/member/MemberApi.java
+++ b/src/main/java/com/depromeet/watni/domain/member/MemberApi.java
@@ -1,9 +1,12 @@
 package com.depromeet.watni.domain.member;
 
 import com.depromeet.watni.domain.member.dto.MemberRequestDto;
+import org.mapstruct.factory.Mappers;
 import org.springframework.http.ResponseEntity;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RestController;
@@ -11,6 +14,8 @@
 @RestController
 public class MemberApi {
 
+    private static final MemberMapper MEMBER_MAPPER = Mappers.getMapper(MemberMapper.class);
+
     private MemberService memberService;
     private PasswordEncoder passwordEncoder;
     public MemberApi(MemberService memberService,
@@ -19,10 +24,16 @@ public MemberApi(MemberService memberService,
         this.passwordEncoder = passwordEncoder;
     }
 
-    @PostMapping("/api/member")
+    @PostMapping("/sign-up")
     public ResponseEntity saveMember(@RequestBody @Validated MemberRequestDto memberRequestDto) {
         memberRequestDto.encodedPassword(this.passwordEncoder);
         Member member = memberService.createMember(memberRequestDto);
         return ResponseEntity.ok().build();
     }
+
+    @GetMapping("/api/user/me")
+    public ResponseEntity getMyInfo(@AuthenticationPrincipal MemberDetail memberDetail) {
+        // TODO member additional Info
+        return ResponseEntity.ok(MEMBER_MAPPER.convert(memberDetail));
+    }
 }
diff --git a/src/main/java/com/depromeet/watni/domain/member/MemberMapper.java b/src/main/java/com/depromeet/watni/domain/member/MemberMapper.java
new file mode 100644
index 0000000..9c3c034
--- /dev/null
+++ b/src/main/java/com/depromeet/watni/domain/member/MemberMapper.java
@@ -0,0 +1,16 @@
+package com.depromeet.watni.domain.member;
+
+import com.depromeet.watni.domain.member.dto.MemberResponse;
+import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import org.springframework.http.ResponseEntity;
+
+@Mapper
+public interface MemberMapper {
+
+    @Mapping(target = "userId", source = "memberId")
+    @Mapping(target = "email", source = "email")
+    @Mapping(target = "username", source = "name")
+    @Mapping(target = "group", source = "", ignore = true)
+    MemberResponse convert(MemberDetail memberDetail);
+}
diff --git a/src/main/java/com/depromeet/watni/domain/member/dto/MemberResponse.java b/src/main/java/com/depromeet/watni/domain/member/dto/MemberResponse.java
new file mode 100644
index 0000000..21cac86
--- /dev/null
+++ b/src/main/java/com/depromeet/watni/domain/member/dto/MemberResponse.java
@@ -0,0 +1,16 @@
+package com.depromeet.watni.domain.member.dto;
+
+import com.depromeet.watni.domain.group.Group;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.ToString;
+
+@Getter
+@Setter
+@ToString
+public class MemberResponse {
+    private long userId;
+    private String email;
+    private String username;
+    private Group group;
+}
diff --git a/src/test/java/com/depromeet/watni/supports/ApiDocumentUtils.java b/src/test/java/com/depromeet/watni/supports/ApiDocumentUtils.java
index 5235aa1..026f39d 100644
--- a/src/test/java/com/depromeet/watni/supports/ApiDocumentUtils.java
+++ b/src/test/java/com/depromeet/watni/supports/ApiDocumentUtils.java
@@ -1,9 +1,18 @@
 package com.depromeet.watni.supports;
 
+import org.json.JSONObject;
+import org.springframework.http.MediaType;
+import org.springframework.restdocs.headers.HeaderDescriptor;
 import org.springframework.restdocs.operation.preprocess.OperationRequestPreprocessor;
 import org.springframework.restdocs.operation.preprocess.OperationResponsePreprocessor;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.ResultActions;
 
+import static org.springframework.restdocs.headers.HeaderDocumentation.headerWithName;
+import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.post;
 import static org.springframework.restdocs.operation.preprocess.Preprocessors.*;
+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.httpBasic;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 public interface ApiDocumentUtils {
 
@@ -11,8 +20,8 @@ static OperationRequestPreprocessor getDocumentRequest() {
         return preprocessRequest(
                 modifyUris()
                         .scheme("http")
-                        .host("localhost")
-                        .port(8080)
+                        .host("ec2-52-78-36-242.ap-northeast-2.compute.amazonaws.com")
+                        .port(80)
                         .removePort(),
                 prettyPrint());
     }
@@ -20,4 +29,27 @@ static OperationRequestPreprocessor getDocumentRequest() {
     static OperationResponsePreprocessor getDocumentResponse() {
         return preprocessResponse(prettyPrint());
     }
+
+    static String getAuthorizationHeader(MockMvc mockMvc) throws Exception {
+        JSONObject requestBody = new JSONObject();
+        requestBody.put("grant_type", "password");
+        requestBody.put("username", "test@naver.com");
+        requestBody.put("password", "test");
+
+        ResultActions result = mockMvc.perform(post("/oauth/token")
+                .contentType(MediaType.APPLICATION_JSON)
+                .with(httpBasic("foo","bar"))
+                .content(requestBody.toString())
+                .accept(MediaType.APPLICATION_JSON_VALUE)
+        ).andExpect(status().isOk());
+
+        String resultString = result.andReturn().getResponse().getContentAsString();
+        JSONObject jsonObject = new JSONObject(resultString);
+        String accessToken = (String) jsonObject.get("access_token");
+        return "Bearer " + accessToken;
+    }
+
+    static final HeaderDescriptor[] AUTHORIZATION_HEADER = new HeaderDescriptor[] {
+        headerWithName("Authorization").description("Bearer ${accessToken}"),
+    };
 }
diff --git a/src/test/java/com/depromeet/watni/supports/MemberDocuments.java b/src/test/java/com/depromeet/watni/supports/MemberDocuments.java
index d822502..3372698 100644
--- a/src/test/java/com/depromeet/watni/supports/MemberDocuments.java
+++ b/src/test/java/com/depromeet/watni/supports/MemberDocuments.java
@@ -21,7 +21,8 @@
 import static com.depromeet.watni.supports.ApiDocumentUtils.getDocumentRequest;
 import static com.depromeet.watni.supports.ApiDocumentUtils.getDocumentResponse;
 import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
-import static org.springframework.restdocs.payload.PayloadDocumentation.*;
+import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
+import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
 @RunWith(SpringRunner.class)
@@ -39,7 +40,7 @@ public void post_member() throws Exception {
         String body = readJson("member-signup.json");
 
         ResultActions result = this.mockMvc.perform(
-                RestDocumentationRequestBuilders.post("/api/member")
+                RestDocumentationRequestBuilders.post("/sign-up")
                         .content(body)
                         .contentType(MediaType.APPLICATION_JSON)
                         .accept(MediaType.APPLICATION_JSON)
