diff --git a/.travis.yml b/.travis.yml
index f5c05b4..d9bd0c2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8,13 +8,40 @@ addons:
     organization: project-xavier
     token:
       secure: $SONAR_TOKEN
+
+
+sudo: required
+
+services:
+    - docker
+
+# Fix for https://travis-ci.community/t/problematic-docker-compose-version-1-23-1/5362/3
+before_install:
+  - docker-compose --version
+  - docker info
+  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
+  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
+  - sudo apt-get update
+  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
+  - sudo rm /usr/local/bin/docker-compose
+  - curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-Linux-x86_64 > docker-compose
+  - chmod +x docker-compose
+  - sudo mv docker-compose /usr/local/bin
+  - docker-compose --version
+  - docker info
+
 install:
   - cp ./configuration/settings.xml $HOME/.m2/settings.xml
   - mvn install -P !fuse-fabric8-docker -DskipTests=true -Dmaven.javadoc.skip=true -B -V
 jobs:
   include:
     - stage: Test
+      env:
+        - CAMEL_SPRINGBOOT_TRACING=false
+        - LOGGING_LEVEL_ROOT=warn
       script:
-        - mvn test -DtestLogRootLevel=warn -Pcoverage
+        - mvn test -Pcoverage
         - 'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then sonar-scanner; fi'
         - bash <(curl -s https://codecov.io/bash)
+
+
diff --git a/README.md b/README.md
index 3231410..784af68 100644
--- a/README.md
+++ b/README.md
@@ -107,5 +107,12 @@ Snippets of calls :
 * See status of encription on a bucket : `aws s3api get-bucket-encryption --bucket xavier-dev`
 * Enable encription on a bucket : `aws s3api put-bucket-encryption --bucket xavier-dev --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}' `  
 
+
+# Testing
+For the End2End test a docker container test framework is used : [Testcontainers](www.testcontainers.org).  
+If using the Fedora docker package it is needed to set the *ryuk.container.privileged=true* property in the local ~/.testcontainers.properties file in order to allow [Ryuk to be a privileged container](https://www.testcontainers.org/features/configuration/#customizing-ryuk-resource-reaper).
+
 # References
 
+
+ 
diff --git a/pom.xml b/pom.xml
index 114f1fd..377025e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,6 +25,7 @@
 
         <!--this is used by logback-test.xml-->
         <testLogRootLevel>info</testLogRootLevel>
+        <testcontainers.version>1.12.2</testcontainers.version>
     </properties>
 
     <dependencyManagement>
@@ -41,11 +42,6 @@
 
 
     <dependencies>
-<!--        <dependency>
-            <groupId>org.jboss.xavier</groupId>
-            <artifactId>xavier-analytics</artifactId>
-            <version>0.0.1-SNAPSHOT</version>
-        </dependency>-->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter</artifactId>
@@ -198,13 +194,25 @@
             <version>42.2.5</version>
             <scope>runtime</scope>
         </dependency>
+
+        <!-- Testing -->
         <dependency>
             <groupId>org.hsqldb</groupId>
             <artifactId>hsqldb</artifactId>
-            <scope>runtime</scope>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.10.19</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mock-server</groupId>
+            <artifactId>mockserver-netty</artifactId>
+            <version>5.6.0</version>
+            <scope>test</scope>
         </dependency>
-
-        <!-- Testing -->
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter-test</artifactId>
@@ -232,12 +240,48 @@
             <scope>test</scope>
         </dependency>
 
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>testcontainers</artifactId>
+            <version>${testcontainers.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>postgresql</artifactId>
+            <version>${testcontainers.version}</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-hateoas</artifactId>
+            <scope>test</scope>
+            <version>2.1.8.RELEASE</version>
+        </dependency>
+        <dependency>
+            <groupId>org.awaitility</groupId>
+            <artifactId>awaitility</artifactId>
+            <version>3.0.0</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>localstack</artifactId>
+            <version>${testcontainers.version}</version>
+            <scope>test</scope>
+        </dependency>
         <dependency>
             <groupId>com.h2database</groupId>
             <artifactId>h2</artifactId>
             <scope>test</scope>
             <version>1.4.194</version>
         </dependency>
+        <dependency>
+            <groupId>org.testcontainers</groupId>
+            <artifactId>kafka</artifactId>
+            <version>${testcontainers.version}</version>
+            <scope>test</scope>
+        </dependency>
     </dependencies>
 
 
diff --git a/src/main/java/org/jboss/xavier/analytics/pojo/output/workload/summary/ScanRunModel.java b/src/main/java/org/jboss/xavier/analytics/pojo/output/workload/summary/ScanRunModel.java
index c7123c1..3ab39a4 100644
--- a/src/main/java/org/jboss/xavier/analytics/pojo/output/workload/summary/ScanRunModel.java
+++ b/src/main/java/org/jboss/xavier/analytics/pojo/output/workload/summary/ScanRunModel.java
@@ -1,9 +1,7 @@
 package org.jboss.xavier.analytics.pojo.output.workload.summary;
 
-import java.sql.Timestamp;
-import java.util.Date;
-
 import com.fasterxml.jackson.annotation.JsonBackReference;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import org.hibernate.annotations.GenericGenerator;
 import org.hibernate.annotations.Parameter;
 
@@ -17,6 +15,10 @@
 import javax.persistence.ManyToOne;
 import javax.persistence.NamedNativeQuery;
 import javax.persistence.SqlResultSetMapping;
+import java.sql.Timestamp;
+import java.util.Date;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 @SqlResultSetMapping(
         name = "mappingScanRunModels",
@@ -58,6 +60,8 @@
 
     private String target;
     private Date date;
+
+    @JsonProperty("smartStateEnabled")
     private Boolean type;
 
     public ScanRunModel(){}
@@ -100,12 +104,25 @@ public void setDate(Date date) {
         this.date = date;
     }
 
-    public String getType() {
-        String typeString = "Virt Platform";
-        return typeString + (type?" + SmartState": "");
+    public Boolean getType() {
+        return type;
     }
 
     public void setType(Boolean type) {
         this.type = type;
     }
+
+    public void setType(String strType) {
+        if (isBoolean(strType)) {
+            setType(Boolean.parseBoolean(strType));
+        } else {
+            setType(strType.toLowerCase().contains("smartstate"));
+        }
+    }
+
+    private boolean isBoolean(String value) {
+        Pattern queryLangPattern = Pattern.compile("true|false", Pattern.CASE_INSENSITIVE);
+        Matcher matcher = queryLangPattern.matcher(value);
+        return matcher.matches();
+    }
 }
diff --git a/src/main/java/org/jboss/xavier/integrations/SpringConfiguration.java b/src/main/java/org/jboss/xavier/integrations/SpringConfiguration.java
new file mode 100644
index 0000000..78b2f4b
--- /dev/null
+++ b/src/main/java/org/jboss/xavier/integrations/SpringConfiguration.java
@@ -0,0 +1,31 @@
+package org.jboss.xavier.integrations;
+
+import com.amazonaws.auth.AWSStaticCredentialsProvider;
+import com.amazonaws.auth.BasicAWSCredentials;
+import com.amazonaws.services.s3.AmazonS3;
+import com.amazonaws.services.s3.AmazonS3ClientBuilder;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Profile;
+
+@Configuration
+@Profile("!test")
+public class SpringConfiguration {
+    @Value("${S3_ACCESS_KEY_ID}")
+    String key;
+
+    @Value("${S3_SECRET_ACCESS_KEY}")
+    String secret;
+
+    @Value("${S3_REGION}")
+    String region;
+
+    @Bean(name = "s3client")
+    public AmazonS3 getAmazonS3client() {
+        return AmazonS3ClientBuilder.standard()
+                .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(key,secret)))
+                .withRegion(region)
+                .build();
+    }
+}
diff --git a/src/main/java/org/jboss/xavier/integrations/route/MainRouteBuilder.java b/src/main/java/org/jboss/xavier/integrations/route/MainRouteBuilder.java
index 0e6f147..3b20328 100644
--- a/src/main/java/org/jboss/xavier/integrations/route/MainRouteBuilder.java
+++ b/src/main/java/org/jboss/xavier/integrations/route/MainRouteBuilder.java
@@ -121,7 +121,7 @@ public void configure() throws Exception {
                         .throwException(org.apache.commons.httpclient.HttpException.class, "Unsuccessful response from Insights Upload Service")
                 .end();
 
-        from("kafka:" + kafkaHost + "?topic={{insights.kafka.upload.topic}}&brokers=" + kafkaHost + "&autoOffsetReset=latest&autoCommitEnable=true")
+        from("kafka:" + kafkaHost + "?topic={{insights.kafka.upload.topic}}&brokers=" + kafkaHost + "&autoOffsetReset=earliest&autoCommitEnable=true")
                 .routeId("kafka-upload-message")
                 .unmarshal().json(JsonLibrary.Jackson, FilePersistedNotification.class)
                 .filter(simple("'{{insights.service}}' == ${body.getService}"))
@@ -129,12 +129,12 @@ public void configure() throws Exception {
 
         from("direct:download-file")
                 .routeId("download-file")
-                .setHeader("Exchange.HTTP_URI", simple("${body.url}"))
+                .setHeader("Exchange.HTTP_URI", simple("${body.url}")).id("setHttpUri")
                 .convertBodyTo(FilePersistedNotification.class)
                 .setHeader(MA_METADATA, method(MainRouteBuilder.class, "extractMAmetadataHeaderFromIdentity(${body})"))
                 .setHeader(USERNAME, method(MainRouteBuilder.class, "getUserNameFromRHIdentity(${body.b64_identity})"))
                 .setBody(constant(""))
-                .to("http4://oldhost")
+                .to("http4:oldhost").id("toOldHost")
                 .choice()
                     .when(isResponseSuccess())
                         .removeHeader("Exchange.HTTP_URI")
@@ -153,7 +153,7 @@ public void configure() throws Exception {
                 .setHeader(S3Constants.CONTENT_LENGTH, simple("${header.${type:org.apache.camel.Exchange.CONTENT_LENGTH}}"))
                 .process(e-> e.getIn().setHeader(S3Constants.KEY, UUID.randomUUID().toString())).id("set-s3-key")
                 .setHeader(S3Constants.CONTENT_DISPOSITION, simple("attachment;filename=\"${header.MA_metadata[filename]}\""))
-                .to("aws-s3:{{S3_BUCKET}}?region={{S3_REGION}}&accessKey={{S3_ACCESS_KEY_ID}}&secretKey=RAW({{S3_SECRET_ACCESS_KEY}})&deleteAfterWrite=false").id("s3-call")
+                .to("aws-s3:{{S3_BUCKET}}?amazonS3Client=#s3client&deleteAfterWrite=false").id("s3-call")
                 .process(exchange -> analysisService.updatePayloadStorageId(exchange.getIn().getHeader(S3Constants.KEY, String.class),
                         Long.parseLong((String) exchange.getIn().getHeader(MA_METADATA, Map.class).get(ANALYSIS_ID))));
 
diff --git a/src/main/java/org/jboss/xavier/integrations/route/model/notification/FilePersistedNotification.java b/src/main/java/org/jboss/xavier/integrations/route/model/notification/FilePersistedNotification.java
index 10fe75b..d729299 100644
--- a/src/main/java/org/jboss/xavier/integrations/route/model/notification/FilePersistedNotification.java
+++ b/src/main/java/org/jboss/xavier/integrations/route/model/notification/FilePersistedNotification.java
@@ -1,5 +1,6 @@
 package org.jboss.xavier.integrations.route.model.notification;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -9,6 +10,7 @@
 @Builder
 @NoArgsConstructor
 @AllArgsConstructor
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class FilePersistedNotification {
     String account;
     String rh_account;
diff --git a/src/main/resources/application-test.properties b/src/main/resources/application-test.properties
index 0183c99..b3d761a 100644
--- a/src/main/resources/application-test.properties
+++ b/src/main/resources/application-test.properties
@@ -1,5 +1,6 @@
 # Binding health checks to an internal port
 management.port=8081
+server.port=9080
 
 # disable all management enpoints except health
 endpoints.enabled = false
@@ -8,7 +9,6 @@ endpoints.health.enabled = true
 # Sample InputDataModel generator
 sig.autoStartup=true
 spring.datasource.continue-on-error=true
-insights.properties=dummy
 
 spring.datasource.url = jdbc:h2:mem:test
 spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
@@ -36,3 +36,13 @@ cloudforms.manifest.20.vmworkloadinventory.emsClusterIdPath =emsClusterIdPath_v2
 
 
 rest.authorization.administration=admin1,admin2@redhat.com
+S3_HOST=localhost
+kieserver.username=kieserver
+kieserver.password=kieserver1!
+
+logging.level.root=info
+insights.properties=dummy
+camel.springboot.tracing=false
+
+test.timetout.ics=20000
+test.timeout.performance=80000
diff --git a/src/main/resources/okd/analytics_template.json b/src/main/resources/okd/analytics_template.json
index 813bc93..db042a8 100644
--- a/src/main/resources/okd/analytics_template.json
+++ b/src/main/resources/okd/analytics_template.json
@@ -1189,7 +1189,7 @@
                                     },
                                     {
                                         "name": "KIESERVER_CONTAINER",
-                                        "value": "sample-analytics_1.0.0-SNAPSHOT"
+                                        "value": "xavier-analytics_0.0.1-SNAPSHOT"
                                     },
                                     {
                                         "name": "POSTGRESQL_USER",
diff --git a/src/main/resources/spring/camel-context.xml b/src/main/resources/spring/camel-context.xml
index 9da2a8a..eca9820 100644
--- a/src/main/resources/spring/camel-context.xml
+++ b/src/main/resources/spring/camel-context.xml
@@ -263,7 +263,7 @@
                         <when>
                             <simple>${body} != null &amp;&amp; ${body.payloadStorageId} != null</simple>
                             <pollEnrich id="pollEnrich">
-                                <simple>aws-s3:xavier-dev?region={{S3_REGION}}&amp;accessKey={{S3_ACCESS_KEY_ID}}&amp;secretKey=RAW({{S3_SECRET_ACCESS_KEY}})&amp;deleteAfterRead=false&amp;fileName=${body.payloadStorageId}</simple>
+                                <simple>aws-s3:xavier-dev?amazonS3Client=#s3client&amp;deleteAfterRead=false&amp;fileName=${body.payloadStorageId}</simple>
                             </pollEnrich>
                             <setHeader headerName="${type:org.jboss.xavier.integrations.route.dataformat.CustomizedMultipartDataFormat.CONTENT_DISPOSITION}">
                                 <simple>${header.CamelAwsS3ContentDisposition}</simple>
diff --git a/src/test/java/org/jboss/xavier/integrations/EndToEndTest.java b/src/test/java/org/jboss/xavier/integrations/EndToEndTest.java
new file mode 100644
index 0000000..8514c78
--- /dev/null
+++ b/src/test/java/org/jboss/xavier/integrations/EndToEndTest.java
@@ -0,0 +1,523 @@
+package org.jboss.xavier.integrations;
+
+import com.amazonaws.services.s3.AmazonS3;
+import com.amazonaws.services.s3.model.AmazonS3Exception;
+import com.amazonaws.services.s3.model.S3Object;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.AdviceWithRouteBuilder;
+import org.apache.camel.component.aws.s3.S3Constants;
+import org.apache.camel.test.spring.CamelSpringBootRunner;
+import org.apache.camel.test.spring.UseAdviceWith;
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.IOUtils;
+import org.assertj.core.api.SoftAssertions;
+import org.awaitility.Duration;
+import org.jboss.xavier.Application;
+import org.jboss.xavier.analytics.pojo.output.InitialSavingsEstimationReportModel;
+import org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel;
+import org.jboss.xavier.analytics.pojo.output.workload.summary.ScanRunModel;
+import org.jboss.xavier.analytics.pojo.output.workload.summary.WorkloadSummaryReportModel;
+import org.jboss.xavier.analytics.pojo.output.workload.summary.WorkloadsDetectedOSTypeModel;
+import org.jboss.xavier.integrations.jpa.repository.AnalysisRepository;
+import org.jboss.xavier.integrations.jpa.repository.InitialSavingsEstimationReportRepository;
+import org.jboss.xavier.integrations.jpa.service.InitialSavingsEstimationReportService;
+import org.jboss.xavier.integrations.route.model.notification.FilePersistedNotification;
+import org.jboss.xavier.integrations.route.model.user.User;
+import org.jetbrains.annotations.NotNull;
+import org.junit.After;
+import org.junit.ClassRule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.util.EnvironmentTestUtils;
+import org.springframework.context.ApplicationContextInitializer;
+import org.springframework.context.ConfigurableApplicationContext;
+import org.springframework.context.annotation.Import;
+import org.springframework.core.ParameterizedTypeReference;
+import org.springframework.hateoas.PagedResources;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpMethod;
+import org.springframework.http.MediaType;
+import org.springframework.http.ResponseEntity;
+import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.ActiveProfiles;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.util.LinkedMultiValueMap;
+import org.springframework.util.MultiValueMap;
+import org.springframework.web.client.RestClientException;
+import org.springframework.web.client.RestTemplate;
+import org.testcontainers.containers.GenericContainer;
+import org.testcontainers.containers.KafkaContainer;
+import org.testcontainers.containers.Network;
+import org.testcontainers.containers.PostgreSQLContainer;
+import org.testcontainers.containers.localstack.LocalStackContainer;
+import org.testcontainers.containers.output.Slf4jLogConsumer;
+import org.testcontainers.images.builder.ImageFromDockerfile;
+import org.testcontainers.utility.MountableFile;
+
+import javax.inject.Inject;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Paths;
+import java.util.Comparator;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.TimeUnit;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
+import static org.awaitility.Awaitility.await;
+import static org.testcontainers.containers.localstack.LocalStackContainer.Service.S3;
+
+@RunWith(CamelSpringBootRunner.class)
+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
+@UseAdviceWith // Disables automatic start of Camel context
+@SpringBootTest(classes = {Application.class}, webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
+@ContextConfiguration(initializers = EndToEndTest.Initializer.class)
+@Import(TestConfigurationS3.class)
+@ActiveProfiles("test")
+public class EndToEndTest {
+    private static Logger logger = LoggerFactory.getLogger(EndToEndTest.class);
+
+
+    @ClassRule
+    public static GenericContainer activemq = new GenericContainer<>("vromero/activemq-artemis")
+            .withExposedPorts(61616, 8161)
+            .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("AMQ-LOG"))
+            .withEnv("DISABLE_SECURITY", "true")
+            .withEnv("BROKER_CONFIG_GLOBAL_MAX_SIZE", "50000")
+            .withEnv("BROKER_CONFIG_MAX_SIZE_BYTES", "50000")
+            .withEnv("BROKER_CONFIG_MAX_DISK_USAGE", "100");
+
+    @ClassRule
+    public static GenericContainer kie_server = new GenericContainer<>("jboss/kie-server-showcase:7.18.0.Final")
+            .withNetworkAliases("kie-server")
+            .withExposedPorts(8080)
+            .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("KIE-LOG"))
+            .withEnv("KIE_SERVER_ID", "analytics-kieserver")
+            .withEnv("KIE_ADMIN_USER", "kieserver")
+            .withEnv("KIE_ADMIN_PWD", "kieserver1!")
+            .withEnv("KIE_SERVER_MODE", "DEVELOPMENT")
+            .withEnv("KIE_MAVEN_REPO", "https://oss.sonatype.org/content/repositories/snapshots")
+            .withEnv("KIE_REPOSITORY","https://repository.jboss.org/nexus/content/groups/public-jboss")
+            .withEnv("KIE_SERVER_CONTROLLER_PWD","admin")
+            .withEnv("KIE_SERVER_CONTROLLER_USER","admin")
+            .withEnv("KIE_SERVER_LOCATION","http://kie-server:8080/kie-server/services/rest/server")
+            .withEnv("KIE_SERVER_PWD","kieserver1!")
+            .withEnv("KIE_SERVER_USER","kieserver");
+
+    @ClassRule
+    public static PostgreSQLContainer postgreSQL = new PostgreSQLContainer()
+            .withDatabaseName("sampledb")
+            .withUsername("admin")
+            .withPassword("redhat");
+
+    @ClassRule
+    public static LocalStackContainer localstack = new LocalStackContainer()
+            .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("AWS-LOG"))
+            .withServices(S3);
+
+    private static String ingressCommitHash = "3ea33a8d793c2154f7cfa12057ca005c5f6031fa"; // 2019-11-11
+
+    @Inject
+    private InitialSavingsEstimationReportService initialSavingsEstimationReportService;
+
+    @Autowired
+    private InitialSavingsEstimationReportRepository initialSavingsEstimationReportRepository;
+
+    @Inject
+    private AnalysisRepository analysisRepository;
+
+    @Value("${S3_BUCKET}")
+    private String bucket;
+
+    @Value("${server.port:8080}")
+    private String serverPort;
+
+    @Value("${test.timeout.performance:60000}") // 1 minute
+    private int timeoutMilliseconds_PerformaceTest;
+
+    @Value("${test.timetout.ics:10000}") // 10 seconds
+    private int timeoutMilliseconds_InitialCostSavingsReport;
+
+    @Value("${minio.host}") // Set in the Initializer
+    private String minio_host;
+
+    public static class Initializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {
+
+        @Override
+        public void initialize(ConfigurableApplicationContext configurableApplicationContext) {
+            try {
+                cloneIngressRepoAndUnzip();
+
+                Network network = Network.newNetwork();
+
+                GenericContainer minio = new GenericContainer<>("minio/minio")
+                        .withCommand("server /data")
+                        .withExposedPorts(9000)
+                        .withNetworkAliases("minio")
+                        .withNetwork(network)
+                        .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("MINIO-LOG"))
+                        .withEnv("MINIO_ACCESS_KEY", "BQA2GEXO711FVBVXDWKM")
+                        .withEnv("MINIO_SECRET_KEY", "uvgz3LCwWM3e400cDkQIH/y1Y4xgU4iV91CwFSPC");
+                minio.start();
+
+                Thread.sleep(5000);
+                GenericContainer createbuckets = new GenericContainer<>("minio/mc")
+                        .dependsOn(minio)
+                        .withNetwork(network)
+                        .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("MINIO-MC-LOG"))
+                        .withCopyFileToContainer(MountableFile.forClasspathResource("minio-bucket-creation-commands.sh"), "/")
+                        .withCreateContainerCmdModifier(createContainerCmd -> createContainerCmd.withEntrypoint("sh", "/minio-bucket-creation-commands.sh", "minio:9000"));
+                createbuckets.start();
+
+                KafkaContainer kafka = new KafkaContainer()
+                        .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("KAFKA-LOG"))
+                        .withNetworkAliases("kafka")
+                        .withNetwork(network);
+                kafka.start();
+
+                GenericContainer ingress = new GenericContainer(new ImageFromDockerfile()
+                        .withDockerfile(Paths.get("src/test/resources/insights-ingress-go/Dockerfile")))
+                        .withExposedPorts(3000)
+                        .withNetwork(network)
+                        .withLogConsumer(new Slf4jLogConsumer(logger).withPrefix("INGRESS-LOG"))
+                        .withEnv("AWS_ACCESS_KEY_ID","BQA2GEXO711FVBVXDWKM")
+                        .withEnv("AWS_SECRET_ACCESS_KEY","uvgz3LCwWM3e400cDkQIH/y1Y4xgU4iV91CwFSPC")
+                        .withEnv("AWS_REGION","us-east-1")
+                        .withEnv("INGRESS_STAGEBUCKET","insights-upload-perma")
+                        .withEnv("INGRESS_REJECTBUCKET","insights-upload-rejected")
+                        .withEnv("INGRESS_INVENTORYURL","http://inventory:8080/api/inventory/v1/hosts")
+                        .withEnv("INGRESS_VALIDTOPICS","xavier,testareno,advisortestareno,advisor")
+                        .withEnv("OPENSHIFT_BUILD_COMMIT","woopwoop")
+                        .withEnv("INGRESS_MINIODEV","true")
+                        .withEnv("INGRESS_MINIOACCESSKEY","BQA2GEXO711FVBVXDWKM")
+                        .withEnv("INGRESS_MINIOSECRETKEY","uvgz3LCwWM3e400cDkQIH/y1Y4xgU4iV91CwFSPC")
+                        .withEnv("INGRESS_MINIOENDPOINT", "minio:9000")
+                        .withEnv("INGRESS_KAFKABROKERS", "kafka:9092");
+                ingress.start();
+
+                importProjectIntoKIE();
+
+                EnvironmentTestUtils.addEnvironment("environment", configurableApplicationContext.getEnvironment(),
+                        "amq.server=" + activemq.getContainerIpAddress(),
+                        "amq.port=" + activemq.getMappedPort(61616),
+                        "minio.host=" + getContainerHost(minio, 9000),
+                        "insights.upload.host=" + getContainerHost(ingress),
+                        "insights.properties=yearOverYearGrowthRatePercentage,percentageOfHypervisorsMigratedOnYear1,percentageOfHypervisorsMigratedOnYear2,percentageOfHypervisorsMigratedOnYear3,reportName,reportDescription",
+                        "camel.component.servlet.mapping.context-path=/api/xavier/*",
+                        "insights.kafka.host=" + kafka.getBootstrapServers(),
+                        "postgresql.service.name=" + postgreSQL.getContainerIpAddress(),
+                        "postgresql.service.port=" + postgreSQL.getFirstMappedPort(),
+                        "spring.datasource.username=" + postgreSQL.getUsername(),
+                        "spring.datasource.password=" + postgreSQL.getPassword(),
+                        "S3_HOST=" + localstack.getEndpointConfiguration(S3).getServiceEndpoint(),
+                        "S3_REGION="+ localstack.getEndpointConfiguration(S3).getSigningRegion(),
+                        "kieserver.devel-service=" + getHostForKie() + "/kie-server",
+                        "spring.datasource.url = jdbc:postgresql://" + getContainerHost(postgreSQL) + "/sampledb" ,
+                        "spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect");
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
+
+        @NotNull
+        private String getContainerHost(GenericContainer container, Integer port) {
+            return container.getContainerIpAddress() + ":" + container.getMappedPort(port);
+        }
+
+        @NotNull
+        private static String getContainerHost(GenericContainer container) {
+            return container.getContainerIpAddress() + ":" + container.getFirstMappedPort();
+        }
+    }
+
+    @Inject
+    CamelContext camelContext;
+
+    @Inject
+    AmazonS3 amazonS3;
+
+    private static void cloneIngressRepoAndUnzip() throws IOException {
+        // downloading, unzipping, renaming
+        String ingressRepoZipURL = "https://github.com/RedHatInsights/insights-ingress-go/archive/" + ingressCommitHash + ".zip";
+        File compressedFile = new File("src/test/resources/ingressRepo.zip");
+        FileUtils.copyURLToFile(new URL(ingressRepoZipURL), compressedFile, 1000, 10000);
+        unzipFile(compressedFile, "src/test/resources");
+
+        // we rename the directory because we had issues with Docker and the long folder
+        FileUtils.moveDirectory(new File("src/test/resources/insights-ingress-go-" + ingressCommitHash), new File("src/test/resources/insights-ingress-go"));
+    }
+
+    private static void unzipFile(File file, String outputDir) throws IOException {
+        java.util.zip.ZipFile zipFile = new ZipFile(file);
+        try {
+            Enumeration<? extends ZipEntry> entries = zipFile.entries();
+            while (entries.hasMoreElements()) {
+                ZipEntry entry = entries.nextElement();
+                File entryDestination = new File(outputDir, entry.getName());
+                if (entry.isDirectory()) {
+                    entryDestination.mkdirs();
+                } else {
+                    entryDestination.getParentFile().mkdirs();
+                    InputStream in = zipFile.getInputStream(entry);
+                    OutputStream out = new FileOutputStream(entryDestination);
+                    IOUtils.copy(in, out);
+                    in.close();
+                    out.close();
+                }
+            }
+        } finally {
+            zipFile.close();
+        }
+    }
+
+    private static String getHostForKie() {
+        return kie_server.getContainerIpAddress() + ":" + kie_server.getFirstMappedPort();
+    }
+
+    private static void importProjectIntoKIE() throws InterruptedException, IOException {
+        HttpHeaders headers = new HttpHeaders();
+        headers.setContentType(MediaType.APPLICATION_JSON);
+        headers.setCacheControl("no-cache");
+        headers.set("Authorization", "Basic YWRtaW46YWRtaW4="); // admin:admin
+
+        String kieRestURL = "http://" + getHostForKie() + "/kie-server/services/rest/";
+
+        // KIE Container Creation
+        HttpHeaders kieheaders = new HttpHeaders();
+        kieheaders.setContentType(MediaType.APPLICATION_JSON);
+        kieheaders.set("Authorization", "Basic a2llc2VydmVyOmtpZXNlcnZlcjEh");
+        kieheaders.setCacheControl("no-cache");
+        String kieContainerBody = "{\"container-id\" : \"xavier-analytics_0.0.1-SNAPSHOT\",\"release-id\" : {\"group-id\" : \"org.jboss.xavier\",\"artifact-id\" : \"xavier-analytics\",\"version\" : \"0.0.1-SNAPSHOT\" } }";
+        try {
+            new RestTemplate().exchange(kieRestURL + "server/containers/xavier-analytics_0.0.1-SNAPSHOT", HttpMethod.PUT, new HttpEntity<>(kieContainerBody, kieheaders), String.class);
+        } catch (RestClientException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @After
+    public void cleanUp() throws IOException {
+        // cleaning downloadable files/directories
+        FileUtils.deleteDirectory(new File("src/test/resources/insights-ingress-go"));
+        FileUtils.deleteQuietly(new File("src/test/resources/ingressRepo.zip"));
+    }
+
+    @Test
+    public void end2endTest() throws Exception {
+        Thread.sleep(2000);
+
+        // given
+        camelContext.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "5000");
+        camelContext.start();
+
+        camelContext.getRouteDefinition("store-in-s3").adviceWith(camelContext, new AdviceWithRouteBuilder() {
+            @Override
+            public void configure() {
+                weaveById("set-s3-key")
+                        .replace().process(e -> e.getIn().setHeader(S3Constants.KEY, "S3KEY123"));
+            }
+        });
+
+        camelContext.getRouteDefinition("download-file").adviceWith(camelContext, new AdviceWithRouteBuilder() {
+            @Override
+            public void configure() {
+                weaveById("setHttpUri")
+                        .replace()
+                        .process(e -> {
+                            String url = e.getIn().getBody(FilePersistedNotification.class).getUrl();
+                            url = url.replace("minio:9000", minio_host);
+                            e.getIn().setHeader("httpUriReplaced", url);
+                        })
+                        .setHeader("Exchange.HTTP_URI", header("httpUriReplaced"))
+                        .setHeader("Host", constant("minio:9000"));
+
+                weaveById("toOldHost")
+                        .replace()
+                        .to("http4:oldhost?preserveHostHeader=true");
+            }
+        });
+
+        // 1. Check user has firstTime
+        ResponseEntity<User> userEntity = new RestTemplate().exchange("http://localhost:" + serverPort + "/api/xavier/user", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<User>() {});
+        assertThat(userEntity.getBody().isFirstTimeCreatingReports()).isTrue();
+
+        // Start the camel route as if the UI was sending the file to the Camel Rest Upload route
+        new RestTemplate().postForEntity("http://localhost:" + serverPort + "/api/xavier/upload", getRequestEntityForUploadRESTCall("cfme_inventory-20190912-demolab_withSSA.tar.gz"), String.class);
+
+        // then
+        await()
+            .atMost(timeoutMilliseconds_InitialCostSavingsReport, TimeUnit.MILLISECONDS)
+            .with().pollInterval(Duration.ONE_HUNDRED_MILLISECONDS)
+            .until( () -> {
+                // Check database for the ICSR to be created
+                List<InitialSavingsEstimationReportModel> all = initialSavingsEstimationReportRepository.findAll();
+                return all != null && !all.isEmpty();
+            });
+
+        // Check S3
+        S3Object s3object = amazonS3.getObject(bucket, "S3KEY123");
+        assertThat(s3object.getObjectContent()).isNotNull();
+        assertThatExceptionOfType(AmazonS3Exception.class).isThrownBy(() -> amazonS3.getObject(bucket, "NONEXISTINGFILE"));
+
+        // Check DB for initialCostSavingsReport with concrete values
+        InitialSavingsEstimationReportModel initialCostSavingsReportDB = initialSavingsEstimationReportService.findByAnalysisOwnerAndAnalysisId("dummy@redhat.com", 1L);
+        assertThat(initialCostSavingsReportDB.getEnvironmentModel().getHypervisors() == 2);
+        assertThat(initialCostSavingsReportDB.getSourceCostsModel().getYear1Server() == 42);
+
+        // Call initialCostSavingsReport
+        ResponseEntity<InitialSavingsEstimationReportModel> initialCostSavingsReport = new RestTemplate().exchange("http://localhost:" + serverPort + "/api/xavier/report/1/initial-saving-estimation", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<InitialSavingsEstimationReportModel>() {});
+
+        // Call workloadInventoryReport
+        ResponseEntity<PagedResources<WorkloadInventoryReportModel>> workloadInventoryReport = new RestTemplate().exchange("http://localhost:" + serverPort + "/api/xavier/report/1/workload-inventory?size=100", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<PagedResources<WorkloadInventoryReportModel>>() {});
+
+        // Call workloadSummaryReport
+        ResponseEntity<WorkloadSummaryReportModel> workloadSummaryReport = new RestTemplate().exchange("http://localhost:" + serverPort + "/api/xavier/report/1/workload-summary", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<WorkloadSummaryReportModel>() {});
+
+        // Checks on Initial Savings Report
+        InitialSavingsEstimationReportModel initialSavingsEstimationReport_Expected = new ObjectMapper().readValue(IOUtils.resourceToString("cfme_inventory-20190912-demolab-withssa-initial-cost-savings-report.json", StandardCharsets.UTF_8, EndToEndTest.class.getClassLoader()), InitialSavingsEstimationReportModel.class);
+        SoftAssertions.assertSoftly(softly -> softly.assertThat(initialSavingsEstimationReport_Expected)
+                .usingRecursiveComparison()
+                .ignoringFieldsMatchingRegexes(".*id.*", ".*creationDate.*", ".*report.*")
+                .isEqualTo(initialCostSavingsReport.getBody()));
+
+        // Checks on Workload Inventory Report
+        SoftAssertions.assertSoftly(softly -> {
+            softly.assertThat(workloadInventoryReport.getBody().getContent().size()).isEqualTo(14);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().flatMap(e -> e.getWorkloads().stream()).distinct().count()).isEqualTo(7);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getWorkloads().contains("Red Hat JBoss EAP")).count()).isEqualTo(2);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().map(WorkloadInventoryReportModel::getOsName).distinct().count()).isEqualTo(4);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getOsName().contains("CentOS 7 (64-bit)")).count()).isEqualTo(2);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().map(WorkloadInventoryReportModel::getComplexity).distinct().count()).isEqualTo(3);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getComplexity().contains("Unknown")).count()).isEqualTo(1);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().flatMap(e -> e.getRecommendedTargetsIMS().stream()).distinct().count()).isEqualTo(3);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getRecommendedTargetsIMS().contains("OSP")).count()).isEqualTo(11);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().flatMap(e -> e.getFlagsIMS().stream()).distinct().count()).isEqualTo(2);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getFlagsIMS().contains("Shared Disk")).count()).isEqualTo(2);
+            softly.assertThat(workloadInventoryReport.getBody().getContent().stream().filter(e -> e.getOsName().contains("ServerNT") && e.getWorkloads().contains("Microsoft SQL Server")).count()).isEqualTo(1);
+        });
+
+        // Checks on Workload Summary Report
+        WorkloadSummaryReportModel workloadSummaryReport_Expected = new ObjectMapper().readValue(IOUtils.resourceToString("cfme_inventory-20190912-demolab-withssa-workload-summary-report.json", StandardCharsets.UTF_8, EndToEndTest.class.getClassLoader()), WorkloadSummaryReportModel.class);
+
+        assertThat(workloadSummaryReport_Expected)
+                .usingRecursiveComparison()
+                .ignoringFieldsMatchingRegexes(".*id.*", ".*creationDate.*",  ".*report.*", ".*workloadsDetectedOSTypeModels.*", ".*scanRunModels.*")
+                .isEqualTo(workloadSummaryReport.getBody());
+
+        // WLSR.ScanRunModels
+        TreeSet<ScanRunModel> wks_scanrunmodel_expected = getWks_scanrunmodel(workloadSummaryReport_Expected.getScanRunModels());
+        TreeSet<ScanRunModel> wks_scanrunmodel_actual = getWks_scanrunmodel(workloadSummaryReport.getBody().getScanRunModels());
+
+        // WLSR.WorkloadsDetectedOSTypeModel
+        TreeSet<WorkloadsDetectedOSTypeModel> wks_ostypemodel_expected = getWks_ostypemodel(workloadSummaryReport_Expected.getWorkloadsDetectedOSTypeModels());
+        TreeSet<WorkloadsDetectedOSTypeModel> wks_ostypemodel_actual = getWks_ostypemodel(workloadSummaryReport.getBody().getWorkloadsDetectedOSTypeModels());
+
+        SoftAssertions.assertSoftly(softly -> {
+                    softly.assertThat(wks_scanrunmodel_expected).isEqualTo(wks_scanrunmodel_actual);
+                    softly.assertThat(wks_ostypemodel_expected).isEqualTo(wks_ostypemodel_actual);
+        });
+
+        // Performance test
+        new RestTemplate().postForEntity("http://localhost:" + serverPort + "/api/xavier/upload", getRequestEntityForUploadRESTCall("cfme_inventory-20190829-16128-uq17dx.tar.gz"), String.class);
+        await()
+            .atMost(timeoutMilliseconds_PerformaceTest, TimeUnit.MILLISECONDS)
+            .with().pollInterval(Duration.FIVE_HUNDRED_MILLISECONDS)
+            .until(() -> {
+                ResponseEntity<WorkloadSummaryReportModel> workloadSummaryReport_PerformanceTest = new RestTemplate().exchange("http://localhost:" + serverPort + "/api/xavier/report/2/workload-summary", HttpMethod.GET, getRequestEntity(), new ParameterizedTypeReference<WorkloadSummaryReportModel>() {});
+                return (workloadSummaryReport_PerformanceTest != null &&
+                        workloadSummaryReport_PerformanceTest.getStatusCodeValue() == 200 &&
+                        workloadSummaryReport_PerformanceTest.getBody() != null &&
+                        workloadSummaryReport_PerformanceTest.getBody().getSummaryModels() != null);
+             });
+
+        camelContext.stop();
+    }
+
+    @NotNull
+    private TreeSet<WorkloadsDetectedOSTypeModel> getWks_ostypemodel(Set<WorkloadsDetectedOSTypeModel> elements) {
+        TreeSet<WorkloadsDetectedOSTypeModel> treeset = new TreeSet<>(new WorkloadsDetectedOSTypeModelComparator());
+        treeset.addAll(elements);
+        return treeset;
+    }
+
+    @NotNull
+    private TreeSet<ScanRunModel> getWks_scanrunmodel(Set<ScanRunModel> elements) {
+        TreeSet<ScanRunModel> treeset = new TreeSet<>(new ScanRunModelComparator());
+        treeset.addAll(elements);
+        return treeset;
+    }
+
+    private HttpEntity getRequestEntity() {
+        return new HttpEntity<String>(getHttpHeaders());
+    }
+
+    @NotNull
+    private HttpEntity<MultiValueMap<String, Object>> getRequestEntityForUploadRESTCall(String filename) throws IOException {
+        // Headers
+        HttpHeaders headers = getHttpHeaders();
+        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
+
+        // Body
+        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
+
+        // File Body part
+        LinkedMultiValueMap<String, String> fileMap = new LinkedMultiValueMap<>();
+        fileMap.add(HttpHeaders.CONTENT_DISPOSITION, "form-data; name=filex; filename=" + filename);
+        fileMap.add("Content-type", "application/zip");
+        body.add("file", new HttpEntity<>(IOUtils.resourceToByteArray(filename, EndToEndTest.class.getClassLoader()), fileMap));
+
+        // params Body parts
+        body.add("percentageOfHypervisorsMigratedOnYear1", "50");
+        body.add("percentageOfHypervisorsMigratedOnYear2", "25");
+        body.add("percentageOfHypervisorsMigratedOnYear3", "25");
+        body.add("yearOverYearGrowthRatePercentage", "5");
+        body.add("sourceproductindicator", "2");
+        body.add("reportName", "report name test");
+        body.add("reportDescription", "report desc test");
+        body.add("payloadName", "payloadname");
+
+        return new HttpEntity<>(body, headers);
+    }
+
+    @NotNull
+    private HttpHeaders getHttpHeaders() {
+        // Headers
+        HttpHeaders headers = new HttpHeaders();
+        headers.set("x-rh-insights-request-id", "2544925e825b4f3f9418c88556541776");
+        headers.set("x-rh-identity", "eyJlbnRpdGxlbWVudHMiOnsiaW5zaWdodHMiOnsiaXNfZW50aXRsZWQiOnRydWV9LCJvcGVuc2hpZnQiOnsiaXNfZW50aXRsZWQiOnRydWV9LCJzbWFydF9tYW5hZ2VtZW50Ijp7ImlzX2VudGl0bGVkIjpmYWxzZX0sImh5YnJpZF9jbG91ZCI6eyJpc19lbnRpdGxlZCI6dHJ1ZX19LCJpZGVudGl0eSI6eyJpbnRlcm5hbCI6eyJhdXRoX3RpbWUiOjAsImF1dGhfdHlwZSI6Imp3dC1hdXRoIiwib3JnX2lkIjoiNjM0MDA1NiIsICJmaWxlbmFtZSI6ImNsb3VkZm9ybXMtZXhwb3J0LXYxXzBfMC1tdWx0aXBsZS1maWxlcy50YXIuZ3oiLCJvcmlnaW4iOiJ4YXZpZXIiLCJjdXN0b21lcmlkIjoiQ0lEODg4IiwgImFuYWx5c2lzSWQiOiIxIn0sImFjY291bnRfbnVtYmVyIjoiMTQ2MDI5MCIsICJ1c2VyIjp7ImZpcnN0X25hbWUiOiJVc2VyIiwiaXNfYWN0aXZlIjp0cnVlLCJpc19pbnRlcm5hbCI6dHJ1ZSwibGFzdF9uYW1lIjoiRHVteSIsImxvY2FsZSI6ImVuX1VTIiwiaXNfb3JnX2FkbWluIjpmYWxzZSwidXNlcm5hbWUiOiJkdW1teUByZWRoYXQuY29tIiwiZW1haWwiOiJkdW1teStxYUByZWRoYXQuY29tIn0sInR5cGUiOiJVc2VyIn19");
+        headers.set("username", "dummy@redhat.com");
+        return headers;
+    }
+
+    private static class ScanRunModelComparator implements Comparator<ScanRunModel> {
+        @Override
+        public int compare(ScanRunModel o1, ScanRunModel o2) {
+            return o1.getTarget().equals(o2.getTarget()) && o1.getType().equals(o2.getType()) ? 0 : 1;
+        }
+    }
+
+    private static class WorkloadsDetectedOSTypeModelComparator implements Comparator<WorkloadsDetectedOSTypeModel> {
+        @Override
+        public int compare(WorkloadsDetectedOSTypeModel o1, WorkloadsDetectedOSTypeModel o2) {
+            return o1.getOsName().equals(o2.getOsName()) && o1.getTotal().equals(o2.getTotal()) ? 0 : 1;
+        }
+    }
+}
diff --git a/src/test/java/org/jboss/xavier/integrations/TestConfigurationS3.java b/src/test/java/org/jboss/xavier/integrations/TestConfigurationS3.java
new file mode 100644
index 0000000..875db1a
--- /dev/null
+++ b/src/test/java/org/jboss/xavier/integrations/TestConfigurationS3.java
@@ -0,0 +1,24 @@
+package org.jboss.xavier.integrations;
+
+import com.amazonaws.auth.AWSStaticCredentialsProvider;
+import com.amazonaws.auth.BasicAWSCredentials;
+import com.amazonaws.client.builder.AwsClientBuilder;
+import com.amazonaws.services.s3.AmazonS3;
+import com.amazonaws.services.s3.AmazonS3ClientBuilder;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.test.context.TestConfiguration;
+import org.springframework.context.annotation.Bean;
+
+@TestConfiguration
+public class TestConfigurationS3 {
+    @Value("${S3_HOST}")
+    private String s3_host;
+
+    @Bean(name = "s3client")
+    public AmazonS3 getAmazonS3client() {
+        return AmazonS3ClientBuilder.standard()
+                .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials("dummyKey", "dummySecret")))
+                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(s3_host, "us-east-1"))
+                .build();
+    }
+}
diff --git a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_DirectDownloadTest.java b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_DirectDownloadTest.java
index 7be26b9..f535e09 100644
--- a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_DirectDownloadTest.java
+++ b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_DirectDownloadTest.java
@@ -21,7 +21,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 
-@MockEndpointsAndSkip("http4:oldhost|direct:unzip-file")
+@MockEndpointsAndSkip("http.*|direct:unzip-file")
 public class MainRouteBuilder_DirectDownloadTest extends XavierCamelTest {
     @Autowired
     MainRouteBuilder mainRouteBuilder;
@@ -47,7 +47,7 @@ public void mainRouteBuilder_DirectDownloadFile_PersistedNotificationGiven_Shoul
         camelContext.getRouteDefinition("download-file").adviceWith(camelContext, new AdviceWithRouteBuilder() {
             @Override
             public void configure() {
-                weaveByToUri("http4:.*").after()
+                weaveByToUri("http.*").after()
                         .setHeader(Exchange.HTTP_RESPONSE_CODE, simple("200"))
                         .setBody(exchange -> this.getClass().getClassLoader().getResourceAsStream("cloudforms-export-v1_0_0.json"));
             }
@@ -82,6 +82,7 @@ public void configure() {
         //Then
         mockOldHost.assertIsSatisfied();
         assertThat(mockOldHost.getExchanges().get(0).getIn().getHeader(RouteBuilderExceptionHandler.MA_METADATA, Map.class).get("dummy")).isEqualTo("CID1234");
+        assertThat(mockOldHost.getExchanges().get(0).getIn().getHeader(RouteBuilderExceptionHandler.MA_METADATA, Map.class).get("org_id")).isEqualTo("6340056");
         assertThat(mockOldHost.getExchanges().get(0).getIn().getHeader(RouteBuilderExceptionHandler.MA_METADATA, Map.class).get("auth_time")).isEqualTo("0");
         mockUnzipFile.assertIsSatisfied();
         assertThat(analysisService.findByOwnerAndId(analysisModel.getOwner(), analysisModel.getId()).getPayloadStorageId()).isEqualToIgnoringCase("S3KEY123");
diff --git a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_RestUploadTest.java b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_RestUploadTest.java
index aa2f48d..bdb7df4 100644
--- a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_RestUploadTest.java
+++ b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_RestUploadTest.java
@@ -38,7 +38,7 @@
     public void setup() {
         camel_context = camel_context.substring(0, camel_context.indexOf("*"));
     }
-
+   
     @Test
     public void mainRouteBuilder_routeRestUpload_ContentGiven_ShouldUpload() throws Exception {
         //Given
diff --git a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_S3Test.java b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_S3Test.java
index 4e31edb..3c722c4 100644
--- a/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_S3Test.java
+++ b/src/test/java/org/jboss/xavier/integrations/route/MainRouteBuilder_S3Test.java
@@ -28,14 +28,14 @@
     @Test
     @Ignore
     public void s3Test() throws Exception {
-        camelContext.setTracing(true);
         camelContext.setAutoStartup(false);
         camelContext.addRoutes(new RouteBuilder() {
             @Override
             public void configure() throws Exception {
                 String keyValue = UUID.randomUUID().toString();
                 System.out.println(String.format("UUID [%s]", keyValue));
-                from("file:///home/jonathan/Downloads?fileName=cfme_inventory_0.json&noop=true").routeId("s3route")
+                // You need to change here the "myfolder" part
+                from("file:///myfolder?fileName=cfme_inventory_0.json&noop=true").routeId("s3route")
                         .convertBodyTo(byte[].class)
                         .setHeader(S3Constants.CONTENT_LENGTH, simple("${in.header.CamelFileLength}"))
                         .setHeader(S3Constants.KEY, simple(keyValue))
diff --git a/src/test/java/org/jboss/xavier/integrations/route/WorkloadSummaryReportRoutes_DirectCalculateVMWorkloadInventoryModelTest.java b/src/test/java/org/jboss/xavier/integrations/route/WorkloadSummaryReportRoutes_DirectCalculateVMWorkloadInventoryModelTest.java
index 5f06836..b537bcf 100644
--- a/src/test/java/org/jboss/xavier/integrations/route/WorkloadSummaryReportRoutes_DirectCalculateVMWorkloadInventoryModelTest.java
+++ b/src/test/java/org/jboss/xavier/integrations/route/WorkloadSummaryReportRoutes_DirectCalculateVMWorkloadInventoryModelTest.java
@@ -372,11 +372,9 @@ public void DirectCalculateVMWorkloadInventoryModel_ShouldPersistScanRunModel()
         Assert.assertNotNull(scanRunModels);
         Assert.assertEquals(2, scanRunModels.size());
 
-        scanRunModels.stream().filter(model -> model.getId() % 2 == 0).forEach(srm ->
-                Assert.assertEquals("Virt Platform", srm.getType()));
+        Assert.assertTrue(scanRunModels.stream().filter(model -> model.getId() % 2 == 0).allMatch(srm -> !srm.getType()));
 
-        scanRunModels.stream().filter(model -> model.getId() % 2 != 0).forEach(srm ->
-                Assert.assertEquals("Virt Platform + SmartState", srm.getType()));
+        Assert.assertTrue(scanRunModels.stream().filter(model -> model.getId() % 2 != 0).allMatch(srm -> srm.getType()));
 
         camelContext.stop();
     }
diff --git a/src/test/java/org/jboss/xavier/integrations/route/XavierCamelTest.java b/src/test/java/org/jboss/xavier/integrations/route/XavierCamelTest.java
index 3af61cb..67aa5b8 100644
--- a/src/test/java/org/jboss/xavier/integrations/route/XavierCamelTest.java
+++ b/src/test/java/org/jboss/xavier/integrations/route/XavierCamelTest.java
@@ -23,7 +23,6 @@
     @Before
     public void beforeTest() {
         //Given
-        camelContext.setTracing(true);
         camelContext.setAutoStartup(false);
         camelContext.addComponent("aws-s3", camelContext.getComponent("stub"));
     }
diff --git a/src/test/resources/cfme_inventory-20190829-16128-uq17dx.tar.gz b/src/test/resources/cfme_inventory-20190829-16128-uq17dx.tar.gz
new file mode 100644
index 0000000..b510016
Binary files /dev/null and b/src/test/resources/cfme_inventory-20190829-16128-uq17dx.tar.gz differ
diff --git a/src/test/resources/cfme_inventory-20190912-demolab-withssa-initial-cost-savings-report.json b/src/test/resources/cfme_inventory-20190912-demolab-withssa-initial-cost-savings-report.json
new file mode 100644
index 0000000..3d87689
--- /dev/null
+++ b/src/test/resources/cfme_inventory-20190912-demolab-withssa-initial-cost-savings-report.json
@@ -0,0 +1,123 @@
+ {
+    "id": 806,
+    "customerId": "6340056",
+    "fileName": "cfme_inventory-20190912-demolab_withSSA.tar.gz",
+    "creationDate": 1571304735301,
+    "environmentModel": {
+      "sourceProductIndicator": 1,
+      "hypervisors": 8,
+      "year1Hypervisor": 4,
+      "year2Hypervisor": 2,
+      "year3Hypervisor": 2,
+      "growthRatePercentage": 0.05,
+      "dealIndicator": 1,
+      "openStackIndicator": true
+    },
+    "sourceCostsModel": {
+      "sourceLicenseValue": 9000,
+      "sourceMaintenanceValue": 6750,
+      "year1Server": 8,
+      "year1SourceValue": 0,
+      "year1SourceMaintenanceValue": 60000,
+      "year2Server": 8,
+      "year2SourceValue": 0,
+      "year2SourceMaintenanceValue": 60000,
+      "year3Server": 8,
+      "year3SourceValue": 0,
+      "year3SourceMaintenanceValue": 60000,
+      "totSourceValue": 0,
+      "totSourceMaintenanceValue": 180000,
+      "totalSourceValue": 180000,
+      "sourceNewELAIndicator": 0,
+      "sourceNewHighValue": 1458000,
+      "sourceNewLikelyValue": 1215000,
+      "sourceNewLowValue": 972000,
+      "sourceRenewHighValue": 1458000,
+      "sourceRenewLikelyValue": 1215000,
+      "sourceRenewLowValue": 972000
+    },
+    "sourceRampDownCostsModel": {
+      "year1ServersOffSource": 4,
+      "year1SourceActiveLicense": 4,
+      "year1SourcePaidMaintenance": 8,
+      "year1SourceMaintenancePerServerValue": 13500,
+      "year1SourceMaintenanceTotalValue": 108000,
+      "year2ServersOffSource": 6,
+      "year2SourceActiveLicense": 2,
+      "year2SourcePaidMaintenance": 8,
+      "year2SourceMaintenancePerServerValue": 15525,
+      "year2SourceMaintenanceTotalValue": 124200,
+      "year3ServersOffSource": 8,
+      "year3SourceActiveLicense": 0,
+      "year3SourcePaidMaintenance": 8,
+      "year3SourceMaintenancePerServerValue": 17854,
+      "year3SourceMaintenanceTotalValue": 142832
+    },
+    "rhvRampUpCostsModel": {
+      "year1RhvServers": 4,
+      "year1RhvCompSubs": 4,
+      "year1RhvPaidSubs": 0,
+      "year1RhvPerServerValue": 0,
+      "year1RhvTotalValue": 0,
+      "year1RhvServersGrowth": 0,
+      "year1RhvCompSubsGrowth": 0,
+      "year1RhvPaidSubsGrowth": 0,
+      "year1RhvPerServerGrowthValue": 375,
+      "year1RhvTotalGrowthValue": 0,
+      "year1RhvGrandTotalGrowthValue": 0,
+      "rhvSwitchLearningSubsValue": 30000,
+      "rhvSwitchConsultValue": 100000,
+      "rhvSwitchTAndEValue": 30000,
+      "year2RhvServers": 6,
+      "year2RhvCompSubs": 0,
+      "year2RhvPaidSubs": 6,
+      "year2RhvPerServerValue": 375,
+      "year2RhvTotalValue": 2250,
+      "year2RhvServersGrowth": 0,
+      "year2RhvCompSubsGrowth": 0,
+      "year2RhvPaidSubsGrowth": 0,
+      "year2RhvPerServerGrowthValue": 375,
+      "year2RhvTotalGrowthValue": 0,
+      "year2RhvGrandTotalGrowthValue": 2250,
+      "year3RhvServers": 8,
+      "year3RhvCompSubs": 0,
+      "year3RhvPaidSubs": 8,
+      "year3RhvPerServerValue": 375,
+      "year3RhvTotalValue": 3000,
+      "year3RhvServersGrowth": 0,
+      "year3RhvCompSubsGrowth": 0,
+      "year3RhvPaidSubsGrowth": 0,
+      "year3RhvPerServerGrowthValue": 375,
+      "year3RhvTotalGrowthValue": 0,
+      "year3RhvGrandTotalGrowthValue": 3000
+    },
+    "rhvYearByYearCostsModel": {
+      "year1RhvGrandTotalValue": 268000,
+      "year2RhvGrandTotalValue": 126450,
+      "year3RhvGrandTotalValue": 145832,
+      "year1RhvBudgetFreedHighValue": 218000,
+      "year1RhvBudgetFreedLikelyValue": 137000,
+      "year1RhvBudgetFreedLowValue": 56000,
+      "year2RhvBudgetFreedHighValue": 359550,
+      "year2RhvBudgetFreedLikelyValue": 278550,
+      "year2RhvBudgetFreedLowValue": 197550,
+      "year3RhvBudgetFreedHighValue": 340168,
+      "year3RhvBudgetFreedLikelyValue": 259168,
+      "year3RhvBudgetFreedLowValue": 178168
+    },
+    "rhvSavingsModel": {
+      "rhvSaveHighValue": 917718,
+      "rhvSaveLikelyValue": 674718,
+      "rhvSaveLowValue": 431718,
+      "rhvSaveFromValue": null,
+      "rhvSaveToValue": null
+    },
+    "rhvAdditionalContainerCapacityModel": {
+      "rhvContainerHigh": 6118,
+      "rhvContainerLikely": 4498,
+      "rhvContainerLow": 2878,
+      "rhvContainerFrom": null,
+      "rhvContainerTo": null
+    },
+    "rhvOrderFormModel": null
+  }
diff --git a/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-inventory-report.json b/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-inventory-report.json
new file mode 100644
index 0000000..59551b7
--- /dev/null
+++ b/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-inventory-report.json
@@ -0,0 +1,282 @@
+{
+    "content": [
+      {
+        "id": 24768,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "lb",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux Server release 7.6 (Maipo)",
+        "diskSpace": 2614591488,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [],
+        "complexity": "Easy",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24767,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "jboss1",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux Server release 7.6 (Maipo)",
+        "diskSpace": 4745691136,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [
+          "Red Hat JBoss EAP"
+        ],
+        "complexity": "Medium",
+        "recommendedTargetsIMS": [
+          "RHV"
+        ],
+        "flagsIMS": [
+          "RDM"
+        ],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-47",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24766,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "cluster1",
+        "osName": "CentOS 7 (64-bit)",
+        "osDescription": "CentOS 7 (64-bit)",
+        "diskSpace": 0,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [],
+        "complexity": "Medium",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "Convert2RHEL",
+          "OSP"
+        ],
+        "flagsIMS": [
+          "Shared Disk"
+        ],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": false
+      },
+      {
+        "id": 24765,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "cluster0",
+        "osName": "CentOS 7 (64-bit)",
+        "osDescription": "CentOS 7 (64-bit)",
+        "diskSpace": 0,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [],
+        "complexity": "Medium",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "Convert2RHEL",
+          "OSP"
+        ],
+        "flagsIMS": [
+          "Shared Disk"
+        ],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-47",
+        "creationDate": 1568305947979,
+        "ssaEnabled": false
+      },
+      {
+        "id": 24764,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "weblogic",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux Server release 7.7 (Maipo)",
+        "diskSpace": 9302904832,
+        "memory": 4294967296,
+        "cpuCores": 2,
+        "workloads": [
+          "Oracle Weblogic"
+        ],
+        "complexity": "Easy",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24763,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "oracle_db",
+        "osName": "Linux",
+        "osDescription": "CentOS Linux release 7.6.1810 (Core) ",
+        "diskSpace": 18612346880,
+        "memory": 8589934592,
+        "cpuCores": 2,
+        "workloads": [
+          "Oracle Database"
+        ],
+        "complexity": "Medium",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "Convert2RHEL",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24762,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "mssql_db",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux Server release 7.6 (Maipo)",
+        "diskSpace": 3317547008,
+        "memory": 4294967296,
+        "cpuCores": 2,
+        "workloads": [
+          "Microsoft SQL Server"
+        ],
+        "complexity": "Easy",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24761,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "db",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux Server release 7.6 (Maipo)",
+        "diskSpace": 2669137920,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [],
+        "complexity": "Easy",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-47",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24760,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "jboss0",
+        "osName": "Linux",
+        "osDescription": "Red Hat Enterprise Linux 7 (64-bit)",
+        "diskSpace": 4795150336,
+        "memory": 2147483648,
+        "cpuCores": 1,
+        "workloads": [
+          "Red Hat JBoss EAP"
+        ],
+        "complexity": "Medium",
+        "recommendedTargetsIMS": [
+          "RHV"
+        ],
+        "flagsIMS": [
+          "RDM"
+        ],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      },
+      {
+        "id": 24759,
+        "provider": "vSphere",
+        "datacenter": "Datacenter",
+        "cluster": "VMCluster",
+        "vmName": "wmssql_db",
+        "osName": "ServerNT",
+        "osDescription": "Windows Server 2016 Standard",
+        "diskSpace": 15177039872,
+        "memory": 4294967296,
+        "cpuCores": 1,
+        "workloads": [
+          "Microsoft SQL Server"
+        ],
+        "complexity": "Easy",
+        "recommendedTargetsIMS": [
+          "RHV",
+          "OSP"
+        ],
+        "flagsIMS": [],
+        "product": "VMware vCenter",
+        "version": "6.7.2",
+        "host_name": "host-31",
+        "creationDate": 1568305947979,
+        "ssaEnabled": true
+      }
+    ],
+    "last": false,
+    "totalPages": 2,
+    "totalElements": 14,
+    "first": true,
+    "sort": [
+      {
+        "direction": "DESC",
+        "property": "id",
+        "ignoreCase": false,
+        "nullHandling": "NATIVE",
+        "ascending": false,
+        "descending": true
+      }
+    ],
+    "numberOfElements": 10,
+    "size": 10,
+    "number": 0
+  }
diff --git a/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-summary-report.json b/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-summary-report.json
new file mode 100644
index 0000000..a4dbd06
--- /dev/null
+++ b/src/test/resources/cfme_inventory-20190912-demolab-withssa-workload-summary-report.json
@@ -0,0 +1,49 @@
+{
+    "id": 461,
+    "summaryModels": [
+      {
+        "id": 486,
+        "provider": "vSphere",
+        "clusters": 1,
+        "sockets": 20,
+        "vms": 14,
+        "hosts": 2,
+        "product": "VMware vCenter",
+        "version": "6.7.2"
+      }
+    ],
+    "complexityModel": {
+      "id": 461,
+      "easy": 7,
+      "medium": 6,
+      "hard": 0,
+      "unknown": 1
+    },
+    "recommendedTargetsIMSModel": {
+      "id": 410,
+      "total": 14,
+      "rhv": 13,
+      "rhel": 4,
+      "osp": 11
+    },
+    "workloadsDetectedOSTypeModels": [
+      {
+        "id": 470,
+        "osName": "ServerNT",
+        "total": 1
+      },
+      {
+        "id": 469,
+        "osName": "Linux",
+        "total": 8
+      }
+    ],
+    "scanRunModels": [
+      {
+        "id": 311,
+        "target": "vSphere",
+        "date": 1568239200000,
+        "smartStateEnabled": "Virt Platform + SmartState"
+      }
+    ]
+  }
diff --git a/src/test/resources/cfme_inventory-20190912-demolab_withSSA.tar.gz b/src/test/resources/cfme_inventory-20190912-demolab_withSSA.tar.gz
new file mode 100644
index 0000000..d2f7dcc
Binary files /dev/null and b/src/test/resources/cfme_inventory-20190912-demolab_withSSA.tar.gz differ
diff --git a/src/test/resources/cloudforms-export-v1.json.gz b/src/test/resources/cloudforms-export-v1.json.gz
new file mode 100644
index 0000000..c71a787
Binary files /dev/null and b/src/test/resources/cloudforms-export-v1.json.gz differ
diff --git a/src/test/resources/cloudforms-export-v1.zip b/src/test/resources/cloudforms-export-v1.zip
new file mode 100644
index 0000000..c942456
Binary files /dev/null and b/src/test/resources/cloudforms-export-v1.zip differ
diff --git a/src/test/resources/cloudforms-export-v1_0_0-multiple-files.tar.gz b/src/test/resources/cloudforms-export-v1_0_0-multiple-files.tar.gz
index 55e8bf5..04d0dba 100644
Binary files a/src/test/resources/cloudforms-export-v1_0_0-multiple-files.tar.gz and b/src/test/resources/cloudforms-export-v1_0_0-multiple-files.tar.gz differ
diff --git a/src/test/resources/cloudforms-export-v1_0_0.tar.gz b/src/test/resources/cloudforms-export-v1_0_0.tar.gz
index 99e4d2b..9c22ea3 100644
Binary files a/src/test/resources/cloudforms-export-v1_0_0.tar.gz and b/src/test/resources/cloudforms-export-v1_0_0.tar.gz differ
diff --git a/src/test/resources/docker-only-test-files/drools-kie-compose.yml b/src/test/resources/docker-only-test-files/drools-kie-compose.yml
new file mode 100644
index 0000000..257e68c
--- /dev/null
+++ b/src/test/resources/docker-only-test-files/drools-kie-compose.yml
@@ -0,0 +1,38 @@
+version: '2'
+
+services:
+
+  drools-wb:
+    image: jboss/drools-workbench-showcase:7.18.0.Final
+    ports:
+      - 8001:8001
+      - 18080:8080
+    environment:
+      - KIE_ADMIN_USER=kieserver
+      - KIE_ADMIN_PWD=kieserver1!
+    
+  kie-server:
+    image: jboss/kie-server-showcase:7.18.0.Final
+    links:
+      - drools-wb:kie-wb
+    depends_on:
+      - drools-wb
+    ports:
+      - 28080:8080
+    environment:
+      - KIE_SERVER_ID=analytics-kieserver
+      - KIE_ADMIN_USER=kieserver
+      - KIE_ADMIN_PWD=kieserver1!
+      - KIE_SERVER_MODE=DEVELOPMENT
+      - MAVEN_REPOS=BC,CENTRAL
+      - BC_MAVEN_REPO_URL=http://kie-wb:8080/business-central/maven2
+      - BC_MAVEN_REPO_PASSWORD=admin
+      - BC_MAVEN_REPO_USER=admin
+      - CENTRAL_MAVEN_REPO_URL=https://repo.maven.apache.org/maven2
+      - KIE_SERVER_CONTROLLER=http://kie-wb:8080/business-central/rest/controller
+      - KIE_REPOSITORY=https://repository.jboss.org/nexus/content/groups/public-jboss
+      - KIE_SERVER_CONTROLLER_PWD=admin
+      - KIE_SERVER_CONTROLLER_USER=admin
+      - KIE_SERVER_LOCATION=http://kie-server:8080/kie-server/services/rest/server
+      - KIE_SERVER_PWD=kieserver1!
+      - KIE_SERVER_USER=kieserver
diff --git a/src/test/resources/docker-only-test-files/drools-kie-docker-test.sh b/src/test/resources/docker-only-test-files/drools-kie-docker-test.sh
new file mode 100755
index 0000000..4012189
--- /dev/null
+++ b/src/test/resources/docker-only-test-files/drools-kie-docker-test.sh
@@ -0,0 +1,104 @@
+#!/usr/bin/env bash
+#
+# This file serves as a Docker only test for the Drools+KIE containers in order to test the interaction and deployment
+#
+
+
+# Docker Drools container
+drools_ext_port=8080
+kie_ext_port=8180
+docker run -p $drools_ext_port:8080 -p 8001:8001 -d --name drools-workbench \
+       --env KIE_ADMIN_USER=kieserver \
+       --env KIE_ADMIN_PWD=kieserver1! jboss/drools-workbench-showcase:7.18.0.Final
+
+sleep 5s
+# Docker KIE container
+docker run -p $kie_ext_port:8080 -d --name kie-server --link drools-workbench:kie-wb \
+	--env KIE_SERVER_ID=analytics-kieserver \
+	--env KIE_ADMIN_USER=kieserver \
+	--env KIE_ADMIN_PWD=kieserver1! \
+	--env KIE_SERVER_MODE=DEVELOPMENT \
+        --env MAVEN_REPOS=BC,CENTRAL \
+	--env BC_MAVEN_REPO_URL=http://kie-wb:8080/business-central/maven2 \
+      	--env BC_MAVEN_REPO_PASSWORD=admin \
+        --env BC_MAVEN_REPO_USER=admin \
+	--env CENTRAL_MAVEN_REPO_URL=https://repo.maven.apache.org/maven2 \
+	--env KIE_SERVER_CONTROLLER=http://kie-wb:8080/business-central/rest/controller \
+       	--env KIE_REPOSITORY=https://repository.jboss.org/nexus/content/groups/public-jboss \
+      	--env KIE_SERVER_CONTROLLER_PWD=admin \
+      	--env KIE_SERVER_CONTROLLER_USER=admin \
+      	--env KIE_SERVER_LOCATION=http://kie-server:8080/kie-server/services/rest/server \
+      	--env KIE_SERVER_PWD=kieserver1! \
+      	--env KIE_SERVER_USER=kieserver \
+jboss/kie-server-showcase:7.18.0.Final
+
+
+#	--env BC_MAVEN_REPO_URL=http://localhost:$drools_ext_port/business-central/maven2 \
+#	--env KIE_SERVER_CONTROLLER=http://localhost:$drools_ext_port/business-central/rest/controller \
+#      	--env KIE_SERVER_LOCATION=http://localhost:$kie_ext_port/kie-server/services/rest/server \
+
+# Using docker-compose
+#drools_ext_port=18080
+#kie_ext_port=28080
+#docker-compose -f drools-kie-compose.yml up -d --build
+
+sleep 5s
+
+# Create the initial space
+curl http://localhost:$drools_ext_port/business-central/rest/spaces -X POST --data '{"name": "MySpace","description": "My new space.","owner": "admin","defaultGroupId": "com.newspace"}' \
+     -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
+
+sleep 5s
+
+# Clone the drools project from Github
+curl http://localhost:$drools_ext_port/business-central/rest/spaces/MySpace/git/clone -X POST --data '{"name":"xavier-analytics","description":"project description inside business central.","gitURL":"https://github.com/jonathanvila/xavier-analytics"}' -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
+sleep 5s
+
+# Compile the project
+curl http://localhost:$drools_ext_port/business-central/rest/spaces/MySpace/projects/Xavier%20Analytics/maven/compile -X POST -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
+sleep 5s
+
+# Install the project
+curl http://localhost:$drools_ext_port/business-central/rest/spaces/MySpace/projects/Xavier%20Analytics/maven/install -X POST -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
+sleep 5s
+
+# Deploy the project
+curl http://localhost:$drools_ext_port/business-central/rest/spaces/MySpace/projects/Xavier%20Analytics/maven/deploy -X POST -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
+
+read -n 1 -s -r -p "Press any key to Create the BC Container"
+
+# Create the Drools container
+curl http://localhost:$drools_ext_port/business-central/rest/controller/management/servers/analytics-kieserver/containers/xavier-analytics_0.0.1-SNAPSHOT -X PUT -H "Cache-Control:no-cache" -H "Content-Type:application/xml" -H "Authorization:Basic YWRtaW46YWRtaW4=" --data '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><container-spec-details> <container-id>xavier-analytics_0.0.1-SNAPSHOT</container-id><container-name>xavier-analytics_0.0.1-SNAPSHOT</container-name><release-id><artifact-id>org.jboss.xavier</artifact-id><group-id>xavier-analytics</group-id><version>0.0.1-SNAPSHOT</version></release-id><configs><entry> <key>RULE</key><value xsi:type="ruleConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><scannerStatus>STARTED</scannerStatus></value></entry><entry><key>PROCESS</key> <value xsi:type="processConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <runtimeStrategy>SINGLETON</runtimeStrategy> <kbase></kbase> <ksession></ksession> <mergeMode>MERGE_COLLECTIONS</mergeMode> </value> </entry> </configs> <status>STARTED</status></container-spec-details>' -v
+
+read -n 1 -s -r -p "Press any key to Create the KIE Container "
+
+# Create the KIE container
+curl  -X PUT -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic a2llc2VydmVyOmtpZXNlcnZlcjEh" --data '{"container-id" : "xavier-analytics_0.0.1-SNAPSHOT","release-id" : {"group-id" : "org.jboss.xavier","artifact-id" : "xavier-analytics","version" : "0.0.1-SNAPSHOT" } }' http://localhost:$kie_ext_port/kie-server/services/rest/server/containers/xavier-analytics_0.0.1-SNAPSHOT -v
+
+ECHO "###### Installation Done"
+
+##### the above line will give us following error , meaning KIE can not find the Drools Maven repository ####
+# {
+#  "type" : "FAILURE",
+#  "msg" : "Failed to create container xavier-analytics_0.0.1-SNAPSHOT with module org.jboss.xavier:xavier-analytics:0.0.1-SNAPSHOT: java.lang.RuntimeException: Cannot find KieModule:  org.jboss.xavier:xavier-analytics:0.0.1-SNAPSHOT",
+#  "result" : null
+#* Connection #0 to host localhost left intact
+#}%
+
+# If we check on business-central with Admin->Artifacts we won't see any artifact deployed
+
+read -n 1 -s -r -p "Press any key to call KIE to calculate InitialCostSavingsReport "
+
+
+# Call to execute KIE commands
+curl -X POST -H "Content-Type:application/xml" -H "X-KIE-ContentType:xstream"  -H "Authorization:Basic a2llc2VydmVyOmtpZXNlcnZlcjEh" --data '<?xml version="1.0" encoding="UTF-8"?><batch-execution lookup="kiesession0"><insert><org.jboss.xavier.analytics.pojo.input.UploadFormInputDataModel><customerId>99</customerId><fileName>vcenter.v2v.bos.redhat.com.json.zip</fileName><hypervisor>2</hypervisor><totalDiskSpace>563902124032</totalDiskSpace><year1HypervisorPercentage>10.0</year1HypervisorPercentage><year2HypervisorPercentage>10.0</year2HypervisorPercentage><year3HypervisorPercentage>10.0</year3HypervisorPercentage><growthRatePercentage>20.0</growthRatePercentage><dealIndicator>1</dealIndicator><openStackIndicator>1</openStackIndicator><sourceProductIndicator>1</sourceProductIndicator></org.jboss.xavier.analytics.pojo.input.UploadFormInputDataModel></insert><fire-all-rules/><query out-identifier="output" name="get InitialSavingsEstimationReports"/></batch-execution>' http://localhost:$kie_ext_port/kie-server/services/rest/server/containers/instances/xavier-analytics_0.0.1-SNAPSHOT
+
+#This command gives us this error in KIE's log
+#17:52:59,094 WARN  [org.appformer.maven.integration.MavenRepository] (default task-2) Unable to resolve artifact: org.jboss.xavier:xavier-analytics:pom:0.0.1-SNAPSHOT
+#17:52:59,094 ERROR [org.kie.server.services.impl.KieServerImpl] (default task-2) Error creating container 'xavier-analytics_0.0.1-SNAPSHOT' for module 'org.jboss.xavier:xavier-analytics:0.0.1-SNAPSHOT': java.lang.RuntimeException: Cannot find KieModule: org.jboss.xavier:xavier-analytics:0.0.1-SNAPSHOT
+
+echo "-------- The End, adeu siau -------"
+
+# Useful commands
+# To check how a job is going
+# curl http://localhost:8080/business-central/rest/jobs/{job_id} -X GET -H "Cache-Control:no-cache" -H "Content-Type:application/json" -H "Authorization:Basic YWRtaW46YWRtaW4=" -v
diff --git a/src/test/resources/kie-server-response-workloadinventoryreport.xml b/src/test/resources/kie-server-response-workloadinventoryreport.xml
index 1ef0819..d5d7dee 100644
--- a/src/test/resources/kie-server-response-workloadinventoryreport.xml
+++ b/src/test/resources/kie-server-response-workloadinventoryreport.xml
@@ -22,6 +22,10 @@
                             <complexity>complexity</complexity>
                             <recommendedTargetsIMS></recommendedTargetsIMS>
                             <flagsIMS></flagsIMS>
+                            <product>VMWare</product>
+                            <version>3</version>
+                            <host_name>myhost</host_name>
+                            <ssaEnabled>true</ssaEnabled>
                             <creationDate> 2019-08-04 15:35:18.474 EST</creationDate>
                         </org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel>
                         <fact-handle external-form="0:2:181540827:181540827:29:DEFAULT:NON_TRAIT:org.jboss.xavier.analytics.pojo.output.workload.inventory.WorkloadInventoryReportModel"/>
diff --git a/src/test/resources/minio-bucket-creation-commands.sh b/src/test/resources/minio-bucket-creation-commands.sh
new file mode 100755
index 0000000..cdfee03
--- /dev/null
+++ b/src/test/resources/minio-bucket-creation-commands.sh
@@ -0,0 +1,5 @@
+#!/usr/bin/env bash
+/usr/bin/mc config host add myminio http://$1 BQA2GEXO711FVBVXDWKM uvgz3LCwWM3e400cDkQIH/y1Y4xgU4iV91CwFSPC;
+/usr/bin/mc mb myminio/insights-upload-perma;
+/usr/bin/mc mb myminio/insights-upload-rejected;
+exit 0;
diff --git a/src/test/resources/platform.upload.available.json b/src/test/resources/platform.upload.available.json
deleted file mode 100644
index 9a05ad5..0000000
--- a/src/test/resources/platform.upload.available.json
+++ /dev/null
@@ -1,35 +0,0 @@
-{
-  "identity": {
-    "internal": {
-      "auth_time": 0,
-      "auth_type": "basic-auth",
-      "org_id": "711497"
-    },
-    "account_number": "477931",
-    "user": {
-      "first_name": "Quality",
-      "last_name": "Assurance",
-      "is_internal": true,
-      "is_active": true,
-      "locale": "en_US",
-      "is_org_admin": true,
-      "username": "qa@redhat.com",
-      "email": "qa+qa@redhat.com"
-    },
-    "type": "User"
-  },
-  "entitlements": {
-    "insights": {
-      "is_entitled": true
-    },
-    "openshift": {
-      "is_entitled": true
-    },
-    "smart_management": {
-      "is_entitled": false
-    },
-    "hybrid_cloud": {
-      "is_entitled": true
-    }
-  }
-}
\ No newline at end of file
diff --git a/src/test/resources/platform.upload.xavier.json b/src/test/resources/platform.upload.xavier.json
index 8db7206..212e800 100644
--- a/src/test/resources/platform.upload.xavier.json
+++ b/src/test/resources/platform.upload.xavier.json
@@ -7,6 +7,6 @@
   "size": 5391,
   "service": "xavier",
   "category": "cloudforms",
-  "b64_identity": "eyJpZGVudGl0eSI6eyJhY2NvdW50X251bWJlciI6IjEyMzQ1NCIsImludGVybmFsIjp7ImZpbGVuYW1lIjoidmNlbnRlci52MnYuYm9zLnJlZGhhdC5jb20uanNvbiIsIm9yaWdpbiI6Im1hLXhhdmllciIsImN1c3RvbWVyaWQiOiJDSUQ4ODgifX19",
+  "b64_identity": "eyJlbnRpdGxlbWVudHMiOnsiaW5zaWdodHMiOnsiaXNfZW50aXRsZWQiOnRydWV9LCJvcGVuc2hpZnQiOnsiaXNfZW50aXRsZWQiOnRydWV9LCJzbWFydF9tYW5hZ2VtZW50Ijp7ImlzX2VudGl0bGVkIjpmYWxzZX0sImh5YnJpZF9jbG91ZCI6eyJpc19lbnRpdGxlZCI6dHJ1ZX19LCJpZGVudGl0eSI6eyJpbnRlcm5hbCI6eyJhdXRoX3RpbWUiOjAsImF1dGhfdHlwZSI6Imp3dC1hdXRoIiwib3JnX2lkIjoiNjM0MDA1NiJ9LCJhY2NvdW50X251bWJlciI6IjE0NjAyOTAiLCJmaWxlbmFtZSI6InZjZW50ZXIudjJ2LmJvcy5yZWRoYXQuY29tLmpzb24iLCJvcmlnaW4iOiJtYS14YXZpZXIiLCJjdXN0b21lcmlkIjoiQ0lEODg4IiwgInVzZXIiOnsiZmlyc3RfbmFtZSI6Ik1hcmNvIiwiaXNfYWN0aXZlIjp0cnVlLCJpc19pbnRlcm5hbCI6dHJ1ZSwibGFzdF9uYW1lIjoiUml6emkiLCJsb2NhbGUiOiJlbl9VUyIsImlzX29yZ19hZG1pbiI6ZmFsc2UsInVzZXJuYW1lIjoibXJpenppQHJlZGhhdC5jb20iLCJlbWFpbCI6Im1yaXp6aStxYUByZWRoYXQuY29tIn0sInR5cGUiOiJVc2VyIn19",
   "url": "http://172.17.0.1:9000/insights-upload-perm-test/440c88f9-5930-416e-9799-fa01d156df29?AWSAccessKeyId=BQA2GEXO711FVBVXDWKM&Signature=V2hJED3EgA%2FDmOqcGrzgI5W2GtY%3D&Expires=1559398049 "
-}
\ No newline at end of file
+}
diff --git a/upload/fichero.txt b/upload/fichero.txt
deleted file mode 100644
index 7bfb355..0000000
--- a/upload/fichero.txt
+++ /dev/null
@@ -1 +0,0 @@
-this is a test body
\ No newline at end of file
diff --git a/upload/testfilename.txt b/upload/testfilename.txt
deleted file mode 100644
index 7bfb355..0000000
--- a/upload/testfilename.txt
+++ /dev/null
@@ -1 +0,0 @@
-this is a test body
\ No newline at end of file
