diff --git a/src/main/java/com/github/liaochong/myexcel/core/AbstractSimpleExcelBuilder.java b/src/main/java/com/github/liaochong/myexcel/core/AbstractSimpleExcelBuilder.java
index 3f7ea31..27b5e63 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/AbstractSimpleExcelBuilder.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/AbstractSimpleExcelBuilder.java
@@ -73,10 +73,6 @@
      * 字段展示顺序
      */
     protected List<String> fieldDisplayOrder;
-    /**
-     * excel workbook
-     */
-    protected WorkbookType workbookType;
     /**
      * 一般单元格样式
      */
@@ -97,14 +93,6 @@
      * 标题
      */
     protected List<String> titles;
-    /**
-     * sheetName
-     */
-    protected String sheetName;
-    /**
-     * 全局默认值
-     */
-    protected String globalDefaultValue;
     /**
      * 默认值集合
      */
@@ -113,18 +101,10 @@
      * 自定义宽度
      */
     protected Map<Integer, Integer> customWidthMap;
-    /**
-     * 是否自动换行
-     */
-    protected boolean wrapText = true;
     /**
      * 标题层级
      */
     protected int titleLevel = 0;
-    /**
-     * 标题分离器
-     */
-    protected String titleSeparator = Constants.ARROW;
     /**
      * 自定义样式
      */
@@ -133,22 +113,10 @@
      * 是否为奇数行
      */
     protected boolean isOddRow = true;
-    /**
-     * 行高
-     */
-    protected int rowHeight;
-    /**
-     * 标题行行高
-     */
-    protected int titleRowHeight;
     /**
      * 无样式
      */
     protected boolean noStyle;
-    /**
-     * 自动宽度策略
-     */
-    protected WidthStrategy widthStrategy;
 
     protected Map<Integer, Integer> widths;
     /**
@@ -159,14 +127,14 @@
      * 格式样式Map
      */
     private Map<String, Map<String, String>> formatsStyleMap;
-    /**
-     * 全局样式
-     */
-    protected Set<String> globalStyle;
     /**
      * 是否为Map类型导出
      */
     protected boolean isMapBuild;
+    /**
+     * 全局设置
+     */
+    protected GlobalSetting globalSetting = new GlobalSetting();
 
     /**
      * 创建table
@@ -175,7 +143,7 @@
      */
     protected Table createTable() {
         Table table = new Table();
-        table.setCaption(sheetName);
+        table.setCaption(globalSetting.getSheetName());
         table.setTrList(new LinkedList<>());
         return table;
     }
@@ -197,7 +165,7 @@ protected Table createTable() {
                 continue;
             }
             List<Td> tds = new ArrayList<>();
-            String[] multiTitles = title.split(titleSeparator);
+            String[] multiTitles = title.split(globalSetting.getTitleSeparator());
             if (multiTitles.length > titleLevel) {
                 titleLevel = multiTitles.length;
             }
@@ -267,9 +235,9 @@ protected Table createTable() {
         Map<String, String> thStyle = getDefaultThStyle();
         Map<Integer, List<Td>> rowTds = tdLists.stream().flatMap(List::stream).filter(td -> td.getRow() > -1).collect(Collectors.groupingBy(Td::getRow));
         List<Tr> trs = new ArrayList<>();
-        boolean isComputeAutoWidth = WidthStrategy.isComputeAutoWidth(widthStrategy);
+        boolean isComputeAutoWidth = WidthStrategy.isComputeAutoWidth(globalSetting.getWidthStrategy());
         rowTds.forEach((k, v) -> {
-            Tr tr = new Tr(k, titleRowHeight);
+            Tr tr = new Tr(k, globalSetting.getTitleRowHeight());
             tr.setColWidthMap(isComputeAutoWidth ? new HashMap<>(titles.size()) : Collections.emptyMap());
             List<Td> tds = v.stream().sorted(Comparator.comparing(Td::getCol))
                     .peek(td -> {
@@ -315,12 +283,12 @@ protected Table createTable() {
      * @return 内容行
      */
     protected Tr createTr(List<Pair<? extends Class, ?>> contents) {
-        Tr tr = new Tr(0, rowHeight);
+        Tr tr = new Tr(0, globalSetting.getRowHeight());
         if (contents.isEmpty()) {
             return tr;
         }
-        boolean isComputeAutoWidth = WidthStrategy.isComputeAutoWidth(widthStrategy);
-        boolean isCustomWidth = WidthStrategy.isCustomWidth(widthStrategy);
+        boolean isComputeAutoWidth = WidthStrategy.isComputeAutoWidth(globalSetting.getWidthStrategy());
+        boolean isCustomWidth = WidthStrategy.isCustomWidth(globalSetting.getWidthStrategy());
         tr.setColWidthMap((isComputeAutoWidth || isCustomWidth) ? new HashMap<>(contents.size()) : Collections.emptyMap());
         Map<String, String> tdStyle = isOddRow ? commonTdStyle : evenTdStyle;
         Map<String, String> linkStyle = isOddRow ? linkCommonStyle : linkEvenStyle;
@@ -442,37 +410,27 @@ private void setLinkTd(Td td) {
      * @return Field
      */
     protected List<Field> getFilteredFields(ClassFieldContainer classFieldContainer, Class<?>... groups) {
-        GlobalSetting globalSetting = new GlobalSetting();
-        setGlobalSetting(classFieldContainer, globalSetting);
+        setGlobalSetting(classFieldContainer);
 
-        setWorkbookWithExcelTableAnnotation(globalSetting);
+        initBuildConfig();
 
-        List<Field> preElectionFields = this.getPreElectionFields(classFieldContainer, globalSetting);
-        List<Field> sortedFields = this.getGroupFields(preElectionFields, groups);
-        // 初始化配置容器
-        defaultValueMap = new HashMap<>(sortedFields.size());
-        if (customWidthMap == null) {
-            customWidthMap = new HashMap<>(sortedFields.size());
-        }
-        formats = new HashMap<>(sortedFields.size());
-        formatsStyleMap = new HashMap<>();
-        List<String> titles = new ArrayList<>(sortedFields.size());
+        List<Field> preElectionFields = this.getPreElectionFields(classFieldContainer);
+        List<Field> buildFields = this.getGroupFields(preElectionFields, groups);
+        // 初始化标题容器
+        List<String> titles = new ArrayList<>(buildFields.size());
 
-        boolean needToAddTitle = Objects.isNull(this.titles);
-        Map<String, String> globalStyleMap = getGlobalStyleMap(globalStyle != null ? globalStyle : globalSetting.getGlobalStyle());
+        Map<String, String> globalStyleMap = getGlobalStyleMap(globalSetting.getGlobalStyle());
         this.setOddEvenStyle(globalStyleMap);
-        for (int i = 0, size = sortedFields.size(); i < size; i++) {
-            Field field = sortedFields.get(i);
+        for (int i = 0, size = buildFields.size(); i < size; i++) {
+            Field field = buildFields.get(i);
             ExcelColumn excelColumn = field.getAnnotation(ExcelColumn.class);
             setCustomStyle(field, i, globalStyleMap.get("cell"));
             setCustomStyle(field, i, globalStyleMap.get("title"));
             if (excelColumn != null) {
-                if (needToAddTitle) {
-                    if (globalSetting.isUseFieldNameAsTitle() && excelColumn.title().isEmpty()) {
-                        titles.add(field.getName());
-                    } else {
-                        titles.add(excelColumn.title());
-                    }
+                if (globalSetting.isUseFieldNameAsTitle() && excelColumn.title().isEmpty()) {
+                    titles.add(field.getName());
+                } else {
+                    titles.add(excelColumn.title());
                 }
                 if (!excelColumn.defaultValue().isEmpty()) {
                     defaultValueMap.put(field, excelColumn.defaultValue());
@@ -491,23 +449,30 @@ private void setLinkTd(Td td) {
                     formats.put(i, excelColumn.dateFormatPattern());
                 }
             } else {
-                if (needToAddTitle) {
-                    if (globalSetting.isUseFieldNameAsTitle()) {
-                        titles.add(field.getName());
-                    } else {
-                        titles.add(null);
-                    }
+                if (globalSetting.isUseFieldNameAsTitle()) {
+                    titles.add(field.getName());
+                } else {
+                    titles.add(null);
                 }
             }
         }
-        boolean hasTitle = titles.stream().anyMatch(StringUtil::isNotBlank);
-        if (hasTitle) {
-            this.titles = titles;
-        }
+        setTitles(titles);
         if (!customWidthMap.isEmpty()) {
-            this.widthStrategy = WidthStrategy.CUSTOM_WIDTH;
+            globalSetting.setWidthStrategy(WidthStrategy.CUSTOM_WIDTH);
+        }
+        if (!customStyle.isEmpty() || !globalStyleMap.isEmpty()) {
+            this.noStyle = false;
+        }
+        return buildFields;
+    }
+
+    protected void setTitles(List<String> titles) {
+        if (this.titles == null) {
+            boolean hasTitle = titles.stream().anyMatch(StringUtil::isNotBlank);
+            if (hasTitle) {
+                this.titles = titles;
+            }
         }
-        return sortedFields;
     }
 
     protected List<Field> getGroupFields(List<Field> preElectionFields, Class<?>[] groups) {
@@ -519,10 +484,10 @@ private void setLinkTd(Td td) {
     }
 
 
-    protected void setGlobalSetting(ClassFieldContainer classFieldContainer, GlobalSetting globalSetting) {
+    protected void setGlobalSetting(ClassFieldContainer classFieldContainer) {
         ClassFieldContainer parentContainer = classFieldContainer.getParent();
         if (parentContainer != null) {
-            setGlobalSetting(parentContainer, globalSetting);
+            setGlobalSetting(parentContainer);
         }
         if (classFieldContainer.getClazz() == Object.class) {
             return;
@@ -533,10 +498,10 @@ protected void setGlobalSetting(ClassFieldContainer classFieldContainer, GlobalS
             if (excelTable == null) {
                 return;
             }
-            if (!excelTable.sheetName().isEmpty()) {
+            if (!excelTable.sheetName().isEmpty() && globalSetting.getSheetName() == null) {
                 globalSetting.setSheetName(excelTable.sheetName());
             }
-            if (excelTable.workbookType() != WorkbookType.SXLSX) {
+            if (excelTable.workbookType() != WorkbookType.SXLSX && globalSetting.getWorkbookType() == null) {
                 globalSetting.setWorkbookType(excelTable.workbookType());
             }
             if (excelTable.excludeParent()) {
@@ -563,17 +528,17 @@ protected void setGlobalSetting(ClassFieldContainer classFieldContainer, GlobalS
             if (excelTable.rowHeight() != -1) {
                 globalSetting.setRowHeight(excelTable.rowHeight());
             }
-            if (excelTable.style().length != 0) {
+            if (excelTable.style().length != 0 && globalSetting.getGlobalStyle().isEmpty()) {
                 globalSetting.getGlobalStyle().addAll(Arrays.asList(excelTable.style()));
             }
             if (excelTable.useFieldNameAsTitle()) {
                 globalSetting.setUseFieldNameAsTitle(true);
             }
         } else {
-            if (!excelModel.sheetName().isEmpty()) {
+            if (!excelModel.sheetName().isEmpty() && globalSetting.getSheetName() == null) {
                 globalSetting.setSheetName(excelModel.sheetName());
             }
-            if (excelModel.workbookType() != WorkbookType.SXLSX) {
+            if (excelModel.workbookType() != WorkbookType.SXLSX && globalSetting.getWorkbookType() == null) {
                 globalSetting.setWorkbookType(excelModel.workbookType());
             }
             if (excelModel.excludeParent()) {
@@ -600,16 +565,13 @@ protected void setGlobalSetting(ClassFieldContainer classFieldContainer, GlobalS
             if (excelModel.rowHeight() != -1) {
                 globalSetting.setRowHeight(excelModel.rowHeight());
             }
-            if (excelModel.style().length != 0) {
+            if (excelModel.style().length != 0 && globalSetting.getGlobalStyle().isEmpty()) {
                 globalSetting.getGlobalStyle().addAll(Arrays.asList(excelModel.style()));
             }
             if (excelModel.useFieldNameAsTitle()) {
                 globalSetting.setUseFieldNameAsTitle(true);
             }
         }
-        if (globalSetting.getDefaultValue() != null) {
-            globalDefaultValue = globalSetting.getDefaultValue();
-        }
     }
 
     private Map<String, String> getGlobalStyleMap(Set<String> globalStyle) {
@@ -663,13 +625,13 @@ private void setCustomStyle(Field field, int index, String... styles) {
         Map<String, String> styleMap = StyleUtil.parseStyle(splits[splitIndex]);
         String width = styleMap.get("width");
         if (width != null) {
-            this.widthStrategy = WidthStrategy.CUSTOM_WIDTH;
+            globalSetting.setWidthStrategy(WidthStrategy.CUSTOM_WIDTH);
             customWidthMap.put(fieldIndex, TdUtil.getValue(width));
         }
         return styleMap;
     }
 
-    protected List<Field> getPreElectionFields(ClassFieldContainer classFieldContainer, GlobalSetting globalSetting) {
+    protected List<Field> getPreElectionFields(ClassFieldContainer classFieldContainer) {
         if (Objects.nonNull(fieldDisplayOrder) && !fieldDisplayOrder.isEmpty()) {
             this.selfAdaption();
             return fieldDisplayOrder.stream()
@@ -701,24 +663,15 @@ private void setCustomStyle(Field field, int index, String... styles) {
     }
 
     /**
-     * 设置workbook
-     *
-     * @param globalSetting globalSetting
+     * 初始化构建基本参数
      */
-    private void setWorkbookWithExcelTableAnnotation(GlobalSetting globalSetting) {
-        if (workbookType == null) {
-            this.workbookType = globalSetting.getWorkbookType();
-        }
-        if (StringUtil.isBlank(this.sheetName)) {
-            String sheetName = globalSetting.getSheetName();
-            if (StringUtil.isNotBlank(sheetName)) {
-                this.sheetName = sheetName;
-            }
+    private void initBuildConfig() {
+        defaultValueMap = new HashMap<>();
+        if (customWidthMap == null) {
+            customWidthMap = new HashMap<>();
         }
-        titleRowHeight = globalSetting.getTitleRowHeight();
-        rowHeight = globalSetting.getRowHeight();
-        wrapText = globalSetting.isWrapText();
-        titleSeparator = globalSetting.getTitleSeparator();
+        formats = new HashMap<>();
+        formatsStyleMap = new HashMap<>();
     }
 
     /**
@@ -754,8 +707,8 @@ private void selfAdaption() {
                     if (defaultValue != null) {
                         return Pair.of(field.getType(), defaultValue);
                     }
-                    if (globalDefaultValue != null) {
-                        return Pair.of(field.getType(), globalDefaultValue);
+                    if (globalSetting.getDefaultValue() != null) {
+                        return Pair.of(field.getType(), globalSetting.getDefaultValue());
                     }
                     return value;
                 })
@@ -793,7 +746,7 @@ protected void initStyleMap() {
                 commonTdStyle.put(BorderStyle.BORDER_LEFT_STYLE, BorderStyle.THIN);
                 commonTdStyle.put(BorderStyle.BORDER_RIGHT_STYLE, BorderStyle.THIN);
                 commonTdStyle.put(TextAlignStyle.VERTICAL_ALIGN, TextAlignStyle.MIDDLE);
-                if (wrapText) {
+                if (globalSetting.isWrapText()) {
                     commonTdStyle.put(WordBreakStyle.WORD_BREAK, WordBreakStyle.BREAK_ALL);
                 }
             }
diff --git a/src/main/java/com/github/liaochong/myexcel/core/CsvBuilder.java b/src/main/java/com/github/liaochong/myexcel/core/CsvBuilder.java
index 7d30893..639f932 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/CsvBuilder.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/CsvBuilder.java
@@ -20,7 +20,6 @@
 import com.github.liaochong.myexcel.core.reflect.ClassFieldContainer;
 import com.github.liaochong.myexcel.exception.CsvBuildException;
 import com.github.liaochong.myexcel.utils.ReflectUtil;
-import com.github.liaochong.myexcel.utils.StringUtil;
 import com.github.liaochong.myexcel.utils.TempFileOperator;
 import lombok.NonNull;
 
@@ -119,41 +118,32 @@ private Csv doWrite(List<T> beans) {
     }
 
     private List<Field> getFields(ClassFieldContainer classFieldContainer, Class<?>... groups) {
-        GlobalSetting globalSetting = new GlobalSetting();
-        setGlobalSetting(classFieldContainer, globalSetting);
+        setGlobalSetting(classFieldContainer);
 
-        List<Field> preElectionFields = this.getPreElectionFields(classFieldContainer, globalSetting);
+        List<Field> preElectionFields = this.getPreElectionFields(classFieldContainer);
         List<Field> sortedFields = getGroupFields(preElectionFields, groups);
         List<String> titles = new ArrayList<>(preElectionFields.size());
         defaultValueMap = new HashMap<>(preElectionFields.size());
-        boolean needToAddTitle = this.titles == null;
         for (Field field : sortedFields) {
             ExcelColumn excelColumn = field.getAnnotation(ExcelColumn.class);
             if (excelColumn != null) {
-                if (needToAddTitle) {
-                    if (globalSetting.isUseFieldNameAsTitle() && excelColumn.title().isEmpty()) {
-                        titles.add(field.getName());
-                    } else {
-                        titles.add(excelColumn.title());
-                    }
+                if (globalSetting.isUseFieldNameAsTitle() && excelColumn.title().isEmpty()) {
+                    titles.add(field.getName());
+                } else {
+                    titles.add(excelColumn.title());
                 }
                 if (!excelColumn.defaultValue().isEmpty()) {
                     defaultValueMap.put(field, excelColumn.defaultValue());
                 }
             } else {
-                if (needToAddTitle) {
-                    if (globalSetting.isUseFieldNameAsTitle()) {
-                        titles.add(field.getName());
-                    } else {
-                        titles.add(null);
-                    }
+                if (globalSetting.isUseFieldNameAsTitle()) {
+                    titles.add(field.getName());
+                } else {
+                    titles.add(null);
                 }
             }
         }
-        boolean hasTitle = titles.stream().anyMatch(StringUtil::isNotBlank);
-        if (hasTitle) {
-            this.titles = titles;
-        }
+        setTitles(titles);
         return sortedFields;
     }
 
diff --git a/src/main/java/com/github/liaochong/myexcel/core/DefaultExcelBuilder.java b/src/main/java/com/github/liaochong/myexcel/core/DefaultExcelBuilder.java
index 1c4a142..5c0e881 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/DefaultExcelBuilder.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/DefaultExcelBuilder.java
@@ -38,7 +38,6 @@
     private DefaultStreamExcelBuilder<T> streamExcelBuilder;
 
     private DefaultExcelBuilder(DefaultStreamExcelBuilder<T> streamExcelBuilder) {
-        streamExcelBuilder.hasStyle();
         streamExcelBuilder.widthStrategy(WidthStrategy.COMPUTE_AUTO_WIDTH);
         this.streamExcelBuilder = streamExcelBuilder;
     }
diff --git a/src/main/java/com/github/liaochong/myexcel/core/DefaultStreamExcelBuilder.java b/src/main/java/com/github/liaochong/myexcel/core/DefaultStreamExcelBuilder.java
index fa3d7c3..7e2ec7f 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/DefaultStreamExcelBuilder.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/DefaultStreamExcelBuilder.java
@@ -96,8 +96,8 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
         this.dataType = dataType;
         this.workbook = workbook;
         this.noStyle = true;
-        this.widthStrategy = WidthStrategy.NO_AUTO;
-        this.workbookType = WorkbookType.SXLSX;
+        globalSetting.setWorkbookType(WorkbookType.SXLSX);
+        globalSetting.setWidthStrategy(WidthStrategy.NO_AUTO);
         this.isMapBuild = dataType == Map.class;
     }
 
@@ -153,7 +153,7 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
     }
 
     public DefaultStreamExcelBuilder<T> sheetName(@NonNull String sheetName) {
-        this.sheetName = sheetName;
+        globalSetting.setSheetName(sheetName);
         return this;
     }
 
@@ -166,7 +166,7 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
         if (workbook != null) {
             throw new IllegalArgumentException("Workbook type confirmed, not modifiable");
         }
-        this.workbookType = workbookType;
+        globalSetting.setWorkbookType(workbookType);
         return this;
     }
 
@@ -181,13 +181,13 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
     }
 
     public DefaultStreamExcelBuilder<T> widthStrategy(@NonNull WidthStrategy widthStrategy) {
-        this.widthStrategy = widthStrategy;
+        globalSetting.setWidthStrategy(widthStrategy);
         return this;
     }
 
     @Deprecated
     public DefaultStreamExcelBuilder<T> autoWidthStrategy(@NonNull AutoWidthStrategy autoWidthStrategy) {
-        this.widthStrategy = AutoWidthStrategy.map(autoWidthStrategy);
+        globalSetting.setWidthStrategy(AutoWidthStrategy.map(autoWidthStrategy));
         return this;
     }
 
@@ -214,6 +214,7 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
         return this;
     }
 
+    @Deprecated
     @Override
     public DefaultStreamExcelBuilder<T> hasStyle() {
         this.noStyle = false;
@@ -247,8 +248,7 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
     }
 
     public DefaultStreamExcelBuilder<T> globalStyle(String... styles) {
-        globalStyle = Arrays.stream(styles).collect(Collectors.toSet());
-        this.hasStyle();
+        globalSetting.setGlobalStyle(Arrays.stream(styles).collect(Collectors.toSet()));
         return this;
     }
 
@@ -265,9 +265,9 @@ private DefaultStreamExcelBuilder(Class<T> dataType, Workbook workbook) {
         }
 
         htmlToExcelStreamFactory = new HtmlToExcelStreamFactory(waitQueueSize, executorService, pathConsumer, capacity, fixedTitles);
-        htmlToExcelStreamFactory.widthStrategy(widthStrategy);
+        htmlToExcelStreamFactory.widthStrategy(globalSetting.getWidthStrategy());
         if (workbook == null) {
-            htmlToExcelStreamFactory.workbookType(workbookType);
+            htmlToExcelStreamFactory.workbookType(globalSetting.getWorkbookType());
         }
         this.initStyleMap();
         Table table = this.createTable();
diff --git a/src/main/java/com/github/liaochong/myexcel/core/GlobalSetting.java b/src/main/java/com/github/liaochong/myexcel/core/GlobalSetting.java
index 949729d..9041f32 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/GlobalSetting.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/GlobalSetting.java
@@ -15,6 +15,7 @@
 package com.github.liaochong.myexcel.core;
 
 import com.github.liaochong.myexcel.core.constant.Constants;
+import com.github.liaochong.myexcel.core.strategy.WidthStrategy;
 import lombok.AccessLevel;
 import lombok.Data;
 import lombok.experimental.FieldDefaults;
@@ -29,10 +30,16 @@
 @Data
 @FieldDefaults(level = AccessLevel.PRIVATE)
 class GlobalSetting {
-
+    /**
+     * The name of the sheet to be built
+     */
     String sheetName;
+    /**
+     * The type of workbook to be built
+     */
+    WorkbookType workbookType;
 
-    WorkbookType workbookType = WorkbookType.SXLSX;
+    WidthStrategy widthStrategy;
 
     boolean excludeParent = false;
 
diff --git a/src/main/java/com/github/liaochong/myexcel/core/SimpleStreamExcelBuilder.java b/src/main/java/com/github/liaochong/myexcel/core/SimpleStreamExcelBuilder.java
index e445a23..7a4e990 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/SimpleStreamExcelBuilder.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/SimpleStreamExcelBuilder.java
@@ -47,10 +47,11 @@
     SimpleStreamExcelBuilder start();
 
     /**
-     * 使用默认样式
+     * 使用默认样式，已过时，无需主动设置
      *
      * @return SimpleStreamExcelBuilder
      */
+    @Deprecated
     SimpleStreamExcelBuilder hasStyle();
 
     /**
diff --git a/src/main/java/com/github/liaochong/myexcel/core/annotation/ExcelModel.java b/src/main/java/com/github/liaochong/myexcel/core/annotation/ExcelModel.java
index 68be042..e59d134 100644
--- a/src/main/java/com/github/liaochong/myexcel/core/annotation/ExcelModel.java
+++ b/src/main/java/com/github/liaochong/myexcel/core/annotation/ExcelModel.java
@@ -1,6 +1,7 @@
 package com.github.liaochong.myexcel.core.annotation;
 
 import com.github.liaochong.myexcel.core.WorkbookType;
+import com.github.liaochong.myexcel.core.strategy.WidthStrategy;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
@@ -39,6 +40,13 @@
      */
     WorkbookType workbookType() default WorkbookType.SXLSX;
 
+    /**
+     * 宽度策略
+     *
+     * @return WidthStrategy
+     */
+    WidthStrategy widthStrategy() default WidthStrategy.NO_AUTO;
+
     /**
      * sheeName
      *
