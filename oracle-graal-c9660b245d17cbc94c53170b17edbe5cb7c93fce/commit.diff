diff --git a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapImpl.java b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapImpl.java
index f53b559610a..a416a7b7b75 100644
--- a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapImpl.java
+++ b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapImpl.java
@@ -497,22 +497,22 @@ void setHeapVerifierImpl(HeapVerifierImpl value) {
 
     @Fold
     static boolean getVerifyHeapBeforeGC() {
-        return (HeapOptions.VerifyHeap.getValue() || HeapOptions.VerifyHeapBeforeCollection.getValue());
+        return (SubstrateOptions.VerifyHeap.getValue() || HeapOptions.VerifyHeapBeforeCollection.getValue());
     }
 
     @Fold
     static boolean getVerifyHeapAfterGC() {
-        return (HeapOptions.VerifyHeap.getValue() || HeapOptions.VerifyHeapAfterCollection.getValue());
+        return (SubstrateOptions.VerifyHeap.getValue() || HeapOptions.VerifyHeapAfterCollection.getValue());
     }
 
     @Fold
     static boolean getVerifyStackBeforeGC() {
-        return (HeapOptions.VerifyHeap.getValue() || HeapOptions.VerifyStackBeforeCollection.getValue());
+        return (SubstrateOptions.VerifyHeap.getValue() || HeapOptions.VerifyStackBeforeCollection.getValue());
     }
 
     @Fold
     static boolean getVerifyStackAfterGC() {
-        return (HeapOptions.VerifyHeap.getValue() || HeapOptions.VerifyStackAfterCollection.getValue());
+        return (SubstrateOptions.VerifyHeap.getValue() || HeapOptions.VerifyStackAfterCollection.getValue());
     }
 
     @NeverInline("Starting a stack walk in the caller frame")
diff --git a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapOptions.java b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapOptions.java
index 601e98d6831..eb27fe69d94 100644
--- a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapOptions.java
+++ b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapOptions.java
@@ -46,9 +46,6 @@
     @Option(help = "Trace each object promotion.")//
     public static final HostedOptionKey<Boolean> TraceObjectPromotion = new HostedOptionKey<>(false);
 
-    @Option(help = "Verify the heap before and after each collection.")//
-    public static final HostedOptionKey<Boolean> VerifyHeap = new HostedOptionKey<>(false);
-
     @Option(help = "Verify the heap before and after each collection.")//
     public static final RuntimeOptionKey<Boolean> HeapVerificationFailureIsFatal = new RuntimeOptionKey<>(true);
 
diff --git a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapPolicy.java b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapPolicy.java
index 9e8da8131e0..395d5610b1e 100644
--- a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapPolicy.java
+++ b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/HeapPolicy.java
@@ -210,7 +210,7 @@ public static UnsignedWord getMaximumYoungGenerationSize() {
                             .string(" ]").newline();
             return maximumYoungGenerationSize;
         }
-        long hostedValue = SubstrateOptions.hostedMaxNewSize();
+        long hostedValue = SubstrateOptions.MaxNewSize.getHostedValue();
         if (hostedValue != 0) {
             trace.string("  returns maximumYoungGenerationSize: ").unsigned(hostedValue).string(" ]").newline();
             return WordFactory.unsigned(hostedValue);
@@ -248,7 +248,7 @@ public static UnsignedWord getMaximumHeapSize() {
             HeapPolicy.setMaximumHeapSize(WordFactory.unsigned(xmx.getValue()));
             return maximumHeapSize;
         }
-        long hostedValue = SubstrateOptions.hostedMaxHeapSize();
+        long hostedValue = SubstrateOptions.MaxHeapSize.getHostedValue();
         if (hostedValue != 0) {
             return WordFactory.unsigned(hostedValue);
         }
@@ -293,7 +293,7 @@ public static UnsignedWord getMinimumHeapSize() {
             trace.string("  returns: ").unsigned(minimumHeapSize).string(" ]").newline();
             return minimumHeapSize;
         }
-        long hostedValue = SubstrateOptions.hostedMinHeapSize();
+        long hostedValue = SubstrateOptions.MinHeapSize.getHostedValue();
         if (hostedValue != 0) {
             trace.string("  returns: ").unsigned(hostedValue).string(" ]").newline();
             return WordFactory.unsigned(hostedValue);
diff --git a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/ThreadLocalAllocation.java b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/ThreadLocalAllocation.java
index 7555ef02dd5..dd7e774499c 100644
--- a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/ThreadLocalAllocation.java
+++ b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/ThreadLocalAllocation.java
@@ -106,7 +106,7 @@
     public static final FastThreadLocalBytes<Descriptor> regularTLAB = FastThreadLocalFactory.createBytes(ThreadLocalAllocation::getRegularTLABSize);
 
     /** A thread-local free list of aligned chunks. */
-    private static final FastThreadLocalWord<AlignedHeader> freeList = FastThreadLocalFactory.createWord();
+    protected static final FastThreadLocalWord<AlignedHeader> freeList = FastThreadLocalFactory.createWord();
 
     private static final OutOfMemoryError arrayAllocationTooLarge = new OutOfMemoryError("Array allocation too large.");
 
@@ -127,8 +127,7 @@ private static int getRegularTLABSize() {
     /** Slow path of instance allocation snippet. */
     @SubstrateForeignCallTarget
     private static Object slowPathNewInstance(Word objectHeader) {
-        ObjectHeaderImpl ohi = ObjectHeaderImpl.getObjectHeaderImpl();
-        DynamicHub hub = ohi.dynamicHubFromObjectHeader(objectHeader);
+        DynamicHub hub = ObjectHeaderImpl.getObjectHeaderImpl().dynamicHubFromObjectHeader(objectHeader);
         /* Allocation might cause a collection. */
         final UnsignedWord gcEpoch = HeapImpl.getHeapImpl().getGCImpl().possibleCollectionPrologue();
         /* Allocate the requested instance. */
@@ -206,8 +205,7 @@ private static Object slowPathNewArray(Word objectHeader, int length) {
         /* Allocation might cause a collection. */
         final UnsignedWord gcEpoch = HeapImpl.getHeapImpl().getGCImpl().possibleCollectionPrologue();
         /* Allocate the requested array. */
-        ObjectHeaderImpl ohi = ObjectHeaderImpl.getObjectHeaderImpl();
-        DynamicHub hub = ohi.dynamicHubFromObjectHeader(objectHeader);
+        DynamicHub hub = ObjectHeaderImpl.getObjectHeaderImpl().dynamicHubFromObjectHeader(objectHeader);
         final Object result = slowPathNewArrayWithoutAllocating(hub, length);
         /* Allow the collector to do stuff now that allocation, etc., is allowed. */
         HeapImpl.getHeapImpl().getGCImpl().possibleCollectionEpilogue(gcEpoch);
diff --git a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/graal/GenScavengeAllocationSnippets.java b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/graal/GenScavengeAllocationSnippets.java
index d1ff30a992b..22280fb4c0d 100644
--- a/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/graal/GenScavengeAllocationSnippets.java
+++ b/substratevm/src/com.oracle.svm.core.genscavenge/src/com/oracle/svm/core/genscavenge/graal/GenScavengeAllocationSnippets.java
@@ -75,9 +75,9 @@ public static void registerForeignCalls(Providers providers, Map<SubstrateForeig
     public static void registerLowering(OptionValues options, Iterable<DebugHandlersFactory> factories, Providers providers, SnippetReflectionProvider snippetReflection,
                     Map<Class<? extends Node>, NodeLoweringProvider<?>> lowerings) {
         GenScavengeAllocationSnippets snippetReceiver = new GenScavengeAllocationSnippets();
-        GenScavengeAllocationSnippets.Templates newObjectSnippets = new GenScavengeAllocationSnippets.Templates(snippetReceiver, options, factories, SnippetCounter.Group.NullFactory, providers,
+        GenScavengeAllocationSnippets.Templates allocationSnippets = new GenScavengeAllocationSnippets.Templates(snippetReceiver, options, factories, SnippetCounter.Group.NullFactory, providers,
                         snippetReflection);
-        newObjectSnippets.registerLowerings(lowerings);
+        allocationSnippets.registerLowerings(lowerings);
     }
 
     @Snippet
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
index 706f33b5402..93783421a0a 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java
@@ -144,6 +144,9 @@ public static boolean getRuntimeAssertionsForClass(String name) {
     @Option(help = "Print more information about the heap before and after each collection")//
     public static final RuntimeOptionKey<Boolean> VerboseGC = new RuntimeOptionKey<>(false);
 
+    @Option(help = "Verify the heap before and after each collection.")//
+    public static final HostedOptionKey<Boolean> VerifyHeap = new HostedOptionKey<>(false);
+
     @Option(help = "The minimum heap size at run-time, in bytes.", type = OptionType.User)//
     public static final RuntimeOptionKey<Long> MinHeapSize = new RuntimeOptionKey<Long>(0L) {
         @Override
@@ -389,24 +392,4 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String ol
     public static int codeAlignment() {
         return GraalOptions.LoopHeaderAlignment.getValue(HostedOptionValues.singleton());
     }
-
-    @Fold
-    public static long hostedMinHeapSize() {
-        return MinHeapSize.getValue();
-    }
-
-    @Fold
-    public static long hostedMaxHeapSize() {
-        return MaxHeapSize.getValue();
-    }
-
-    @Fold
-    public static long hostedMaxNewSize() {
-        return MaxNewSize.getValue();
-    }
-
-    @Fold
-    public static long hostedStackSize() {
-        return StackSize.getValue();
-    }
 }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/heap/ObjectHeader.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/heap/ObjectHeader.java
index cd87fe38663..4b0987b3d59 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/heap/ObjectHeader.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/heap/ObjectHeader.java
@@ -56,6 +56,8 @@ protected ObjectHeader() {
     @Platforms(Platform.HOSTED_ONLY.class)
     public abstract long encodeAsImageHeapObjectHeader(long heapBaseRelativeAddress);
 
+    public abstract Word encodeAsTLABObjectHeader(DynamicHub hub);
+
     @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     public abstract DynamicHub dynamicHubFromObjectHeader(UnsignedWord header);
 
@@ -69,8 +71,6 @@ public static DynamicHub readDynamicHubFromObject(Object o) {
     @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     public abstract void initializeHeaderOfNewObject(Pointer objectPointer, DynamicHub hub, HeapKind heapKind);
 
-    public abstract Word encodeAsTLABObjectHeader(DynamicHub hub);
-
     public enum HeapKind {
         Unmanaged
     }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/RuntimeOptionKey.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/RuntimeOptionKey.java
index 559c0c0b611..b846cc7ba27 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/RuntimeOptionKey.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/RuntimeOptionKey.java
@@ -24,6 +24,7 @@
  */
 package com.oracle.svm.core.option;
 
+import org.graalvm.compiler.api.replacements.Fold;
 import org.graalvm.compiler.options.Option;
 import org.graalvm.compiler.options.OptionKey;
 
@@ -44,4 +45,9 @@ public RuntimeOptionKey(T defaultValue) {
     public T getValue() {
         return getValue(RuntimeOptionValues.singleton());
     }
+
+    @Fold
+    public T getHostedValue() {
+        return getValue(RuntimeOptionValues.singleton());
+    }
 }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/XOptions.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/XOptions.java
index 46e81db2137..6a3bc392057 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/XOptions.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/option/XOptions.java
@@ -34,7 +34,6 @@
 import com.oracle.svm.core.SubstrateOptions;
 import com.oracle.svm.core.annotate.AutomaticFeature;
 import com.oracle.svm.core.log.Log;
-import com.oracle.svm.core.util.VMError;
 
 /**
  * A parser for the HotSpot-like memory sizing options "-Xmn", "-Xms", "-Xmx", "-Xss". Every option
@@ -194,27 +193,4 @@ public void parseFromValueString(XFlag xFlag, String value) throws NumberFormatE
     public void afterRegistration(AfterRegistrationAccess access) {
         ImageSingletons.add(XOptions.class, new XOptions());
     }
-
-    @Override
-    public void beforeAnalysis(BeforeAnalysisAccess access) {
-        /*
-         * By default, all RuntimeOptionKeys that correspond to XOptions are unused. This happens
-         * because we never use those options directly but instead rely on 'onValueUpdate()' to
-         * update the corresponding XOption when the value of the runtime option changes. To enable
-         * the use of -XX:OptionName at runtime, it is therefore necessary to explicitly register
-         * all those options.
-         */
-        registerOptionAsAccessed(access, SubstrateOptions.class, SubstrateOptions.MaxHeapSize.getName());
-        registerOptionAsAccessed(access, SubstrateOptions.class, SubstrateOptions.MinHeapSize.getName());
-        registerOptionAsAccessed(access, SubstrateOptions.class, SubstrateOptions.MaxNewSize.getName());
-        registerOptionAsAccessed(access, SubstrateOptions.class, SubstrateOptions.StackSize.getName());
-    }
-
-    private static void registerOptionAsAccessed(BeforeAnalysisAccess access, Class<?> clazz, String fieldName) {
-        try {
-            access.registerAsAccessed(clazz.getField(fieldName));
-        } catch (NoSuchFieldException | SecurityException e) {
-            throw VMError.shouldNotReachHere(e);
-        }
-    }
 }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/JavaVMOperation.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/JavaVMOperation.java
index 2cf4fba6ade..212be60aba4 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/JavaVMOperation.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/JavaVMOperation.java
@@ -30,6 +30,7 @@
 import com.oracle.svm.core.SubstrateUtil;
 import com.oracle.svm.core.SubstrateUtil.Thunk;
 import com.oracle.svm.core.annotate.RestrictHeapAccess;
+import com.oracle.svm.core.annotate.Uninterruptible;
 import com.oracle.svm.core.util.VMError;
 
 /**
@@ -75,6 +76,7 @@ protected IsolateThread getQueuingThread(NativeVMOperationData data) {
     }
 
     @Override
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected void setQueuingThread(NativeVMOperationData data, IsolateThread thread) {
         queuingThread = thread;
     }
@@ -85,6 +87,7 @@ protected boolean isFinished(NativeVMOperationData data) {
     }
 
     @Override
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected void setFinished(NativeVMOperationData data, boolean value) {
         finished = value;
     }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/NativeVMOperation.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/NativeVMOperation.java
index 7e9dacba9e8..a0c27be85a0 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/NativeVMOperation.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/NativeVMOperation.java
@@ -52,14 +52,6 @@ public void enqueueFromNonJavaThread(NativeVMOperationData data) {
         VMOperationControl.get().enqueueFromNonJavaThread(data);
     }
 
-    public NativeVMOperationData getNext(NativeVMOperationData data) {
-        return data.getNext();
-    }
-
-    public void setNext(NativeVMOperationData data, NativeVMOperationData value) {
-        data.setNext(value);
-    }
-
     @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     @Override
     protected boolean isFinished(NativeVMOperationData data) {
@@ -67,6 +59,7 @@ protected boolean isFinished(NativeVMOperationData data) {
     }
 
     @Override
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected void setFinished(NativeVMOperationData data, boolean value) {
         data.setFinished(value);
     }
@@ -77,6 +70,7 @@ protected IsolateThread getQueuingThread(NativeVMOperationData data) {
     }
 
     @Override
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected void setQueuingThread(NativeVMOperationData data, IsolateThread value) {
         data.setQueuingThread(value);
     }
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Safepoint.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Safepoint.java
index d6a260ca634..81397fa5a2e 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Safepoint.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Safepoint.java
@@ -414,6 +414,7 @@ public static void transitionJavaToVM() {
         StatusSupport.setStatusVM();
     }
 
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     public static void transitionVMToNative() {
         // We can directly change the thread state without a safepoint check as the safepoint
         // mechanism does not touch the thread if the status is VM.
@@ -427,9 +428,9 @@ public static void transitionVMToNative() {
     private static native void callSlowPathNativeToNewStatus(@ConstantNodeParameter ForeignCallDescriptor descriptor, int newThreadStatus);
 
     /**
-     * Block until I can transition from native to Java. This is not inlined and need not be fast.
-     * In fact, it often blocks. But it can not do much except block, since it starts out running
-     * with "native" thread status.
+     * Block until I can transition from native to a new thread status. This is not inlined and need
+     * not be fast. In fact, it often blocks. But it can not do much except block, since it starts
+     * out running with "native" thread status.
      *
      * Foreign call: {@link #ENTER_SLOW_PATH_TRANSITION_FROM_NATIVE_TO_NEW_STATUS}.
      */
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Target_java_lang_Thread.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Target_java_lang_Thread.java
index 1980fd50220..fd5ba240a5b 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Target_java_lang_Thread.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/Target_java_lang_Thread.java
@@ -217,7 +217,7 @@ private void start0() {
         }
 
         /* Choose a stack size based on parameters, command line flags, and system restrictions. */
-        long chosenStackSize = SubstrateOptions.hostedStackSize();
+        long chosenStackSize = SubstrateOptions.StackSize.getHostedValue();
         if (stackSize != 0) {
             /* If the user set a thread stack size at thread creation, then use that. */
             chosenStackSize = stackSize;
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperation.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperation.java
index fea0480bc73..305a5531698 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperation.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperation.java
@@ -163,10 +163,12 @@ protected boolean hasWork(@SuppressWarnings("unused") NativeVMOperationData data
 
     protected abstract IsolateThread getQueuingThread(NativeVMOperationData data);
 
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected abstract void setQueuingThread(NativeVMOperationData data, IsolateThread value);
 
     protected abstract boolean isFinished(NativeVMOperationData data);
 
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
     protected abstract void setFinished(NativeVMOperationData data, boolean value);
 
     @RestrictHeapAccess(access = RestrictHeapAccess.Access.UNRESTRICTED, overridesCallers = true, reason = "Whitelisted because some operations may allocate.")
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperationControl.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperationControl.java
index 30c251da968..6ab609abbcc 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperationControl.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMOperationControl.java
@@ -273,22 +273,21 @@ private void enqueue(VMOperation operation, NativeVMOperationData data) {
     @Uninterruptible(reason = "Called from a non-Java thread.")
     public void enqueueFromNonJavaThread(NativeVMOperation operation, NativeVMOperationData data) {
         assert UseDedicatedVMOperationThread.getValue() && MultiThreaded.getValue();
-        assert CurrentIsolate.getCurrentThread().isNull() : "may only be called by non-Java threads";
+        assert CurrentIsolate.getCurrentThread().isNull() || StatusSupport.isStatusNative() || StatusSupport.isStatusSafepoint() : StatusSupport.getStatusString(CurrentIsolate.getCurrentThread());
         assert dedicatedVMOperationThread.isRunning() : "must not queue VM operations before the VM operation thread is started or after it is shut down";
 
-        mainQueues.enqueueAndBlockUninterruptible(operation, data);
-
-        assert operation.isFinished(data);
+        mainQueues.enqueueUninterruptibly(operation, data);
     }
 
-    private static void markAsQueued(VMOperation operation, NativeVMOperationData data) {
-        operation.setQueuingThread(data, CurrentIsolate.getCurrentThread());
+    @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
+    protected static void markAsQueued(VMOperation operation, NativeVMOperationData data) {
         operation.setFinished(data, false);
+        operation.setQueuingThread(data, CurrentIsolate.getCurrentThread());
     }
 
     private static void markAsFinished(VMOperation operation, NativeVMOperationData data, VMCondition operationFinished) {
-        operation.setFinished(data, true);
         operation.setQueuingThread(data, WordFactory.nullPointer());
+        operation.setFinished(data, true);
         if (operationFinished != null) {
             operationFinished.broadcast();
         }
@@ -471,14 +470,12 @@ void enqueueAndWait(VMOperation operation, NativeVMOperationData data) {
         }
 
         @Uninterruptible(reason = "Called from a non-Java thread.")
-        void enqueueAndBlockUninterruptible(NativeVMOperation operation, NativeVMOperationData data) {
+        void enqueueUninterruptibly(NativeVMOperation operation, NativeVMOperationData data) {
             mutex.lockNoTransitionUnspecifiedOwner();
             try {
                 enqueue(operation, data);
                 operationQueued.broadcast();
-                while (!operation.isFinished(data)) {
-                    operationFinished.blockNoTransitionUnspecifiedOwner();
-                }
+                // do not wait for the VM operation
             } finally {
                 mutex.unlockNoTransitionUnspecifiedOwner();
             }
@@ -501,10 +498,8 @@ void enqueueAndExecute(VMOperation operation, NativeVMOperationData data) {
         }
 
         private void enqueue(VMOperation operation, NativeVMOperationData data) {
-            assertIsLocked();
-            markAsQueued(operation, data);
             if (operation instanceof JavaVMOperation) {
-                enqueue((JavaVMOperation) operation);
+                enqueue((JavaVMOperation) operation, data);
             } else if (operation instanceof NativeVMOperation) {
                 enqueue((NativeVMOperation) operation, data);
             } else {
@@ -515,6 +510,7 @@ private void enqueue(VMOperation operation, NativeVMOperationData data) {
         @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
         private void enqueue(NativeVMOperation operation, NativeVMOperationData data) {
             assert operation == data.getNativeVMOperation();
+            markAsQueued(operation, data);
             if (operation.getCausesSafepoint()) {
                 nativeSafepointOperations.push(data);
             } else {
@@ -522,7 +518,8 @@ private void enqueue(NativeVMOperation operation, NativeVMOperationData data) {
             }
         }
 
-        private void enqueue(JavaVMOperation operation) {
+        private void enqueue(JavaVMOperation operation, NativeVMOperationData data) {
+            markAsQueued(operation, data);
             if (operation.getCausesSafepoint()) {
                 javaSafepointOperations.push(operation);
             } else {
diff --git a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMThreads.java b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMThreads.java
index f27a307309a..d75eac0c38a 100644
--- a/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMThreads.java
+++ b/substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/thread/VMThreads.java
@@ -552,6 +552,7 @@ public static boolean ownsThreadMutex() {
         public static final int STATUS_IN_VM = STATUS_IN_NATIVE + 1;
         private static final int MAX_STATUS = STATUS_IN_VM;
 
+        @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
         private static String statusToString(int status, boolean safepointsDisabled) {
             switch (status) {
                 case STATUS_CREATED:
@@ -572,6 +573,7 @@ private static String statusToString(int status, boolean safepointsDisabled) {
         /* Access methods to treat VMThreads.statusTL as a volatile int. */
 
         /** For debugging. */
+        @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
         public static String getStatusString(IsolateThread vmThread) {
             return statusToString(statusTL.getVolatile(vmThread), isStatusIgnoreSafepoints(vmThread));
         }
@@ -611,6 +613,7 @@ public static boolean isStatusVM() {
             return (statusTL.getVolatile() == STATUS_IN_VM);
         }
 
+        @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
         public static void setStatusNative() {
             statusTL.setVolatile(STATUS_IN_NATIVE);
         }
@@ -656,6 +659,10 @@ public static void setStatusVM() {
             statusTL.setVolatile(STATUS_IN_VM);
         }
 
+        public static void setStatusVM(IsolateThread thread) {
+            statusTL.setVolatile(thread, STATUS_IN_VM);
+        }
+
         /** A guarded transition from native to another status. */
         @Uninterruptible(reason = "Called from uninterruptible code.", mayBeInlined = true)
         @ForceFixedRegisterReads
diff --git a/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/option/HostedOptionFeature.java b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/option/HostedOptionFeature.java
new file mode 100644
index 00000000000..7d56f815dd8
--- /dev/null
+++ b/substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/option/HostedOptionFeature.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (c) 2020, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package com.oracle.svm.hosted.option;
+
+import java.lang.reflect.Field;
+
+import org.graalvm.nativeimage.hosted.Feature;
+
+import com.oracle.graal.pointsto.meta.AnalysisField;
+import com.oracle.svm.core.SubstrateOptions;
+import com.oracle.svm.core.annotate.AutomaticFeature;
+import com.oracle.svm.core.util.VMError;
+import com.oracle.svm.hosted.FeatureImpl.BeforeAnalysisAccessImpl;
+
+@AutomaticFeature
+public class HostedOptionFeature implements Feature {
+    @Override
+    public void beforeAnalysis(BeforeAnalysisAccess access) {
+        /*
+         * By default, all RuntimeOptionKeys that correspond to XOptions are unused. This happens
+         * because we never use those options directly but instead rely on 'onValueUpdate()' to
+         * update the corresponding XOption when the value of the runtime option changes. To enable
+         * the use of -XX:OptionName at runtime, it is therefore necessary to explicitly register
+         * all those options.
+         */
+        BeforeAnalysisAccessImpl accessImpl = (BeforeAnalysisAccessImpl) access;
+        registerOptionAsRead(accessImpl, SubstrateOptions.class, SubstrateOptions.MaxHeapSize.getName());
+        registerOptionAsRead(accessImpl, SubstrateOptions.class, SubstrateOptions.MinHeapSize.getName());
+        registerOptionAsRead(accessImpl, SubstrateOptions.class, SubstrateOptions.MaxNewSize.getName());
+        registerOptionAsRead(accessImpl, SubstrateOptions.class, SubstrateOptions.StackSize.getName());
+    }
+
+    private static void registerOptionAsRead(BeforeAnalysisAccessImpl accessImpl, Class<?> clazz, String fieldName) {
+        try {
+            Field javaField = clazz.getField(fieldName);
+            AnalysisField analysisField = accessImpl.getMetaAccess().lookupJavaField(javaField);
+            accessImpl.registerAsRead(analysisField);
+        } catch (NoSuchFieldException | SecurityException e) {
+            throw VMError.shouldNotReachHere(e);
+        }
+    }
+}
