diff --git a/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/DistributedJob.java b/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/DistributedJob.java
index 0a80d3c..6eb0f55 100644
--- a/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/DistributedJob.java
+++ b/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/DistributedJob.java
@@ -1,5 +1,6 @@
 package ru.fix.distributed.job.manager;
 
+import ru.fix.dynamic.property.api.DynamicProperty;
 import ru.fix.stdlib.concurrency.threads.Schedule;
 
 /**
@@ -15,7 +16,7 @@
     /**
      * @return delay between job invocation
      */
-    Schedule getSchedule();
+    DynamicProperty<Schedule> getSchedule();
 
     /**
      * Method will be invoked on one of cluster machines
@@ -26,7 +27,7 @@
      * @return delay of job launching after server startup
      */
     default long getInitialJobDelay() {
-        return getSchedule().getValue();
+        return getSchedule().get().getValue();
     }
 
     /**
diff --git a/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/Worker.java b/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/Worker.java
index 3f09b02..4444836 100644
--- a/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/Worker.java
+++ b/distributed-job-manager/src/main/java/ru/fix/distributed/job/manager/Worker.java
@@ -377,7 +377,7 @@ private void onWorkPooledJobReassigned() throws Exception {
                     if (!isWorkerShutdown) {
                         ScheduledFuture<?> scheduledFuture =
                                 jobReschedulableScheduler.schedule(
-                                        DynamicProperty.delegated(newMultiJob::getSchedule),
+                                        newMultiJob.getSchedule(),
                                         newMultiJob.getInitialJobDelay(),
                                         jobExecutionWrapper);
                         jobExecutionWrapper.setScheduledFuture(scheduledFuture);
diff --git a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/StubbedMultiJob.java b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/StubbedMultiJob.java
index 35fc19c..a8ef42f 100644
--- a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/StubbedMultiJob.java
+++ b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/StubbedMultiJob.java
@@ -2,6 +2,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import ru.fix.dynamic.property.api.DynamicProperty;
 import ru.fix.stdlib.concurrency.threads.Schedule;
 
 import java.util.Collections;
@@ -69,8 +70,8 @@ public long getInitialJobDelay() {
     }
 
     @Override
-    public Schedule getSchedule() {
-        return Schedule.withDelay(delay);
+    public DynamicProperty<Schedule> getSchedule() {
+        return Schedule.withDelay(DynamicProperty.of(delay));
     }
 
     @Override
diff --git a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkPooledMultiJobSharingIT.java b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkPooledMultiJobSharingIT.java
index 44d57db..a934ce3 100644
--- a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkPooledMultiJobSharingIT.java
+++ b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkPooledMultiJobSharingIT.java
@@ -59,8 +59,8 @@ public WorkPoolRunningStrategy getWorkPoolRunningStrategy() {
         }
 
         @Override
-        public Schedule getSchedule() {
-            return Schedule.withDelay(100L);
+        public DynamicProperty<Schedule> getSchedule() {
+            return Schedule.withDelay(DynamicProperty.of(100L));
         }
 
         @Override
diff --git a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkShareLockServiceTest.java b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkShareLockServiceTest.java
index 0f27a86..1c006c1 100644
--- a/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkShareLockServiceTest.java
+++ b/distributed-job-manager/src/test/java/ru/fix/distributed/job/manager/WorkShareLockServiceTest.java
@@ -5,6 +5,7 @@
 import org.apache.curator.framework.state.ConnectionStateListener;
 import org.junit.jupiter.api.Test;
 import ru.fix.aggregating.profiler.AggregatingProfiler;
+import ru.fix.dynamic.property.api.DynamicProperty;
 import ru.fix.stdlib.concurrency.threads.Schedule;
 
 import java.util.Collections;
@@ -88,8 +89,8 @@ public String getJobId() {
          * @return delay between job invocation
          */
         @Override
-        public Schedule getSchedule() {
-            return Schedule.withDelay(TimeUnit.SECONDS.toMillis(1));
+        public DynamicProperty<Schedule> getSchedule() {
+            return Schedule.withDelay(DynamicProperty.of(TimeUnit.SECONDS.toMillis(1)));
         }
 
         /**
diff --git a/distributed-job-manager/src/test/kotlin/ru/fix/distributed/job/manager/example/DjmConfigurationExample.kt b/distributed-job-manager/src/test/kotlin/ru/fix/distributed/job/manager/example/DjmConfigurationExample.kt
index 8e34a38..68fd2ad 100644
--- a/distributed-job-manager/src/test/kotlin/ru/fix/distributed/job/manager/example/DjmConfigurationExample.kt
+++ b/distributed-job-manager/src/test/kotlin/ru/fix/distributed/job/manager/example/DjmConfigurationExample.kt
@@ -19,7 +19,7 @@ class RebillJob : DistributedJob {
         return "rebill-job"
     }
 
-    override fun getSchedule(): Schedule? {
+    override fun getSchedule(): DynamicProperty<Schedule>? {
         return null
     }
 
@@ -43,7 +43,7 @@ class SmsJob : DistributedJob {
         return "sms-job"
     }
 
-    override fun getSchedule(): Schedule? {
+    override fun getSchedule(): DynamicProperty<Schedule>? {
         return null
     }
 
@@ -67,7 +67,7 @@ class UssdJob : DistributedJob {
         return "ussd-job"
     }
 
-    override fun getSchedule(): Schedule? {
+    override fun getSchedule(): DynamicProperty<Schedule>? {
         return null
     }
 
@@ -185,7 +185,7 @@ class CustomAssignmentStrategy : AssignmentStrategy {
 }
 
 fun main() {
-    val djm = DistributedJobManager(
+    DistributedJobManager(
             "my-app-instance-1", // node id
             CuratorFrameworkFactory.newClient("list/of/servers", ExponentialBackoffRetry(1000, 10)),
             "zk/root/path",
