diff --git a/.gitignore b/.gitignore
index a0092410..b078cc30 100644
--- a/.gitignore
+++ b/.gitignore
@@ -26,9 +26,11 @@ target
 .classpath
 .settings
 .project
+.vscode
 *.i??
 .idea
 *.DS_Store
 *.iml
 *dependency-reduced-pom.xml
 *.lock
+*.factorypath
diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/constants/OpenAPIConstants.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/constants/OpenAPIConstants.java
index 74e2cb87..da458f47 100644
--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/constants/OpenAPIConstants.java
+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/constants/OpenAPIConstants.java
@@ -15,4 +15,5 @@
     public static final String THROTTLING_TIER = "x-wso2-throttling-tier";
     public static final String DISABLE_SECURITY = "x-wso2-disable-security";
     public static final String AUTHORIZATION_HEADER = "x-wso2-auth-header";
+    public static final String API_OWNER = "x-wso2-owner";
 }
diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/rest/APIDetailedDTO.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/rest/APIDetailedDTO.java
index 4cd476d9..0f8aadf4 100644
--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/rest/APIDetailedDTO.java
+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/rest/APIDetailedDTO.java
@@ -103,6 +103,8 @@
     private List<String> accessControlRoles = new ArrayList<String>();
     private APIBusinessInformationDTO businessInformation = null;
     private APICorsConfigurationDTO corsConfiguration = null;
+    //provider string (used to set x-wso2-ownerin swagger definition)
+    private String provider = null;
 
     /**
      * Swagger definition of the APIDetailedDTO which contains details about URI templates and scopes\n
@@ -455,4 +457,15 @@ public void setApiSwagger(Json apiSwagger) {
     public void setCorsConfiguration(APICorsConfigurationDTO corsConfiguration) {
         this.corsConfiguration = corsConfiguration;
     }
+
+    /**
+     * Retrieves API creator &  assignes value.
+     **/
+    @JsonProperty("provider")
+    public String getProvider() {
+        return provider;
+    }
+    public void setProvider(String provider) {
+        this.provider = provider;
+    }
 }
diff --git a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java
index 2db4308d..0e6c19c2 100644
--- a/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java
+++ b/components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java
@@ -146,6 +146,10 @@ static String generateSwaggerString(ExtendedAPI api, boolean isExpand) {
         switch (swaggerVersion) {
             case "2":
                 Swagger swagger = new SwaggerParser().parse(api.getApiDefinition());
+                //Sets title name similar to API name in swagger definition.
+                //Without this modification, two seperate rows will be added to APIM analytics dashboard tables.
+                //(For APIM and Microgateway API invokes)
+                swagger.getInfo().setTitle(api.getName());
                 if (isExpand) {
                     swagger.setVendorExtensions(getExtensionMap(api, mgwEndpointConfigDTO));
                 }
@@ -153,6 +157,10 @@ static String generateSwaggerString(ExtendedAPI api, boolean isExpand) {
             case "3":
                 SwaggerParseResult swaggerParseResult = new OpenAPIV3Parser().readContents(api.getApiDefinition());
                 OpenAPI openAPI = swaggerParseResult.getOpenAPI();
+                //Sets title similar to API name in open API definition
+                //Without this modification, two seperate rows will be added to analytics dashboard tables.
+                //(For APIM and Microgateway API invokes)
+                openAPI.getInfo().setTitle(api.getName());
                 if (isExpand) {
                     openAPI.extensions(getExtensionMap(api, mgwEndpointConfigDTO));
                 }
@@ -221,6 +229,9 @@ public static String convertYamlToJson(String yaml) throws IOException {
         if (api.getAuthorizationHeader() != null) {
             extensionsMap.put(OpenAPIConstants.AUTHORIZATION_HEADER, api.getAuthorizationHeader());
         }
+        if (api.getProvider() != null) {
+            extensionsMap.put(OpenAPIConstants.API_OWNER, api.getProvider());
+        }
 
         return extensionsMap;
     }
@@ -289,6 +300,10 @@ public static void setAdditionalConfigsDevFirst(ExtendedAPI api, OpenAPI openAPI
 
         setMgwAPISecurityAndScopes(api, openAPI);
         api.setSpecificBasepath(openAPI.getExtensions().get(OpenAPIConstants.BASEPATH).toString());
+        //assigns x-wso2-owner value to API provider
+        if (openAPI.getExtensions().get(OpenAPIConstants.API_OWNER) != null) {
+            api.setProvider(openAPI.getExtensions().get(OpenAPIConstants.API_OWNER).toString());
+        }
         try {
             if (openAPI.getExtensions().get(OpenAPIConstants.CORS) != null) {
                 api.setCorsConfiguration(objectMapper.convertValue(openAPI.getExtensions().get(OpenAPIConstants.CORS),
diff --git a/components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal b/components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal
index 43aa28b8..7875ce53 100644
--- a/components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal
+++ b/components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal
@@ -81,26 +81,29 @@ public function generateRequestResponseExecutionDataEvent(http:Response response
     runtime:InvocationContext invocationContext = runtime:getInvocationContext();
     if (isSecured && invocationContext.attributes.hasKey(AUTHENTICATION_CONTEXT)) {
         AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];
-        requestResponseExecutionDTO.apiCreator = authContext.apiPublisher;
         requestResponseExecutionDTO.metaClientType = authContext.keyType;
         requestResponseExecutionDTO.applicationConsumerKey = authContext.consumerKey;
         requestResponseExecutionDTO.userName = authContext.username;
         requestResponseExecutionDTO.applicationId = authContext.applicationId;
         requestResponseExecutionDTO.applicationName = authContext.applicationName;
-        requestResponseExecutionDTO.userTenantDomain = authContext.subscriberTenantDomain;
     } else {
-
         requestResponseExecutionDTO.metaClientType = PRODUCTION_KEY_TYPE;
         requestResponseExecutionDTO.applicationConsumerKey = ANONYMOUS_CONSUMER_KEY;
         requestResponseExecutionDTO.userName = END_USER_ANONYMOUS;
         requestResponseExecutionDTO.applicationId = ANONYMOUS_APP_ID;
         requestResponseExecutionDTO.applicationName = ANONYMOUS_APP_NAME;
-        requestResponseExecutionDTO.userTenantDomain = ANONYMOUS_USER_TENANT_DOMAIN;
     }
+
     APIConfiguration? apiConfiguration = apiConfigAnnotationMap[context.getServiceName()];
+        printInfo(KEY_ANALYTICS_FILTER, apiConfigAnnotationMap.toString());
     if (apiConfiguration is APIConfiguration) {
         if (!stringutils:equalsIgnoreCase("", <string>apiConfiguration.publisher)) {
+            //sets API creator and userTenantDomain
+            printDebug(KEY_ANALYTICS_FILTER, "API publisher : " + apiConfiguration.publisher);
             requestResponseExecutionDTO.apiCreator = <string>apiConfiguration.publisher;
+            printDebug(KEY_ANALYTICS_FILTER, "API creator : " + requestResponseExecutionDTO.apiCreator);
+            requestResponseExecutionDTO.userTenantDomain = <string>getUserTenantDomain(apiConfiguration.publisher);
+            printDebug(KEY_ANALYTICS_FILTER, "User Tenant Domain : " + requestResponseExecutionDTO.userTenantDomain);
         }
         requestResponseExecutionDTO.apiVersion = <string>apiConfiguration.apiVersion;
     }
diff --git a/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal b/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal
index c70ab681..50f589af 100644
--- a/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal
+++ b/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal
@@ -35,12 +35,13 @@ function populateThrottleAnalyticsDTO(http:FilterContext context) returns (Throt
     APIConfiguration? apiConfiguration = apiConfigAnnotationMap[context.getServiceName()];
     if (apiConfiguration is APIConfiguration) {
         eventDto.apiVersion = apiConfiguration.apiVersion;
+        eventDto.userTenantDomain = getUserTenantDomain(apiConfiguration.publisher);
+        eventDto.apiCreator = <string>apiConfiguration.publisher;
     }
     time:Time time = time:currentTime();
     int currentTimeMills = time.time;
 
     map<json> metaInfo = {};
-    eventDto.userTenantDomain = getTenantDomain(context);
     eventDto.apiName = getApiName(context);
     eventDto.apiContext = getContext(context);
     eventDto.throttledTime = currentTimeMills;
@@ -54,7 +55,6 @@ function populateThrottleAnalyticsDTO(http:FilterContext context) returns (Throt
         .attributes[AUTHENTICATION_CONTEXT];
         metaInfo["keyType"] = authContext.keyType;
         eventDto.userName = authContext.username;
-        eventDto.apiCreator = authContext.apiPublisher;
         eventDto.applicationName = authContext.applicationName;
         eventDto.applicationId = authContext.applicationId;
         eventDto.subscriber = authContext.subscriber;
@@ -62,10 +62,6 @@ function populateThrottleAnalyticsDTO(http:FilterContext context) returns (Throt
         metaInfo["keyType"] = PRODUCTION_KEY_TYPE;
         eventDto.userName = END_USER_ANONYMOUS;
         APIConfiguration? apiConfig = apiConfigAnnotationMap[context.getServiceName()];
-        if (apiConfig is APIConfiguration) {
-            var api_Creator = apiConfig.publisher;
-            eventDto.apiCreator = api_Creator;
-        }
         eventDto.applicationName = ANONYMOUS_APP_NAME;
         eventDto.applicationId = ANONYMOUS_APP_ID;
         eventDto.subscriber = END_USER_ANONYMOUS;
@@ -89,6 +85,8 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur
     if (apiConfig is APIConfiguration) {
         var api_Version = apiConfig.apiVersion;
         eventDto.apiVersion = api_Version;
+        eventDto.userTenantDomain = getUserTenantDomain(apiConfig.publisher);
+        eventDto.apiCreator = <string>apiConfig.publisher;
     }
     eventDto.apiName = getApiName(context);
     http:HttpResourceConfig? httpResourceConfig = resourceAnnotationMap[context.attributes["ResourceName"].toString()];
@@ -107,23 +105,15 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur
         AuthenticationContext authContext = <AuthenticationContext>context.attributes[AUTHENTICATION_CONTEXT];
         metaInfo["keyType"] = authContext.keyType;
         eventDto.consumerKey = authContext.consumerKey;
-        eventDto.apiCreator = authContext.apiPublisher;
         eventDto.userName = authContext.username;
         eventDto.applicationName = authContext.applicationName;
         eventDto.applicationId = authContext.applicationId;
-        eventDto.userTenantDomain = authContext.subscriberTenantDomain;
     } else {
         metaInfo["keyType"] = PRODUCTION_KEY_TYPE;
         eventDto.consumerKey = ANONYMOUS_CONSUMER_KEY;
-        APIConfiguration? apiConfigs = apiConfigAnnotationMap[context.getServiceName()];
-        if (apiConfigs is APIConfiguration) {
-            var api_Creater = apiConfigs.publisher;
-            eventDto.apiCreator = api_Creater;
-        }
         eventDto.userName = END_USER_ANONYMOUS;
         eventDto.applicationName = ANONYMOUS_APP_NAME;
         eventDto.applicationId = ANONYMOUS_APP_ID;
-        eventDto.userTenantDomain = ANONYMOUS_USER_TENANT_DOMAIN;
     }
     metaInfo["correlationID"] = <string>context.attributes[MESSAGE_ID];
     eventDto.metaClientType = metaInfo.toString();
diff --git a/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal b/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal
index 9fb0c216..2fd85a48 100644
--- a/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal
+++ b/components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal
@@ -641,3 +641,26 @@ public function setFilterSkipToFilterContext(http:FilterContext context) {
 public function getFilterConfigAnnotationMap() returns map<FilterConfiguration?> {
     return filterConfigAnnotationMap;
 }
+
+# Gets API publisher string and provides extracted userTenantDomain value.
+# 
+# + publisherString - API publisher string value
+# + return - Returns userTenantDomain 'string' value after extraction.
+public function getUserTenantDomain(string publisherString) returns string {
+    string[] resultSet = stringutils:split(publisherString , "@");
+    int resultSetLength = resultSet.length();
+    //for super tenant domain users
+    if (resultSetLength == 1) {
+          return "carbon.super";
+    }
+    //for users not from the super tenant domain
+    if (resultSetLength == 2) {
+          return resultSet[1];
+    }
+    //for email signup users
+    if (resultSetLength == 3) {
+          return resultSet[2];
+    }
+    return "not available";
+}
+
diff --git a/distribution/resources/ballerinaTruststore.p12 b/distribution/resources/ballerinaTruststore.p12
index e084e3ef..5e11382c 100644
Binary files a/distribution/resources/ballerinaTruststore.p12 and b/distribution/resources/ballerinaTruststore.p12 differ
diff --git a/tests/src/test/java/org/wso2/micro/gateway/tests/common/MockAPIPublisher.java b/tests/src/test/java/org/wso2/micro/gateway/tests/common/MockAPIPublisher.java
index 9a8f5c03..40b5bb19 100644
--- a/tests/src/test/java/org/wso2/micro/gateway/tests/common/MockAPIPublisher.java
+++ b/tests/src/test/java/org/wso2/micro/gateway/tests/common/MockAPIPublisher.java
@@ -98,7 +98,7 @@ private API populateJson(API api) throws IOException {
         apiJsonObj.put("name", api.getName());
         apiJsonObj.put("version", api.getVersion());
         apiJsonObj.put("context", api.getContext());
-        apiJsonObj.put("provider", api.getProvider());
+        apiJsonObj.put("provider", api.getProvider());          
         String uuid = UUID.randomUUID().toString();
         api.setId(uuid);
         apiJsonObj.put("id", uuid);
diff --git a/tests/src/test/resources/ballerinaTruststore.p12 b/tests/src/test/resources/ballerinaTruststore.p12
index 8776f561..5e11382c 100644
Binary files a/tests/src/test/resources/ballerinaTruststore.p12 and b/tests/src/test/resources/ballerinaTruststore.p12 differ
diff --git a/tests/src/test/resources/keyStores/ballerinaTruststore.p12 b/tests/src/test/resources/keyStores/ballerinaTruststore.p12
index 6b378802..5e11382c 100644
Binary files a/tests/src/test/resources/keyStores/ballerinaTruststore.p12 and b/tests/src/test/resources/keyStores/ballerinaTruststore.p12 differ
