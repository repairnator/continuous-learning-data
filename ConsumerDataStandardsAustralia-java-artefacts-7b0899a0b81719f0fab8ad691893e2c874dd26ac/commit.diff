diff --git a/api-model/pom.xml b/api-model/pom.xml
index dc7d34a..930978d 100644
--- a/api-model/pom.xml
+++ b/api-model/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>api-model</artifactId>
     <name>API Model</name>
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingAccountsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingAccountsAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingAccountsAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingAccountsAPI.java
index 7f7c668..b40149d 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingAccountsAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingAccountsAPI.java
@@ -1,15 +1,15 @@
-package au.org.consumerdatastandards.api.banking;
+package au.org.consumerdatastandards.api.v1_0_0.banking;
 
-import au.org.consumerdatastandards.api.banking.models.RequestAccountIds;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountsBalanceById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountsBalanceList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingTransactionById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingTransactionList;
-import au.org.consumerdatastandards.api.common.models.ResponseErrorList;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountsBalanceById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountsBalanceList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingTransactionById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingTransactionList;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -53,42 +53,42 @@ ResponseBankingAccountById getAccountDetail(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String accountId, 
+        String accountId,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -96,7 +96,7 @@ ResponseBankingAccountById getAccountDetail(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -143,49 +143,49 @@ ResponseBankingTransactionById getTransactionDetail(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String accountId, 
+        String accountId,
         @Param(
             name = "transactionId",
             description = "ID of the transaction obtained from a previous call to one of the other transaction end points",
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String transactionId, 
+        String transactionId,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -193,7 +193,7 @@ ResponseBankingTransactionById getTransactionDetail(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -248,7 +248,7 @@ ResponseBankingTransactionList getTransactions(
             reference = "ParamTransactionOldestTime"
         )
         @CDSDataType(CustomDataType.DateTime)
-        String oldestTime, 
+        String oldestTime,
         @Param(
             name = "newest-time",
             description = "Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type",
@@ -256,7 +256,7 @@ ResponseBankingTransactionList getTransactions(
             reference = "ParamTransactionNewestTime"
         )
         @CDSDataType(CustomDataType.DateTime)
-        String newestTime, 
+        String newestTime,
         @Param(
             name = "min-amount",
             description = "Filter transactions to only transactions with amounts higher or equal to than this amount",
@@ -264,7 +264,7 @@ ResponseBankingTransactionList getTransactions(
             reference = "ParamTransactionMinAmount"
         )
         @CDSDataType(CustomDataType.Amount)
-        String minAmount, 
+        String minAmount,
         @Param(
             name = "max-amount",
             description = "Filter transactions to only transactions with amounts less than or equal to than this amount",
@@ -272,14 +272,14 @@ ResponseBankingTransactionList getTransactions(
             reference = "ParamTransactionMaxAmount"
         )
         @CDSDataType(CustomDataType.Amount)
-        String maxAmount, 
+        String maxAmount,
         @Param(
             name = "text",
             description = "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied",
             in = ParamLocation.QUERY,
             reference = "ParamTransactionText"
         )
-        String text, 
+        String text,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -288,7 +288,7 @@ ResponseBankingTransactionList getTransactions(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -311,28 +311,28 @@ ResponseBankingTransactionList getTransactions(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -340,7 +340,7 @@ ResponseBankingTransactionList getTransactions(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -387,7 +387,7 @@ ResponseBankingAccountList listAccounts(
             in = ParamLocation.QUERY,
             reference = "ParamProductCategory"
         )
-        ParamProductCategory productCategory, 
+        ParamProductCategory productCategory,
         @Param(
             name = "open-status",
             description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
@@ -395,7 +395,7 @@ ResponseBankingAccountList listAccounts(
             defaultValue = "ALL",
             reference = "ParamAccountOpenStatus"
         )
-        ParamAccountOpenStatus openStatus, 
+        ParamAccountOpenStatus openStatus,
         @Param(
             name = "is-owned",
             description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
@@ -403,7 +403,7 @@ ResponseBankingAccountList listAccounts(
             reference = "ParamAccountIsOwned"
         )
         @CDSDataType(CustomDataType.Boolean)
-        Boolean isOwned, 
+        Boolean isOwned,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -412,7 +412,7 @@ ResponseBankingAccountList listAccounts(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -421,7 +421,7 @@ ResponseBankingAccountList listAccounts(
             reference = "ParamPageSize"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer pageSize, 
+        Integer pageSize,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
@@ -435,28 +435,28 @@ ResponseBankingAccountList listAccounts(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -464,7 +464,7 @@ ResponseBankingAccountList listAccounts(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -511,42 +511,42 @@ ResponseBankingAccountsBalanceById listBalance(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String accountId, 
+        String accountId,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -554,7 +554,7 @@ ResponseBankingAccountsBalanceById listBalance(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -601,7 +601,7 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             in = ParamLocation.QUERY,
             reference = "ParamProductCategory"
         )
-        ParamProductCategory productCategory, 
+        ParamProductCategory productCategory,
         @Param(
             name = "open-status",
             description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
@@ -609,7 +609,7 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             defaultValue = "ALL",
             reference = "ParamAccountOpenStatus"
         )
-        ParamAccountOpenStatus openStatus, 
+        ParamAccountOpenStatus openStatus,
         @Param(
             name = "is-owned",
             description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
@@ -617,7 +617,7 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             reference = "ParamAccountIsOwned"
         )
         @CDSDataType(CustomDataType.Boolean)
-        Boolean isOwned, 
+        Boolean isOwned,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -626,7 +626,7 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -649,28 +649,28 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -678,7 +678,7 @@ ResponseBankingAccountsBalanceList listBalancesBulk(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -745,7 +745,7 @@ ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -768,28 +768,28 @@ ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -797,7 +797,7 @@ ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingDirectDebitsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingDirectDebitsAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingDirectDebitsAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingDirectDebitsAPI.java
index 8070859..f3a1d67 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingDirectDebitsAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingDirectDebitsAPI.java
@@ -1,10 +1,10 @@
-package au.org.consumerdatastandards.api.banking;
+package au.org.consumerdatastandards.api.v1_0_0.banking;
 
-import au.org.consumerdatastandards.api.banking.models.RequestAccountIds;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingDirectDebitAuthorisationList;
-import au.org.consumerdatastandards.api.common.models.ResponseErrorList;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingDirectDebitAuthorisationList;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -48,7 +48,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebits(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String accountId, 
+        String accountId,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -57,7 +57,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebits(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -80,28 +80,28 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebits(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -109,7 +109,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebits(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -156,7 +156,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             in = ParamLocation.QUERY,
             reference = "ParamProductCategory"
         )
-        ParamProductCategory productCategory, 
+        ParamProductCategory productCategory,
         @Param(
             name = "open-status",
             description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
@@ -164,7 +164,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             defaultValue = "ALL",
             reference = "ParamAccountOpenStatus"
         )
-        ParamAccountOpenStatus openStatus, 
+        ParamAccountOpenStatus openStatus,
         @Param(
             name = "is-owned",
             description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
@@ -172,7 +172,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             reference = "ParamAccountIsOwned"
         )
         @CDSDataType(CustomDataType.Boolean)
-        Boolean isOwned, 
+        Boolean isOwned,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -181,7 +181,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -204,28 +204,28 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -233,7 +233,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -291,7 +291,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(
             description = "Array of specific accountIds to obtain authorisations for",
             in = ParamLocation.BODY
         )
-        RequestAccountIds accountIds, 
+        RequestAccountIds accountIds,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -300,7 +300,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -323,28 +323,28 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -352,7 +352,7 @@ ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingPayeesAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingPayeesAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingPayeesAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingPayeesAPI.java
index 7cf25cd..17581aa 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingPayeesAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingPayeesAPI.java
@@ -1,7 +1,7 @@
-package au.org.consumerdatastandards.api.banking;
+package au.org.consumerdatastandards.api.v1_0_0.banking;
 
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingPayeeById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingPayeeList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingPayeeById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingPayeeList;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -52,42 +52,42 @@ ResponseBankingPayeeById getPayeeDetail(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String payeeId, 
+        String payeeId,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -95,7 +95,7 @@ ResponseBankingPayeeById getPayeeDetail(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -142,7 +142,7 @@ ResponseBankingPayeeList listPayees(
             in = ParamLocation.QUERY,
             defaultValue = "ALL"
         )
-        ParamType type, 
+        ParamType type,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -151,7 +151,7 @@ ResponseBankingPayeeList listPayees(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -174,28 +174,28 @@ ResponseBankingPayeeList listPayees(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -203,7 +203,7 @@ ResponseBankingPayeeList listPayees(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingProductsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingProductsAPI.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingProductsAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingProductsAPI.java
index 056d71f..8472e13 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingProductsAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingProductsAPI.java
@@ -1,8 +1,8 @@
-package au.org.consumerdatastandards.api.banking;
+package au.org.consumerdatastandards.api.v1_0_0.banking;
 
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingProductById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingProductList;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingProductById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingProductList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -46,14 +46,14 @@ ResponseBankingProductById getProductDetail(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String productId, 
+        String productId,
         @Param(
             name = "x-v",
             description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
@@ -94,27 +94,27 @@ ResponseBankingProductList listProducts(
             in = ParamLocation.QUERY,
             defaultValue = "CURRENT"
         )
-        ParamEffective effective, 
+        ParamEffective effective,
         @Param(
             name = "updated-since",
             description = "Only include products that have been updated after the specified date and time. If absent defaults to include all products",
             in = ParamLocation.QUERY
         )
         @CDSDataType(CustomDataType.DateTime)
-        String updatedSince, 
+        String updatedSince,
         @Param(
             name = "brand",
             description = "Filter results based on a specific brand",
             in = ParamLocation.QUERY
         )
-        String brand, 
+        String brand,
         @Param(
             name = "product-category",
             description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
             in = ParamLocation.QUERY,
             reference = "ParamProductCategory"
         )
-        ParamProductCategory productCategory, 
+        ParamProductCategory productCategory,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -123,7 +123,7 @@ ResponseBankingProductList listProducts(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingScheduledPaymentsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingScheduledPaymentsAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingScheduledPaymentsAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingScheduledPaymentsAPI.java
index 5a56ac7..637b1a0 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/BankingScheduledPaymentsAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/BankingScheduledPaymentsAPI.java
@@ -1,10 +1,10 @@
-package au.org.consumerdatastandards.api.banking;
+package au.org.consumerdatastandards.api.v1_0_0.banking;
 
-import au.org.consumerdatastandards.api.banking.models.RequestAccountIds;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingScheduledPaymentsList;
-import au.org.consumerdatastandards.api.common.models.ResponseErrorList;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingScheduledPaymentsList;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -48,7 +48,7 @@ ResponseBankingScheduledPaymentsList listScheduledPayments(
             in = ParamLocation.PATH
         )
         @CDSDataType(CustomDataType.ASCII)
-        String accountId, 
+        String accountId,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -57,7 +57,7 @@ ResponseBankingScheduledPaymentsList listScheduledPayments(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -80,28 +80,28 @@ ResponseBankingScheduledPaymentsList listScheduledPayments(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -109,7 +109,7 @@ ResponseBankingScheduledPaymentsList listScheduledPayments(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -156,7 +156,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             in = ParamLocation.QUERY,
             reference = "ParamProductCategory"
         )
-        ParamProductCategory productCategory, 
+        ParamProductCategory productCategory,
         @Param(
             name = "open-status",
             description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
@@ -164,7 +164,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             defaultValue = "ALL",
             reference = "ParamAccountOpenStatus"
         )
-        ParamAccountOpenStatus openStatus, 
+        ParamAccountOpenStatus openStatus,
         @Param(
             name = "is-owned",
             description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
@@ -172,7 +172,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             reference = "ParamAccountIsOwned"
         )
         @CDSDataType(CustomDataType.Boolean)
-        Boolean isOwned, 
+        Boolean isOwned,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -181,7 +181,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -204,28 +204,28 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -233,7 +233,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -291,7 +291,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(
             description = "Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned",
             in = ParamLocation.BODY
         )
-        RequestAccountIds accountIds, 
+        RequestAccountIds accountIds,
         @Param(
             name = "page",
             description = "Page of results to request (standard pagination)",
@@ -300,7 +300,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(
             reference = "ParamPage"
         )
         @CDSDataType(CustomDataType.PositiveInteger)
-        Integer page, 
+        Integer page,
         @Param(
             name = "page-size",
             description = "Page size to request. Default is 25 (standard pagination)",
@@ -323,28 +323,28 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -352,7 +352,7 @@ ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccount.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccount.java
index 72415e5..6baf6c3 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccountDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccountDetail.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccountDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccountDetail.java
index 61ffb1d..c19b98b 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAccountDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAccountDetail.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.CommonPhysicalAddress;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.CommonPhysicalAddress;
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAuthorisedEntity.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAuthorisedEntity.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAuthorisedEntity.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAuthorisedEntity.java
index a1c21ec..5a139d4 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingAuthorisedEntity.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingAuthorisedEntity.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalance.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalance.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalance.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalance.java
index 5468664..9330ea6 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalance.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalance.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalancePurse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalancePurse.java
similarity index 87%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalancePurse.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalancePurse.java
index 22bfaeb..3a21d68 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBalancePurse.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBalancePurse.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBillerPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBillerPayee.java
similarity index 91%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBillerPayee.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBillerPayee.java
index 6a70c5a..80753ba 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingBillerPayee.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingBillerPayee.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingCreditCardAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingCreditCardAccount.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingCreditCardAccount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingCreditCardAccount.java
index e701fcd..17b0aed 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingCreditCardAccount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingCreditCardAccount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDirectDebit.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDirectDebit.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDirectDebit.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDirectDebit.java
index d565276..335f9db 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDirectDebit.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDirectDebit.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayee.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayee.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayee.java
index 23af190..b8f6d50 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayee.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayee.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeAccount.java
similarity index 88%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeAccount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeAccount.java
index 2c5af06..0b1b3e8 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeAccount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeAccount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeCard.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeCard.java
similarity index 81%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeCard.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeCard.java
index 180c35e..ff5c99a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeeCard.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeeCard.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeePayId.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeePayId.java
similarity index 90%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeePayId.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeePayId.java
index b5f6aab..8941249 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingDomesticPayeePayId.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingDomesticPayeePayId.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayee.java
similarity index 83%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayee.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayee.java
index 1867f1f..306341e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayee.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayee.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetails.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetails.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetails.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetails.java
index 0f771d2..27cd180 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetails.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetails.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
similarity index 86%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
index f7aae89..4648f5e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBeneficiaryDetails.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
similarity index 90%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
index 3d1cd14..2fb437e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingLoanAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingLoanAccount.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingLoanAccount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingLoanAccount.java
index 3e198c6..72e70c6 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingLoanAccount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingLoanAccount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayee.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayee.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayee.java
index 6ba34d6..0972cf7 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayee.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayee.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayeeDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayeeDetail.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayeeDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayeeDetail.java
index 58b50ff..15cdc39 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingPayeeDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingPayeeDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProduct.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProduct.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProduct.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProduct.java
index 9d92f25..b434403 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProduct.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProduct.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductAdditionalInformation.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductAdditionalInformation.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductAdditionalInformation.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductAdditionalInformation.java
index fb5dd11..a1bcb03 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductAdditionalInformation.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductAdditionalInformation.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductBundle.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductBundle.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductBundle.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductBundle.java
index 7ece2e7..1a1015a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductBundle.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductBundle.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductCategory.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductCategory.java
similarity index 88%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductCategory.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductCategory.java
index f41c200..993ddd4 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductCategory.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductCategory.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductConstraint.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductConstraint.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductConstraint.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductConstraint.java
index c29b5b1..a27ad61 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductConstraint.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductConstraint.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDepositRate.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDepositRate.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDepositRate.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDepositRate.java
index 9cb5f00..f550c85 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDepositRate.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDepositRate.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDetail.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDetail.java
index 26677fb..919002a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscount.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscount.java
index 3dcac1d..cf8bdd9 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscountEligibility.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscountEligibility.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscountEligibility.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscountEligibility.java
index 352d1ee..e6079bd 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductDiscountEligibility.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductDiscountEligibility.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductEligibility.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductEligibility.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductEligibility.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductEligibility.java
index 006f440..534ea8b 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductEligibility.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductEligibility.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFeature.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFeature.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFeature.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFeature.java
index 2860f35..f05157c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFeature.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFeature.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFee.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFee.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFee.java
index 24a6c3f..a730231 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductFee.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductFee.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductLendingRate.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductLendingRate.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductLendingRate.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductLendingRate.java
index 1b1a069..eff65c6 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductLendingRate.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductLendingRate.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateCondition.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateCondition.java
similarity index 88%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateCondition.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateCondition.java
index 2ab5711..1526a46 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateCondition.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateCondition.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTier.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTier.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTier.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTier.java
index 91818f9..743f958 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTier.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTier.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.math.BigDecimal;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTierSubTier.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTierSubTier.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTierSubTier.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTierSubTier.java
index 4553f22..73cb3de 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingProductRateTierSubTier.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingProductRateTierSubTier.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.math.BigDecimal;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPayment.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPayment.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPayment.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPayment.java
index b1eca7c..03c5dce 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPayment.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPayment.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentFrom.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentFrom.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentFrom.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentFrom.java
index 3af3bcf..7f4f723 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentFrom.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentFrom.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentInterval.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentInterval.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentInterval.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentInterval.java
index 2f16c17..e229f86 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentInterval.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentInterval.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrence.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrence.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrence.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrence.java
index ce1df8c..72c0158 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrence.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrence.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceEventBased.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
index 2ff79fe..6e69928 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
index 9e12a66..4868509 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
index 816c9aa..05b799b 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
similarity index 87%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
index b0c0cd7..9483785 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentSet.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentSet.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentSet.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentSet.java
index 09ad7ce..28bc571 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentSet.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentSet.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentTo.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentTo.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentTo.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentTo.java
index 9944b14..c8f1ddc 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingScheduledPaymentTo.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingScheduledPaymentTo.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTermDepositAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTermDepositAccount.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTermDepositAccount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTermDepositAccount.java
index fc9969c..b4cf7f6 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTermDepositAccount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTermDepositAccount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransaction.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransaction.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransaction.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransaction.java
index 7e87572..5e87143 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransaction.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransaction.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetail.java
similarity index 80%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetail.java
index ee39ff9..349b990 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedData.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedData.java
index 2ed75ae..1dcd7ad 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
similarity index 90%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
index f4a0e9e..392dceb 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamAccountOpenStatus.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamAccountOpenStatus.java
similarity index 81%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamAccountOpenStatus.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamAccountOpenStatus.java
index 8fcd820..d253727 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamAccountOpenStatus.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamAccountOpenStatus.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamProductCategory.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamProductCategory.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamProductCategory.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamProductCategory.java
index 390c019..4331bfa 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ParamProductCategory.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ParamProductCategory.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIds.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIds.java
similarity index 61%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIds.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIds.java
index 493434c..9d16a3e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIds.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIds.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.Meta;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.Meta;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIdsData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIdsData.java
similarity index 78%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIdsData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIdsData.java
index 2c879ff..80e962b 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/RequestAccountIdsData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/RequestAccountIdsData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountById.java
similarity index 60%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountById.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountById.java
index 54e5f30..57afa02 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountById.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountById.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.BaseResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.BaseResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountList.java
similarity index 61%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountList.java
index 0736138..5e012d8 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountListData.java
similarity index 85%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountListData.java
index 8fb3c3b..24d788c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceById.java
similarity index 60%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceById.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceById.java
index 9fa6330..162372d 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceById.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceById.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.BaseResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.BaseResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceList.java
similarity index 62%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceList.java
index 984f3f9..2cee577 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceListData.java
similarity index 82%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceListData.java
index 861369d..21a0925 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingAccountsBalanceListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingAccountsBalanceListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationList.java
similarity index 64%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationList.java
index a6216b6..28dfadb 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
similarity index 84%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
index 6940372..ab699b9 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeById.java
similarity index 59%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeById.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeById.java
index 242ff56..74500a4 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeById.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeById.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.BaseResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.BaseResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeList.java
similarity index 60%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeList.java
index 8d551aa..4a38aa4 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeListData.java
similarity index 82%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeListData.java
index ee14f6c..068061a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingPayeeListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingPayeeListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductById.java
similarity index 60%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductById.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductById.java
index 1478e35..2999f5e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductById.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductById.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.BaseResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.BaseResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductList.java
similarity index 61%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductList.java
index a408776..ee3060e 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductListData.java
similarity index 85%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductListData.java
index da34bc5..627e98f 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingProductListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingProductListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsList.java
similarity index 63%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsList.java
index 09180ec..154bf02 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsList.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.PaginatedResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsListData.java
similarity index 84%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsListData.java
index 7eb04bc..dd6b0fa 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingScheduledPaymentsListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingScheduledPaymentsListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionById.java
similarity index 61%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionById.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionById.java
index 995e5dc..651fec8 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionById.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionById.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.BaseResponse;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.BaseResponse;
 import au.org.consumerdatastandards.support.data.*;
 
 @DataDefinition
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionList.java
similarity index 82%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionList.java
index cbc9f03..b5a0207 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionList.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import au.org.consumerdatastandards.support.data.DataDefinition;
 import au.org.consumerdatastandards.support.data.Property;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionListData.java
similarity index 80%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionListData.java
index 3b3b6ae..6238ead 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/ResponseBankingTransactionListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/ResponseBankingTransactionListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxMetaPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxMetaPaginated.java
similarity index 58%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxMetaPaginated.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxMetaPaginated.java
index aa20afd..060361b 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxMetaPaginated.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxMetaPaginated.java
@@ -1,7 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.MetaPaginated;
-import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.MetaPaginated;
 import au.org.consumerdatastandards.support.data.Property;
 
 public class TxMetaPaginated extends MetaPaginated {
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxPaginatedResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxPaginatedResponse.java
similarity index 83%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxPaginatedResponse.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxPaginatedResponse.java
index eb1f1e6..67d248f 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/banking/models/TxPaginatedResponse.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/banking/models/TxPaginatedResponse.java
@@ -1,6 +1,6 @@
-package au.org.consumerdatastandards.api.banking.models;
+package au.org.consumerdatastandards.api.v1_0_0.banking.models;
 
-import au.org.consumerdatastandards.api.common.models.LinksPaginated;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.LinksPaginated;
 import au.org.consumerdatastandards.support.data.DataDefinition;
 import au.org.consumerdatastandards.support.data.Property;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonCustomerAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonCustomerAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonCustomerAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonCustomerAPI.java
index 85d1471..7335c4c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonCustomerAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonCustomerAPI.java
@@ -1,7 +1,7 @@
-package au.org.consumerdatastandards.api.common;
+package au.org.consumerdatastandards.api.v1_0_0.common;
 
-import au.org.consumerdatastandards.api.common.models.ResponseCommonCustomer;
-import au.org.consumerdatastandards.api.common.models.ResponseCommonCustomerDetail;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseCommonCustomer;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseCommonCustomerDetail;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -45,35 +45,35 @@ ResponseCommonCustomer getCustomer(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -81,7 +81,7 @@ ResponseCommonCustomer getCustomer(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
@@ -128,35 +128,35 @@ ResponseCommonCustomerDetail getCustomerDetail(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-min-v"
         )
-        String xMinV, 
+        String xMinV,
         @Param(
             name = "x-fapi-interaction-id",
             description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-interaction-id"
         )
-        String xFapiInteractionId, 
+        String xFapiInteractionId,
         @Param(
             name = "x-fapi-auth-date",
             description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-auth-date"
         )
-        String xFapiAuthDate, 
+        String xFapiAuthDate,
         @Param(
             name = "x-fapi-customer-ip-address",
             description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-fapi-customer-ip-address"
         )
-        String xFapiCustomerIpAddress, 
+        String xFapiCustomerIpAddress,
         @Param(
             name = "x-cds-User-Agent",
             description = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters.",
@@ -164,7 +164,7 @@ ResponseCommonCustomerDetail getCustomerDetail(
             reference = "RequestHeader_x-cds-User-Agent"
         )
         @CDSDataType(CustomDataType.Base64)
-        String xCdsUserAgent, 
+        String xCdsUserAgent,
         @Param(
             name = "x-cds-subject",
             description = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonDiscoveryAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonDiscoveryAPI.java
similarity index 94%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonDiscoveryAPI.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonDiscoveryAPI.java
index 7bfee49..6c46039 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/CommonDiscoveryAPI.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/CommonDiscoveryAPI.java
@@ -1,7 +1,7 @@
-package au.org.consumerdatastandards.api.common;
+package au.org.consumerdatastandards.api.v1_0_0.common;
 
-import au.org.consumerdatastandards.api.common.models.CommonDiscoveryStatus;
-import au.org.consumerdatastandards.api.common.models.ResponseDiscoveryOutagesList;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.CommonDiscoveryStatus;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseDiscoveryOutagesList;
 import au.org.consumerdatastandards.support.data.*;
 import au.org.consumerdatastandards.support.*;
 
@@ -39,7 +39,7 @@ ResponseDiscoveryOutagesList getOutages(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
@@ -80,7 +80,7 @@ CommonDiscoveryStatus getStatus(
             in = ParamLocation.HEADER,
             reference = "RequestHeader_x-v"
         )
-        String xV, 
+        String xV,
         @Param(
             name = "x-min-v",
             description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/BaseResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/BaseResponse.java
new file mode 100644
index 0000000..abf04ea
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/BaseResponse.java
@@ -0,0 +1,19 @@
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class BaseResponse {
+
+    @Property(
+        description = "The links attribute contains a Links object with links to related API end points. This will include links to support pagination.",
+        required = true
+    )
+    protected Links links;
+
+    @Property(
+        description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API."
+    )
+    protected Meta meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonCurrencyAmount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonCurrencyAmount.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonCurrencyAmount.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonCurrencyAmount.java
index 388d7a5..3a0ab76 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonCurrencyAmount.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonCurrencyAmount.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
@@ -11,7 +11,7 @@
     )
     @CDSDataType(CustomDataType.Amount)
     String amount;
-    
+
     @Property(
         description = "If not present assumes AUD",
         required = false
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatus.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatus.java
similarity index 77%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatus.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatus.java
index 4b33e3e..0dc70eb 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatus.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatus.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatusData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatusData.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatusData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatusData.java
index 484c22b..dd1d76d 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonDiscoveryStatusData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonDiscoveryStatusData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonEmailAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonEmailAddress.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonEmailAddress.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonEmailAddress.java
index 7b0c8e7..5b902b1 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonEmailAddress.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonEmailAddress.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisation.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisation.java
similarity index 97%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisation.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisation.java
index 2d9e104..530e2d5 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisation.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisation.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisationDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisationDetail.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisationDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisationDetail.java
index 3825f63..47a5126 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonOrganisationDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonOrganisationDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPAFAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPAFAddress.java
similarity index 98%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPAFAddress.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPAFAddress.java
index 54add0b..8dc019a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPAFAddress.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPAFAddress.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPerson.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPerson.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPerson.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPerson.java
index 0569ea0..0e6c069 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPerson.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPerson.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPersonDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPersonDetail.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPersonDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPersonDetail.java
index 84599a8..dfc9d55 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPersonDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPersonDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhoneNumber.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhoneNumber.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhoneNumber.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhoneNumber.java
index e4de0a0..b043b6c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhoneNumber.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhoneNumber.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddress.java
similarity index 93%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddress.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddress.java
index edc7fba..b613b7a 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddress.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddress.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddressWithPurpose.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddressWithPurpose.java
similarity index 87%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddressWithPurpose.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddressWithPurpose.java
index ea286cc..8be971c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonPhysicalAddressWithPurpose.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonPhysicalAddressWithPurpose.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonSimpleAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonSimpleAddress.java
similarity index 96%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonSimpleAddress.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonSimpleAddress.java
index b66f475..fbff6f5 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/CommonSimpleAddress.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/CommonSimpleAddress.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/DiscoveryOutage.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/DiscoveryOutage.java
similarity index 93%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/DiscoveryOutage.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/DiscoveryOutage.java
index 28b4fdf..ec75328 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/DiscoveryOutage.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/DiscoveryOutage.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Error.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Error.java
similarity index 91%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Error.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Error.java
index 2caeb88..5215d49 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Error.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Error.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Links.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Links.java
similarity index 81%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Links.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Links.java
index 6279f3a..b8f87bf 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Links.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Links.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/LinksPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/LinksPaginated.java
similarity index 95%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/LinksPaginated.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/LinksPaginated.java
index edb0ae1..4579a92 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/LinksPaginated.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/LinksPaginated.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Meta.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Meta.java
new file mode 100644
index 0000000..f113661
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/Meta.java
@@ -0,0 +1,7 @@
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class Meta {
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/MetaPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/MetaPaginated.java
similarity index 89%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/MetaPaginated.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/MetaPaginated.java
index 8eff684..5ef82a4 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/MetaPaginated.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/MetaPaginated.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/PaginatedResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/PaginatedResponse.java
new file mode 100644
index 0000000..4f6e534
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/PaginatedResponse.java
@@ -0,0 +1,20 @@
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class PaginatedResponse {
+
+    @Property(
+        description = "The links attribute contains a Links object with links to related API end points. This will include links to support pagination.",
+        required = true
+    )
+    protected LinksPaginated links;
+
+    @Property(
+        description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API.",
+        required = true
+    )
+    protected MetaPaginated meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomer.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomer.java
similarity index 86%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomer.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomer.java
index e62a51b..a56f1ee 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomer.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomer.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerData.java
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerData.java
index 0881ed5..637ad13 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetail.java
similarity index 86%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetail.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetail.java
index 4a46737..1f9cf0d 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetail.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetail.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetailData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetailData.java
similarity index 93%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetailData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetailData.java
index 774e2e2..a5e0032 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseCommonCustomerDetailData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseCommonCustomerDetailData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesList.java
similarity index 78%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesList.java
index ee96d59..a0135e5 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesList.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesListData.java
similarity index 85%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesListData.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesListData.java
index e184614..84f8afb 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseDiscoveryOutagesListData.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseDiscoveryOutagesListData.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseErrorList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseErrorList.java
similarity index 75%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseErrorList.java
rename to api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseErrorList.java
index ab376f0..493f273 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/ResponseErrorList.java
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_0_0/common/models/ResponseErrorList.java
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package au.org.consumerdatastandards.api.v1_0_0.common.models;
 
 import java.util.List;
 import au.org.consumerdatastandards.support.data.*;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingAccountsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingAccountsAPI.java
new file mode 100644
index 0000000..d56d2aa
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingAccountsAPI.java
@@ -0,0 +1,738 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking;
+
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingAccountById;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingAccountList;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingAccountsBalanceById;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingAccountsBalanceList;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingTransactionById;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingTransactionList;
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "BankingAccounts", tags = {"Banking", "Accounts"})
+public interface BankingAccountsAPI  {
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}",
+        summary = "Get Account Detail",
+        description = "Obtain detailed information on a single account",
+        requestMethod = RequestMethod.GET,
+        operationId = "getAccountDetail",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingAccountById.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:accounts.detail:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingAccountById getAccountDetail(
+        @Param(
+            name = "accountId",
+            description = "A tokenised identifier for the account which is unique but not shareable",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}/balance",
+        summary = "Get Account Balance",
+        description = "Obtain the balance for a single specified account",
+        requestMethod = RequestMethod.GET,
+        operationId = "getBalance",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                content = ResponseBankingAccountsBalanceById.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:accounts.basic:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingAccountsBalanceById getBalance(
+        @Param(
+            name = "accountId",
+            description = "ID of the specific account requested",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}/transactions/{transactionId}",
+        summary = "Get Transaction Detail",
+        description = "Obtain detailed information on a transaction for a specific account",
+        requestMethod = RequestMethod.GET,
+        operationId = "getTransactionDetail",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                content = ResponseBankingTransactionById.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:transactions:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingTransactionById getTransactionDetail(
+        @Param(
+            name = "accountId",
+            description = "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "transactionId",
+            description = "ID of the transaction obtained from a previous call to one of the other transaction end points",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String transactionId,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}/transactions",
+        summary = "Get Transactions For Account",
+        description = "Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account - For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared",
+        requestMethod = RequestMethod.GET,
+        operationId = "getTransactions",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingTransactionList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:transactions:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingTransactionList getTransactions(
+        @Param(
+            name = "accountId",
+            description = "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "oldest-time",
+            description = "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type",
+            in = ParamLocation.QUERY,
+            reference = "ParamTransactionOldestTime"
+        )
+        @CDSDataType(CustomDataType.DateTime)
+            String oldestTime,
+        @Param(
+            name = "newest-time",
+            description = "Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type",
+            in = ParamLocation.QUERY,
+            reference = "ParamTransactionNewestTime"
+        )
+        @CDSDataType(CustomDataType.DateTime)
+            String newestTime,
+        @Param(
+            name = "min-amount",
+            description = "Filter transactions to only transactions with amounts higher or equal to than this amount",
+            in = ParamLocation.QUERY,
+            reference = "ParamTransactionMinAmount"
+        )
+        @CDSDataType(CustomDataType.Amount)
+            String minAmount,
+        @Param(
+            name = "max-amount",
+            description = "Filter transactions to only transactions with amounts less than or equal to than this amount",
+            in = ParamLocation.QUERY,
+            reference = "ParamTransactionMaxAmount"
+        )
+        @CDSDataType(CustomDataType.Amount)
+            String maxAmount,
+        @Param(
+            name = "text",
+            description = "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not)",
+            in = ParamLocation.QUERY,
+            reference = "ParamTransactionText"
+        )
+            String text,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress
+    );
+
+    @Endpoint(
+        path = "/banking/accounts",
+        summary = "Get Accounts",
+        description = "Obtain a list of accounts",
+        requestMethod = RequestMethod.GET,
+        operationId = "listAccounts",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingAccountList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:accounts.basic:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingAccountList listAccounts(
+        @Param(
+            name = "product-category",
+            description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+            in = ParamLocation.QUERY,
+            reference = "ParamProductCategory"
+        )
+            ParamProductCategory productCategory,
+        @Param(
+            name = "open-status",
+            description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+            in = ParamLocation.QUERY,
+            defaultValue = "ALL",
+            reference = "ParamAccountOpenStatus"
+        )
+            ParamAccountOpenStatus openStatus,
+        @Param(
+            name = "is-owned",
+            description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+            in = ParamLocation.QUERY,
+            reference = "ParamAccountIsOwned"
+        )
+        @CDSDataType(CustomDataType.Boolean)
+            Boolean isOwned,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/balances",
+        summary = "Get Bulk Balances",
+        description = "Obtain balances for multiple, filtered accounts",
+        requestMethod = RequestMethod.GET,
+        operationId = "listBalancesBulk",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingAccountsBalanceList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:accounts.basic:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingAccountsBalanceList listBalancesBulk(
+        @Param(
+            name = "product-category",
+            description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+            in = ParamLocation.QUERY,
+            reference = "ParamProductCategory"
+        )
+            ParamProductCategory productCategory,
+        @Param(
+            name = "open-status",
+            description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+            in = ParamLocation.QUERY,
+            defaultValue = "ALL",
+            reference = "ParamAccountOpenStatus"
+        )
+            ParamAccountOpenStatus openStatus,
+        @Param(
+            name = "is-owned",
+            description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+            in = ParamLocation.QUERY,
+            reference = "ParamAccountIsOwned"
+        )
+        @CDSDataType(CustomDataType.Boolean)
+            Boolean isOwned,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/balances",
+        summary = "Get Balances For Specific Accounts",
+        description = "Obtain balances for a specified list of accounts",
+        requestMethod = RequestMethod.POST,
+        operationId = "listBalancesSpecificAccounts",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingAccountsBalanceList.class
+            ),
+            @EndpointResponse(
+                responseCode = ResponseCode.UNPROCESSABLE_ENTITY,
+                description = "The request was well formed but was unable to be processed due to business logic specific to the request",
+                headers = {
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+                    )
+                },
+                content = ResponseErrorList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:accounts.basic:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(
+        @Param(
+            name = "accountIds",
+            description = "The list of account IDs to obtain balances for",
+            in = ParamLocation.BODY
+        )
+            RequestAccountIds accountIds,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingDirectDebitsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingDirectDebitsAPI.java
new file mode 100644
index 0000000..379ead7
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingDirectDebitsAPI.java
@@ -0,0 +1,341 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking;
+
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingDirectDebitAuthorisationList;
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "BankingDirectDebits", tags = {"Banking", "Direct Debits"})
+public interface BankingDirectDebitsAPI  {
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}/direct-debits",
+        summary = "Get Direct Debits For Account",
+        description = "Obtain direct debit authorisations for a specific account",
+        requestMethod = RequestMethod.GET,
+        operationId = "listDirectDebits",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                content = ResponseBankingDirectDebitAuthorisationList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingDirectDebitAuthorisationList listDirectDebits(
+        @Param(
+            name = "accountId",
+            description = "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/direct-debits",
+        summary = "Get Bulk Direct Debits",
+        description = "Obtain direct debit authorisations for multiple, filtered accounts",
+        requestMethod = RequestMethod.GET,
+        operationId = "listDirectDebitsBulk",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingDirectDebitAuthorisationList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(
+        @Param(
+            name = "product-category",
+            description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+            in = ParamLocation.QUERY,
+            reference = "ParamProductCategory"
+        )
+            ParamProductCategory productCategory,
+        @Param(
+            name = "open-status",
+            description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+            in = ParamLocation.QUERY,
+            defaultValue = "ALL",
+            reference = "ParamAccountOpenStatus"
+        )
+            ParamAccountOpenStatus openStatus,
+        @Param(
+            name = "is-owned",
+            description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+            in = ParamLocation.QUERY,
+            reference = "ParamAccountIsOwned"
+        )
+        @CDSDataType(CustomDataType.Boolean)
+            Boolean isOwned,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/accounts/direct-debits",
+        summary = "Get Direct Debits For Specific Accounts",
+        description = "Obtain direct debit authorisations for a specified list of accounts",
+        requestMethod = RequestMethod.POST,
+        operationId = "listDirectDebitsSpecificAccounts",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingDirectDebitAuthorisationList.class
+            ),
+            @EndpointResponse(
+                responseCode = ResponseCode.UNPROCESSABLE_ENTITY,
+                description = "The request was well formed but was unable to be processed due to business logic specific to the request",
+                headers = {
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+                    )
+                },
+                content = ResponseErrorList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(
+        @Param(
+            name = "accountIds",
+            description = "Array of specific accountIds to obtain authorisations for",
+            in = ParamLocation.BODY
+        )
+            RequestAccountIds accountIds,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingPayeesAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingPayeesAPI.java
new file mode 100644
index 0000000..6cea0d3
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingPayeesAPI.java
@@ -0,0 +1,211 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking;
+
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingPayeeById;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingPayeeList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "BankingPayees", tags = {"Banking", "Payees"})
+public interface BankingPayeesAPI  {
+
+    public enum ParamType {
+        DOMESTIC,
+        INTERNATIONAL,
+        BILLER,
+        ALL
+    }
+
+    @Endpoint(
+        path = "/banking/payees/{payeeId}",
+        summary = "Get Payee Detail",
+        description = "Obtain detailed information on a single payee.  Note that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient",
+        requestMethod = RequestMethod.GET,
+        operationId = "getPayeeDetail",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingPayeeById.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:payees:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingPayeeById getPayeeDetail(
+        @Param(
+            name = "payeeId",
+            description = "The ID used to locate the details of a particular payee",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String payeeId,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/payees",
+        summary = "Get Payees",
+        description = "Obtain a list of pre-registered payees",
+        requestMethod = RequestMethod.GET,
+        operationId = "listPayees",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingPayeeList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:payees:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingPayeeList listPayees(
+        @Param(
+            name = "type",
+            description = "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL",
+            in = ParamLocation.QUERY,
+            defaultValue = "ALL"
+        )
+            ParamType type,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingProductsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingProductsAPI.java
new file mode 100644
index 0000000..12a7554
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingProductsAPI.java
@@ -0,0 +1,161 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking;
+
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingProductById;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingProductList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "BankingProducts", tags = {"Banking", "Products"})
+public interface BankingProductsAPI  {
+
+    public enum ParamEffective {
+        CURRENT,
+        FUTURE,
+        ALL
+    }
+
+    @Endpoint(
+        path = "/banking/products/{productId}",
+        summary = "Get Product Detail",
+        description = "Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)",
+        requestMethod = RequestMethod.GET,
+        operationId = "getProductDetail",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    )
+                },
+                content = ResponseBankingProductById.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingProductById getProductDetail(
+        @Param(
+            name = "productId",
+            description = "ID of the specific product requested",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String productId,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV
+    );
+
+    @Endpoint(
+        path = "/banking/products",
+        summary = "Get Products",
+        description = "Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)",
+        requestMethod = RequestMethod.GET,
+        operationId = "listProducts",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    )
+                },
+                content = ResponseBankingProductList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingProductList listProducts(
+        @Param(
+            name = "effective",
+            description = "Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to 'CURRENT'",
+            in = ParamLocation.QUERY,
+            defaultValue = "CURRENT"
+        )
+            ParamEffective effective,
+        @Param(
+            name = "updated-since",
+            description = "Only include products that have been updated after the specified date and time. If absent defaults to include all products",
+            in = ParamLocation.QUERY
+        )
+        @CDSDataType(CustomDataType.DateTime)
+            String updatedSince,
+        @Param(
+            name = "brand",
+            description = "Filter results based on a specific brand",
+            in = ParamLocation.QUERY
+        )
+            String brand,
+        @Param(
+            name = "product-category",
+            description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+            in = ParamLocation.QUERY,
+            reference = "ParamProductCategory"
+        )
+            ParamProductCategory productCategory,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingScheduledPaymentsAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingScheduledPaymentsAPI.java
new file mode 100644
index 0000000..a0f93ef
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/BankingScheduledPaymentsAPI.java
@@ -0,0 +1,353 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking;
+
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.RequestAccountIds;
+import au.org.consumerdatastandards.api.v1_1_1.banking.models.ResponseBankingScheduledPaymentsList;
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseErrorList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "BankingScheduledPayments", tags = {"Banking", "Scheduled Payments"})
+public interface BankingScheduledPaymentsAPI  {
+
+    @Endpoint(
+        path = "/banking/accounts/{accountId}/payments/scheduled",
+        summary = "Get Scheduled Payments for Account",
+        description = "Obtain scheduled, outgoing payments for a specific account",
+        requestMethod = RequestMethod.GET,
+        operationId = "listScheduledPayments",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingScheduledPaymentsList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingScheduledPaymentsList listScheduledPayments(
+        @Param(
+            name = "accountId",
+            description = "ID of the account to get scheduled payments for. Must have previously been returned by one of the account list end points. The account specified is the source account for the payment",
+            in = ParamLocation.PATH
+        )
+        @CDSDataType(CustomDataType.ASCII)
+            String accountId,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/payments/scheduled",
+        summary = "Get Scheduled Payments Bulk",
+        description = "Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments",
+        requestMethod = RequestMethod.GET,
+        operationId = "listScheduledPaymentsBulk",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingScheduledPaymentsList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(
+        @Param(
+            name = "product-category",
+            description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+            in = ParamLocation.QUERY,
+            reference = "ParamProductCategory"
+        )
+            ParamProductCategory productCategory,
+        @Param(
+            name = "open-status",
+            description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+            in = ParamLocation.QUERY,
+            defaultValue = "ALL",
+            reference = "ParamAccountOpenStatus"
+        )
+            ParamAccountOpenStatus openStatus,
+        @Param(
+            name = "is-owned",
+            description = "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+            in = ParamLocation.QUERY,
+            reference = "ParamAccountIsOwned"
+        )
+        @CDSDataType(CustomDataType.Boolean)
+            Boolean isOwned,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/banking/payments/scheduled",
+        summary = "Get Scheduled Payments For Specific Accounts",
+        description = "Obtain scheduled payments for a specified list of accounts",
+        requestMethod = RequestMethod.POST,
+        operationId = "listScheduledPaymentsSpecificAccounts",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseBankingScheduledPaymentsList.class
+            ),
+            @EndpointResponse(
+                responseCode = ResponseCode.UNPROCESSABLE_ENTITY,
+                description = "The request was well formed but was unable to be processed due to business logic specific to the request",
+                headers = {
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+                    )
+                },
+                content = ResponseErrorList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "bank:regular_payments:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(
+        @Param(
+            name = "accountIds",
+            description = "Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned",
+            in = ParamLocation.BODY
+        )
+            RequestAccountIds accountIds,
+        @Param(
+            name = "page",
+            description = "Page of results to request (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "1",
+            reference = "ParamPage"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer page,
+        @Param(
+            name = "page-size",
+            description = "Page size to request. Default is 25 (standard pagination)",
+            in = ParamLocation.QUERY,
+            defaultValue = "25",
+            reference = "ParamPageSize"
+        )
+        @CDSDataType(CustomDataType.PositiveInteger)
+            Integer pageSize,
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccount.java
new file mode 100644
index 0000000..0f74b9f
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccount.java
@@ -0,0 +1,70 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition
+public class BankingAccount {
+
+    public enum OpenStatus {
+        OPEN,
+        CLOSED
+    }
+
+    @Property(
+        description = "A unique ID of the account adhering to the standards for ID permanence",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+
+    @Property(
+        description = "Date that the account was created (if known)"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate creationDate;
+
+    @Property(
+        description = "The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type.",
+        required = true
+    )
+    String displayName;
+
+    @Property(
+        description = "A customer supplied nick name for the account"
+    )
+    String nickname;
+
+    @Property(
+        description = "Open or closed status for the account. If not present then OPEN is assumed"
+    )
+    OpenStatus openStatus = OpenStatus.OPEN;
+
+    @Property(
+        description = "Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed"
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isOwned = true;
+
+    @Property(
+        description = "A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number",
+        required = true
+    )
+    @CDSDataType(CustomDataType.MaskedAccount)
+    String maskedNumber;
+
+    @Property(
+        required = true
+    )
+    BankingProductCategory productCategory;
+
+    @Property(
+        description = "The unique identifier of the account as defined by the data holder (akin to model number for the account)",
+        required = true
+    )
+    String productName;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccountDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccountDetail.java
new file mode 100644
index 0000000..ed25cf6
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAccountDetail.java
@@ -0,0 +1,104 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.CommonPhysicalAddress;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition(
+    allOf = { BankingAccount.class }
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "termDeposit", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "creditCard", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "loan", multiple = true)
+})
+public class BankingAccountDetail {
+
+    public enum SpecificAccountUType {
+        termDeposit,
+        creditCard,
+        loan
+    }
+
+    @Property(
+        description = "The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+    )
+    String bsb;
+
+    @Property(
+        description = "The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+    )
+    String accountNumber;
+
+    @Property(
+        description = "Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer"
+    )
+    String bundleName;
+
+    @Property(
+        description = "The type of structure to present account specific fields."
+    )
+    SpecificAccountUType specificAccountUType;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "specificAccountUType", values = {"termDeposit"}) },
+        nullIf = { @Condition(propertyName = "specificAccountUType", values = {"creditCard", "loan"}) }
+    )
+    List<BankingTermDepositAccount> termDeposit;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "specificAccountUType", values = {"creditCard"}) },
+        nullIf = { @Condition(propertyName = "specificAccountUType", values = {"termDeposit", "loan"}) }
+    )
+    BankingCreditCardAccount creditCard;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "specificAccountUType", values = {"loan"}) },
+        nullIf = { @Condition(propertyName = "specificAccountUType", values = {"termDeposit", "creditCard"}) }
+    )
+    BankingLoanAccount loan;
+
+    @Property(
+        description = "current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String depositRate;
+
+    @Property(
+        description = "The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String lendingRate;
+
+    @Property(
+        description = "Fully described deposit rates for this account based on the equivalent structure in Product Reference"
+    )
+    List<BankingProductDepositRate> depositRates;
+
+    @Property(
+        description = "Fully described deposit rates for this account based on the equivalent structure in Product Reference"
+    )
+    List<BankingProductLendingRate> lendingRates;
+
+    @Property(
+        description = "Array of features of the account based on the equivalent structure in Product Reference with the following additional field"
+    )
+    List<Object> features;
+
+    @Property(
+        description = "Fees and charges applicable to the account based on the equivalent structure in Product Reference"
+    )
+    List<BankingProductFee> fees;
+
+    @Property(
+        description = "The addresses for the account to be used for correspondence"
+    )
+    List<CommonPhysicalAddress> addresses;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAuthorisedEntity.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAuthorisedEntity.java
new file mode 100644
index 0000000..3b111de
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingAuthorisedEntity.java
@@ -0,0 +1,32 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingAuthorisedEntity {
+
+    @Property(
+        description = "Description of the authorised entity derived from previously executed direct debits"
+    )
+    String description;
+
+    @Property(
+        description = "Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme"
+    )
+    String financialInstitution;
+
+    @Property(
+        description = "Australian Business Number for the authorised entity"
+    )
+    String abn;
+
+    @Property(
+        description = "Australian Company Number for the authorised entity"
+    )
+    String acn;
+
+    @Property(
+        description = "Australian Registered Body Number for the authorised entity"
+    )
+    String arbn;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalance.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalance.java
new file mode 100644
index 0000000..1974a6a
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalance.java
@@ -0,0 +1,52 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingBalance {
+
+    @Property(
+        description = "A unique ID of the account adhering to the standards for ID permanence",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+
+    @Property(
+        description = "The balance of the account at this time. Should align to the balance available via other channels such as Internet Banking. Assumed to be negative if the customer has money owing",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String currentBalance;
+
+    @Property(
+        description = "Balance representing the amount of funds available for transfer. Assumed to be zero or positive",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String availableBalance;
+
+    @Property(
+        description = "Object representing the maximum amount of credit that is available for this account. Assumed to be zero if absent"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String creditLimit;
+
+    @Property(
+        description = "Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amortisedLimit;
+
+    @Property(
+        description = "The currency for the balance amounts. If absent assumed to be AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String currency;
+
+    @Property(
+        description = "Optional array of balances for the account in other currencies. Included to support accounts that support multi-currency purses such as Travel Cards"
+    )
+    List<BankingBalancePurse> purses;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalancePurse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalancePurse.java
new file mode 100644
index 0000000..335e665
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBalancePurse.java
@@ -0,0 +1,20 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingBalancePurse {
+
+    @Property(
+        description = "The balance available for this additional currency purse",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amount;
+
+    @Property(
+        description = "The currency for the purse"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String currency;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBillerPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBillerPayee.java
new file mode 100644
index 0000000..3ca3121
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingBillerPayee.java
@@ -0,0 +1,27 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "crn", multiple = true)
+})
+public class BankingBillerPayee {
+
+    @Property(
+        description = "BPAY Biller Code of the Biller",
+        required = true
+    )
+    String billerCode;
+
+    @Property(
+        description = "BPAY CRN of the Biller. If the contents of the CRN match the format of a Credit Card PAN then it should be masked using the rules applicable for the MaskedPANString common type"
+    )
+    String crn;
+
+    @Property(
+        description = "Name of the Biller",
+        required = true
+    )
+    String billerName;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingCreditCardAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingCreditCardAccount.java
new file mode 100644
index 0000000..8c0f771
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingCreditCardAccount.java
@@ -0,0 +1,39 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition
+public class BankingCreditCardAccount {
+
+    @Property(
+        description = "The minimum payment amount due for the next card payment",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String minPaymentAmount;
+
+    @Property(
+        description = "The amount due for the next card payment",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String paymentDueAmount;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String paymentCurrency;
+
+    @Property(
+        description = "Date that the next payment for the card is due",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate paymentDueDate;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDirectDebit.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDirectDebit.java
new file mode 100644
index 0000000..1567fae
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDirectDebit.java
@@ -0,0 +1,36 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+
+@DataDefinition
+public class BankingDirectDebit {
+
+    @Property(
+        description = "A unique ID of the account adhering to the standards for ID permanence.",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+
+    @Property(
+        required = true
+    )
+    BankingAuthorisedEntity authorisedEntity;
+
+    @Property(
+        description = "The date and time of the last debit executed under this authorisation"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime lastDebitDateTime;
+
+    @Property(
+        description = "The amount of the last debit executed under this authorisation"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String lastDebitAmount;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayee.java
new file mode 100644
index 0000000..a54502d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayee.java
@@ -0,0 +1,46 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "account", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "card", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "payId", multiple = true)
+})
+public class BankingDomesticPayee {
+
+    public enum PayeeAccountUType {
+        account,
+        card,
+        payId
+    }
+
+    @Property(
+        description = "Type of account object included. Valid values are: **account** A standard Australian account defined by BSB/Account Number. **card** A credit or charge card to pay to (note that PANs are masked). **payId** A PayID recognised by NPP",
+        required = true
+    )
+    PayeeAccountUType payeeAccountUType;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "payeeAccountUType", values = {"account"}) },
+        nullIf = { @Condition(propertyName = "payeeAccountUType", values = {"card", "payId"}) }
+    )
+    BankingDomesticPayeeAccount account;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "payeeAccountUType", values = {"card"}) },
+        nullIf = { @Condition(propertyName = "payeeAccountUType", values = {"account", "payId"}) }
+    )
+    BankingDomesticPayeeCard card;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "payeeAccountUType", values = {"payId"}) },
+        nullIf = { @Condition(propertyName = "payeeAccountUType", values = {"account", "card"}) }
+    )
+    BankingDomesticPayeePayId payId;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeAccount.java
new file mode 100644
index 0000000..9ecf566
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeAccount.java
@@ -0,0 +1,25 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class BankingDomesticPayeeAccount {
+
+    @Property(
+        description = "Name of the account to pay to"
+    )
+    String accountName;
+
+    @Property(
+        description = "BSB of the account to pay to",
+        required = true
+    )
+    String bsb;
+
+    @Property(
+        description = "Number of the account to pay to",
+        required = true
+    )
+    String accountNumber;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeCard.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeCard.java
new file mode 100644
index 0000000..e356614
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeeCard.java
@@ -0,0 +1,14 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingDomesticPayeeCard {
+
+    @Property(
+        description = "Name of the account to pay to",
+        required = true
+    )
+    @CDSDataType(CustomDataType.MaskedPAN)
+    String cardNumber;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeePayId.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeePayId.java
new file mode 100644
index 0000000..391a855
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingDomesticPayeePayId.java
@@ -0,0 +1,31 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingDomesticPayeePayId {
+
+    public enum Type {
+        EMAIL,
+        TELEPHONE,
+        ABN,
+        ORG_IDENTIFIER
+    }
+
+    @Property(
+        description = "The name assigned to the PayID by the owner of the PayID"
+    )
+    String name;
+
+    @Property(
+        description = "The identifier of the PayID (dependent on type)",
+        required = true
+    )
+    String identifier;
+
+    @Property(
+        description = "The type of the PayID",
+        required = true
+    )
+    Type type;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayee.java
new file mode 100644
index 0000000..f40d667
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayee.java
@@ -0,0 +1,17 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingInternationalPayee {
+
+    @Property(
+        required = true
+    )
+    BankingInternationalPayeeBeneficiaryDetails beneficiaryDetails;
+
+    @Property(
+        required = true
+    )
+    BankingInternationalPayeeBankDetails bankDetails;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetails.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetails.java
new file mode 100644
index 0000000..3824c5d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetails.java
@@ -0,0 +1,57 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingInternationalPayeeBankDetails {
+
+    @Property(
+        description = "Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String country;
+
+    @Property(
+        description = "Account Targeted for payment",
+        required = true
+    )
+    String accountNumber;
+
+    @Property
+    BankingInternationalPayeeBankDetailsBankAddress bankAddress;
+
+    @Property(
+        description = "Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String beneficiaryBankBIC;
+
+    @Property(
+        description = "Number for Fedwire payment (Federal Reserve Wire Network)"
+    )
+    String fedWireNumber;
+
+    @Property(
+        description = "Sort code used for account identification in some jurisdictions"
+    )
+    String sortCode;
+
+    @Property(
+        description = "Number for the Clearing House Interbank Payments System"
+    )
+    String chipNumber;
+
+    @Property(
+        description = "International bank routing number"
+    )
+    String routingNumber;
+
+    @Property(
+        description = "The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String legalEntityIdentifier;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
new file mode 100644
index 0000000..99b3795
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBankDetailsBankAddress.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingInternationalPayeeBankDetailsBankAddress {
+
+    @Property(
+        description = "Name of the recipient Bank",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "Address of the recipient Bank",
+        required = true
+    )
+    String address;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBeneficiaryDetails.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
new file mode 100644
index 0000000..2151624
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingInternationalPayeeBeneficiaryDetails.java
@@ -0,0 +1,26 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingInternationalPayeeBeneficiaryDetails {
+
+    @Property(
+        description = "Name of the beneficiary"
+    )
+    String name;
+
+    @Property(
+        description = "Country where the beneficiary resides. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String country;
+
+    @Property(
+        description = "Response message for the payment"
+    )
+    String message;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingLoanAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingLoanAccount.java
new file mode 100644
index 0000000..57bfbe3
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingLoanAccount.java
@@ -0,0 +1,109 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@DataDefinition
+public class BankingLoanAccount {
+
+    public enum RepaymentType {
+        INTEREST_ONLY,
+        PRINCIPAL_AND_INTEREST
+    }
+
+    @Property(
+        description = "Optional original start date for the loan"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate originalStartDate;
+
+    @Property(
+        description = "Optional original loan value"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String originalLoanAmount;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String originalLoanCurrency;
+
+    @Property(
+        description = "Date that the loan is due to be repaid in full",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate loanEndDate;
+
+    @Property(
+        description = "Next date that an instalment is required",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate nextInstalmentDate;
+
+    @Property(
+        description = "Minimum amount of next instalment"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String minInstalmentAmount;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String minInstalmentCurrency;
+
+    @Property(
+        description = "Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String maxRedraw;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String maxRedrawCurrency;
+
+    @Property(
+        description = "Minimum redraw amount"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String minRedraw;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String minRedrawCurrency;
+
+    @Property(
+        description = "Set to true if one or more offset accounts are configured for this loan account"
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean offsetAccountEnabled;
+
+    @Property(
+        description = "The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation"
+    )
+    List<String> offsetAccountIds;
+
+    @Property(
+        description = "Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST"
+    )
+    RepaymentType repaymentType = RepaymentType.PRINCIPAL_AND_INTEREST;
+
+    @Property(
+        description = "The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String repaymentFrequency;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayee.java
new file mode 100644
index 0000000..19f87b5
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayee.java
@@ -0,0 +1,48 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition
+public class BankingPayee {
+
+    public enum Type {
+        DOMESTIC,
+        INTERNATIONAL,
+        BILLER
+    }
+
+    @Property(
+        description = "ID of the payee adhering to the rules of ID permanence",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String payeeId;
+
+    @Property(
+        description = "The short display name of the payee as provided by the customer",
+        required = true
+    )
+    String nickname;
+
+    @Property(
+        description = "A description of the payee provided by the customer"
+    )
+    String description;
+
+    @Property(
+        description = "The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY",
+        required = true
+    )
+    Type type;
+
+    @Property(
+        description = "The date the payee was created by the customer"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate creationDate;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayeeDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayeeDetail.java
new file mode 100644
index 0000000..1c51298
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingPayeeDetail.java
@@ -0,0 +1,35 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    allOf = { BankingPayee.class }
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "domestic", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "biller", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "international", multiple = true)
+})
+public class BankingPayeeDetail {
+
+    public enum PayeeUType {
+        domestic,
+        biller,
+        international
+    }
+
+    @Property(
+        description = "Type of object included that describes the payee in detail",
+        required = true
+    )
+    PayeeUType payeeUType;
+
+    @Property
+    BankingDomesticPayee domestic;
+
+    @Property
+    BankingBillerPayee biller;
+
+    @Property
+    BankingInternationalPayee international;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductBundle.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductBundle.java
new file mode 100644
index 0000000..5205495
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductBundle.java
@@ -0,0 +1,36 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingProductBundle {
+
+    @Property(
+        description = "Name of the bundle",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "Description of the bundle",
+        required = true
+    )
+    String description;
+
+    @Property(
+        description = "Display text providing more information on the bundle"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on the bundle criteria and benefits"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+
+    @Property(
+        description = "Array of product IDs for products included in the bundle that are available via the product end points.  Note that this array is not intended to represent a comprehensive model of the products included in the bundle and some products available for the bundle may not be available via the product reference end points"
+    )
+    List<String> productIds;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductCategory.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductCategory.java
new file mode 100644
index 0000000..477a89d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductCategory.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "The category to which a product or account belongs. See [here](#product-categories) for more details"
+)
+public enum BankingProductCategory {
+    TRANS_AND_SAVINGS_ACCOUNTS,
+    TERM_DEPOSITS,
+    TRAVEL_CARDS,
+    REGULATED_TRUST_ACCOUNTS,
+    RESIDENTIAL_MORTGAGES,
+    CRED_AND_CHRG_CARDS,
+    PERS_LOANS,
+    MARGIN_LOANS,
+    LEASES,
+    TRADE_FINANCE,
+    OVERDRAFTS,
+    BUSINESS_LOANS
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductConstraint.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductConstraint.java
new file mode 100644
index 0000000..5fd01b1
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductConstraint.java
@@ -0,0 +1,40 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true)
+})
+public class BankingProductConstraint {
+
+    public enum ConstraintType {
+        MIN_BALANCE,
+        MAX_BALANCE,
+        OPENING_BALANCE,
+        MAX_LIMIT,
+        MIN_LIMIT
+    }
+
+    @Property(
+        description = "The type of constraint described.  See the next section for an overview of valid values and their meaning",
+        required = true
+    )
+    ConstraintType constraintType;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)"
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information the constraint"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on the constraint"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDepositRate.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDepositRate.java
new file mode 100644
index 0000000..a7cf52e
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDepositRate.java
@@ -0,0 +1,92 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.ConditionalCDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true)
+})
+public class BankingProductDepositRate {
+
+    public enum DepositRateType {
+        FIXED,
+        BONUS,
+        BUNDLE_BONUS,
+        VARIABLE,
+        INTRODUCTORY,
+        FLOATING,
+        MARKET_LINKED
+    }
+
+    @Property(
+        description = "The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning",
+        required = true
+    )
+    DepositRateType depositRateType;
+
+    @Property(
+        description = "The rate to be applied",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String rate;
+
+    @Property(
+        description = "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String calculationFrequency;
+
+    @Property(
+        description = "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String applicationFrequency;
+
+    @Property(
+        description = "Rate tiers applicable for this rate"
+    )
+    List<BankingProductRateTier> tiers;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)",
+        requiredIf = {
+            @Condition(
+                propertyName = "depositRateType",
+                values = {
+                    "FIXED",
+                    "BONUS",
+                    "BUNDLE_BONUS",
+                    "INTRODUCTORY",
+                    "FLOATING",
+                    "MARKET_LINKED"
+                },
+                conditionalCDSDataTypes = {
+                    @ConditionalCDSDataType(value = "FIXED", cdsDataType = @CDSDataType(CustomDataType.Duration)),
+                    @ConditionalCDSDataType(value = "INTRODUCTORY", cdsDataType = @CDSDataType(CustomDataType.Duration))
+                }
+            )
+        }
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the rate"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this rate"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDetail.java
new file mode 100644
index 0000000..cf5c1fe
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDetail.java
@@ -0,0 +1,47 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition(
+    allOf = { BankingProductV2.class }
+)
+public class BankingProductDetail {
+
+    @Property(
+        description = "An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also"
+    )
+    List<BankingProductBundle> bundles;
+
+    @Property(
+        description = "Array of features available for the product"
+    )
+    List<BankingProductFeature> features;
+
+    @Property(
+        description = "Constraints on the application for or operation of the product such as minimum balances or limit thresholds"
+    )
+    List<BankingProductConstraint> constraints;
+
+    @Property(
+        description = "Eligibility criteria for the product"
+    )
+    List<BankingProductEligibility> eligibility;
+
+    @Property(
+        description = "Fees applicable for the product"
+    )
+    List<BankingProductFee> fees;
+
+    @Property(
+        description = "Interest rates available for deposits"
+    )
+    List<BankingProductDepositRate> depositRates;
+
+    @Property(
+        description = "Interest rates charged against lending balances"
+    )
+    List<BankingProductLendingRate> lendingRates;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscount.java
new file mode 100644
index 0000000..3012479
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscount.java
@@ -0,0 +1,87 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "balanceRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "transactionRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "accruedRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "feeRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "amount", multiple = true)
+})
+public class BankingProductDiscount {
+
+    public enum DiscountType {
+        BALANCE,
+        DEPOSITS,
+        PAYMENTS,
+        FEE_CAP,
+        ELIGIBILITY_ONLY
+    }
+
+    @Property(
+        description = "Description of the discount",
+        required = true
+    )
+    String description;
+
+    @Property(
+        description = "The type of discount. See the next section for an overview of valid values and their meaning",
+        required = true
+    )
+    DiscountType discountType;
+
+    @Property(
+        description = "Value of the discount. When following properties include one of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amount;
+
+    @Property(
+        description = "A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String balanceRate;
+
+    @Property(
+        description = "A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String transactionRate;
+
+    @Property(
+        description = "A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String accruedRate;
+
+    @Property(
+        description = "A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String feeRate;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)"
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the discount"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this discount"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+
+    @Property(
+        description = "Eligibility constraints that apply to this discount"
+    )
+    List<BankingProductDiscountEligibility> eligibility;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscountEligibility.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscountEligibility.java
new file mode 100644
index 0000000..2fe9711
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductDiscountEligibility.java
@@ -0,0 +1,48 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true)
+})
+public class BankingProductDiscountEligibility {
+
+    public enum DiscountEligibilityType {
+        BUSINESS,
+        PENSION_RECIPIENT,
+        MIN_AGE,
+        MAX_AGE,
+        MIN_INCOME,
+        MIN_TURNOVER,
+        STAFF,
+        STUDENT,
+        EMPLOYMENT_STATUS,
+        RESIDENCY_STATUS,
+        NATURAL_PERSON,
+        INTRODUCTORY,
+        OTHER
+    }
+
+    @Property(
+        description = "The type of the specific eligibility constraint for a discount",
+        required = true
+    )
+    DiscountEligibilityType discountEligibilityType;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)"
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on this eligibility constraint"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this eligibility constraint"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductEligibility.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductEligibility.java
new file mode 100644
index 0000000..5e39717
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductEligibility.java
@@ -0,0 +1,75 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.ConditionalCDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "additionalInfo", multiple = true)
+})
+public class BankingProductEligibility {
+
+    public enum EligibilityType {
+        BUSINESS,
+        PENSION_RECIPIENT,
+        MIN_AGE,
+        MAX_AGE,
+        MIN_INCOME,
+        MIN_TURNOVER,
+        STAFF,
+        STUDENT,
+        EMPLOYMENT_STATUS,
+        RESIDENCY_STATUS,
+        NATURAL_PERSON,
+        OTHER
+    }
+
+    @Property(
+        description = "The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning",
+        required = true
+    )
+    EligibilityType eligibilityType;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)",
+        requiredIf = {
+            @Condition(
+                propertyName = "eligibilityType",
+                values = {
+                    "MIN_AGE",
+                    "MAX_AGE",
+                    "MIN_INCOME",
+                    "MIN_TURNOVER",
+                    "EMPLOYMENT_STATUS",
+                    "RESIDENCY_STATUS"
+                },
+                conditionalCDSDataTypes = {
+                    @ConditionalCDSDataType(value = "MIN_AGE", cdsDataType = @CDSDataType(CustomDataType.PositiveInteger)),
+                    @ConditionalCDSDataType(value = "MAX_AGE", cdsDataType = @CDSDataType(CustomDataType.PositiveInteger)),
+                    @ConditionalCDSDataType(value = "MIN_INCOME", cdsDataType = @CDSDataType(CustomDataType.Amount)),
+                    @ConditionalCDSDataType(value = "MIN_TURNOVER", cdsDataType = @CDSDataType(CustomDataType.Amount))
+                }
+            )
+        }
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER",
+        requiredIf = { @Condition(propertyName = "eligibilityType", values = {"OTHER"}) }
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this eligibility criteria"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFeature.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFeature.java
new file mode 100644
index 0000000..cea8b11
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFeature.java
@@ -0,0 +1,59 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "additionalInfo", multiple = true)
+})
+public class BankingProductFeature {
+
+    public enum FeatureType {
+        CARD_ACCESS,
+        ADDITIONAL_CARDS,
+        UNLIMITED_TXNS,
+        FREE_TXNS,
+        FREE_TXNS_ALLOWANCE,
+        LOYALTY_PROGRAM,
+        OFFSET,
+        OVERDRAFT,
+        REDRAW,
+        INSURANCE,
+        BALANCE_TRANSFERS,
+        INTEREST_FREE,
+        INTEREST_FREE_TRANSFERS,
+        DIGITAL_WALLET,
+        DIGITAL_BANKING,
+        NPP_PAYID,
+        NPP_ENABLED,
+        DONATE_INTEREST,
+        BILL_PAYMENT,
+        COMPLEMENTARY_PRODUCT_DISCOUNTS,
+        BONUS_REWARDS,
+        NOTIFICATIONS,
+        OTHER
+    }
+
+    @Property(
+        description = "The type of feature described",
+        required = true
+    )
+    FeatureType featureType;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)"
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this feature"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFee.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFee.java
new file mode 100644
index 0000000..71b298e
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductFee.java
@@ -0,0 +1,115 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.ConditionalCDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition(
+    anyOf = { "amount", "balanceRate", "transactionRate", "accruedRate" }
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "amount", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "balanceRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "transactionRate", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "accruedRate", multiple = true)
+})
+public class BankingProductFee {
+
+    public enum FeeType {
+        PERIODIC,
+        TRANSACTION,
+        WITHDRAWAL,
+        DEPOSIT,
+        PAYMENT,
+        PURCHASE,
+        EVENT,
+        UPFRONT,
+        EXIT
+    }
+
+    @Property(
+        description = "Name of the fee",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "The type of fee",
+        required = true
+    )
+    FeeType feeType;
+
+    @Property(
+        description = "The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amount;
+
+    @Property(
+        description = "A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String balanceRate;
+
+    @Property(
+        description = "A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String transactionRate;
+
+    @Property(
+        description = "A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String accruedRate;
+
+    @Property(
+        description = "The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String accrualFrequency;
+
+    @Property(
+        description = "The currency the fee will be charged in. Assumes AUD if absent"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String currency;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)",
+        requiredIf = {
+            @Condition(
+                propertyName = "feeType",
+                values = {"PERIODIC"},
+                conditionalCDSDataTypes = {
+                    @ConditionalCDSDataType(value = "PERIODIC", cdsDataType = @CDSDataType(CustomDataType.Duration))
+                }
+            )
+        }
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the fee"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this fee"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+
+    @Property(
+        description = "An optional list of discounts to this fee that may be available"
+    )
+    List<BankingProductDiscount> discounts;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductLendingRate.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductLendingRate.java
new file mode 100644
index 0000000..7812ff1
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductLendingRate.java
@@ -0,0 +1,114 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.ConditionalCDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "additionalValue", multiple = true)
+})
+public class BankingProductLendingRate {
+
+    public enum LendingRateType {
+        FIXED,
+        VARIABLE,
+        INTRODUCTORY,
+        DISCOUNT,
+        PENALTY,
+        FLOATING,
+        MARKET_LINKED,
+        CASH_ADVANCE,
+        PURCHASE,
+        BUNDLE_DISCOUNT_FIXED,
+        BUNDLE_DISCOUNT_VARIABLE
+    }
+
+    public enum InterestPaymentDue {
+        IN_ARREARS,
+        IN_ADVANCE
+    }
+
+    @Property(
+        description = "The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning",
+        required = true
+    )
+    LendingRateType lendingRateType;
+
+    @Property(
+        description = "The rate to be applied",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String rate;
+
+    @Property(
+        description = "A comparison rate equivalent for this rate"
+    )
+    @CDSDataType(CustomDataType.Rate)
+    String comparisonRate;
+
+    @Property(
+        description = "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String calculationFrequency;
+
+    @Property(
+        description = "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String applicationFrequency;
+
+    @Property(
+        description = "When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered"
+    )
+    InterestPaymentDue interestPaymentDue;
+
+    @Property(
+        description = "Rate tiers applicable for this rate"
+    )
+    List<BankingProductRateTier> tiers;
+
+    @Property(
+        description = "Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)",
+        requiredIf = {
+            @Condition(
+                propertyName = "lendingRateType",
+                values = {
+                    "FIXED",
+                    "INTRODUCTORY",
+                    "DISCOUNT",
+                    "PENALTY",
+                    "FLOATING",
+                    "MARKET_LINKED",
+                    "BUNDLE_DISCOUNT_FIXED",
+                    "BUNDLE_DISCOUNT_VARIABLE"
+                },
+                conditionalCDSDataTypes = {
+                    @ConditionalCDSDataType(value = "FIXED", cdsDataType = @CDSDataType(CustomDataType.Duration)),
+                    @ConditionalCDSDataType(value = "INTRODUCTORY", cdsDataType = @CDSDataType(CustomDataType.Duration))
+                }
+            )
+        }
+    )
+    String additionalValue;
+
+    @Property(
+        description = "Display text providing more information on the rate."
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this rate"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateCondition.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateCondition.java
new file mode 100644
index 0000000..48e59cb
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateCondition.java
@@ -0,0 +1,20 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Defines a condition for the applicability of a tiered rate"
+)
+public class BankingProductRateCondition {
+
+    @Property(
+        description = "Display text providing more information on the condition"
+    )
+    String additionalInfo;
+
+    @Property(
+        description = "Link to a web page with more information on this condition"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String additionalInfoUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTier.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTier.java
new file mode 100644
index 0000000..c767633
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTier.java
@@ -0,0 +1,58 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.math.BigDecimal;
+
+@DataDefinition(
+    description = "Defines the criteria and conditions for which a rate applies"
+)
+public class BankingProductRateTier {
+
+    public enum UnitOfMeasure {
+        DOLLAR,
+        PERCENT,
+        MONTH,
+        DAY
+    }
+
+    public enum RateApplicationMethod {
+        WHOLE_BALANCE,
+        PER_TIER
+    }
+
+    @Property(
+        description = "A display name for the tier",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)",
+        required = true
+    )
+    UnitOfMeasure unitOfMeasure;
+
+    @Property(
+        description = "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value",
+        required = true
+    )
+    BigDecimal minimumValue;
+
+    @Property(
+        description = "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier's range has no upper bound."
+    )
+    BigDecimal maximumValue;
+
+    @Property(
+        description = "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')"
+    )
+    RateApplicationMethod rateApplicationMethod;
+
+    @Property
+    BankingProductRateCondition applicabilityConditions;
+
+    @Property
+    BankingProductRateTierSubTier subTier;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTierSubTier.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTierSubTier.java
new file mode 100644
index 0000000..88770cf
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductRateTierSubTier.java
@@ -0,0 +1,57 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.math.BigDecimal;
+
+@DataDefinition(
+    referenced = false,
+    description = "Defines the sub-tier criteria and conditions for which a rate applies"
+)
+public class BankingProductRateTierSubTier {
+
+    public enum UnitOfMeasure {
+        DOLLAR,
+        PERCENT,
+        MONTH,
+        DAY
+    }
+
+    public enum RateApplicationMethod {
+        WHOLE_BALANCE,
+        PER_TIER
+    }
+
+    @Property(
+        description = "A display name for the tier",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)",
+        required = true
+    )
+    UnitOfMeasure unitOfMeasure;
+
+    @Property(
+        description = "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value",
+        required = true
+    )
+    BigDecimal minimumValue;
+
+    @Property(
+        description = "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months)",
+        required = true
+    )
+    BigDecimal maximumValue;
+
+    @Property(
+        description = "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')"
+    )
+    RateApplicationMethod rateApplicationMethod;
+
+    @Property
+    BankingProductRateCondition applicabilityConditions;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2.java
new file mode 100644
index 0000000..87c2a36
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2.java
@@ -0,0 +1,88 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+import java.util.List;
+
+@DataDefinition
+public class BankingProductV2 {
+
+    @Property(
+        description = "A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String productId;
+
+    @Property(
+        description = "The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime effectiveFrom;
+
+    @Property(
+        description = "The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime effectiveTo;
+
+    @Property(
+        description = "The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)",
+        required = true
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime lastUpdated;
+
+    @Property(
+        required = true
+    )
+    BankingProductCategory productCategory;
+
+    @Property(
+        description = "The display name of the product",
+        required = true
+    )
+    String name;
+
+    @Property(
+        description = "A description of the product",
+        required = true
+    )
+    String description;
+
+    @Property(
+        description = "A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required",
+        required = true
+    )
+    String brand;
+
+    @Property(
+        description = "An optional display name of the brand"
+    )
+    String brandName;
+
+    @Property(
+        description = "A link to an application web page where this product can be applied for."
+    )
+    @CDSDataType(CustomDataType.URI)
+    String applicationUri;
+
+    @Property(
+        description = "Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isTailored;
+
+    @Property
+    BankingProductV2AdditionalInformation additionalInformation;
+
+    @Property(
+        description = "An array of card art images"
+    )
+    List<BankingProductV2CardArt> cardArt;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2AdditionalInformation.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2AdditionalInformation.java
new file mode 100644
index 0000000..f67449a
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2AdditionalInformation.java
@@ -0,0 +1,43 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition(
+    referenced = false,
+    description = "Object that contains links to additional information on specific topics"
+)
+public class BankingProductV2AdditionalInformation {
+
+    @Property(
+        description = "General overview of the product"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String overviewUri;
+
+    @Property(
+        description = "Terms and conditions for the product"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String termsUri;
+
+    @Property(
+        description = "Eligibility rules and criteria for the product"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String eligibilityUri;
+
+    @Property(
+        description = "Description of fees, pricing, discounts, exemptions and bonuses for the product"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String feesAndPricingUri;
+
+    @Property(
+        description = "Description of a bundle that this product can be part of"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String bundleUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2CardArt.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2CardArt.java
new file mode 100644
index 0000000..02addec
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingProductV2CardArt.java
@@ -0,0 +1,24 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingProductV2CardArt {
+
+    @Property(
+        description = "Display label for the specific image"
+    )
+    String title;
+
+    @Property(
+        description = "Link to a PNG, JPG or GIF image with proportions defined by ISO 7810 ID-1 and width no greater than 512 pixels",
+        required = true
+    )
+    @CDSDataType(CustomDataType.URI)
+    String imageUri;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPayment.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPayment.java
new file mode 100644
index 0000000..15f2cb8
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPayment.java
@@ -0,0 +1,59 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class BankingScheduledPayment {
+
+    public enum Status {
+        ACTIVE,
+        SKIP,
+        INACTIVE
+    }
+
+    @Property(
+        description = "A unique ID of the scheduled payment adhering to the standards for ID permanence",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String scheduledPaymentId;
+
+    @Property(
+        description = "The short display name of the payee as provided by the customer"
+    )
+    String nickname;
+
+    @Property(
+        description = "The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payer’s account. Empty string if no data provided",
+        required = true
+    )
+    String payerReference;
+
+    @Property(
+        description = "The reference for the transaction that will be provided by the originating institution. Empty string if no data provided",
+        required = true
+    )
+    String payeeReference;
+
+    @Property(
+        description = "Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.",
+        required = true
+    )
+    Status status;
+
+    @Property(
+        required = true
+    )
+    BankingScheduledPaymentFrom from;
+
+    @Property(
+        required = true
+    )
+    List<BankingScheduledPaymentSet> paymentSet;
+
+    @Property(
+        required = true
+    )
+    BankingScheduledPaymentRecurrence recurrence;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentFrom.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentFrom.java
new file mode 100644
index 0000000..20b2cb6
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentFrom.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Object containing details of the source of the payment. Currently only specifies an account ID but provided as an object to facilitate future extensibility and consistency with the to object"
+)
+public class BankingScheduledPaymentFrom {
+
+    @Property(
+        description = "ID of the account that is the source of funds for the payment",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentInterval.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentInterval.java
new file mode 100644
index 0000000..c6d4e6e
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentInterval.java
@@ -0,0 +1,23 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class BankingScheduledPaymentInterval {
+
+    @Property(
+        description = "An interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)  (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String interval;
+
+    @Property(
+        description = "Uses an interval to define the ordinal day within the interval defined by the interval field on which the payment occurs. If the resulting duration is 0 days in length or larger than the number of days in the interval then the payment will occur on the last day of the interval. A duration of 1 day indicates the first day of the interval. If absent the assumed value is P1D. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. The first day of a week is considered to be Monday."
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String dayInInterval;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrence.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrence.java
new file mode 100644
index 0000000..2ff16cc
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrence.java
@@ -0,0 +1,66 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.Condition;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition(
+    description = "Object containing the detail of the schedule for the payment"
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "onceOff", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "intervalSchedule", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "lastWeekDay", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "eventBased", multiple = true)
+})
+public class BankingScheduledPaymentRecurrence {
+
+    public enum RecurrenceUType {
+        onceOff,
+        intervalSchedule,
+        lastWeekDay,
+        eventBased
+    }
+
+    @Property(
+        description = "The date of the next payment under the recurrence schedule"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate nextPaymentDate;
+
+    @Property(
+        description = "The type of recurrence used to define the schedule",
+        required = true
+    )
+    RecurrenceUType recurrenceUType;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "recurrenceUType", values = {"onceOff"}) },
+        nullIf = { @Condition(propertyName = "recurrenceUType", values = {"intervalSchedule", "lastWeekDay", "eventBased"}) }
+    )
+    BankingScheduledPaymentRecurrenceOnceOff onceOff;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "recurrenceUType", values = {"intervalSchedule"}) },
+        nullIf = { @Condition(propertyName = "recurrenceUType", values = {"onceOff", "lastWeekDay", "eventBased"}) }
+    )
+    BankingScheduledPaymentRecurrenceIntervalSchedule intervalSchedule;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "recurrenceUType", values = {"lastWeekDay"}) },
+        nullIf = { @Condition(propertyName = "recurrenceUType", values = {"intervalSchedule", "intervalSchedule", "eventBased"}) }
+    )
+    BankingScheduledPaymentRecurrenceLastWeekday lastWeekDay;
+
+    @Property(
+        requiredIf = { @Condition(propertyName = "recurrenceUType", values = {"eventBased"}) },
+        nullIf = { @Condition(propertyName = "recurrenceUType", values = {"onceOff", "intervalSchedule", "lastWeekDay"}) }
+    )
+    BankingScheduledPaymentRecurrenceEventBased eventBased;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceEventBased.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
new file mode 100644
index 0000000..913b3c2
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceEventBased.java
@@ -0,0 +1,15 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Indicates that the schedule of payments is defined according to an external event that cannot be predetermined. Mandatory if recurrenceUType is set to eventBased"
+)
+public class BankingScheduledPaymentRecurrenceEventBased {
+
+    @Property(
+        description = "Description of the event and conditions that will result in the payment. Expected to be formatted for display to a customer",
+        required = true
+    )
+    String description;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
new file mode 100644
index 0000000..03ef38d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceIntervalSchedule.java
@@ -0,0 +1,45 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+import java.util.List;
+
+@DataDefinition(
+    description = "Indicates that the schedule of payments is defined by a series of intervals. Mandatory if recurrenceUType is set to intervalSchedule"
+)
+public class BankingScheduledPaymentRecurrenceIntervalSchedule {
+
+    public enum NonBusinessDayTreatment {
+        AFTER,
+        BEFORE,
+        ON,
+        ONLY
+    }
+
+    @Property(
+        description = "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate finalPaymentDate;
+
+    @Property(
+        description = "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely"
+    )
+    @CDSDataType(CustomDataType.PositiveInteger)
+    Integer paymentsRemaining;
+
+    @Property(
+        description = "Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored"
+    )
+    NonBusinessDayTreatment nonBusinessDayTreatment = NonBusinessDayTreatment.ON;
+
+    @Property(
+        description = "An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry",
+        required = true
+    )
+    List<BankingScheduledPaymentInterval> intervals;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
new file mode 100644
index 0000000..89e290d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceLastWeekday.java
@@ -0,0 +1,61 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition(
+    description = "Indicates that the schedule of payments is defined according to the last occurrence of a specific weekday in an interval. Mandatory if recurrenceUType is set to lastWeekDay"
+)
+public class BankingScheduledPaymentRecurrenceLastWeekday {
+
+    public enum LastWeekDay {
+        MON,
+        TUE,
+        WED,
+        THU,
+        FRI,
+        SAT,
+        SUN
+    }
+
+    public enum NonBusinessDayTreatment {
+        AFTER,
+        BEFORE,
+        ON,
+        ONLY
+    }
+
+    @Property(
+        description = "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate finalPaymentDate;
+
+    @Property(
+        description = "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely"
+    )
+    @CDSDataType(CustomDataType.PositiveInteger)
+    Integer paymentsRemaining;
+
+    @Property(
+        description = "The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String interval;
+
+    @Property(
+        description = "The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval.",
+        required = true
+    )
+    LastWeekDay lastWeekDay;
+
+    @Property(
+        description = "Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored"
+    )
+    NonBusinessDayTreatment nonBusinessDayTreatment = NonBusinessDayTreatment.ON;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
new file mode 100644
index 0000000..381fec9
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentRecurrenceOnceOff.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition(
+    description = "Indicates that the payment is a once off payment on a specific future date. Mandatory if recurrenceUType is set to onceOff"
+)
+public class BankingScheduledPaymentRecurrenceOnceOff {
+
+    @Property(
+        description = "The scheduled date for the once off payment",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate paymentDate;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentSet.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentSet.java
new file mode 100644
index 0000000..4d34ea6
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentSet.java
@@ -0,0 +1,40 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition(
+    description = "The set of payment amounts and destination accounts for this payment accommodating multi-part payments. A single entry indicates a simple payment with one destination account. Must have at least one entry"
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "amount", multiple = true)
+})
+public class BankingScheduledPaymentSet {
+
+    @Property(
+        required = true
+    )
+    BankingScheduledPaymentTo to;
+
+    @Property(
+        description = "Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed"
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isAmountCalculated;
+
+    @Property(
+        description = "The amount of the next payment if known. Mandatory unless the isAmountCalculated field is set to true. Must be zero or positive if present"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amount;
+
+    @Property(
+        description = "The currency for the payment. AUD assumed if not present"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String currency;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentTo.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentTo.java
new file mode 100644
index 0000000..80c6453
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingScheduledPaymentTo.java
@@ -0,0 +1,51 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Object containing details of the destination of the payment. Used to specify a variety of payment destination types"
+)
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "accountId", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "payeeId", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "domestic", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "biller", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "international", multiple = true)
+})
+public class BankingScheduledPaymentTo {
+
+    public enum ToUType {
+        accountId,
+        payeeId,
+        domestic,
+        biller,
+        international
+    }
+
+    @Property(
+        description = "The type of object provided that specifies the destination of the funds for the payment.",
+        required = true
+    )
+    ToUType toUType;
+
+    @Property(
+        description = "Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent"
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+
+    @Property(
+        description = "Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead"
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String payeeId;
+
+    @Property
+    BankingDomesticPayee domestic;
+
+    @Property
+    BankingBillerPayee biller;
+
+    @Property
+    BankingInternationalPayee international;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTermDepositAccount.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTermDepositAccount.java
new file mode 100644
index 0000000..a6fa989
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTermDepositAccount.java
@@ -0,0 +1,49 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+
+@DataDefinition
+public class BankingTermDepositAccount {
+
+    public enum MaturityInstructions {
+        ROLLED_OVER,
+        PAID_OUT_AT_MATURITY
+    }
+
+    @Property(
+        description = "The lodgement date of the original deposit",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate lodgementDate;
+
+    @Property(
+        description = "Maturity date for the term deposit",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate maturityDate;
+
+    @Property(
+        description = "Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated"
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String maturityAmount;
+
+    @Property(
+        description = "If absent assumes AUD"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String maturityCurrency;
+
+    @Property(
+        description = "Current instructions on action to be taken at maturity",
+        required = true
+    )
+    MaturityInstructions maturityInstructions;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransaction.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransaction.java
new file mode 100644
index 0000000..2ed1b03
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransaction.java
@@ -0,0 +1,139 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "transactionId", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "postingDateTime", multiple = true)
+})
+public class BankingTransaction {
+
+    public enum Type {
+        FEE,
+        INTEREST_CHARGED,
+        INTEREST_PAID,
+        TRANSFER_OUTGOING,
+        TRANSFER_INCOMING,
+        PAYMENT,
+        DIRECT_DEBIT,
+        OTHER
+    }
+
+    public enum Status {
+        PENDING,
+        POSTED
+    }
+
+    @Property(
+        description = "ID of the account for which transactions are provided",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String accountId;
+
+    @Property(
+        description = "A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type"
+    )
+    @CDSDataType(CustomDataType.ASCII)
+    String transactionId;
+
+    @Property(
+        description = "True if extended information is available using the transaction detail end point. False if extended data is not available",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isDetailAvailable;
+
+    @Property(
+        description = "The type of the transaction",
+        required = true
+    )
+    Type type;
+
+    @Property(
+        description = "Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction",
+        required = true
+    )
+    Status status;
+
+    @Property(
+        description = "The transaction description as applied by the financial institution",
+        required = true
+    )
+    String description;
+
+    @Property(
+        description = "The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime postingDateTime;
+
+    @Property(
+        description = "Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime valueDateTime;
+
+    @Property(
+        description = "The time the transaction was executed by the originating customer, if available"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime executionDateTime;
+
+    @Property(
+        description = "The value of the transaction. Negative values mean money was outgoing from the account",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Amount)
+    String amount;
+
+    @Property(
+        description = "The currency for the transaction amount. AUD assumed if not present"
+    )
+    @CDSDataType(CustomDataType.Currency)
+    String currency;
+
+    @Property(
+        description = "The reference for the transaction provided by the originating institution. Empty string if no data provided",
+        required = true
+    )
+    String reference;
+
+    @Property(
+        description = "Name of the merchant for an outgoing payment to a merchant"
+    )
+    String merchantName;
+
+    @Property(
+        description = "The merchant category code (or MCC) for an outgoing payment to a merchant"
+    )
+    String merchantCategoryCode;
+
+    @Property(
+        description = "BPAY Biller Code for the transaction (if available)"
+    )
+    String billerCode;
+
+    @Property(
+        description = "Name of the BPAY biller for the transaction (if available)"
+    )
+    String billerName;
+
+    @Property(
+        description = "BPAY CRN for the transaction (if available)"
+    )
+    String crn;
+
+    @Property(
+        description = "6 Digit APCA number for the initiating institution"
+    )
+    String apcaNumber;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetail.java
new file mode 100644
index 0000000..794a6a6
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetail.java
@@ -0,0 +1,14 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    allOf = { BankingTransaction.class }
+)
+public class BankingTransactionDetail {
+
+    @Property(
+        required = true
+    )
+    BankingTransactionDetailExtendedData extendedData;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedData.java
new file mode 100644
index 0000000..a8ba612
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedData.java
@@ -0,0 +1,52 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingTransactionDetailExtendedData {
+
+    public enum ExtensionUType {
+        x2p101Payload
+    }
+
+    public enum Service {
+        X2P1_01("X2P1.01");
+
+        private String value;
+
+        Service(String value) {
+            this.value = value;
+        }
+
+        @Override
+        public String toString() {
+            return value;
+        }
+    }
+
+    @Property(
+        description = "Label of the originating payer. Mandatory for inbound payment"
+    )
+    String payer;
+
+    @Property(
+        description = "Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)"
+    )
+    String payee;
+
+    @Property(
+        description = "Optional extended data provided specific to transaction originated via NPP"
+    )
+    ExtensionUType extensionUType;
+
+    @Property
+    BankingTransactionDetailExtendedDataX2p101Payload x2p101Payload;
+
+    @Property(
+        description = "Identifier of the applicable overlay service. Valid values are: X2P1.01",
+        required = true
+    )
+    Service service;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
new file mode 100644
index 0000000..080c362
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/BankingTransactionDetailExtendedDataX2p101Payload.java
@@ -0,0 +1,25 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class BankingTransactionDetailExtendedDataX2p101Payload {
+
+    @Property(
+        description = "An extended string description. Only present if specified by the extensionUType field",
+        required = true
+    )
+    String extendedDescription;
+
+    @Property(
+        description = "An end to end ID for the payment created at initiation"
+    )
+    String endToEndId;
+
+    @Property(
+        description = "Purpose of the payment.  Format is defined by NPP standards for the x2p1.01 overlay service"
+    )
+    String purposeCode;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamAccountOpenStatus.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamAccountOpenStatus.java
new file mode 100644
index 0000000..3e73052
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamAccountOpenStatus.java
@@ -0,0 +1,12 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
+)
+public enum ParamAccountOpenStatus {
+    OPEN,
+    CLOSED,
+    ALL
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamProductCategory.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamProductCategory.java
new file mode 100644
index 0000000..ee2334d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ParamProductCategory.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned."
+)
+public enum ParamProductCategory {
+    TRANS_AND_SAVINGS_ACCOUNTS,
+    TERM_DEPOSITS,
+    TRAVEL_CARDS,
+    REGULATED_TRUST_ACCOUNTS,
+    RESIDENTIAL_MORTGAGES,
+    CRED_AND_CHRG_CARDS,
+    PERS_LOANS,
+    MARGIN_LOANS,
+    LEASES,
+    TRADE_FINANCE,
+    OVERDRAFTS,
+    BUSINESS_LOANS
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIds.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIds.java
new file mode 100644
index 0000000..60fc399
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIds.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.Meta;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class RequestAccountIds {
+
+    @Property(
+        required = true
+    )
+    RequestAccountIdsData data;
+
+    @Property
+    Meta meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIdsData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIdsData.java
new file mode 100644
index 0000000..f4304b9
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/RequestAccountIdsData.java
@@ -0,0 +1,15 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class RequestAccountIdsData {
+
+    @Property(
+        required = true
+    )
+    List<String> accountIds;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountById.java
new file mode 100644
index 0000000..4168e59
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountById.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.BaseResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingAccountById extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    BankingAccountDetail data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountList.java
new file mode 100644
index 0000000..6bd235d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingAccountList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingAccountListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountListData.java
new file mode 100644
index 0000000..12c95a9
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingAccountListData {
+
+    @Property(
+        description = "The list of accounts returned. If the filter results in an empty set then this array may have no records",
+        required = true
+    )
+    List<BankingAccount> accounts;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceById.java
new file mode 100644
index 0000000..8ed4013
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceById.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.BaseResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingAccountsBalanceById extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    BankingBalance data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceList.java
new file mode 100644
index 0000000..8ef876b
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingAccountsBalanceList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingAccountsBalanceListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceListData.java
new file mode 100644
index 0000000..a9bb9ad
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingAccountsBalanceListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingAccountsBalanceListData {
+
+    @Property(
+        description = "The list of balances returned",
+        required = true
+    )
+    List<BankingBalance> balances;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationList.java
new file mode 100644
index 0000000..966e8c2
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingDirectDebitAuthorisationList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingDirectDebitAuthorisationListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
new file mode 100644
index 0000000..201aab3
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingDirectDebitAuthorisationListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingDirectDebitAuthorisationListData {
+
+    @Property(
+        description = "The list of authorisations returned",
+        required = true
+    )
+    List<BankingDirectDebit> directDebitAuthorisations;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeById.java
new file mode 100644
index 0000000..cb7befd
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeById.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.BaseResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingPayeeById extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    BankingPayeeDetail data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeList.java
new file mode 100644
index 0000000..086cd70
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingPayeeList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingPayeeListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeListData.java
new file mode 100644
index 0000000..955ea7d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingPayeeListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingPayeeListData {
+
+    @Property(
+        description = "The list of payees returned",
+        required = true
+    )
+    List<BankingPayee> payees;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductById.java
new file mode 100644
index 0000000..93e4052
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductById.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.BaseResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingProductById extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    BankingProductDetail data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductList.java
new file mode 100644
index 0000000..401f40b
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingProductList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingProductListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductListData.java
new file mode 100644
index 0000000..da612eb
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingProductListData.java
@@ -0,0 +1,18 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.util.List;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingProductListData {
+
+    @Property(
+        description = "The list of products returned.  If the filter results in an empty set then this array may have no records",
+        required = true
+    )
+    List<BankingProductV2> products;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsList.java
new file mode 100644
index 0000000..ba8b941
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.PaginatedResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingScheduledPaymentsList extends PaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingScheduledPaymentsListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsListData.java
new file mode 100644
index 0000000..5061001
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingScheduledPaymentsListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingScheduledPaymentsListData {
+
+    @Property(
+        description = "The list of scheduled payments to return",
+        required = true
+    )
+    List<BankingScheduledPayment> scheduledPayments;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionById.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionById.java
new file mode 100644
index 0000000..9137ec3
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionById.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.BaseResponse;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseBankingTransactionById extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    BankingTransactionDetail data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionList.java
new file mode 100644
index 0000000..96c27f8
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class ResponseBankingTransactionList extends TxPaginatedResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseBankingTransactionListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionListData.java
new file mode 100644
index 0000000..19ffb07
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/ResponseBankingTransactionListData.java
@@ -0,0 +1,15 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseBankingTransactionListData {
+
+    @Property(
+        required = true
+    )
+    List<BankingTransaction> transactions;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxMetaPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxMetaPaginated.java
new file mode 100644
index 0000000..25889bb
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxMetaPaginated.java
@@ -0,0 +1,12 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_0_0.common.models.MetaPaginated;
+import au.org.consumerdatastandards.support.data.Property;
+
+public class TxMetaPaginated extends MetaPaginated {
+
+    @Property(
+        description = "whether the text parameter is supplied or not in getTransactions operation"
+    )
+    Boolean isQueryParamUnsupported;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxPaginatedResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxPaginatedResponse.java
new file mode 100644
index 0000000..92c62ee
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/banking/models/TxPaginatedResponse.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.banking.models;
+
+import au.org.consumerdatastandards.api.v1_0_0.common.models.LinksPaginated;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class TxPaginatedResponse {
+
+    @Property(
+        description = "The links attribute contains a Links object with links to related API end points. This will include links to support pagination.",
+        required = true
+    )
+    protected LinksPaginated links;
+
+    @Property(
+        description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API.",
+        required = true
+    )
+    protected TxMetaPaginated meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonCustomerAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonCustomerAPI.java
new file mode 100644
index 0000000..8612fb0
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonCustomerAPI.java
@@ -0,0 +1,172 @@
+package au.org.consumerdatastandards.api.v1_1_1.common;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseCommonCustomer;
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseCommonCustomerDetail;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+
+@Section(name = "CommonCustomer", tags = {"Common", "Customer"})
+public interface CommonCustomerAPI  {
+
+    @Endpoint(
+        path = "/common/customer",
+        summary = "Get Customer",
+        description = "Obtain basic information on the customer that has authorised the current session",
+        requestMethod = RequestMethod.GET,
+        operationId = "getCustomer",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseCommonCustomer.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "common:customer.basic:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseCommonCustomer getCustomer(
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+
+    @Endpoint(
+        path = "/common/customer/detail",
+        summary = "Get Customer Detail",
+        description = "Obtain detailed information on the authorised customer within the current session.",
+        requestMethod = RequestMethod.GET,
+        operationId = "getCustomerDetail",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    ),
+                    @ResponseHeader(
+                        name="x-fapi-interaction-id",
+                        type = "string",
+                        description = "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+                    )
+                },
+                content = ResponseCommonCustomerDetail.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-scopes", value = "common:customer.detail:read", multiple = true),
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseCommonCustomerDetail getCustomerDetail(
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV,
+        @Param(
+            name = "x-fapi-interaction-id",
+            description = "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-interaction-id"
+        )
+            String xFapiInteractionId,
+        @Param(
+            name = "x-fapi-auth-date",
+            description = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-auth-date"
+        )
+            String xFapiAuthDate,
+        @Param(
+            name = "x-fapi-customer-ip-address",
+            description = "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-fapi-customer-ip-address"
+        )
+            String xFapiCustomerIpAddress,
+        @Param(
+            name = "x-cds-client-headers",
+            description = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-cds-client-headers"
+        )
+        @CDSDataType(CustomDataType.Base64)
+            String xCdsClientHeaders
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonDiscoveryAPI.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonDiscoveryAPI.java
new file mode 100644
index 0000000..1560dbb
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/CommonDiscoveryAPI.java
@@ -0,0 +1,100 @@
+package au.org.consumerdatastandards.api.v1_1_1.common;
+
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseCommonDiscoveryStatus;
+import au.org.consumerdatastandards.api.v1_1_1.common.models.ResponseDiscoveryOutagesList;
+import au.org.consumerdatastandards.support.Endpoint;
+import au.org.consumerdatastandards.support.EndpointResponse;
+import au.org.consumerdatastandards.support.Param;
+import au.org.consumerdatastandards.support.ParamLocation;
+import au.org.consumerdatastandards.support.RequestMethod;
+import au.org.consumerdatastandards.support.ResponseCode;
+import au.org.consumerdatastandards.support.ResponseHeader;
+import au.org.consumerdatastandards.support.Section;
+import au.org.consumerdatastandards.support.data.CustomAttribute;
+import au.org.consumerdatastandards.support.data.CustomAttributes;
+
+@Section(name = "CommonDiscovery", tags = {"Common", "Discovery"})
+public interface CommonDiscoveryAPI  {
+
+    @Endpoint(
+        path = "/discovery/outages",
+        summary = "Get Outages",
+        description = "Obtain a list of scheduled outages for the implementation",
+        requestMethod = RequestMethod.GET,
+        operationId = "getOutages",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    )
+                },
+                content = ResponseDiscoveryOutagesList.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseDiscoveryOutagesList getOutages(
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV
+    );
+
+    @Endpoint(
+        path = "/discovery/status",
+        summary = "Get Status",
+        description = "Obtain a health check status for the implementation",
+        requestMethod = RequestMethod.GET,
+        operationId = "getStatus",
+        responses = {
+            @EndpointResponse(
+                responseCode = ResponseCode.OK,
+                description = "Success",
+                headers = {
+                    @ResponseHeader(
+                        name="x-v",
+                        type = "string",
+                        description = "The [version](#response-headers) of the API end point that the data holder has responded with."
+                    )
+                },
+                content = ResponseCommonDiscoveryStatus.class
+            )
+        }
+    )
+    @CustomAttributes({
+        @CustomAttribute(name = "x-version", value = "1")
+    })
+    ResponseCommonDiscoveryStatus getStatus(
+        @Param(
+            name = "x-v",
+            description = "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-v"
+        )
+            String xV,
+        @Param(
+            name = "x-min-v",
+            description = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+            in = ParamLocation.HEADER,
+            reference = "RequestHeader_x-min-v"
+        )
+            String xMinV
+    );
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/BaseResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/BaseResponse.java
new file mode 100644
index 0000000..dd81016
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/BaseResponse.java
@@ -0,0 +1,19 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class BaseResponse {
+
+    @Property(
+        description = "The links attribute contains a Links object with links to related API end points. This will include links to support pagination.",
+        required = true
+    )
+    protected Links links;
+
+    @Property(
+        description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API."
+    )
+    protected Meta meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonEmailAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonEmailAddress.java
new file mode 100644
index 0000000..1867595
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonEmailAddress.java
@@ -0,0 +1,33 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class CommonEmailAddress {
+
+    public enum Purpose {
+        WORK,
+        HOME,
+        OTHER,
+        UNSPECIFIED
+    }
+
+    @Property(
+        description = "May be true for one and only one email record in the collection. Denotes the default email address"
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isPreferred;
+
+    @Property(
+        description = "The purpose for the email, as specified by the customer (Enumeration)",
+        required = true
+    )
+    Purpose purpose;
+
+    @Property(
+        description = "A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String address;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisation.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisation.java
new file mode 100644
index 0000000..161c730
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisation.java
@@ -0,0 +1,100 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.LocalDate;
+import java.time.OffsetDateTime;
+
+@DataDefinition
+public class CommonOrganisation {
+
+    public enum OrganisationType {
+        SOLE_TRADER,
+        COMPANY,
+        PARTNERSHIP,
+        TRUST,
+        GOVERNMENT_ENTITY,
+        OTHER
+    }
+
+    @Property(
+        description = "The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime lastUpdateTime;
+
+    @Property(
+        description = "The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field"
+    )
+    String agentFirstName;
+
+    @Property(
+        description = "The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field",
+        required = true
+    )
+    String agentLastName;
+
+    @Property(
+        description = "The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known",
+        required = true
+    )
+    String agentRole;
+
+    @Property(
+        description = "Name of the organisation",
+        required = true
+    )
+    String businessName;
+
+    @Property(
+        description = "Legal name, if different to the business name"
+    )
+    String legalName;
+
+    @Property(
+        description = "Short name used for communication, if different to the business name"
+    )
+    String shortName;
+
+    @Property(
+        description = "Australian Business Number for the organisation"
+    )
+    String abn;
+
+    @Property(
+        description = "Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type"
+    )
+    String acn;
+
+    @Property(
+        description = "True if registered with the ACNC.  False if not. Absent or null if not confirmed."
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isACNCRegistered;
+
+    @Property(
+        description = "[ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation."
+    )
+    String industryCode;
+
+    @Property(
+        description = "Legal organisation type",
+        required = true
+    )
+    OrganisationType organisationType;
+
+    @Property(
+        description = "Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent"
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String registeredCountry;
+
+    @Property(
+        description = "The date the organisation described was established"
+    )
+    @CDSDataType(CustomDataType.Date)
+    LocalDate establishmentDate;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisationDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisationDetail.java
new file mode 100644
index 0000000..2024495
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonOrganisationDetail.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    allOf = { CommonOrganisation.class }
+)
+public class CommonOrganisationDetail {
+
+    @Property(
+        description = "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+        required = true
+    )
+    List<CommonPhysicalAddressWithPurpose> physicalAddresses;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPAFAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPAFAddress.java
new file mode 100644
index 0000000..219e825
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPAFAddress.java
@@ -0,0 +1,125 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    description = "Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)"
+)
+public class CommonPAFAddress {
+
+    @Property(
+        description = "Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier"
+    )
+    String dpid;
+
+    @Property(
+        description = "Thoroughfare number for a property (first number in a property ranged address)"
+    )
+    @CDSDataType(CustomDataType.PositiveInteger)
+    Integer thoroughfareNumber1;
+
+    @Property(
+        description = "Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated"
+    )
+    String thoroughfareNumber1Suffix;
+
+    @Property(
+        description = "Second thoroughfare number (only used if the property has a ranged address eg 23-25)"
+    )
+    @CDSDataType(CustomDataType.PositiveInteger)
+    Integer thoroughfareNumber2;
+
+    @Property(
+        description = "Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated"
+    )
+    String thoroughfareNumber2Suffix;
+
+    @Property(
+        description = "Type of flat or unit for the address"
+    )
+    String flatUnitType;
+
+    @Property(
+        description = "Unit number (including suffix, if applicable)"
+    )
+    String flatUnitNumber;
+
+    @Property(
+        description = "Type of floor or level for the address"
+    )
+    String floorLevelType;
+
+    @Property(
+        description = "Floor or level number (including alpha characters)"
+    )
+    String floorLevelNumber;
+
+    @Property(
+        description = "Allotment number for the address"
+    )
+    String lotNumber;
+
+    @Property(
+        description = "Building/Property name 1"
+    )
+    String buildingName1;
+
+    @Property(
+        description = "Building/Property name 2"
+    )
+    String buildingName2;
+
+    @Property(
+        description = "The name of the street"
+    )
+    String streetName;
+
+    @Property(
+        description = "The street type. Valid enumeration defined by Australia Post PAF code file"
+    )
+    String streetType;
+
+    @Property(
+        description = "The street type suffix. Valid enumeration defined by Australia Post PAF code file"
+    )
+    String streetSuffix;
+
+    @Property(
+        description = "Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file"
+    )
+    String postalDeliveryType;
+
+    @Property(
+        description = "Postal delivery number if the address is a postal delivery type"
+    )
+    @CDSDataType(CustomDataType.PositiveInteger)
+    Integer postalDeliveryNumber;
+
+    @Property(
+        description = "Postal delivery number prefix related to the postal delivery number"
+    )
+    String postalDeliveryNumberPrefix;
+
+    @Property(
+        description = "Postal delivery number suffix related to the postal delivery number"
+    )
+    String postalDeliveryNumberSuffix;
+
+    @Property(
+        description = "Full name of locality",
+        required = true
+    )
+    String localityName;
+
+    @Property(
+        description = "Postcode for the locality",
+        required = true
+    )
+    String postcode;
+
+    @Property(
+        description = "State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT",
+        required = true
+    )
+    String state;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPerson.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPerson.java
new file mode 100644
index 0000000..86ce338
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPerson.java
@@ -0,0 +1,51 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+import java.util.List;
+
+@DataDefinition
+public class CommonPerson {
+
+    @Property(
+        description = "The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime lastUpdateTime;
+
+    @Property(
+        description = "For people with single names this field need not be present.  The single name should be in the lastName field"
+    )
+    String firstName;
+
+    @Property(
+        description = "For people with single names the single name should be in this field",
+        required = true
+    )
+    String lastName;
+
+    @Property(
+        description = "Field is mandatory but array may be empty",
+        required = true
+    )
+    List<String> middleNames;
+
+    @Property(
+        description = "Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)"
+    )
+    String prefix;
+
+    @Property(
+        description = "Used for a trailing suffix to the name (e.g. Jr)"
+    )
+    String suffix;
+
+    @Property(
+        description = "Value is a valid [ANZSCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification."
+    )
+    String occupationCode;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPersonDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPersonDetail.java
new file mode 100644
index 0000000..3be6306
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPersonDetail.java
@@ -0,0 +1,28 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    allOf = { CommonPerson.class }
+)
+public class CommonPersonDetail {
+
+    @Property(
+        description = "Array is mandatory but may be empty if no phone numbers are held",
+        required = true
+    )
+    List<CommonPhoneNumber> phoneNumbers;
+
+    @Property(
+        description = "May be empty",
+        required = true
+    )
+    List<CommonEmailAddress> emailAddresses;
+
+    @Property(
+        description = "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+        required = true
+    )
+    List<CommonPhysicalAddressWithPurpose> physicalAddresses;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhoneNumber.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhoneNumber.java
new file mode 100644
index 0000000..b781739
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhoneNumber.java
@@ -0,0 +1,59 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "areaCode", multiple = true)
+})
+public class CommonPhoneNumber {
+
+    public enum Purpose {
+        MOBILE,
+        HOME,
+        WORK,
+        OTHER,
+        INTERNATIONAL,
+        UNSPECIFIED
+    }
+
+    @Property(
+        description = "May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present"
+    )
+    @CDSDataType(CustomDataType.Boolean)
+    Boolean isPreferred;
+
+    @Property(
+        description = "The purpose of the number as specified by the customer",
+        required = true
+    )
+    Purpose purpose;
+
+    @Property(
+        description = "If absent, assumed to be Australia (+61). The + should be included"
+    )
+    String countryCode;
+
+    @Property(
+        description = "Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted."
+    )
+    String areaCode;
+
+    @Property(
+        description = "The actual phone number, with leading zeros as appropriate",
+        required = true
+    )
+    String number;
+
+    @Property(
+        description = "An extension number (if applicable)"
+    )
+    String extension;
+
+    @Property(
+        description = "Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)",
+        required = true
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String fullNumber;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddress.java
new file mode 100644
index 0000000..19eae16
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddress.java
@@ -0,0 +1,28 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "simple", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "paf", multiple = true)
+})
+public class CommonPhysicalAddress {
+
+    public enum AddressUType {
+        simple,
+        paf
+    }
+
+    @Property(
+        description = "The type of address object present",
+        required = true
+    )
+    AddressUType addressUType;
+
+    @Property
+    CommonSimpleAddress simple;
+
+    @Property
+    CommonPAFAddress paf;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddressWithPurpose.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddressWithPurpose.java
new file mode 100644
index 0000000..af9763c
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonPhysicalAddressWithPurpose.java
@@ -0,0 +1,23 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    allOf = { CommonPhysicalAddress.class }
+)
+public class CommonPhysicalAddressWithPurpose {
+
+    public enum Purpose {
+        REGISTERED,
+        MAIL,
+        PHYSICAL,
+        WORK,
+        OTHER
+    }
+
+    @Property(
+        description = "Enumeration of values indicating the purpose of the physical address",
+        required = true
+    )
+    Purpose purpose;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonSimpleAddress.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonSimpleAddress.java
new file mode 100644
index 0000000..59fb327
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/CommonSimpleAddress.java
@@ -0,0 +1,54 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "postcode", multiple = true)
+})
+public class CommonSimpleAddress {
+
+    @Property(
+        description = "Name of the individual or business formatted for inclusion in an address used for physical mail"
+    )
+    String mailingName;
+
+    @Property(
+        description = "First line of the standard address object",
+        required = true
+    )
+    String addressLine1;
+
+    @Property(
+        description = "Second line of the standard address object"
+    )
+    String addressLine2;
+
+    @Property(
+        description = "Third line of the standard address object"
+    )
+    String addressLine3;
+
+    @Property(
+        description = "Mandatory for Australian addresses"
+    )
+    String postcode;
+
+    @Property(
+        description = "Name of the city or locality",
+        required = true
+    )
+    String city;
+
+    @Property(
+        description = "Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT",
+        required = true
+    )
+    String state;
+
+    @Property(
+        description = "A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present."
+    )
+    @CDSDataType(CustomDataType.ExternalRef)
+    String country = "AUS";
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/DiscoveryOutage.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/DiscoveryOutage.java
new file mode 100644
index 0000000..107793a
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/DiscoveryOutage.java
@@ -0,0 +1,37 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+
+@DataDefinition
+public class DiscoveryOutage {
+
+    @Property(
+        description = "Date and time that the outage is scheduled to begin",
+        required = true
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime outageTime;
+
+    @Property(
+        description = "Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+        required = true
+    )
+    @CDSDataType(CustomDataType.Duration)
+    String duration;
+
+    @Property(
+        description = "Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage"
+    )
+    Boolean isPartial;
+
+    @Property(
+        description = "Provides an explanation of the current outage that can be displayed to an end customer",
+        required = true
+    )
+    String explanation;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Error.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Error.java
new file mode 100644
index 0000000..5b28463
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Error.java
@@ -0,0 +1,32 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class Error {
+
+    @Property(
+        description = "Must be one of the following: 0001 – Account not able to be found",
+        required = true
+    )
+    String code;
+
+    @Property(
+        description = "Must be one of the following: Invalid account",
+        required = true
+    )
+    String title;
+
+    @Property(
+        description = "ID of the account not found",
+        required = true
+    )
+    String detail;
+
+    @Property(
+        description = "Optional additional data for specific error types"
+    )
+    Object meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Links.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Links.java
new file mode 100644
index 0000000..eb9c3ad
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Links.java
@@ -0,0 +1,14 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class Links {
+
+    @Property(
+        description = "Fully qualified link that generated the current response document",
+        required = true
+    )
+    @CDSDataType(CustomDataType.URI)
+    String self;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/LinksPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/LinksPaginated.java
new file mode 100644
index 0000000..06adfb5
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/LinksPaginated.java
@@ -0,0 +1,44 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "prev", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "next", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "first", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "last", multiple = true)
+})
+public class LinksPaginated {
+
+    @Property(
+        description = "Fully qualified link that generated the current response document",
+        required = true
+    )
+    @CDSDataType(CustomDataType.URI)
+    String self;
+
+    @Property(
+        description = "URI to the first page of this set. Mandatory if this response is not the first page"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String first;
+
+    @Property(
+        description = "URI to the previous page of this set. Mandatory if this response is not the first page"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String prev;
+
+    @Property(
+        description = "URI to the next page of this set. Mandatory if this response is not the last page"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String next;
+
+    @Property(
+        description = "URI to the last page of this set. Mandatory if this response is not the last page"
+    )
+    @CDSDataType(CustomDataType.URI)
+    String last;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Meta.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Meta.java
new file mode 100644
index 0000000..0aa82a4
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/Meta.java
@@ -0,0 +1,7 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class Meta {
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/MetaPaginated.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/MetaPaginated.java
new file mode 100644
index 0000000..fa9c439
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/MetaPaginated.java
@@ -0,0 +1,21 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class MetaPaginated {
+
+    @Property(
+        description = "The total number of records in the full set. See [pagination](#pagination).",
+        required = true
+    )
+    @CDSDataType(CustomDataType.NaturalNumber)
+    Integer totalRecords;
+
+    @Property(
+        description = "The total number of pages in the full set. See [pagination](#pagination).",
+        required = true
+    )
+    @CDSDataType(CustomDataType.NaturalNumber)
+    Integer totalPages;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/PaginatedResponse.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/PaginatedResponse.java
new file mode 100644
index 0000000..916d61b
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/PaginatedResponse.java
@@ -0,0 +1,20 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class PaginatedResponse {
+
+    @Property(
+        description = "The links attribute contains a Links object with links to related API end points. This will include links to support pagination.",
+        required = true
+    )
+    protected LinksPaginated links;
+
+    @Property(
+        description = "The meta object is used to provide additional information such as second factor authorisation data, traffic management, pagination counts or other purposes that are complementary to the workings of the API.",
+        required = true
+    )
+    protected MetaPaginated meta;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomer.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomer.java
new file mode 100644
index 0000000..3775dbe
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomer.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "person", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "organisation", multiple = true)
+})
+public class ResponseCommonCustomer extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseCommonCustomerData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerData.java
new file mode 100644
index 0000000..d808c8f
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerData.java
@@ -0,0 +1,26 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseCommonCustomerData {
+
+    public enum CustomerUType {
+        person,
+        organisation
+    }
+
+    @Property(
+        description = "The type of customer object that is present",
+        required = true
+    )
+    CustomerUType customerUType;
+
+    @Property
+    CommonPerson person;
+
+    @Property
+    CommonOrganisation organisation;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetail.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetail.java
new file mode 100644
index 0000000..318c9cc
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetail.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+@CustomAttributes({
+    @CustomAttribute(name = "x-conditional", value = "person", multiple = true),
+    @CustomAttribute(name = "x-conditional", value = "organisation", multiple = true)
+})
+public class ResponseCommonCustomerDetail extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseCommonCustomerDetailData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetailData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetailData.java
new file mode 100644
index 0000000..2f2aebe
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonCustomerDetailData.java
@@ -0,0 +1,26 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseCommonCustomerDetailData {
+
+    public enum CustomerUType {
+        person,
+        organisation
+    }
+
+    @Property(
+        description = "The type of customer object that is present",
+        required = true
+    )
+    CustomerUType customerUType;
+
+    @Property
+    CommonPersonDetail person;
+
+    @Property
+    CommonOrganisationDetail organisation;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatus.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatus.java
new file mode 100644
index 0000000..c42e4c8
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatus.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+@DataDefinition
+public class ResponseCommonDiscoveryStatus extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseCommonDiscoveryStatusData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatusData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatusData.java
new file mode 100644
index 0000000..2a1f894
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseCommonDiscoveryStatusData.java
@@ -0,0 +1,51 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.CDSDataType;
+import au.org.consumerdatastandards.support.data.CustomDataType;
+import au.org.consumerdatastandards.support.data.DataDefinition;
+import au.org.consumerdatastandards.support.data.Property;
+
+import java.time.OffsetDateTime;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseCommonDiscoveryStatusData {
+
+    public enum Status {
+        OK,
+        PARTIAL_FAILURE,
+        UNAVAILABLE,
+        SCHEDULED_OUTAGE
+    }
+
+    @Property(
+        description = "Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)",
+        required = true
+    )
+    Status status;
+
+    @Property(
+        description = "Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK"
+    )
+    String explanation;
+
+    @Property(
+        description = "The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE"
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime detectionTime;
+
+    @Property(
+        description = "The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK."
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime expectedResolutionTime;
+
+    @Property(
+        description = "The date and time that this status was last updated by the Data Holder.",
+        required = true
+    )
+    @CDSDataType(CustomDataType.DateTime)
+    OffsetDateTime updateTime;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesList.java
new file mode 100644
index 0000000..4efa34d
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesList.java
@@ -0,0 +1,12 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseDiscoveryOutagesList extends BaseResponse {
+
+    @Property(
+        required = true
+    )
+    ResponseDiscoveryOutagesListData data;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesListData.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesListData.java
new file mode 100644
index 0000000..3b1be33
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseDiscoveryOutagesListData.java
@@ -0,0 +1,16 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition(
+    referenced = false
+)
+public class ResponseDiscoveryOutagesListData {
+
+    @Property(
+        description = "List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled",
+        required = true
+    )
+    List<DiscoveryOutage> outages;
+}
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseErrorList.java b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseErrorList.java
new file mode 100644
index 0000000..64bd2b9
--- /dev/null
+++ b/api-model/src/gen/java/au/org/consumerdatastandards/api/v1_1_1/common/models/ResponseErrorList.java
@@ -0,0 +1,13 @@
+package au.org.consumerdatastandards.api.v1_1_1.common.models;
+
+import java.util.List;
+import au.org.consumerdatastandards.support.data.*;
+
+@DataDefinition
+public class ResponseErrorList {
+
+    @Property(
+        required = true
+    )
+    List<Error> errors;
+}
diff --git a/api-model/src/main/resources/cds_full_1.1.0.json b/api-model/src/main/resources/cds_full_1.1.0.json
new file mode 100644
index 0000000..830a239
--- /dev/null
+++ b/api-model/src/main/resources/cds_full_1.1.0.json
@@ -0,0 +1,4685 @@
+{
+  "swagger": "2.0",
+  "info": {
+    "title": "Consumer Data Standards",
+    "description": "API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right",
+    "version": "1.1.0",
+    "contact": {
+      "name": "Consumer Data Standards",
+      "url": "https://consumerdatastandards.org.au/",
+      "email": "cdr-data61@csiro.au"
+    },
+    "license": {
+      "name": "MIT License",
+      "url": "https://opensource.org/licenses/MIT"
+    }
+  },
+  "host": "data.holder.com.au",
+  "basePath": "/cds-au/v1",
+  "schemes": [
+    "https"
+  ],
+  "consumes": [
+    "application/json"
+  ],
+  "produces": [
+    "application/json"
+  ],
+  "paths": {
+    "/banking/accounts": {
+      "get": {
+        "summary": "Get Accounts",
+        "description": "Obtain a list of accounts",
+        "operationId": "listAccounts",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An optional [[RFC4122](https://tools.ietf.org/html/rfc4122)] UUID used as a correlation id. If provided, the data holder must \"play back\" this value in the `x-fapi-interaction-id` response header."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/balances": {
+      "get": {
+        "summary": "Get Bulk Balances",
+        "description": "Obtain balances for multiple, filtered accounts",
+        "operationId": "listBalancesBulk",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Balances For Specific Accounts",
+        "description": "Obtain balances for a specified list of accounts",
+        "operationId": "listBalancesSpecificAccounts",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "The list of account IDs to obtain balances for",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/balance": {
+      "get": {
+        "summary": "Get Account Balance",
+        "description": "Obtain the balance for a single specified account",
+        "operationId": "getBalance",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the specific account requested",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}": {
+      "get": {
+        "summary": "Get Account Detail",
+        "description": "Obtain detailed information on a single account",
+        "operationId": "getAccountDetail",
+        "x-scopes": [
+          "bank:accounts.detail:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "A tokenised identifier for the account which is unique but not shareable",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/transactions": {
+      "get": {
+        "summary": "Get Transactions For Account",
+        "description": "Obtain transactions for a specific account.\n\nSome general notes that apply to all end points that retrieve transactions:\n\n- Where multiple transactions are returned, transactions should be ordered according to effective date in descending order\n- As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:\n\t\t- Posted date/time if available, then\n\t\t- Execution date/time if available, then\n\t\t- A reasonable date/time nominated by the data holder using internal data structures\n- For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account\n- For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared",
+        "operationId": "getTransactions",
+        "x-scopes": [
+          "bank:transactions:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionOldestTime"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionNewestTime"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionMinAmount"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionMaxAmount"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionText"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingTransactionList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/transactions/{transactionId}": {
+      "get": {
+        "summary": "Get Transaction Detail",
+        "description": "Obtain detailed information on a transaction for a specific account",
+        "operationId": "getTransactionDetail",
+        "x-scopes": [
+          "bank:transactions:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "name": "transactionId",
+            "in": "path",
+            "description": "ID of the transaction obtained from a previous call to one of the other transaction end points",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingTransactionById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/direct-debits": {
+      "get": {
+        "summary": "Get Direct Debits For Account",
+        "description": "Obtain direct debit authorisations for a specific account",
+        "operationId": "listDirectDebits",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/direct-debits": {
+      "get": {
+        "summary": "Get Bulk Direct Debits",
+        "description": "Obtain direct debit authorisations for multiple, filtered accounts",
+        "operationId": "listDirectDebitsBulk",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Direct Debits For Specific Accounts",
+        "description": "Obtain direct debit authorisations for a specified list of accounts",
+        "operationId": "listDirectDebitsSpecificAccounts",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "Array of specific accountIds to obtain authorisations for",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/payments/scheduled": {
+      "get": {
+        "summary": "Get Scheduled Payments for Account",
+        "description": "Obtain scheduled, outgoing payments for a specific account",
+        "operationId": "listScheduledPayments",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get scheduled payments for. Must have previously been returned by one of the account list end points. The account specified is the source account for the payment",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payments/scheduled": {
+      "get": {
+        "summary": "Get Scheduled Payments Bulk",
+        "description": "Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments",
+        "operationId": "listScheduledPaymentsBulk",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Scheduled Payments For Specific Accounts",
+        "description": "Obtain scheduled payments for a specified list of accounts",
+        "operationId": "listScheduledPaymentsSpecificAccounts",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payees": {
+      "get": {
+        "summary": "Get Payees",
+        "description": "Obtain a list of pre-registered payees",
+        "operationId": "listPayees",
+        "x-scopes": [
+          "bank:payees:read"
+        ],
+        "tags": [
+          "Banking",
+          "Payees"
+        ],
+        "parameters": [
+          {
+            "name": "type",
+            "in": "query",
+            "description": "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL",
+            "required": false,
+            "type": "string",
+            "enum": [
+              "DOMESTIC",
+              "INTERNATIONAL",
+              "BILLER",
+              "ALL"
+            ],
+            "default": "ALL"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingPayeeList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payees/{payeeId}": {
+      "get": {
+        "summary": "Get Payee Detail",
+        "description": "Obtain detailed information on a single payee.\n\nNote that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient",
+        "operationId": "getPayeeDetail",
+        "x-scopes": [
+          "bank:payees:read"
+        ],
+        "tags": [
+          "Banking",
+          "Payees"
+        ],
+        "parameters": [
+          {
+            "name": "payeeId",
+            "in": "path",
+            "description": "The ID used to locate the details of a particular payee",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingPayeeById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/products": {
+      "get": {
+        "summary": "Get Products",
+        "description": "Obtain a list of products that are currently openly offered to the market\n\nNote that the results returned by this end point are expected to be ordered according to updated-since\n\n### Conventions\nIn the product reference payloads there are a number of recurring conventions that are explained here, in one place.\n\n#### Arrays Of Features\n\nIn the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:\n\n- Each element in an array has the same structure so that clients can reliably interpret the payloads\n- Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees.\n- Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product.\n- An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths.\n- An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product.\n- Depending on the type of data being represented there may be additional specific fields.\n\n#### URIs To More Information\n\nAs the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.\n\nThese URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.\n\n#### Linkage To Accounts\nFrom the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.\n\nFor this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.\n\nSimilarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.\n\n#### Dates\nIt is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.\n\nIn addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.\n\nNOTE: This version must be implemented by **July 2020**\n\nObsolete versions: [v1](includes/obsolete/get-products-v1.html)",
+        "operationId": "listProducts",
+        "tags": [
+          "Banking",
+          "Products"
+        ],
+        "parameters": [
+          {
+            "name": "effective",
+            "in": "query",
+            "description": "Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to 'CURRENT'",
+            "required": false,
+            "type": "string",
+            "enum": [
+              "CURRENT",
+              "FUTURE",
+              "ALL"
+            ],
+            "default": "CURRENT"
+          },
+          {
+            "name": "updated-since",
+            "in": "query",
+            "description": "Only include products that have been updated after the specified date and time. If absent defaults to include all products",
+            "required": false,
+            "type": "string",
+            "x-cds-type": "DateTimeString"
+          },
+          {
+            "name": "brand",
+            "in": "query",
+            "description": "Filter results based on a specific brand",
+            "required": false,
+            "type": "string"
+          },
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingProductList"
+            }
+          }
+        },
+        "x-version": "2"
+      }
+    },
+    "/banking/products/{productId}": {
+      "get": {
+        "summary": "Get Product Detail",
+        "description": "Obtain detailed information on a single product offered openly to the market.\n\nNOTE: This version must be implemented by **July 2020**\n\nObsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)",
+        "operationId": "getProductDetail",
+        "tags": [
+          "Banking",
+          "Products"
+        ],
+        "parameters": [
+          {
+            "name": "productId",
+            "in": "path",
+            "description": "ID of the specific product requested",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingProductById"
+            }
+          }
+        },
+        "x-version": "2"
+      }
+    },
+    "/common/customer": {
+      "get": {
+        "summary": "Get Customer",
+        "description": "Obtain basic information on the customer that has authorised the current session",
+        "operationId": "getCustomer",
+        "x-scopes": [
+          "common:customer.basic:read"
+        ],
+        "tags": [
+          "Common",
+          "Customer"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonCustomer"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/common/customer/detail": {
+      "get": {
+        "summary": "Get Customer Detail",
+        "description": "Obtain detailed information on the authorised customer within the current session.",
+        "operationId": "getCustomerDetail",
+        "x-scopes": [
+          "common:customer.detail:read"
+        ],
+        "tags": [
+          "Common",
+          "Customer"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-User-Agent"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-subject"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonCustomerDetail"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/discovery/status": {
+      "get": {
+        "summary": "Get Status",
+        "description": "Obtain a health check status for the implementation",
+        "operationId": "getStatus",
+        "tags": [
+          "Common",
+          "Discovery"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonDiscoveryStatus"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/discovery/outages": {
+      "get": {
+        "summary": "Get Outages",
+        "description": "Obtain a list of scheduled outages for the implementation",
+        "operationId": "getOutages",
+        "tags": [
+          "Common",
+          "Discovery"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseDiscoveryOutagesList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    }
+  },
+  "parameters": {
+    "RequestHeader_x-v": {
+      "name": "x-v",
+      "description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+      "in": "header",
+      "type": "string",
+      "required": true
+    },
+    "RequestHeader_x-min-v": {
+      "name": "x-min-v",
+      "description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-interaction-id": {
+      "name": "x-fapi-interaction-id",
+      "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-auth-date": {
+      "name": "x-fapi-auth-date",
+      "description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-customer-ip-address": {
+      "name": "x-fapi-customer-ip-address",
+      "description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-cds-User-Agent": {
+      "name": "x-cds-User-Agent",
+      "description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+      "in": "header",
+      "type": "string",
+      "x-cds-type": "Base64"
+    },
+    "RequestHeader_x-cds-subject": {
+      "name": "x-cds-subject",
+      "description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
+      "in": "header",
+      "type": "string"
+    },
+    "ParamAccountOpenStatus": {
+      "name": "open-status",
+      "in": "query",
+      "description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+      "required": false,
+      "type": "string",
+      "enum": [
+        "OPEN",
+        "CLOSED",
+        "ALL"
+      ],
+      "default": "ALL"
+    },
+    "ParamProductCategory": {
+      "name": "product-category",
+      "in": "query",
+      "description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+      "required": false,
+      "type": "string",
+      "enum": [
+        "TRANS_AND_SAVINGS_ACCOUNTS",
+        "TERM_DEPOSITS",
+        "TRAVEL_CARDS",
+        "REGULATED_TRUST_ACCOUNTS",
+        "RESIDENTIAL_MORTGAGES",
+        "CRED_AND_CHRG_CARDS",
+        "PERS_LOANS",
+        "MARGIN_LOANS",
+        "LEASES",
+        "TRADE_FINANCE",
+        "OVERDRAFTS",
+        "BUSINESS_LOANS"
+      ]
+    },
+    "ParamAccountIsOwned": {
+      "name": "is-owned",
+      "in": "query",
+      "description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+      "required": false,
+      "type": "boolean",
+      "x-cds-type": "Boolean"
+    },
+    "ParamPage": {
+      "name": "page",
+      "in": "query",
+      "description": "Page of results to request (standard pagination)",
+      "required": false,
+      "type": "integer",
+      "x-cds-type": "PositiveInteger",
+      "default": 1
+    },
+    "ParamPageSize": {
+      "name": "page-size",
+      "in": "query",
+      "description": "Page size to request. Default is 25 (standard pagination)",
+      "required": false,
+      "type": "integer",
+      "x-cds-type": "PositiveInteger",
+      "default": 25
+    },
+    "ParamTransactionNewestTime": {
+      "name": "newest-time",
+      "in": "query",
+      "description": "Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "DateTimeString"
+    },
+    "ParamTransactionOldestTime": {
+      "name": "oldest-time",
+      "in": "query",
+      "description": "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "DateTimeString"
+    },
+    "ParamTransactionMinAmount": {
+      "name": "min-amount",
+      "in": "query",
+      "description": "Filter transactions to only transactions with amounts higher or equal to than this amount",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "AmountString"
+    },
+    "ParamTransactionMaxAmount": {
+      "name": "max-amount",
+      "in": "query",
+      "description": "Filter transactions to only transactions with amounts less than or equal to than this amount",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "AmountString"
+    },
+    "ParamTransactionText": {
+      "name": "text",
+      "in": "query",
+      "description": "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not)",
+      "required": false,
+      "type": "string"
+    }
+  },
+  "definitions": {
+    "RequestAccountIds": {
+      "type": "object",
+      "required": [
+        "data"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "accountIds"
+          ],
+          "properties": {
+            "accountIds": {
+              "type": "array",
+              "items": {
+                "type": "string",
+                "description": "Array of specific accountIds to obtain authorisations for",
+                "x-cds-type": "ASCIIString"
+              }
+            }
+          }
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseBankingProductList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "products"
+          ],
+          "properties": {
+            "products": {
+              "description": "The list of products returned.  If the filter results in an empty set then this array may have no records",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductV2"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingProductV2": {
+      "type": "object",
+      "required": [
+        "productId",
+        "lastUpdated",
+        "productCategory",
+        "name",
+        "description",
+        "brand",
+        "isTailored"
+      ],
+      "properties": {
+        "productId": {
+          "type": "string",
+          "description": "A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.",
+          "x-cds-type": "ASCIIString"
+        },
+        "effectiveFrom": {
+          "type": "string",
+          "description": "The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate",
+          "x-cds-type": "DateTimeString"
+        },
+        "effectiveTo": {
+          "type": "string",
+          "description": "The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products",
+          "x-cds-type": "DateTimeString"
+        },
+        "lastUpdated": {
+          "type": "string",
+          "description": "The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)",
+          "x-cds-type": "DateTimeString"
+        },
+        "productCategory": {
+          "$ref": "#/definitions/BankingProductCategory"
+        },
+        "name": {
+          "type": "string",
+          "description": "The display name of the product"
+        },
+        "description": {
+          "type": "string",
+          "description": "A description of the product"
+        },
+        "brand": {
+          "type": "string",
+          "description": "A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required"
+        },
+        "brandName": {
+          "type": "string",
+          "description": "An optional display name of the brand"
+        },
+        "applicationUri": {
+          "type": "string",
+          "description": "A link to an application web page where this product can be applied for.",
+          "x-cds-type": "URIString"
+        },
+        "isTailored": {
+          "type": "boolean",
+          "description": "Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable",
+          "x-cds-type": "Boolean"
+        },
+        "additionalInformation": {
+          "description": "Object that contains links to additional information on specific topics",
+          "type": "object",
+          "properties": {
+            "overviewUri": {
+              "type": "string",
+              "description": "General overview of the product",
+              "x-cds-type": "URIString"
+            },
+            "termsUri": {
+              "type": "string",
+              "description": "Terms and conditions for the product",
+              "x-cds-type": "URIString"
+            },
+            "eligibilityUri": {
+              "type": "string",
+              "description": "Eligibility rules and criteria for the product",
+              "x-cds-type": "URIString"
+            },
+            "feesAndPricingUri": {
+              "type": "string",
+              "description": "Description of fees, pricing, discounts, exemptions and bonuses for the product",
+              "x-cds-type": "URIString"
+            },
+            "bundleUri": {
+              "type": "string",
+              "description": "Description of a bundle that this product can be part of",
+              "x-cds-type": "URIString"
+            }
+          }
+        },
+        "cardArt": {
+          "description": "An array of card art images",
+          "type": "array",
+          "items": {
+            "type": "object",
+            "required": [
+              "imageUri"
+            ],
+            "properties": {
+              "title": {
+                "type": "string",
+                "description": "Display label for the specific image"
+              },
+              "imageUri": {
+                "type": "string",
+                "description": "Link to a PNG, JPG or GIF image with proportions defined by ISO 7810 ID-1 and width no greater than 512 pixels",
+                "x-cds-type": "URIString"
+              }
+            }
+          }
+        }
+      }
+    },
+    "ResponseBankingProductById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingProductDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingProductDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingProductV2"
+        },
+        {
+          "type": "object",
+          "properties": {
+            "bundles": {
+              "description": "An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductBundle"
+              }
+            },
+            "features": {
+              "description": "Array of features available for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFeature"
+              }
+            },
+            "constraints": {
+              "description": "Constraints on the application for or operation of the product such as minimum balances or limit thresholds",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductConstraint"
+              }
+            },
+            "eligibility": {
+              "description": "Eligibility criteria for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductEligibility"
+              }
+            },
+            "fees": {
+              "description": "Fees applicable for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFee"
+              }
+            },
+            "depositRates": {
+              "description": "Interest rates available for deposits",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductDepositRate"
+              }
+            },
+            "lendingRates": {
+              "description": "Interest rates charged against lending balances",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductLendingRate"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "BankingProductBundle": {
+      "type": "object",
+      "required": [
+        "name",
+        "description"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "Name of the bundle"
+        },
+        "description": {
+          "type": "string",
+          "description": "Description of the bundle"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the bundle"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on the bundle criteria and benefits",
+          "x-cds-type": "URIString"
+        },
+        "productIds": {
+          "type": "array",
+          "description": "Array of product IDs for products included in the bundle that are available via the product end points.  Note that this array is not intended to represent a comprehensive model of the products included in the bundle and some products available for the bundle may not be available via the product reference end points",
+          "items": {
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          }
+        }
+      }
+    },
+    "BankingProductFeature": {
+      "type": "object",
+      "required": [
+        "featureType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "additionalInfo"
+      ],
+      "properties": {
+        "featureType": {
+          "type": "string",
+          "description": "The type of feature described",
+          "enum": [
+            "CARD_ACCESS",
+            "ADDITIONAL_CARDS",
+            "UNLIMITED_TXNS",
+            "FREE_TXNS",
+            "FREE_TXNS_ALLOWANCE",
+            "LOYALTY_PROGRAM",
+            "OFFSET",
+            "OVERDRAFT",
+            "REDRAW",
+            "INSURANCE",
+            "BALANCE_TRANSFERS",
+            "INTEREST_FREE",
+            "INTEREST_FREE_TRANSFERS",
+            "DIGITAL_WALLET",
+            "DIGITAL_BANKING",
+            "NPP_PAYID",
+            "NPP_ENABLED",
+            "DONATE_INTEREST",
+            "BILL_PAYMENT",
+            "COMPLEMENTARY_PRODUCT_DISCOUNTS",
+            "BONUS_REWARDS",
+            "NOTIFICATIONS",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this feature",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductConstraint": {
+      "type": "object",
+      "required": [
+        "constraintType"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "constraintType": {
+          "type": "string",
+          "description": "The type of constraint described.  See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "MIN_BALANCE",
+            "MAX_BALANCE",
+            "OPENING_BALANCE",
+            "MAX_LIMIT",
+            "MIN_LIMIT"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information the constraint"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on the constraint",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductEligibility": {
+      "type": "object",
+      "required": [
+        "eligibilityType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "additionalInfo"
+      ],
+      "properties": {
+        "eligibilityType": {
+          "type": "string",
+          "description": "The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "BUSINESS",
+            "PENSION_RECIPIENT",
+            "MIN_AGE",
+            "MAX_AGE",
+            "MIN_INCOME",
+            "MIN_TURNOVER",
+            "STAFF",
+            "STUDENT",
+            "EMPLOYMENT_STATUS",
+            "RESIDENCY_STATUS",
+            "NATURAL_PERSON",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this eligibility criteria",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductFee": {
+      "type": "object",
+      "required": [
+        "name",
+        "feeType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "amount",
+        "balanceRate",
+        "transactionRate",
+        "accruedRate"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "Name of the fee"
+        },
+        "feeType": {
+          "type": "string",
+          "description": "The type of fee",
+          "enum": [
+            "PERIODIC",
+            "TRANSACTION",
+            "WITHDRAWAL",
+            "DEPOSIT",
+            "PAYMENT",
+            "PURCHASE",
+            "EVENT",
+            "UPFRONT",
+            "EXIT"
+          ]
+        },
+        "amount": {
+          "type": "string",
+          "description": "The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "AmountString"
+        },
+        "balanceRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "transactionRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accruedRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accrualFrequency": {
+          "type": "string",
+          "description": "The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency the fee will be charged in. Assumes AUD if absent",
+          "x-cds-type": "CurrencyString"
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the fee"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this fee",
+          "x-cds-type": "URIString"
+        },
+        "discounts": {
+          "description": "An optional list of discounts to this fee that may be available",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingProductDiscount"
+          }
+        }
+      }
+    },
+    "BankingProductDiscount": {
+      "type": "object",
+      "required": [
+        "description",
+        "discountType"
+      ],
+      "x-conditional": [
+        "balanceRate",
+        "transactionRate",
+        "accruedRate",
+        "feeRate",
+        "additionalValue",
+        "amount"
+      ],
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the discount"
+        },
+        "discountType": {
+          "type": "string",
+          "description": "The type of discount. See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "BALANCE",
+            "DEPOSITS",
+            "PAYMENTS",
+            "FEE_CAP",
+            "ELIGIBILITY_ONLY"
+          ]
+        },
+        "amount": {
+          "type": "string",
+          "description": "Value of the discount. When following properties include one of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory",
+          "x-cds-type": "AmountString"
+        },
+        "balanceRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "transactionRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accruedRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "feeRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the discount"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this discount",
+          "x-cds-type": "URIString"
+        },
+        "eligibility": {
+          "description": "Eligibility constraints that apply to this discount",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingProductDiscountEligibility"
+          }
+        }
+      }
+    },
+    "BankingProductDiscountEligibility": {
+      "type": "object",
+      "required": [
+        "discountEligibilityType"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "discountEligibilityType": {
+          "type": "string",
+          "description": "The type of the specific eligibility constraint for a discount",
+          "enum": [
+            "BUSINESS",
+            "PENSION_RECIPIENT",
+            "MIN_AGE",
+            "MAX_AGE",
+            "MIN_INCOME",
+            "MIN_TURNOVER",
+            "STAFF",
+            "STUDENT",
+            "EMPLOYMENT_STATUS",
+            "RESIDENCY_STATUS",
+            "NATURAL_PERSON",
+            "INTRODUCTORY",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on this eligibility constraint"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this eligibility constraint",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductDepositRate": {
+      "type": "object",
+      "required": [
+        "depositRateType",
+        "rate"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "depositRateType": {
+          "type": "string",
+          "description": "The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "FIXED",
+            "BONUS",
+            "BUNDLE_BONUS",
+            "VARIABLE",
+            "INTRODUCTORY",
+            "FLOATING",
+            "MARKET_LINKED"
+          ]
+        },
+        "rate": {
+          "type": "string",
+          "description": "The rate to be applied",
+          "x-cds-type": "RateString"
+        },
+        "calculationFrequency": {
+          "type": "string",
+          "description": "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "applicationFrequency": {
+          "type": "string",
+          "description": "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "tiers": {
+          "type": "array",
+          "description": "Rate tiers applicable for this rate",
+          "items": {
+            "$ref": "#/definitions/BankingProductRateTier"
+          }
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the rate"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this rate",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductLendingRate": {
+      "type": "object",
+      "required": [
+        "lendingRateType",
+        "rate"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "lendingRateType": {
+          "type": "string",
+          "description": "The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "FIXED",
+            "VARIABLE",
+            "INTRODUCTORY",
+            "DISCOUNT",
+            "PENALTY",
+            "FLOATING",
+            "MARKET_LINKED",
+            "CASH_ADVANCE",
+            "PURCHASE",
+            "BUNDLE_DISCOUNT_FIXED",
+            "BUNDLE_DISCOUNT_VARIABLE"
+          ]
+        },
+        "rate": {
+          "type": "string",
+          "description": "The rate to be applied",
+          "x-cds-type": "RateString"
+        },
+        "comparisonRate": {
+          "type": "string",
+          "description": "A comparison rate equivalent for this rate",
+          "x-cds-type": "RateString"
+        },
+        "calculationFrequency": {
+          "type": "string",
+          "description": "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "applicationFrequency": {
+          "type": "string",
+          "description": "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "interestPaymentDue": {
+          "type": "string",
+          "description": "When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered",
+          "enum": [
+            "IN_ARREARS",
+            "IN_ADVANCE"
+          ]
+        },
+        "tiers": {
+          "type": "array",
+          "description": "Rate tiers applicable for this rate",
+          "items": {
+            "$ref": "#/definitions/BankingProductRateTier"
+          }
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the rate."
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this rate",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductRateTier": {
+      "type": "object",
+      "description": "Defines the criteria and conditions for which a rate applies",
+      "required": [
+        "name",
+        "unitOfMeasure",
+        "minimumValue"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "A display name for the tier"
+        },
+        "unitOfMeasure": {
+          "type": "string",
+          "description": "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. 'DOLLAR', 'MONTH' (in the case of term deposit tiers), 'PERCENT' (in the case of loan-to-value ratio or LVR)",
+          "enum": [
+            "DOLLAR",
+            "PERCENT",
+            "MONTH",
+            "DAY"
+          ]
+        },
+        "minimumValue": {
+          "type": "number",
+          "description": "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value"
+        },
+        "maximumValue": {
+          "type": "number",
+          "description": "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier's range has no upper bound."
+        },
+        "rateApplicationMethod": {
+          "type": "string",
+          "description": "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')",
+          "enum": [
+            "WHOLE_BALANCE",
+            "PER_TIER"
+          ]
+        },
+        "applicabilityConditions": {
+          "$ref": "#/definitions/BankingProductRateCondition"
+        },
+        "subTier": {
+          "type": "object",
+          "description": "Defines the sub-tier criteria and conditions for which a rate applies",
+          "required": [
+            "name",
+            "unitOfMeasure",
+            "minimumValue",
+            "maximumValue"
+          ],
+          "properties": {
+            "name": {
+              "type": "string",
+              "description": "A display name for the tier"
+            },
+            "unitOfMeasure": {
+              "type": "string",
+              "description": "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. 'DOLLAR', 'MONTH' (in the case of term deposit tiers), 'PERCENT' (in the case of loan-to-value ratio or LVR)",
+              "enum": [
+                "DOLLAR",
+                "PERCENT",
+                "MONTH",
+                "DAY"
+              ]
+            },
+            "minimumValue": {
+              "type": "number",
+              "description": "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value"
+            },
+            "maximumValue": {
+              "type": "number",
+              "description": "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months)"
+            },
+            "rateApplicationMethod": {
+              "type": "string",
+              "description": "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')",
+              "enum": [
+                "WHOLE_BALANCE",
+                "PER_TIER"
+              ]
+            },
+            "applicabilityConditions": {
+              "$ref": "#/definitions/BankingProductRateCondition"
+            }
+          }
+        }
+      }
+    },
+    "BankingProductRateCondition": {
+      "type": "object",
+      "description": "Defines a condition for the applicability of a tiered rate",
+      "properties": {
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the condition"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this condition",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "ResponseBankingAccountList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "accounts"
+          ],
+          "properties": {
+            "accounts": {
+              "type": "array",
+              "description": "The list of accounts returned. If the filter results in an empty set then this array may have no records",
+              "items": {
+                "$ref": "#/definitions/BankingAccount"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingAccount": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "displayName",
+        "maskedNumber",
+        "productCategory",
+        "productName"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "creationDate": {
+          "type": "string",
+          "description": "Date that the account was created (if known)",
+          "x-cds-type": "DateString"
+        },
+        "displayName": {
+          "type": "string",
+          "description": "The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type."
+        },
+        "nickname": {
+          "type": "string",
+          "description": "A customer supplied nick name for the account"
+        },
+        "openStatus": {
+          "type": "string",
+          "description": "Open or closed status for the account. If not present then OPEN is assumed",
+          "enum": [
+            "OPEN",
+            "CLOSED"
+          ],
+          "default": "OPEN"
+        },
+        "isOwned": {
+          "type": "boolean",
+          "description": "Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed",
+          "x-cds-type": "Boolean",
+          "default": true
+        },
+        "maskedNumber": {
+          "type": "string",
+          "description": "A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number",
+          "x-cds-type": "MaskedAccountString"
+        },
+        "productCategory": {
+          "$ref": "#/definitions/BankingProductCategory"
+        },
+        "productName": {
+          "type": "string",
+          "description": "The unique identifier of the account as defined by the data holder (akin to model number for the account)"
+        }
+      }
+    },
+    "ResponseBankingAccountById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingAccountDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingAccountDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingAccount"
+        },
+        {
+          "type": "object",
+          "x-conditional": [
+            "termDeposit",
+            "creditCard",
+            "loan"
+          ],
+          "properties": {
+            "bsb": {
+              "type": "string",
+              "description": "The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+            },
+            "accountNumber": {
+              "type": "string",
+              "description": "The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+            },
+            "bundleName": {
+              "type": "string",
+              "description": "Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer"
+            },
+            "specificAccountUType": {
+              "type": "string",
+              "description": "The type of structure to present account specific fields.",
+              "enum": [
+                "termDeposit",
+                "creditCard",
+                "loan"
+              ]
+            },
+            "termDeposit": {
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingTermDepositAccount"
+              }
+            },
+            "creditCard": {
+              "$ref": "#/definitions/BankingCreditCardAccount"
+            },
+            "loan": {
+              "$ref": "#/definitions/BankingLoanAccount"
+            },
+            "depositRate": {
+              "type": "string",
+              "description": "current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call",
+              "x-cds-type": "RateString"
+            },
+            "lendingRate": {
+              "type": "string",
+              "description": "The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call",
+              "x-cds-type": "RateString"
+            },
+            "depositRates": {
+              "description": "Fully described deposit rates for this account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductDepositRate"
+              }
+            },
+            "lendingRates": {
+              "description": "Fully described deposit rates for this account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductLendingRate"
+              }
+            },
+            "features": {
+              "description": "Array of features of the account based on the equivalent structure in Product Reference with the following additional field",
+              "type": "array",
+              "items": {
+                "allOf": [
+                  {
+                    "$ref": "#/definitions/BankingProductFeature"
+                  },
+                  {
+                    "type": "object",
+                    "properties": {
+                      "isActivated": {
+                        "type": "boolean",
+                        "description": "True if the feature is already activated and false if the feature is available for activation. Defaults to true if absent. (note this is an additional field appended to the feature object defined in the Product Reference payload)",
+                        "x-cds-type": "Boolean",
+                        "default": true
+                      }
+                    }
+                  }
+                ]
+              }
+            },
+            "fees": {
+              "description": "Fees and charges applicable to the account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFee"
+              }
+            },
+            "addresses": {
+              "description": "The addresses for the account to be used for correspondence",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddress"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "BankingTermDepositAccount": {
+      "type": "object",
+      "required": [
+        "lodgementDate",
+        "maturityDate",
+        "maturityInstructions"
+      ],
+      "properties": {
+        "lodgementDate": {
+          "type": "string",
+          "description": "The lodgement date of the original deposit",
+          "x-cds-type": "DateString"
+        },
+        "maturityDate": {
+          "type": "string",
+          "description": "Maturity date for the term deposit",
+          "x-cds-type": "DateString"
+        },
+        "maturityAmount": {
+          "type": "string",
+          "description": "Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated",
+          "x-cds-type": "AmountString"
+        },
+        "maturityCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "maturityInstructions": {
+          "type": "string",
+          "description": "Current instructions on action to be taken at maturity",
+          "enum": [
+            "ROLLED_OVER",
+            "PAID_OUT_AT_MATURITY"
+          ]
+        }
+      }
+    },
+    "BankingCreditCardAccount": {
+      "type": "object",
+      "required": [
+        "minPaymentAmount",
+        "paymentDueAmount",
+        "paymentDueDate"
+      ],
+      "properties": {
+        "minPaymentAmount": {
+          "type": "string",
+          "description": "The minimum payment amount due for the next card payment",
+          "x-cds-type": "AmountString"
+        },
+        "paymentDueAmount": {
+          "type": "string",
+          "description": "The amount due for the next card payment",
+          "x-cds-type": "AmountString"
+        },
+        "paymentCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "paymentDueDate": {
+          "type": "string",
+          "description": "Date that the next payment for the card is due",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingLoanAccount": {
+      "type": "object",
+      "required": [
+        "loanEndDate",
+        "nextInstalmentDate",
+        "repaymentFrequency"
+      ],
+      "properties": {
+        "originalStartDate": {
+          "type": "string",
+          "description": "Optional original start date for the loan",
+          "x-cds-type": "DateString"
+        },
+        "originalLoanAmount": {
+          "type": "string",
+          "description": "Optional original loan value",
+          "x-cds-type": "AmountString"
+        },
+        "originalLoanCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "loanEndDate": {
+          "type": "string",
+          "description": "Date that the loan is due to be repaid in full",
+          "x-cds-type": "DateString"
+        },
+        "nextInstalmentDate": {
+          "type": "string",
+          "description": "Next date that an instalment is required",
+          "x-cds-type": "DateString"
+        },
+        "minInstalmentAmount": {
+          "type": "string",
+          "description": "Minimum amount of next instalment",
+          "x-cds-type": "AmountString"
+        },
+        "minInstalmentCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "maxRedraw": {
+          "type": "string",
+          "description": "Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account",
+          "x-cds-type": "AmountString"
+        },
+        "maxRedrawCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "minRedraw": {
+          "type": "string",
+          "description": "Minimum redraw amount",
+          "x-cds-type": "AmountString"
+        },
+        "minRedrawCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "offsetAccountEnabled": {
+          "type": "boolean",
+          "description": "Set to true if one or more offset accounts are configured for this loan account",
+          "x-cds-type": "Boolean"
+        },
+        "offsetAccountIds": {
+          "type": "array",
+          "description": "The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation",
+          "items": {
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          }
+        },
+        "repaymentType": {
+          "type": "string",
+          "description": "Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST",
+          "enum": [
+            "INTEREST_ONLY",
+            "PRINCIPAL_AND_INTEREST"
+          ],
+          "default": "PRINCIPAL_AND_INTEREST"
+        },
+        "repaymentFrequency": {
+          "type": "string",
+          "description": "The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "ResponseBankingTransactionList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "transactions"
+          ],
+          "properties": {
+            "transactions": {
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingTransaction"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingTransaction": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "isDetailAvailable",
+        "type",
+        "status",
+        "description",
+        "amount",
+        "reference"
+      ],
+      "x-conditional": [
+        "transactionId",
+        "postingDateTime"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "ID of the account for which transactions are provided",
+          "x-cds-type": "ASCIIString"
+        },
+        "transactionId": {
+          "type": "string",
+          "description": "A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type",
+          "x-cds-type": "ASCIIString"
+        },
+        "isDetailAvailable": {
+          "type": "boolean",
+          "description": "True if extended information is available using the transaction detail end point. False if extended data is not available",
+          "x-cds-type": "Boolean"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of the transaction",
+          "enum": [
+            "FEE",
+            "INTEREST_CHARGED",
+            "INTEREST_PAID",
+            "TRANSFER_OUTGOING",
+            "TRANSFER_INCOMING",
+            "PAYMENT",
+            "DIRECT_DEBIT",
+            "OTHER"
+          ]
+        },
+        "status": {
+          "type": "string",
+          "description": "Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction",
+          "enum": [
+            "PENDING",
+            "POSTED"
+          ]
+        },
+        "description": {
+          "type": "string",
+          "description": "The transaction description as applied by the financial institution"
+        },
+        "postingDateTime": {
+          "type": "string",
+          "description": "The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement",
+          "x-cds-type": "DateTimeString"
+        },
+        "valueDateTime": {
+          "type": "string",
+          "description": "Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry",
+          "x-cds-type": "DateTimeString"
+        },
+        "executionDateTime": {
+          "type": "string",
+          "description": "The time the transaction was executed by the originating customer, if available",
+          "x-cds-type": "DateTimeString"
+        },
+        "amount": {
+          "type": "string",
+          "description": "The value of the transaction. Negative values mean money was outgoing from the account",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the transaction amount. AUD assumed if not present",
+          "x-cds-type": "CurrencyString"
+        },
+        "reference": {
+          "type": "string",
+          "description": "The reference for the transaction provided by the originating institution. Empty string if no data provided"
+        },
+        "merchantName": {
+          "type": "string",
+          "description": "Name of the merchant for an outgoing payment to a merchant"
+        },
+        "merchantCategoryCode": {
+          "type": "string",
+          "description": "The merchant category code (or MCC) for an outgoing payment to a merchant"
+        },
+        "billerCode": {
+          "type": "string",
+          "description": "BPAY Biller Code for the transaction (if available)"
+        },
+        "billerName": {
+          "type": "string",
+          "description": "Name of the BPAY biller for the transaction (if available)"
+        },
+        "crn": {
+          "type": "string",
+          "description": "BPAY CRN for the transaction (if available)"
+        },
+        "apcaNumber": {
+          "type": "string",
+          "description": "6 Digit APCA number for the initiating institution"
+        }
+      }
+    },
+    "ResponseBankingTransactionById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingTransactionDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingTransactionDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingTransaction"
+        },
+        {
+          "type": "object",
+          "required": [
+            "extendedData"
+          ],
+          "properties": {
+            "extendedData": {
+              "type": "object",
+              "required": [
+                "service"
+              ],
+              "x-conditional": [
+                "payer",
+                "payee",
+                "extendedDescription"
+              ],
+              "properties": {
+                "payer": {
+                  "type": "string",
+                  "description": "Label of the originating payer. Mandatory for inbound payment"
+                },
+                "payee": {
+                  "type": "string",
+                  "description": "Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)"
+                },
+                "extensionUType": {
+                  "type": "string",
+                  "description": "Optional extended data provided specific to transaction originated via NPP",
+                  "enum": [
+                    "x2p101Payload"
+                  ]
+                },
+                "x2p101Payload": {
+                  "required": [
+                    "extendedDescription"
+                  ],
+                  "properties": {
+                    "extendedDescription": {
+                      "type": "string",
+                      "description": "An extended string description. Only present if specified by the extensionUType field"
+                    },
+                    "endToEndId": {
+                      "type": "string",
+                      "description": "An end to end ID for the payment created at initiation"
+                    },
+                    "purposeCode": {
+                      "type": "string",
+                      "description": "Purpose of the payment.  Format is defined by NPP standards for the x2p1.01 overlay service"
+                    }
+                  }
+                },
+                "service": {
+                  "type": "string",
+                  "description": "Identifier of the applicable overlay service. Valid values are: X2P1.01",
+                  "enum": [
+                    "X2P1.01"
+                  ]
+                }
+              }
+            }
+          }
+        }
+      ]
+    },
+    "ResponseBankingAccountsBalanceList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "balances"
+          ],
+          "properties": {
+            "balances": {
+              "description": "The list of balances returned",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingBalance"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "ResponseBankingAccountsBalanceById": {
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingBalance"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingBalance": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "currentBalance",
+        "availableBalance"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "currentBalance": {
+          "type": "string",
+          "description": "The balance of the account at this time. Should align to the balance available via other channels such as Internet Banking. Assumed to be negative if the customer has money owing",
+          "x-cds-type": "AmountString"
+        },
+        "availableBalance": {
+          "type": "string",
+          "description": "Balance representing the amount of funds available for transfer. Assumed to be zero or positive",
+          "x-cds-type": "AmountString"
+        },
+        "creditLimit": {
+          "type": "string",
+          "description": "Object representing the maximum amount of credit that is available for this account. Assumed to be zero if absent",
+          "x-cds-type": "AmountString"
+        },
+        "amortisedLimit": {
+          "type": "string",
+          "description": "Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the balance amounts. If absent assumed to be AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "purses": {
+          "description": "Optional array of balances for the account in other currencies. Included to support accounts that support multi-currency purses such as Travel Cards",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingBalancePurse"
+          }
+        }
+      }
+    },
+    "BankingBalancePurse": {
+      "type": "object",
+      "required": [
+        "amount"
+      ],
+      "properties": {
+        "amount": {
+          "type": "string",
+          "description": "The balance available for this additional currency purse",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the purse",
+          "x-cds-type": "CurrencyString"
+        }
+      }
+    },
+    "ResponseBankingPayeeList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "payees"
+          ],
+          "properties": {
+            "payees": {
+              "type": "array",
+              "description": "The list of payees returned",
+              "items": {
+                "$ref": "#/definitions/BankingPayee"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "ResponseBankingPayeeById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingPayeeDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingPayee": {
+      "type": "object",
+      "required": [
+        "payeeId",
+        "nickname",
+        "type"
+      ],
+      "properties": {
+        "payeeId": {
+          "type": "string",
+          "description": "ID of the payee adhering to the rules of ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "nickname": {
+          "type": "string",
+          "description": "The short display name of the payee as provided by the customer"
+        },
+        "description": {
+          "type": "string",
+          "description": "A description of the payee provided by the customer"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY",
+          "enum": [
+            "DOMESTIC",
+            "INTERNATIONAL",
+            "BILLER"
+          ]
+        },
+        "creationDate": {
+          "type": "string",
+          "description": "The date the payee was created by the customer",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingPayeeDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingPayee"
+        },
+        {
+          "type": "object",
+          "required": [
+            "payeeUType"
+          ],
+          "x-conditional": [
+            "domestic",
+            "biller",
+            "international"
+          ],
+          "properties": {
+            "payeeUType": {
+              "type": "string",
+              "description": "Type of object included that describes the payee in detail",
+              "enum": [
+                "domestic",
+                "biller",
+                "international"
+              ]
+            },
+            "domestic": {
+              "$ref": "#/definitions/BankingDomesticPayee"
+            },
+            "biller": {
+              "$ref": "#/definitions/BankingBillerPayee"
+            },
+            "international": {
+              "$ref": "#/definitions/BankingInternationalPayee"
+            }
+          }
+        }
+      ]
+    },
+    "BankingDomesticPayee": {
+      "type": "object",
+      "required": [
+        "payeeAccountUType"
+      ],
+      "x-conditional": [
+        "account",
+        "card",
+        "payId"
+      ],
+      "properties": {
+        "payeeAccountUType": {
+          "type": "string",
+          "description": "Type of account object included. Valid values are: { payeeAccountUType - - account A standard Australian account defined by BSB/Account Number payId A PayID recognised by NPP",
+          "enum": [
+            "account",
+            "card",
+            "payId"
+          ]
+        },
+        "account": {
+          "$ref": "#/definitions/BankingDomesticPayeeAccount"
+        },
+        "card": {
+          "$ref": "#/definitions/BankingDomesticPayeeCard"
+        },
+        "payId": {
+          "$ref": "#/definitions/BankingDomesticPayeePayId"
+        }
+      }
+    },
+    "BankingDomesticPayeeAccount": {
+      "type": "object",
+      "required": [
+        "bsb",
+        "accountNumber"
+      ],
+      "properties": {
+        "accountName": {
+          "type": "string",
+          "description": "Name of the account to pay to"
+        },
+        "bsb": {
+          "type": "string",
+          "description": "BSB of the account to pay to"
+        },
+        "accountNumber": {
+          "type": "string",
+          "description": "Number of the account to pay to"
+        }
+      }
+    },
+    "BankingDomesticPayeeCard": {
+      "type": "object",
+      "required": [
+        "cardNumber"
+      ],
+      "properties": {
+        "cardNumber": {
+          "type": "string",
+          "description": "Name of the account to pay to",
+          "x-cds-type": "MaskedPANString"
+        }
+      }
+    },
+    "BankingDomesticPayeePayId": {
+      "type": "object",
+      "required": [
+        "identifier",
+        "type"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "The name assigned to the PayID by the owner of the PayID"
+        },
+        "identifier": {
+          "type": "string",
+          "description": "The identifier of the PayID (dependent on type)"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of the PayID",
+          "enum": [
+            "EMAIL",
+            "TELEPHONE",
+            "ABN",
+            "ORG_IDENTIFIER"
+          ]
+        }
+      }
+    },
+    "BankingBillerPayee": {
+      "type": "object",
+      "required": [
+        "billerCode",
+        "billerName"
+      ],
+      "x-conditional": [
+        "crn"
+      ],
+      "properties": {
+        "billerCode": {
+          "type": "string",
+          "description": "BPAY Biller Code of the Biller"
+        },
+        "crn": {
+          "type": "string",
+          "description": "BPAY CRN of the Biller. If the contents of the CRN match the format of a Credit Card PAN then it should be masked using the rules applicable for the MaskedPANString common type"
+        },
+        "billerName": {
+          "type": "string",
+          "description": "Name of the Biller"
+        }
+      }
+    },
+    "BankingInternationalPayee": {
+      "type": "object",
+      "required": [
+        "beneficiaryDetails",
+        "bankDetails"
+      ],
+      "properties": {
+        "beneficiaryDetails": {
+          "type": "object",
+          "required": [
+            "country"
+          ],
+          "properties": {
+            "name": {
+              "type": "string",
+              "description": "Name of the beneficiary"
+            },
+            "country": {
+              "type": "string",
+              "description": "Country where the beneficiary resides. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+              "x-cds-type": "ExternalRef"
+            },
+            "message": {
+              "type": "string",
+              "description": "Response message for the payment"
+            }
+          }
+        },
+        "bankDetails": {
+          "type": "object",
+          "required": [
+            "country",
+            "accountNumber"
+          ],
+          "properties": {
+            "country": {
+              "type": "string",
+              "description": "Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+              "x-cds-type": "ExternalRef"
+            },
+            "accountNumber": {
+              "type": "string",
+              "description": "Account Targeted for payment"
+            },
+            "bankAddress": {
+              "type": "object",
+              "required": [
+                "name",
+                "address"
+              ],
+              "properties": {
+                "name": {
+                  "type": "string",
+                  "description": "Name of the recipient Bank"
+                },
+                "address": {
+                  "type": "string",
+                  "description": "Address of the recipient Bank"
+                }
+              }
+            },
+            "beneficiaryBankBIC": {
+              "type": "string",
+              "description": "Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)",
+              "x-cds-type": "ExternalRef"
+            },
+            "fedWireNumber": {
+              "type": "string",
+              "description": "Number for Fedwire payment (Federal Reserve Wire Network)"
+            },
+            "sortCode": {
+              "type": "string",
+              "description": "Sort code used for account identification in some jurisdictions"
+            },
+            "chipNumber": {
+              "type": "string",
+              "description": "Number for the Clearing House Interbank Payments System"
+            },
+            "routingNumber": {
+              "type": "string",
+              "description": "International bank routing number"
+            },
+            "legalEntityIdentifier": {
+              "type": "string",
+              "description": "The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)",
+              "x-cds-type": "ExternalRef"
+            }
+          }
+        }
+      }
+    },
+    "ResponseBankingDirectDebitAuthorisationList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "directDebitAuthorisations"
+          ],
+          "properties": {
+            "directDebitAuthorisations": {
+              "type": "array",
+              "description": "The list of authorisations returned",
+              "items": {
+                "$ref": "#/definitions/BankingDirectDebit"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingDirectDebit": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "authorisedEntity"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence.",
+          "x-cds-type": "ASCIIString"
+        },
+        "authorisedEntity": {
+          "$ref": "#/definitions/BankingAuthorisedEntity"
+        },
+        "lastDebitDateTime": {
+          "type": "string",
+          "description": "The date and time of the last debit executed under this authorisation",
+          "x-cds-type": "DateTimeString"
+        },
+        "lastDebitAmount": {
+          "type": "string",
+          "description": "The amount of the last debit executed under this authorisation",
+          "x-cds-type": "AmountString"
+        }
+      }
+    },
+    "BankingAuthorisedEntity": {
+      "type": "object",
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the authorised entity derived from previously executed direct debits"
+        },
+        "financialInstitution": {
+          "type": "string",
+          "description": "Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme"
+        },
+        "abn": {
+          "type": "string",
+          "description": "Australian Business Number for the authorised entity"
+        },
+        "acn": {
+          "type": "string",
+          "description": "Australian Company Number for the authorised entity"
+        },
+        "arbn": {
+          "type": "string",
+          "description": "Australian Registered Body Number for the authorised entity"
+        }
+      }
+    },
+    "ResponseBankingScheduledPaymentsList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "scheduledPayments"
+          ],
+          "properties": {
+            "scheduledPayments": {
+              "type": "array",
+              "description": "The list of scheduled payments to return",
+              "items": {
+                "$ref": "#/definitions/BankingScheduledPayment"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingScheduledPayment": {
+      "type": "object",
+      "required": [
+        "scheduledPaymentId",
+        "payerReference",
+        "payeeReference",
+        "status",
+        "from",
+        "paymentSet",
+        "recurrence"
+      ],
+      "properties": {
+        "scheduledPaymentId": {
+          "type": "string",
+          "description": "A unique ID of the scheduled payment adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "nickname": {
+          "type": "string",
+          "description": "The short display name of the payee as provided by the customer"
+        },
+        "payerReference": {
+          "type": "string",
+          "description": "The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payer’s account. Empty string if no data provided"
+        },
+        "payeeReference": {
+          "type": "string",
+          "description": "The reference for the transaction that will be provided by the originating institution. Empty string if no data provided"
+        },
+        "status": {
+          "type": "string",
+          "description": "Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.",
+          "enum": [
+            "ACTIVE",
+            "SKIP",
+            "INACTIVE"
+          ]
+        },
+        "from": {
+          "$ref": "#/definitions/BankingScheduledPaymentFrom"
+        },
+        "paymentSet": {
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingScheduledPaymentSet"
+          }
+        },
+        "recurrence": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrence"
+        }
+      }
+    },
+    "BankingScheduledPaymentSet": {
+      "description": "The set of payment amounts and destination accounts for this payment accommodating multi-part payments. A single entry indicates a simple payment with one destination account. Must have at least one entry",
+      "required": [
+        "to"
+      ],
+      "x-conditional": [
+        "amount"
+      ],
+      "properties": {
+        "to": {
+          "$ref": "#/definitions/BankingScheduledPaymentTo"
+        },
+        "isAmountCalculated": {
+          "type": "boolean",
+          "description": "Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed",
+          "x-cds-type": "Boolean"
+        },
+        "amount": {
+          "type": "string",
+          "description": "The amount of the next payment if known. Mandatory unless the isAmountCalculated field is set to true. Must be zero or positive if present",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the payment. AUD assumed if not present",
+          "x-cds-type": "CurrencyString"
+        }
+      }
+    },
+    "BankingScheduledPaymentTo": {
+      "type": "object",
+      "description": "Object containing details of the destination of the payment. Used to specify a variety of payment destination types",
+      "required": [
+        "toUType"
+      ],
+      "x-conditional": [
+        "accountId",
+        "payeeId",
+        "domestic",
+        "biller",
+        "international"
+      ],
+      "properties": {
+        "toUType": {
+          "type": "string",
+          "description": "The type of object provided that specifies the destination of the funds for the payment.",
+          "enum": [
+            "accountId",
+            "payeeId",
+            "domestic",
+            "biller",
+            "international"
+          ]
+        },
+        "accountId": {
+          "type": "string",
+          "description": "Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent",
+          "x-cds-type": "ASCIIString"
+        },
+        "payeeId": {
+          "type": "string",
+          "description": "Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead",
+          "x-cds-type": "ASCIIString"
+        },
+        "domestic": {
+          "$ref": "#/definitions/BankingDomesticPayee"
+        },
+        "biller": {
+          "$ref": "#/definitions/BankingBillerPayee"
+        },
+        "international": {
+          "$ref": "#/definitions/BankingInternationalPayee"
+        }
+      }
+    },
+    "BankingScheduledPaymentFrom": {
+      "type": "object",
+      "description": "Object containing details of the source of the payment. Currently only specifies an account ID but provided as an object to facilitate future extensibility and consistency with the to object",
+      "required": [
+        "accountId"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "ID of the account that is the source of funds for the payment",
+          "x-cds-type": "ASCIIString"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrence": {
+      "type": "object",
+      "description": "Object containing the detail of the schedule for the payment",
+      "required": [
+        "recurrenceUType"
+      ],
+      "x-conditional": [
+        "onceOff",
+        "intervalSchedule",
+        "lastWeekDay",
+        "eventBased"
+      ],
+      "properties": {
+        "nextPaymentDate": {
+          "type": "string",
+          "description": "The date of the next payment under the recurrence schedule",
+          "x-cds-type": "DateString"
+        },
+        "recurrenceUType": {
+          "type": "string",
+          "description": "The type of recurrence used to define the schedule",
+          "enum": [
+            "onceOff",
+            "intervalSchedule",
+            "lastWeekDay",
+            "eventBased"
+          ]
+        },
+        "onceOff": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceOnceOff"
+        },
+        "intervalSchedule": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceIntervalSchedule"
+        },
+        "lastWeekDay": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceLastWeekday"
+        },
+        "eventBased": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceEventBased"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceOnceOff": {
+      "type": "object",
+      "description": "Indicates that the payment is a once off payment on a specific future date. Mandatory if recurrenceUType is set to onceOff",
+      "required": [
+        "paymentDate"
+      ],
+      "properties": {
+        "paymentDate": {
+          "type": "string",
+          "description": "The scheduled date for the once off payment",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceIntervalSchedule": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined by a series of intervals. Mandatory if recurrenceUType is set to intervalSchedule",
+      "required": [
+        "intervals"
+      ],
+      "properties": {
+        "finalPaymentDate": {
+          "type": "string",
+          "description": "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "DateString"
+        },
+        "paymentsRemaining": {
+          "type": "integer",
+          "description": "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "PositiveInteger"
+        },
+        "nonBusinessDayTreatment": {
+          "type": "string",
+          "description": "Enumerated field giving the treatment where a scheduled payment date is not a business day.  If absent assumed to be ON",
+          "enum": [
+            "AFTER",
+            "BEFORE",
+            "ON",
+            "ONLY"
+          ],
+          "default": "ON"
+        },
+        "intervals": {
+          "type": "array",
+          "description": "An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry",
+          "items": {
+            "$ref": "#/definitions/BankingScheduledPaymentInterval"
+          }
+        }
+      }
+    },
+    "BankingScheduledPaymentInterval": {
+      "type": "object",
+      "required": [
+        "interval"
+      ],
+      "properties": {
+        "interval": {
+          "type": "string",
+          "description": "An interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)  (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+          "x-cds-type": "ExternalRef"
+        },
+        "dayInInterval": {
+          "type": "string",
+          "description": "Uses an interval to define the ordinal day within the interval defined by the interval field on which the payment occurs. If the resulting duration is 0 days in length or larger than the number of days in the interval then the payment will occur on the last day of the interval. A duration of 1 day indicates the first day of the interval. If absent the assumed value is P1D. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. The first day of a week is considered to be Monday.",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceLastWeekday": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined according to the last occurrence of a specific weekday in an interval. Mandatory if recurrenceUType is set to lastWeekDay",
+      "required": [
+        "interval",
+        "lastWeekDay"
+      ],
+      "properties": {
+        "finalPaymentDate": {
+          "type": "string",
+          "description": "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "DateString"
+        },
+        "paymentsRemaining": {
+          "type": "integer",
+          "description": "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "PositiveInteger"
+        },
+        "interval": {
+          "type": "string",
+          "description": "The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+          "x-cds-type": "ExternalRef"
+        },
+        "lastWeekDay": {
+          "type": "string",
+          "description": "The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval.",
+          "enum": [
+            "MON",
+            "TUE",
+            "WED",
+            "THU",
+            "FRI",
+            "SAT",
+            "SUN"
+          ]
+        },
+        "nonBusinessDayTreatment": {
+          "type": "string",
+          "description": "Enumerated field giving the treatment where a scheduled payment date is not a business day.  If absent assumed to be ON",
+          "enum": [
+            "AFTER",
+            "BEFORE",
+            "ON",
+            "ONLY"
+          ],
+          "default": "ON"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceEventBased": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined according to an external event that cannot be predetermined. Mandatory if recurrenceUType is set to eventBased",
+      "required": [
+        "description"
+      ],
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the event and conditions that will result in the payment. Expected to be formatted for display to a customer"
+        }
+      }
+    },
+    "ResponseCommonDiscoveryStatus": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "status",
+            "updateTime"
+          ],
+          "x-conditional": [
+            "explanation"
+          ],
+          "properties": {
+            "status": {
+              "type": "string",
+              "description": "Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)",
+              "enum": [
+                "OK",
+                "PARTIAL_FAILURE",
+                "UNAVAILABLE",
+                "SCHEDULED_OUTAGE"
+              ]
+            },
+            "explanation": {
+              "type": "string",
+              "description": "Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK"
+            },
+            "detectionTime": {
+              "type": "string",
+              "description": "The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE",
+              "x-cds-type": "DateTimeString"
+            },
+            "expectedResolutionTime": {
+              "type": "string",
+              "description": "The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.",
+              "x-cds-type": "DateTimeString"
+            },
+            "updateTime": {
+              "type": "string",
+              "description": "The date and time that this status was last updated by the Data Holder.",
+              "x-cds-type": "DateTimeString"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseDiscoveryOutagesList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "outages"
+          ],
+          "properties": {
+            "outages": {
+              "description": "List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/DiscoveryOutage"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "DiscoveryOutage": {
+      "type": "object",
+      "required": [
+        "outageTime",
+        "duration",
+        "explanation"
+      ],
+      "properties": {
+        "outageTime": {
+          "type": "string",
+          "description": "Date and time that the outage is scheduled to begin",
+          "x-cds-type": "DateTimeString"
+        },
+        "duration": {
+          "type": "string",
+          "description": "Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "isPartial": {
+          "type": "boolean",
+          "description": "Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage"
+        },
+        "explanation": {
+          "type": "string",
+          "description": "Provides an explanation of the current outage that can be displayed to an end customer"
+        }
+      }
+    },
+    "ResponseCommonCustomer": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "x-conditional": [
+        "person",
+        "organisation"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "customerUType"
+          ],
+          "properties": {
+            "customerUType": {
+              "type": "string",
+              "description": "The type of customer object that is present",
+              "enum": [
+                "person",
+                "organisation"
+              ]
+            },
+            "person": {
+              "$ref": "#/definitions/CommonPerson"
+            },
+            "organisation": {
+              "$ref": "#/definitions/CommonOrganisation"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseCommonCustomerDetail": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "x-conditional": [
+        "person",
+        "organisation"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "customerUType"
+          ],
+          "properties": {
+            "customerUType": {
+              "type": "string",
+              "description": "The type of customer object that is present",
+              "enum": [
+                "person",
+                "organisation"
+              ]
+            },
+            "person": {
+              "$ref": "#/definitions/CommonPersonDetail"
+            },
+            "organisation": {
+              "$ref": "#/definitions/CommonOrganisationDetail"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "CommonPerson": {
+      "type": "object",
+      "required": [
+        "lastName",
+        "middleNames"
+      ],
+      "properties": {
+        "lastUpdateTime": {
+          "type": "string",
+          "description": "The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data",
+          "x-cds-type": "DateTimeString"
+        },
+        "firstName": {
+          "type": "string",
+          "description": "For people with single names this field need not be present.  The single name should be in the lastName field"
+        },
+        "lastName": {
+          "type": "string",
+          "description": "For people with single names the single name should be in this field"
+        },
+        "middleNames": {
+          "type": "array",
+          "description": "Field is mandatory but array may be empty",
+          "items": {
+            "type": "string"
+          }
+        },
+        "prefix": {
+          "type": "string",
+          "description": "Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)"
+        },
+        "suffix": {
+          "type": "string",
+          "description": "Used for a trailing suffix to the name (e.g. Jr)"
+        },
+        "occupationCode": {
+          "type": "string",
+          "description": "Value is a valid [ANZCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification."
+        }
+      }
+    },
+    "CommonPersonDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonPerson"
+        },
+        {
+          "type": "object",
+          "required": [
+            "phoneNumbers",
+            "emailAddresses",
+            "physicalAddresses"
+          ],
+          "properties": {
+            "phoneNumbers": {
+              "type": "array",
+              "description": "Array is mandatory but may be empty if no phone numbers are held",
+              "items": {
+                "$ref": "#/definitions/CommonPhoneNumber"
+              }
+            },
+            "emailAddresses": {
+              "type": "array",
+              "description": "May be empty",
+              "items": {
+                "$ref": "#/definitions/CommonEmailAddress"
+              }
+            },
+            "physicalAddresses": {
+              "type": "array",
+              "description": "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddressWithPurpose"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "CommonOrganisation": {
+      "type": "object",
+      "required": [
+        "agentLastName",
+        "agentRole",
+        "businessName",
+        "organisationType"
+      ],
+      "properties": {
+        "lastUpdateTime": {
+          "type": "string",
+          "description": "The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data",
+          "x-cds-type": "DateTimeString"
+        },
+        "agentFirstName": {
+          "type": "string",
+          "description": "The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field"
+        },
+        "agentLastName": {
+          "type": "string",
+          "description": "The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field"
+        },
+        "agentRole": {
+          "type": "string",
+          "description": "The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known"
+        },
+        "businessName": {
+          "type": "string",
+          "description": "Name of the organisation"
+        },
+        "legalName": {
+          "type": "string",
+          "description": "Legal name, if different to the business name"
+        },
+        "shortName": {
+          "type": "string",
+          "description": "Short name used for communication, if different to the business name"
+        },
+        "abn": {
+          "type": "string",
+          "description": "Australian Business Number for the organisation"
+        },
+        "acn": {
+          "type": "string",
+          "description": "Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type"
+        },
+        "isACNCRegistered": {
+          "type": "boolean",
+          "description": "True if registered with the ACNC.  False if not. Absent or null if not confirmed.",
+          "x-cds-type": "Boolean"
+        },
+        "industryCode": {
+          "type": "string",
+          "description": "[ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation."
+        },
+        "organisationType": {
+          "type": "string",
+          "description": "Legal organisation type",
+          "enum": [
+            "SOLE_TRADER",
+            "COMPANY",
+            "PARTNERSHIP",
+            "TRUST",
+            "GOVERNMENT_ENTITY",
+            "OTHER"
+          ]
+        },
+        "registeredCountry": {
+          "type": "string",
+          "description": "Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent",
+          "x-cds-type": "ExternalRef"
+        },
+        "establishmentDate": {
+          "type": "string",
+          "description": "The date the organisation described was established",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "CommonOrganisationDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonOrganisation"
+        },
+        {
+          "type": "object",
+          "required": [
+            "physicalAddresses"
+          ],
+          "properties": {
+            "physicalAddresses": {
+              "type": "array",
+              "description": "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddressWithPurpose"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "CommonPhoneNumber": {
+      "type": "object",
+      "required": [
+        "purpose",
+        "number",
+        "fullNumber"
+      ],
+      "x-conditional": [
+        "areaCode"
+      ],
+      "properties": {
+        "isPreferred": {
+          "type": "boolean",
+          "description": "May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present",
+          "x-cds-type": "Boolean"
+        },
+        "purpose": {
+          "type": "string",
+          "description": "The purpose of the number as specified by the customer",
+          "enum": [
+            "MOBILE",
+            "HOME",
+            "WORK",
+            "OTHER",
+            "INTERNATIONAL",
+            "UNSPECIFIED"
+          ]
+        },
+        "countryCode": {
+          "type": "string",
+          "description": "If absent, assumed to be Australia (+61). The + should be included"
+        },
+        "areaCode": {
+          "type": "string",
+          "description": "Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted."
+        },
+        "number": {
+          "type": "string",
+          "description": "The actual phone number, with leading zeros as appropriate"
+        },
+        "extension": {
+          "type": "string",
+          "description": "An extension number (if applicable)"
+        },
+        "fullNumber": {
+          "type": "string",
+          "description": "Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "CommonEmailAddress": {
+      "type": "object",
+      "required": [
+        "purpose",
+        "address"
+      ],
+      "properties": {
+        "isPreferred": {
+          "type": "boolean",
+          "description": "May be true for one and only one email record in the collection. Denotes the default email address",
+          "x-cds-type": "Boolean"
+        },
+        "purpose": {
+          "type": "string",
+          "description": "The purpose for the email, as specified by the customer (Enumeration)",
+          "enum": [
+            "WORK",
+            "HOME",
+            "OTHER",
+            "UNSPECIFIED"
+          ]
+        },
+        "address": {
+          "type": "string",
+          "description": "A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "CommonPhysicalAddressWithPurpose": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonPhysicalAddress"
+        },
+        {
+          "type": "object",
+          "required": [
+            "purpose"
+          ],
+          "properties": {
+            "purpose": {
+              "type": "string",
+              "description": "Enumeration of values indicating the purpose of the physical address",
+              "enum": [
+                "REGISTERED",
+                "MAIL",
+                "PHYSICAL",
+                "WORK",
+                "OTHER"
+              ]
+            }
+          }
+        }
+      ]
+    },
+    "CommonPhysicalAddress": {
+      "type": "object",
+      "required": [
+        "addressUType"
+      ],
+      "x-conditional": [
+        "simple",
+        "paf"
+      ],
+      "properties": {
+        "addressUType": {
+          "type": "string",
+          "description": "The type of address object present",
+          "enum": [
+            "simple",
+            "paf"
+          ]
+        },
+        "simple": {
+          "$ref": "#/definitions/CommonSimpleAddress"
+        },
+        "paf": {
+          "$ref": "#/definitions/CommonPAFAddress"
+        }
+      }
+    },
+    "CommonSimpleAddress": {
+      "type": "object",
+      "required": [
+        "addressLine1",
+        "city",
+        "state"
+      ],
+      "x-conditional": [
+        "postcode"
+      ],
+      "properties": {
+        "mailingName": {
+          "type": "string",
+          "description": "Name of the individual or business formatted for inclusion in an address used for physical mail"
+        },
+        "addressLine1": {
+          "type": "string",
+          "description": "First line of the standard address object"
+        },
+        "addressLine2": {
+          "type": "string",
+          "description": "Second line of the standard address object"
+        },
+        "addressLine3": {
+          "type": "string",
+          "description": "Third line of the standard address object"
+        },
+        "postcode": {
+          "type": "string",
+          "description": "Mandatory for Australian addresses"
+        },
+        "city": {
+          "type": "string",
+          "description": "Name of the city or locality"
+        },
+        "state": {
+          "type": "string",
+          "description": "Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT"
+        },
+        "country": {
+          "type": "string",
+          "description": "A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.",
+          "x-cds-type": "ExternalRef",
+          "default": "AUS"
+        }
+      }
+    },
+    "CommonPAFAddress": {
+      "type": "object",
+      "description": "Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)",
+      "required": [
+        "localityName",
+        "postcode",
+        "state"
+      ],
+      "properties": {
+        "dpid": {
+          "type": "string",
+          "description": "Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier"
+        },
+        "thoroughfareNumber1": {
+          "type": "integer",
+          "description": "Thoroughfare number for a property (first number in a property ranged address)",
+          "x-cds-type": "PositiveInteger"
+        },
+        "thoroughfareNumber1Suffix": {
+          "type": "string",
+          "description": "Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated"
+        },
+        "thoroughfareNumber2": {
+          "type": "integer",
+          "description": "Second thoroughfare number (only used if the property has a ranged address eg 23-25)",
+          "x-cds-type": "PositiveInteger"
+        },
+        "thoroughfareNumber2Suffix": {
+          "type": "string",
+          "description": "Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated"
+        },
+        "flatUnitType": {
+          "type": "string",
+          "description": "Type of flat or unit for the address"
+        },
+        "flatUnitNumber": {
+          "type": "string",
+          "description": "Unit number (including suffix, if applicable)"
+        },
+        "floorLevelType": {
+          "type": "string",
+          "description": "Type of floor or level for the address"
+        },
+        "floorLevelNumber": {
+          "type": "string",
+          "description": "Floor or level number (including alpha characters)"
+        },
+        "lotNumber": {
+          "type": "string",
+          "description": "Allotment number for the address"
+        },
+        "buildingName1": {
+          "type": "string",
+          "description": "Building/Property name 1"
+        },
+        "buildingName2": {
+          "type": "string",
+          "description": "Building/Property name 2"
+        },
+        "streetName": {
+          "type": "string",
+          "description": "The name of the street"
+        },
+        "streetType": {
+          "type": "string",
+          "description": "The street type. Valid enumeration defined by Australia Post PAF code file"
+        },
+        "streetSuffix": {
+          "type": "string",
+          "description": "The street type suffix. Valid enumeration defined by Australia Post PAF code file"
+        },
+        "postalDeliveryType": {
+          "type": "string",
+          "description": "Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file"
+        },
+        "postalDeliveryNumber": {
+          "type": "integer",
+          "description": "Postal delivery number if the address is a postal delivery type",
+          "x-cds-type": "PositiveInteger"
+        },
+        "postalDeliveryNumberPrefix": {
+          "type": "string",
+          "description": "Postal delivery number prefix related to the postal delivery number"
+        },
+        "postalDeliveryNumberSuffix": {
+          "type": "string",
+          "description": "Postal delivery number suffix related to the postal delivery number"
+        },
+        "localityName": {
+          "type": "string",
+          "description": "Full name of locality"
+        },
+        "postcode": {
+          "type": "string",
+          "description": "Postcode for the locality"
+        },
+        "state": {
+          "type": "string",
+          "description": "State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT"
+        }
+      }
+    },
+    "Links": {
+      "type": "object",
+      "required": [
+        "self"
+      ],
+      "properties": {
+        "self": {
+          "type": "string",
+          "description": "Fully qualified link that generated the current response document",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "Meta": {
+      "type": "object"
+    },
+    "LinksPaginated": {
+      "type": "object",
+      "required": [
+        "self"
+      ],
+      "x-conditional": [
+        "prev",
+        "next",
+        "first",
+        "last"
+      ],
+      "properties": {
+        "self": {
+          "type": "string",
+          "description": "Fully qualified link that generated the current response document",
+          "x-cds-type": "URIString"
+        },
+        "first": {
+          "type": "string",
+          "description": "URI to the first page of this set. Mandatory if this response is not the first page",
+          "x-cds-type": "URIString"
+        },
+        "prev": {
+          "type": "string",
+          "description": "URI to the previous page of this set. Mandatory if this response is not the first page",
+          "x-cds-type": "URIString"
+        },
+        "next": {
+          "type": "string",
+          "description": "URI to the next page of this set. Mandatory if this response is not the last page",
+          "x-cds-type": "URIString"
+        },
+        "last": {
+          "type": "string",
+          "description": "URI to the last page of this set. Mandatory if this response is not the last page",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "MetaPaginated": {
+      "type": "object",
+      "required": [
+        "totalRecords",
+        "totalPages"
+      ],
+      "properties": {
+        "totalRecords": {
+          "type": "integer",
+          "description": "The total number of records in the full set. See [pagination](#pagination).",
+          "x-cds-type": "NaturalNumber"
+        },
+        "totalPages": {
+          "type": "integer",
+          "description": "The total number of pages in the full set. See [pagination](#pagination).",
+          "x-cds-type": "NaturalNumber"
+        }
+      }
+    },
+    "ResponseErrorList": {
+      "type": "object",
+      "required": [
+        "errors"
+      ],
+      "properties": {
+        "errors": {
+          "type": "array",
+          "items": {
+            "type": "object",
+            "required": [
+              "code",
+              "title",
+              "detail"
+            ],
+            "properties": {
+              "code": {
+                "type": "string",
+                "description": "Must be one of the following: 0001 – Account not able to be found"
+              },
+              "title": {
+                "type": "string",
+                "description": "Must be one of the following: Invalid account"
+              },
+              "detail": {
+                "type": "string",
+                "description": "ID of the account not found"
+              },
+              "meta": {
+                "type": "object",
+                "description": "Optional additional data for specific error types"
+              }
+            }
+          }
+        }
+      }
+    },
+    "BankingProductCategory": {
+      "type": "string",
+      "description": "The category to which a product or account belongs. See [here](#product-categories) for more details",
+      "enum": [
+        "TRANS_AND_SAVINGS_ACCOUNTS",
+        "TERM_DEPOSITS",
+        "TRAVEL_CARDS",
+        "REGULATED_TRUST_ACCOUNTS",
+        "RESIDENTIAL_MORTGAGES",
+        "CRED_AND_CHRG_CARDS",
+        "PERS_LOANS",
+        "MARGIN_LOANS",
+        "LEASES",
+        "TRADE_FINANCE",
+        "OVERDRAFTS",
+        "BUSINESS_LOANS"
+      ]
+    }
+  }
+}
diff --git a/api-model/src/main/resources/cds_full_1.1.1.json b/api-model/src/main/resources/cds_full_1.1.1.json
new file mode 100644
index 0000000..bfd83ad
--- /dev/null
+++ b/api-model/src/main/resources/cds_full_1.1.1.json
@@ -0,0 +1,4625 @@
+{
+  "swagger": "2.0",
+  "info": {
+    "title": "Consumer Data Standards",
+    "description": "API sets created by the Australian Consumer Data Standards to meet the needs of the Consumer Data Right",
+    "version": "1.1.1",
+    "contact": {
+      "name": "Consumer Data Standards",
+      "url": "https://consumerdatastandards.org.au/",
+      "email": "cdr-data61@csiro.au"
+    },
+    "license": {
+      "name": "MIT License",
+      "url": "https://opensource.org/licenses/MIT"
+    }
+  },
+  "host": "data.holder.com.au",
+  "basePath": "/cds-au/v1",
+  "schemes": [
+    "https"
+  ],
+  "consumes": [
+    "application/json"
+  ],
+  "produces": [
+    "application/json"
+  ],
+  "paths": {
+    "/banking/accounts": {
+      "get": {
+        "summary": "Get Accounts",
+        "description": "Obtain a list of accounts",
+        "operationId": "listAccounts",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/balances": {
+      "get": {
+        "summary": "Get Bulk Balances",
+        "description": "Obtain balances for multiple, filtered accounts",
+        "operationId": "listBalancesBulk",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Balances For Specific Accounts",
+        "description": "Obtain balances for a specified list of accounts",
+        "operationId": "listBalancesSpecificAccounts",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "The list of account IDs to obtain balances for",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/balance": {
+      "get": {
+        "summary": "Get Account Balance",
+        "description": "Obtain the balance for a single specified account",
+        "operationId": "getBalance",
+        "x-scopes": [
+          "bank:accounts.basic:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the specific account requested",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountsBalanceById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}": {
+      "get": {
+        "summary": "Get Account Detail",
+        "description": "Obtain detailed information on a single account",
+        "operationId": "getAccountDetail",
+        "x-scopes": [
+          "bank:accounts.detail:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "A tokenised identifier for the account which is unique but not shareable",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingAccountById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/transactions": {
+      "get": {
+        "summary": "Get Transactions For Account",
+        "description": "Obtain transactions for a specific account.\n\nSome general notes that apply to all end points that retrieve transactions:\n\n- Where multiple transactions are returned, transactions should be ordered according to effective date in descending order\n- As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:\n\t\t- Posted date/time if available, then\n\t\t- Execution date/time if available, then\n\t\t- A reasonable date/time nominated by the data holder using internal data structures\n- For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account\n- For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared",
+        "operationId": "getTransactions",
+        "x-scopes": [
+          "bank:transactions:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points.",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionOldestTime"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionNewestTime"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionMinAmount"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionMaxAmount"
+          },
+          {
+            "$ref": "#/parameters/ParamTransactionText"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingTransactionList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/transactions/{transactionId}": {
+      "get": {
+        "summary": "Get Transaction Detail",
+        "description": "Obtain detailed information on a transaction for a specific account",
+        "operationId": "getTransactionDetail",
+        "x-scopes": [
+          "bank:transactions:read"
+        ],
+        "tags": [
+          "Banking",
+          "Accounts"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "name": "transactionId",
+            "in": "path",
+            "description": "ID of the transaction obtained from a previous call to one of the other transaction end points",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingTransactionById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/direct-debits": {
+      "get": {
+        "summary": "Get Direct Debits For Account",
+        "description": "Obtain direct debit authorisations for a specific account",
+        "operationId": "listDirectDebits",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points.",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/direct-debits": {
+      "get": {
+        "summary": "Get Bulk Direct Debits",
+        "description": "Obtain direct debit authorisations for multiple, filtered accounts",
+        "operationId": "listDirectDebitsBulk",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Direct Debits For Specific Accounts",
+        "description": "Obtain direct debit authorisations for a specified list of accounts",
+        "operationId": "listDirectDebitsSpecificAccounts",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Direct Debits"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "Array of specific accountIds to obtain authorisations for",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingDirectDebitAuthorisationList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/accounts/{accountId}/payments/scheduled": {
+      "get": {
+        "summary": "Get Scheduled Payments for Account",
+        "description": "Obtain scheduled, outgoing payments for a specific account",
+        "operationId": "listScheduledPayments",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "name": "accountId",
+            "in": "path",
+            "description": "ID of the account to get scheduled payments for. Must have previously been returned by one of the account list end points. The account specified is the source account for the payment",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payments/scheduled": {
+      "get": {
+        "summary": "Get Scheduled Payments Bulk",
+        "description": "Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments",
+        "operationId": "listScheduledPaymentsBulk",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountOpenStatus"
+          },
+          {
+            "$ref": "#/parameters/ParamAccountIsOwned"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          }
+        },
+        "x-version": "1"
+      },
+      "post": {
+        "summary": "Get Scheduled Payments For Specific Accounts",
+        "description": "Obtain scheduled payments for a specified list of accounts",
+        "operationId": "listScheduledPaymentsSpecificAccounts",
+        "x-scopes": [
+          "bank:regular_payments:read"
+        ],
+        "tags": [
+          "Banking",
+          "Scheduled Payments"
+        ],
+        "parameters": [
+          {
+            "name": "accountIds",
+            "in": "body",
+            "description": "Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned",
+            "required": true,
+            "schema": {
+              "$ref": "#/definitions/RequestAccountIds"
+            }
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingScheduledPaymentsList"
+            }
+          },
+          "422": {
+            "description": "The request was well formed but was unable to be processed due to business logic specific to the request",
+            "headers": {
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseErrorList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payees": {
+      "get": {
+        "summary": "Get Payees",
+        "description": "Obtain a list of pre-registered payees",
+        "operationId": "listPayees",
+        "x-scopes": [
+          "bank:payees:read"
+        ],
+        "tags": [
+          "Banking",
+          "Payees"
+        ],
+        "parameters": [
+          {
+            "name": "type",
+            "in": "query",
+            "description": "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL",
+            "required": false,
+            "type": "string",
+            "enum": [
+              "DOMESTIC",
+              "INTERNATIONAL",
+              "BILLER",
+              "ALL"
+            ],
+            "default": "ALL"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingPayeeList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/payees/{payeeId}": {
+      "get": {
+        "summary": "Get Payee Detail",
+        "description": "Obtain detailed information on a single payee.\n\nNote that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient",
+        "operationId": "getPayeeDetail",
+        "x-scopes": [
+          "bank:payees:read"
+        ],
+        "tags": [
+          "Banking",
+          "Payees"
+        ],
+        "parameters": [
+          {
+            "name": "payeeId",
+            "in": "path",
+            "description": "The ID used to locate the details of a particular payee",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingPayeeById"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/banking/products": {
+      "get": {
+        "summary": "Get Products",
+        "description": "Obtain a list of products that are currently openly offered to the market\n\nNote that the results returned by this end point are expected to be ordered according to updated-since\n\n### Conventions\nIn the product reference payloads there are a number of recurring conventions that are explained here, in one place.\n\n#### Arrays Of Features\n\nIn the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:\n\n- Each element in an array has the same structure so that clients can reliably interpret the payloads\n- Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees.\n- Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product.\n- An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths.\n- An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product.\n- Depending on the type of data being represented there may be additional specific fields.\n\n#### URIs To More Information\n\nAs the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.\n\nThese URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.\n\n#### Linkage To Accounts\nFrom the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.\n\nFor this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.\n\nSimilarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.\n\n#### Dates\nIt is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.\n\nIn addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.\n\nNOTE: This version must be implemented by **July 2020**\n\nObsolete versions: [v1](includes/obsolete/get-products-v1.html)",
+        "operationId": "listProducts",
+        "tags": [
+          "Banking",
+          "Products"
+        ],
+        "parameters": [
+          {
+            "name": "effective",
+            "in": "query",
+            "description": "Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to 'CURRENT'",
+            "required": false,
+            "type": "string",
+            "enum": [
+              "CURRENT",
+              "FUTURE",
+              "ALL"
+            ],
+            "default": "CURRENT"
+          },
+          {
+            "name": "updated-since",
+            "in": "query",
+            "description": "Only include products that have been updated after the specified date and time. If absent defaults to include all products",
+            "required": false,
+            "type": "string",
+            "x-cds-type": "DateTimeString"
+          },
+          {
+            "name": "brand",
+            "in": "query",
+            "description": "Filter results based on a specific brand",
+            "required": false,
+            "type": "string"
+          },
+          {
+            "$ref": "#/parameters/ParamProductCategory"
+          },
+          {
+            "$ref": "#/parameters/ParamPage"
+          },
+          {
+            "$ref": "#/parameters/ParamPageSize"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingProductList"
+            }
+          }
+        },
+        "x-version": "2"
+      }
+    },
+    "/banking/products/{productId}": {
+      "get": {
+        "summary": "Get Product Detail",
+        "description": "Obtain detailed information on a single product offered openly to the market.\n\nNOTE: This version must be implemented by **July 2020**\n\nObsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)",
+        "operationId": "getProductDetail",
+        "tags": [
+          "Banking",
+          "Products"
+        ],
+        "parameters": [
+          {
+            "name": "productId",
+            "in": "path",
+            "description": "ID of the specific product requested",
+            "required": true,
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseBankingProductById"
+            }
+          }
+        },
+        "x-version": "2"
+      }
+    },
+    "/common/customer": {
+      "get": {
+        "summary": "Get Customer",
+        "description": "Obtain basic information on the customer that has authorised the current session",
+        "operationId": "getCustomer",
+        "x-scopes": [
+          "common:customer.basic:read"
+        ],
+        "tags": [
+          "Common",
+          "Customer"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonCustomer"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/common/customer/detail": {
+      "get": {
+        "summary": "Get Customer Detail",
+        "description": "Obtain detailed information on the authorised customer within the current session.",
+        "operationId": "getCustomerDetail",
+        "x-scopes": [
+          "common:customer.detail:read"
+        ],
+        "tags": [
+          "Common",
+          "Customer"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-interaction-id"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-auth-date"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-fapi-customer-ip-address"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-cds-client-headers"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              },
+              "x-fapi-interaction-id": {
+                "type": "string",
+                "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonCustomerDetail"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/discovery/status": {
+      "get": {
+        "summary": "Get Status",
+        "description": "Obtain a health check status for the implementation",
+        "operationId": "getStatus",
+        "tags": [
+          "Common",
+          "Discovery"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseCommonDiscoveryStatus"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    },
+    "/discovery/outages": {
+      "get": {
+        "summary": "Get Outages",
+        "description": "Obtain a list of scheduled outages for the implementation",
+        "operationId": "getOutages",
+        "tags": [
+          "Common",
+          "Discovery"
+        ],
+        "parameters": [
+          {
+            "$ref": "#/parameters/RequestHeader_x-v"
+          },
+          {
+            "$ref": "#/parameters/RequestHeader_x-min-v"
+          }
+        ],
+        "responses": {
+          "200": {
+            "description": "Success",
+            "headers": {
+              "x-v": {
+                "type": "string",
+                "description": "The [version](#response-headers) of the API end point that the data holder has responded with."
+              }
+            },
+            "schema": {
+              "$ref": "#/definitions/ResponseDiscoveryOutagesList"
+            }
+          }
+        },
+        "x-version": "1"
+      }
+    }
+  },
+  "parameters": {
+    "RequestHeader_x-v": {
+      "name": "x-v",
+      "description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
+      "in": "header",
+      "type": "string",
+      "required": true
+    },
+    "RequestHeader_x-min-v": {
+      "name": "x-min-v",
+      "description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-interaction-id": {
+      "name": "x-fapi-interaction-id",
+      "description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-auth-date": {
+      "name": "x-fapi-auth-date",
+      "description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-fapi-customer-ip-address": {
+      "name": "x-fapi-customer-ip-address",
+      "description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
+      "in": "header",
+      "type": "string"
+    },
+    "RequestHeader_x-cds-client-headers": {
+      "name": "x-cds-client-headers",
+      "description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
+      "in": "header",
+      "type": "string",
+      "x-cds-type": "Base64"
+    },
+    "ParamAccountOpenStatus": {
+      "name": "open-status",
+      "in": "query",
+      "description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed",
+      "required": false,
+      "type": "string",
+      "enum": [
+        "OPEN",
+        "CLOSED",
+        "ALL"
+      ],
+      "default": "ALL"
+    },
+    "ParamProductCategory": {
+      "name": "product-category",
+      "in": "query",
+      "description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned.",
+      "required": false,
+      "type": "string",
+      "enum": [
+        "TRANS_AND_SAVINGS_ACCOUNTS",
+        "TERM_DEPOSITS",
+        "TRAVEL_CARDS",
+        "REGULATED_TRUST_ACCOUNTS",
+        "RESIDENTIAL_MORTGAGES",
+        "CRED_AND_CHRG_CARDS",
+        "PERS_LOANS",
+        "MARGIN_LOANS",
+        "LEASES",
+        "TRADE_FINANCE",
+        "OVERDRAFTS",
+        "BUSINESS_LOANS"
+      ]
+    },
+    "ParamAccountIsOwned": {
+      "name": "is-owned",
+      "in": "query",
+      "description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts",
+      "required": false,
+      "type": "boolean",
+      "x-cds-type": "Boolean"
+    },
+    "ParamPage": {
+      "name": "page",
+      "in": "query",
+      "description": "Page of results to request (standard pagination)",
+      "required": false,
+      "type": "integer",
+      "x-cds-type": "PositiveInteger",
+      "default": 1
+    },
+    "ParamPageSize": {
+      "name": "page-size",
+      "in": "query",
+      "description": "Page size to request. Default is 25 (standard pagination)",
+      "required": false,
+      "type": "integer",
+      "x-cds-type": "PositiveInteger",
+      "default": 25
+    },
+    "ParamTransactionNewestTime": {
+      "name": "newest-time",
+      "in": "query",
+      "description": "Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "DateTimeString"
+    },
+    "ParamTransactionOldestTime": {
+      "name": "oldest-time",
+      "in": "query",
+      "description": "Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "DateTimeString"
+    },
+    "ParamTransactionMinAmount": {
+      "name": "min-amount",
+      "in": "query",
+      "description": "Filter transactions to only transactions with amounts higher or equal to than this amount",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "AmountString"
+    },
+    "ParamTransactionMaxAmount": {
+      "name": "max-amount",
+      "in": "query",
+      "description": "Filter transactions to only transactions with amounts less than or equal to than this amount",
+      "required": false,
+      "type": "string",
+      "x-cds-type": "AmountString"
+    },
+    "ParamTransactionText": {
+      "name": "text",
+      "in": "query",
+      "description": "Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not)",
+      "required": false,
+      "type": "string"
+    }
+  },
+  "definitions": {
+    "RequestAccountIds": {
+      "type": "object",
+      "required": [
+        "data"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "accountIds"
+          ],
+          "properties": {
+            "accountIds": {
+              "type": "array",
+              "items": {
+                "type": "string",
+                "description": "Array of specific accountIds to obtain authorisations for",
+                "x-cds-type": "ASCIIString"
+              }
+            }
+          }
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseBankingProductList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "products"
+          ],
+          "properties": {
+            "products": {
+              "description": "The list of products returned.  If the filter results in an empty set then this array may have no records",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductV2"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingProductV2": {
+      "type": "object",
+      "required": [
+        "productId",
+        "lastUpdated",
+        "productCategory",
+        "name",
+        "description",
+        "brand",
+        "isTailored"
+      ],
+      "properties": {
+        "productId": {
+          "type": "string",
+          "description": "A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.",
+          "x-cds-type": "ASCIIString"
+        },
+        "effectiveFrom": {
+          "type": "string",
+          "description": "The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate",
+          "x-cds-type": "DateTimeString"
+        },
+        "effectiveTo": {
+          "type": "string",
+          "description": "The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products",
+          "x-cds-type": "DateTimeString"
+        },
+        "lastUpdated": {
+          "type": "string",
+          "description": "The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)",
+          "x-cds-type": "DateTimeString"
+        },
+        "productCategory": {
+          "$ref": "#/definitions/BankingProductCategory"
+        },
+        "name": {
+          "type": "string",
+          "description": "The display name of the product"
+        },
+        "description": {
+          "type": "string",
+          "description": "A description of the product"
+        },
+        "brand": {
+          "type": "string",
+          "description": "A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required"
+        },
+        "brandName": {
+          "type": "string",
+          "description": "An optional display name of the brand"
+        },
+        "applicationUri": {
+          "type": "string",
+          "description": "A link to an application web page where this product can be applied for.",
+          "x-cds-type": "URIString"
+        },
+        "isTailored": {
+          "type": "boolean",
+          "description": "Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable",
+          "x-cds-type": "Boolean"
+        },
+        "additionalInformation": {
+          "description": "Object that contains links to additional information on specific topics",
+          "type": "object",
+          "properties": {
+            "overviewUri": {
+              "type": "string",
+              "description": "General overview of the product",
+              "x-cds-type": "URIString"
+            },
+            "termsUri": {
+              "type": "string",
+              "description": "Terms and conditions for the product",
+              "x-cds-type": "URIString"
+            },
+            "eligibilityUri": {
+              "type": "string",
+              "description": "Eligibility rules and criteria for the product",
+              "x-cds-type": "URIString"
+            },
+            "feesAndPricingUri": {
+              "type": "string",
+              "description": "Description of fees, pricing, discounts, exemptions and bonuses for the product",
+              "x-cds-type": "URIString"
+            },
+            "bundleUri": {
+              "type": "string",
+              "description": "Description of a bundle that this product can be part of",
+              "x-cds-type": "URIString"
+            }
+          }
+        },
+        "cardArt": {
+          "description": "An array of card art images",
+          "type": "array",
+          "items": {
+            "type": "object",
+            "required": [
+              "imageUri"
+            ],
+            "properties": {
+              "title": {
+                "type": "string",
+                "description": "Display label for the specific image"
+              },
+              "imageUri": {
+                "type": "string",
+                "description": "Link to a PNG, JPG or GIF image with proportions defined by ISO 7810 ID-1 and width no greater than 512 pixels",
+                "x-cds-type": "URIString"
+              }
+            }
+          }
+        }
+      }
+    },
+    "ResponseBankingProductById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingProductDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingProductDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingProductV2"
+        },
+        {
+          "type": "object",
+          "properties": {
+            "bundles": {
+              "description": "An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductBundle"
+              }
+            },
+            "features": {
+              "description": "Array of features available for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFeature"
+              }
+            },
+            "constraints": {
+              "description": "Constraints on the application for or operation of the product such as minimum balances or limit thresholds",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductConstraint"
+              }
+            },
+            "eligibility": {
+              "description": "Eligibility criteria for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductEligibility"
+              }
+            },
+            "fees": {
+              "description": "Fees applicable for the product",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFee"
+              }
+            },
+            "depositRates": {
+              "description": "Interest rates available for deposits",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductDepositRate"
+              }
+            },
+            "lendingRates": {
+              "description": "Interest rates charged against lending balances",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductLendingRate"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "BankingProductBundle": {
+      "type": "object",
+      "required": [
+        "name",
+        "description"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "Name of the bundle"
+        },
+        "description": {
+          "type": "string",
+          "description": "Description of the bundle"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the bundle"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on the bundle criteria and benefits",
+          "x-cds-type": "URIString"
+        },
+        "productIds": {
+          "type": "array",
+          "description": "Array of product IDs for products included in the bundle that are available via the product end points.  Note that this array is not intended to represent a comprehensive model of the products included in the bundle and some products available for the bundle may not be available via the product reference end points",
+          "items": {
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          }
+        }
+      }
+    },
+    "BankingProductFeature": {
+      "type": "object",
+      "required": [
+        "featureType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "additionalInfo"
+      ],
+      "properties": {
+        "featureType": {
+          "type": "string",
+          "description": "The type of feature described",
+          "enum": [
+            "CARD_ACCESS",
+            "ADDITIONAL_CARDS",
+            "UNLIMITED_TXNS",
+            "FREE_TXNS",
+            "FREE_TXNS_ALLOWANCE",
+            "LOYALTY_PROGRAM",
+            "OFFSET",
+            "OVERDRAFT",
+            "REDRAW",
+            "INSURANCE",
+            "BALANCE_TRANSFERS",
+            "INTEREST_FREE",
+            "INTEREST_FREE_TRANSFERS",
+            "DIGITAL_WALLET",
+            "DIGITAL_BANKING",
+            "NPP_PAYID",
+            "NPP_ENABLED",
+            "DONATE_INTEREST",
+            "BILL_PAYMENT",
+            "COMPLEMENTARY_PRODUCT_DISCOUNTS",
+            "BONUS_REWARDS",
+            "NOTIFICATIONS",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this feature",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductConstraint": {
+      "type": "object",
+      "required": [
+        "constraintType"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "constraintType": {
+          "type": "string",
+          "description": "The type of constraint described.  See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "MIN_BALANCE",
+            "MAX_BALANCE",
+            "OPENING_BALANCE",
+            "MAX_LIMIT",
+            "MIN_LIMIT"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information the constraint"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on the constraint",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductEligibility": {
+      "type": "object",
+      "required": [
+        "eligibilityType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "additionalInfo"
+      ],
+      "properties": {
+        "eligibilityType": {
+          "type": "string",
+          "description": "The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "BUSINESS",
+            "PENSION_RECIPIENT",
+            "MIN_AGE",
+            "MAX_AGE",
+            "MIN_INCOME",
+            "MIN_TURNOVER",
+            "STAFF",
+            "STUDENT",
+            "EMPLOYMENT_STATUS",
+            "RESIDENCY_STATUS",
+            "NATURAL_PERSON",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this eligibility criteria",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductFee": {
+      "type": "object",
+      "required": [
+        "name",
+        "feeType"
+      ],
+      "x-conditional": [
+        "additionalValue",
+        "amount",
+        "balanceRate",
+        "transactionRate",
+        "accruedRate"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "Name of the fee"
+        },
+        "feeType": {
+          "type": "string",
+          "description": "The type of fee",
+          "enum": [
+            "PERIODIC",
+            "TRANSACTION",
+            "WITHDRAWAL",
+            "DEPOSIT",
+            "PAYMENT",
+            "PURCHASE",
+            "EVENT",
+            "UPFRONT",
+            "EXIT"
+          ]
+        },
+        "amount": {
+          "type": "string",
+          "description": "The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "AmountString"
+        },
+        "balanceRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "transactionRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accruedRate": {
+          "type": "string",
+          "description": "A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accrualFrequency": {
+          "type": "string",
+          "description": "The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency the fee will be charged in. Assumes AUD if absent",
+          "x-cds-type": "CurrencyString"
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the fee"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this fee",
+          "x-cds-type": "URIString"
+        },
+        "discounts": {
+          "description": "An optional list of discounts to this fee that may be available",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingProductDiscount"
+          }
+        }
+      }
+    },
+    "BankingProductDiscount": {
+      "type": "object",
+      "required": [
+        "description",
+        "discountType"
+      ],
+      "x-conditional": [
+        "balanceRate",
+        "transactionRate",
+        "accruedRate",
+        "feeRate",
+        "additionalValue",
+        "amount"
+      ],
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the discount"
+        },
+        "discountType": {
+          "type": "string",
+          "description": "The type of discount. See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "BALANCE",
+            "DEPOSITS",
+            "PAYMENTS",
+            "FEE_CAP",
+            "ELIGIBILITY_ONLY"
+          ]
+        },
+        "amount": {
+          "type": "string",
+          "description": "Value of the discount. When following properties include one of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory",
+          "x-cds-type": "AmountString"
+        },
+        "balanceRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the balance. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "transactionRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory",
+          "x-cds-type": "RateString"
+        },
+        "accruedRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "feeRate": {
+          "type": "string",
+          "description": "A discount rate calculated based on a proportion of the fee to which this discount is attached. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee",
+          "x-cds-type": "RateString"
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the discount"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this discount",
+          "x-cds-type": "URIString"
+        },
+        "eligibility": {
+          "description": "Eligibility constraints that apply to this discount",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingProductDiscountEligibility"
+          }
+        }
+      }
+    },
+    "BankingProductDiscountEligibility": {
+      "type": "object",
+      "required": [
+        "discountEligibilityType"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "discountEligibilityType": {
+          "type": "string",
+          "description": "The type of the specific eligibility constraint for a discount",
+          "enum": [
+            "BUSINESS",
+            "PENSION_RECIPIENT",
+            "MIN_AGE",
+            "MAX_AGE",
+            "MIN_INCOME",
+            "MIN_TURNOVER",
+            "STAFF",
+            "STUDENT",
+            "EMPLOYMENT_STATUS",
+            "RESIDENCY_STATUS",
+            "NATURAL_PERSON",
+            "INTRODUCTORY",
+            "OTHER"
+          ]
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on this eligibility constraint"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this eligibility constraint",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductDepositRate": {
+      "type": "object",
+      "required": [
+        "depositRateType",
+        "rate"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "depositRateType": {
+          "type": "string",
+          "description": "The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "FIXED",
+            "BONUS",
+            "BUNDLE_BONUS",
+            "VARIABLE",
+            "INTRODUCTORY",
+            "FLOATING",
+            "MARKET_LINKED"
+          ]
+        },
+        "rate": {
+          "type": "string",
+          "description": "The rate to be applied",
+          "x-cds-type": "RateString"
+        },
+        "calculationFrequency": {
+          "type": "string",
+          "description": "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "applicationFrequency": {
+          "type": "string",
+          "description": "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "tiers": {
+          "type": "array",
+          "description": "Rate tiers applicable for this rate",
+          "items": {
+            "$ref": "#/definitions/BankingProductRateTier"
+          }
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the rate"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this rate",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductLendingRate": {
+      "type": "object",
+      "required": [
+        "lendingRateType",
+        "rate"
+      ],
+      "x-conditional": [
+        "additionalValue"
+      ],
+      "properties": {
+        "lendingRateType": {
+          "type": "string",
+          "description": "The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning",
+          "enum": [
+            "FIXED",
+            "VARIABLE",
+            "INTRODUCTORY",
+            "DISCOUNT",
+            "PENALTY",
+            "FLOATING",
+            "MARKET_LINKED",
+            "CASH_ADVANCE",
+            "PURCHASE",
+            "BUNDLE_DISCOUNT_FIXED",
+            "BUNDLE_DISCOUNT_VARIABLE"
+          ]
+        },
+        "rate": {
+          "type": "string",
+          "description": "The rate to be applied",
+          "x-cds-type": "RateString"
+        },
+        "comparisonRate": {
+          "type": "string",
+          "description": "A comparison rate equivalent for this rate",
+          "x-cds-type": "RateString"
+        },
+        "calculationFrequency": {
+          "type": "string",
+          "description": "The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is 'applied' to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "applicationFrequency": {
+          "type": "string",
+          "description": "The period after which the calculated amount(s) (see calculationFrequency) are 'applied' (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "interestPaymentDue": {
+          "type": "string",
+          "description": "When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered",
+          "enum": [
+            "IN_ARREARS",
+            "IN_ADVANCE"
+          ]
+        },
+        "tiers": {
+          "type": "array",
+          "description": "Rate tiers applicable for this rate",
+          "items": {
+            "$ref": "#/definitions/BankingProductRateTier"
+          }
+        },
+        "additionalValue": {
+          "type": "string",
+          "description": "Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)"
+        },
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the rate."
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this rate",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "BankingProductRateTier": {
+      "type": "object",
+      "description": "Defines the criteria and conditions for which a rate applies",
+      "required": [
+        "name",
+        "unitOfMeasure",
+        "minimumValue"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "A display name for the tier"
+        },
+        "unitOfMeasure": {
+          "type": "string",
+          "description": "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)",
+          "enum": [
+            "DOLLAR",
+            "PERCENT",
+            "MONTH",
+            "DAY"
+          ]
+        },
+        "minimumValue": {
+          "type": "number",
+          "description": "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value"
+        },
+        "maximumValue": {
+          "type": "number",
+          "description": "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier's range has no upper bound."
+        },
+        "rateApplicationMethod": {
+          "type": "string",
+          "description": "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')",
+          "enum": [
+            "WHOLE_BALANCE",
+            "PER_TIER"
+          ]
+        },
+        "applicabilityConditions": {
+          "$ref": "#/definitions/BankingProductRateCondition"
+        },
+        "subTier": {
+          "type": "object",
+          "description": "Defines the sub-tier criteria and conditions for which a rate applies",
+          "required": [
+            "name",
+            "unitOfMeasure",
+            "minimumValue",
+            "maximumValue"
+          ],
+          "properties": {
+            "name": {
+              "type": "string",
+              "description": "A display name for the tier"
+            },
+            "unitOfMeasure": {
+              "type": "string",
+              "description": "The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**'s or **DAY**'s (in the case of term deposit tiers)",
+              "enum": [
+                "DOLLAR",
+                "PERCENT",
+                "MONTH",
+                "DAY"
+              ]
+            },
+            "minimumValue": {
+              "type": "number",
+              "description": "The number of tierUnitOfMeasure units that form the lower bound of the tier. The tier should be inclusive of this value"
+            },
+            "maximumValue": {
+              "type": "number",
+              "description": "The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months)"
+            },
+            "rateApplicationMethod": {
+              "type": "string",
+              "description": "The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as 'bands' or 'steps')",
+              "enum": [
+                "WHOLE_BALANCE",
+                "PER_TIER"
+              ]
+            },
+            "applicabilityConditions": {
+              "$ref": "#/definitions/BankingProductRateCondition"
+            }
+          }
+        }
+      }
+    },
+    "BankingProductRateCondition": {
+      "type": "object",
+      "description": "Defines a condition for the applicability of a tiered rate",
+      "properties": {
+        "additionalInfo": {
+          "type": "string",
+          "description": "Display text providing more information on the condition"
+        },
+        "additionalInfoUri": {
+          "type": "string",
+          "description": "Link to a web page with more information on this condition",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "ResponseBankingAccountList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "accounts"
+          ],
+          "properties": {
+            "accounts": {
+              "type": "array",
+              "description": "The list of accounts returned. If the filter results in an empty set then this array may have no records",
+              "items": {
+                "$ref": "#/definitions/BankingAccount"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingAccount": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "displayName",
+        "maskedNumber",
+        "productCategory",
+        "productName"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "creationDate": {
+          "type": "string",
+          "description": "Date that the account was created (if known)",
+          "x-cds-type": "DateString"
+        },
+        "displayName": {
+          "type": "string",
+          "description": "The display name of the account as defined by the bank. This should not incorporate account numbers or PANs. If it does the values should be masked according to the rules of the MaskedAccountString common type."
+        },
+        "nickname": {
+          "type": "string",
+          "description": "A customer supplied nick name for the account"
+        },
+        "openStatus": {
+          "type": "string",
+          "description": "Open or closed status for the account. If not present then OPEN is assumed",
+          "enum": [
+            "OPEN",
+            "CLOSED"
+          ],
+          "default": "OPEN"
+        },
+        "isOwned": {
+          "type": "boolean",
+          "description": "Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then 'true' is assumed",
+          "x-cds-type": "Boolean",
+          "default": true
+        },
+        "maskedNumber": {
+          "type": "string",
+          "description": "A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number",
+          "x-cds-type": "MaskedAccountString"
+        },
+        "productCategory": {
+          "$ref": "#/definitions/BankingProductCategory"
+        },
+        "productName": {
+          "type": "string",
+          "description": "The unique identifier of the account as defined by the data holder (akin to model number for the account)"
+        }
+      }
+    },
+    "ResponseBankingAccountById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingAccountDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingAccountDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingAccount"
+        },
+        {
+          "type": "object",
+          "x-conditional": [
+            "termDeposit",
+            "creditCard",
+            "loan"
+          ],
+          "properties": {
+            "bsb": {
+              "type": "string",
+              "description": "The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+            },
+            "accountNumber": {
+              "type": "string",
+              "description": "The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces"
+            },
+            "bundleName": {
+              "type": "string",
+              "description": "Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer"
+            },
+            "specificAccountUType": {
+              "type": "string",
+              "description": "The type of structure to present account specific fields.",
+              "enum": [
+                "termDeposit",
+                "creditCard",
+                "loan"
+              ]
+            },
+            "termDeposit": {
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingTermDepositAccount"
+              }
+            },
+            "creditCard": {
+              "$ref": "#/definitions/BankingCreditCardAccount"
+            },
+            "loan": {
+              "$ref": "#/definitions/BankingLoanAccount"
+            },
+            "depositRate": {
+              "type": "string",
+              "description": "current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call",
+              "x-cds-type": "RateString"
+            },
+            "lendingRate": {
+              "type": "string",
+              "description": "The current rate to calculate interest payable being applied to lending balances as it stands at the time of the API call",
+              "x-cds-type": "RateString"
+            },
+            "depositRates": {
+              "description": "Fully described deposit rates for this account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductDepositRate"
+              }
+            },
+            "lendingRates": {
+              "description": "Fully described deposit rates for this account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductLendingRate"
+              }
+            },
+            "features": {
+              "description": "Array of features of the account based on the equivalent structure in Product Reference with the following additional field",
+              "type": "array",
+              "items": {
+                "allOf": [
+                  {
+                    "$ref": "#/definitions/BankingProductFeature"
+                  },
+                  {
+                    "type": "object",
+                    "properties": {
+                      "isActivated": {
+                        "type": "boolean",
+                        "description": "True if the feature is already activated and false if the feature is available for activation. Defaults to true if absent. (note this is an additional field appended to the feature object defined in the Product Reference payload)",
+                        "x-cds-type": "Boolean",
+                        "default": true
+                      }
+                    }
+                  }
+                ]
+              }
+            },
+            "fees": {
+              "description": "Fees and charges applicable to the account based on the equivalent structure in Product Reference",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingProductFee"
+              }
+            },
+            "addresses": {
+              "description": "The addresses for the account to be used for correspondence",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddress"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "BankingTermDepositAccount": {
+      "type": "object",
+      "required": [
+        "lodgementDate",
+        "maturityDate",
+        "maturityInstructions"
+      ],
+      "properties": {
+        "lodgementDate": {
+          "type": "string",
+          "description": "The lodgement date of the original deposit",
+          "x-cds-type": "DateString"
+        },
+        "maturityDate": {
+          "type": "string",
+          "description": "Maturity date for the term deposit",
+          "x-cds-type": "DateString"
+        },
+        "maturityAmount": {
+          "type": "string",
+          "description": "Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated",
+          "x-cds-type": "AmountString"
+        },
+        "maturityCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "maturityInstructions": {
+          "type": "string",
+          "description": "Current instructions on action to be taken at maturity",
+          "enum": [
+            "ROLLED_OVER",
+            "PAID_OUT_AT_MATURITY"
+          ]
+        }
+      }
+    },
+    "BankingCreditCardAccount": {
+      "type": "object",
+      "required": [
+        "minPaymentAmount",
+        "paymentDueAmount",
+        "paymentDueDate"
+      ],
+      "properties": {
+        "minPaymentAmount": {
+          "type": "string",
+          "description": "The minimum payment amount due for the next card payment",
+          "x-cds-type": "AmountString"
+        },
+        "paymentDueAmount": {
+          "type": "string",
+          "description": "The amount due for the next card payment",
+          "x-cds-type": "AmountString"
+        },
+        "paymentCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "paymentDueDate": {
+          "type": "string",
+          "description": "Date that the next payment for the card is due",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingLoanAccount": {
+      "type": "object",
+      "required": [
+        "loanEndDate",
+        "nextInstalmentDate",
+        "repaymentFrequency"
+      ],
+      "properties": {
+        "originalStartDate": {
+          "type": "string",
+          "description": "Optional original start date for the loan",
+          "x-cds-type": "DateString"
+        },
+        "originalLoanAmount": {
+          "type": "string",
+          "description": "Optional original loan value",
+          "x-cds-type": "AmountString"
+        },
+        "originalLoanCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "loanEndDate": {
+          "type": "string",
+          "description": "Date that the loan is due to be repaid in full",
+          "x-cds-type": "DateString"
+        },
+        "nextInstalmentDate": {
+          "type": "string",
+          "description": "Next date that an instalment is required",
+          "x-cds-type": "DateString"
+        },
+        "minInstalmentAmount": {
+          "type": "string",
+          "description": "Minimum amount of next instalment",
+          "x-cds-type": "AmountString"
+        },
+        "minInstalmentCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "maxRedraw": {
+          "type": "string",
+          "description": "Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account",
+          "x-cds-type": "AmountString"
+        },
+        "maxRedrawCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "minRedraw": {
+          "type": "string",
+          "description": "Minimum redraw amount",
+          "x-cds-type": "AmountString"
+        },
+        "minRedrawCurrency": {
+          "type": "string",
+          "description": "If absent assumes AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "offsetAccountEnabled": {
+          "type": "boolean",
+          "description": "Set to true if one or more offset accounts are configured for this loan account",
+          "x-cds-type": "Boolean"
+        },
+        "offsetAccountIds": {
+          "type": "array",
+          "description": "The accountIDs of the configured offset accounts attached to this loan. Only offset accounts that can be accessed under the current authorisation should be included. It is expected behaviour that offsetAccountEnabled is set to true but the offsetAccountIds field is absent or empty. This represents a situation where an offset account exists but details can not be accessed under the current authorisation",
+          "items": {
+            "type": "string",
+            "x-cds-type": "ASCIIString"
+          }
+        },
+        "repaymentType": {
+          "type": "string",
+          "description": "Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST",
+          "enum": [
+            "INTEREST_ONLY",
+            "PRINCIPAL_AND_INTEREST"
+          ],
+          "default": "PRINCIPAL_AND_INTEREST"
+        },
+        "repaymentFrequency": {
+          "type": "string",
+          "description": "The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "ResponseBankingTransactionList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "transactions"
+          ],
+          "properties": {
+            "transactions": {
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingTransaction"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingTransaction": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "isDetailAvailable",
+        "type",
+        "status",
+        "description",
+        "amount",
+        "reference"
+      ],
+      "x-conditional": [
+        "transactionId",
+        "postingDateTime"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "ID of the account for which transactions are provided",
+          "x-cds-type": "ASCIIString"
+        },
+        "transactionId": {
+          "type": "string",
+          "description": "A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type",
+          "x-cds-type": "ASCIIString"
+        },
+        "isDetailAvailable": {
+          "type": "boolean",
+          "description": "True if extended information is available using the transaction detail end point. False if extended data is not available",
+          "x-cds-type": "Boolean"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of the transaction",
+          "enum": [
+            "FEE",
+            "INTEREST_CHARGED",
+            "INTEREST_PAID",
+            "TRANSFER_OUTGOING",
+            "TRANSFER_INCOMING",
+            "PAYMENT",
+            "DIRECT_DEBIT",
+            "OTHER"
+          ]
+        },
+        "status": {
+          "type": "string",
+          "description": "Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction",
+          "enum": [
+            "PENDING",
+            "POSTED"
+          ]
+        },
+        "description": {
+          "type": "string",
+          "description": "The transaction description as applied by the financial institution"
+        },
+        "postingDateTime": {
+          "type": "string",
+          "description": "The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement",
+          "x-cds-type": "DateTimeString"
+        },
+        "valueDateTime": {
+          "type": "string",
+          "description": "Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry",
+          "x-cds-type": "DateTimeString"
+        },
+        "executionDateTime": {
+          "type": "string",
+          "description": "The time the transaction was executed by the originating customer, if available",
+          "x-cds-type": "DateTimeString"
+        },
+        "amount": {
+          "type": "string",
+          "description": "The value of the transaction. Negative values mean money was outgoing from the account",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the transaction amount. AUD assumed if not present",
+          "x-cds-type": "CurrencyString"
+        },
+        "reference": {
+          "type": "string",
+          "description": "The reference for the transaction provided by the originating institution. Empty string if no data provided"
+        },
+        "merchantName": {
+          "type": "string",
+          "description": "Name of the merchant for an outgoing payment to a merchant"
+        },
+        "merchantCategoryCode": {
+          "type": "string",
+          "description": "The merchant category code (or MCC) for an outgoing payment to a merchant"
+        },
+        "billerCode": {
+          "type": "string",
+          "description": "BPAY Biller Code for the transaction (if available)"
+        },
+        "billerName": {
+          "type": "string",
+          "description": "Name of the BPAY biller for the transaction (if available)"
+        },
+        "crn": {
+          "type": "string",
+          "description": "BPAY CRN for the transaction (if available)"
+        },
+        "apcaNumber": {
+          "type": "string",
+          "description": "6 Digit APCA number for the initiating institution"
+        }
+      }
+    },
+    "ResponseBankingTransactionById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingTransactionDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingTransactionDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingTransaction"
+        },
+        {
+          "type": "object",
+          "required": [
+            "extendedData"
+          ],
+          "properties": {
+            "extendedData": {
+              "type": "object",
+              "required": [
+                "service"
+              ],
+              "x-conditional": [
+                "payer",
+                "payee",
+                "extendedDescription"
+              ],
+              "properties": {
+                "payer": {
+                  "type": "string",
+                  "description": "Label of the originating payer. Mandatory for inbound payment"
+                },
+                "payee": {
+                  "type": "string",
+                  "description": "Label of the target PayID.  Mandatory for an outbound payment. The name assigned to the BSB/Account Number or PayID (by the owner of the PayID)"
+                },
+                "extensionUType": {
+                  "type": "string",
+                  "description": "Optional extended data provided specific to transaction originated via NPP",
+                  "enum": [
+                    "x2p101Payload"
+                  ]
+                },
+                "x2p101Payload": {
+                  "required": [
+                    "extendedDescription"
+                  ],
+                  "properties": {
+                    "extendedDescription": {
+                      "type": "string",
+                      "description": "An extended string description. Only present if specified by the extensionUType field"
+                    },
+                    "endToEndId": {
+                      "type": "string",
+                      "description": "An end to end ID for the payment created at initiation"
+                    },
+                    "purposeCode": {
+                      "type": "string",
+                      "description": "Purpose of the payment.  Format is defined by NPP standards for the x2p1.01 overlay service"
+                    }
+                  }
+                },
+                "service": {
+                  "type": "string",
+                  "description": "Identifier of the applicable overlay service. Valid values are: X2P1.01",
+                  "enum": [
+                    "X2P1.01"
+                  ]
+                }
+              }
+            }
+          }
+        }
+      ]
+    },
+    "ResponseBankingAccountsBalanceList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "balances"
+          ],
+          "properties": {
+            "balances": {
+              "description": "The list of balances returned",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/BankingBalance"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "ResponseBankingAccountsBalanceById": {
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingBalance"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingBalance": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "currentBalance",
+        "availableBalance"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "currentBalance": {
+          "type": "string",
+          "description": "The balance of the account at this time. Should align to the balance available via other channels such as Internet Banking. Assumed to be negative if the customer has money owing",
+          "x-cds-type": "AmountString"
+        },
+        "availableBalance": {
+          "type": "string",
+          "description": "Balance representing the amount of funds available for transfer. Assumed to be zero or positive",
+          "x-cds-type": "AmountString"
+        },
+        "creditLimit": {
+          "type": "string",
+          "description": "Object representing the maximum amount of credit that is available for this account. Assumed to be zero if absent",
+          "x-cds-type": "AmountString"
+        },
+        "amortisedLimit": {
+          "type": "string",
+          "description": "Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the balance amounts. If absent assumed to be AUD",
+          "x-cds-type": "CurrencyString"
+        },
+        "purses": {
+          "description": "Optional array of balances for the account in other currencies. Included to support accounts that support multi-currency purses such as Travel Cards",
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingBalancePurse"
+          }
+        }
+      }
+    },
+    "BankingBalancePurse": {
+      "type": "object",
+      "required": [
+        "amount"
+      ],
+      "properties": {
+        "amount": {
+          "type": "string",
+          "description": "The balance available for this additional currency purse",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the purse",
+          "x-cds-type": "CurrencyString"
+        }
+      }
+    },
+    "ResponseBankingPayeeList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "payees"
+          ],
+          "properties": {
+            "payees": {
+              "type": "array",
+              "description": "The list of payees returned",
+              "items": {
+                "$ref": "#/definitions/BankingPayee"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "ResponseBankingPayeeById": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "$ref": "#/definitions/BankingPayeeDetail"
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "BankingPayee": {
+      "type": "object",
+      "required": [
+        "payeeId",
+        "nickname",
+        "type"
+      ],
+      "properties": {
+        "payeeId": {
+          "type": "string",
+          "description": "ID of the payee adhering to the rules of ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "nickname": {
+          "type": "string",
+          "description": "The short display name of the payee as provided by the customer"
+        },
+        "description": {
+          "type": "string",
+          "description": "A description of the payee provided by the customer"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY",
+          "enum": [
+            "DOMESTIC",
+            "INTERNATIONAL",
+            "BILLER"
+          ]
+        },
+        "creationDate": {
+          "type": "string",
+          "description": "The date the payee was created by the customer",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingPayeeDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/BankingPayee"
+        },
+        {
+          "type": "object",
+          "required": [
+            "payeeUType"
+          ],
+          "x-conditional": [
+            "domestic",
+            "biller",
+            "international"
+          ],
+          "properties": {
+            "payeeUType": {
+              "type": "string",
+              "description": "Type of object included that describes the payee in detail",
+              "enum": [
+                "domestic",
+                "biller",
+                "international"
+              ]
+            },
+            "domestic": {
+              "$ref": "#/definitions/BankingDomesticPayee"
+            },
+            "biller": {
+              "$ref": "#/definitions/BankingBillerPayee"
+            },
+            "international": {
+              "$ref": "#/definitions/BankingInternationalPayee"
+            }
+          }
+        }
+      ]
+    },
+    "BankingDomesticPayee": {
+      "type": "object",
+      "required": [
+        "payeeAccountUType"
+      ],
+      "x-conditional": [
+        "account",
+        "card",
+        "payId"
+      ],
+      "properties": {
+        "payeeAccountUType": {
+          "type": "string",
+          "description": "Type of account object included. Valid values are: **account** A standard Australian account defined by BSB/Account Number. **card** A credit or charge card to pay to (note that PANs are masked). **payId** A PayID recognised by NPP",
+          "enum": [
+            "account",
+            "card",
+            "payId"
+          ]
+        },
+        "account": {
+          "$ref": "#/definitions/BankingDomesticPayeeAccount"
+        },
+        "card": {
+          "$ref": "#/definitions/BankingDomesticPayeeCard"
+        },
+        "payId": {
+          "$ref": "#/definitions/BankingDomesticPayeePayId"
+        }
+      }
+    },
+    "BankingDomesticPayeeAccount": {
+      "type": "object",
+      "required": [
+        "bsb",
+        "accountNumber"
+      ],
+      "properties": {
+        "accountName": {
+          "type": "string",
+          "description": "Name of the account to pay to"
+        },
+        "bsb": {
+          "type": "string",
+          "description": "BSB of the account to pay to"
+        },
+        "accountNumber": {
+          "type": "string",
+          "description": "Number of the account to pay to"
+        }
+      }
+    },
+    "BankingDomesticPayeeCard": {
+      "type": "object",
+      "required": [
+        "cardNumber"
+      ],
+      "properties": {
+        "cardNumber": {
+          "type": "string",
+          "description": "Name of the account to pay to",
+          "x-cds-type": "MaskedPANString"
+        }
+      }
+    },
+    "BankingDomesticPayeePayId": {
+      "type": "object",
+      "required": [
+        "identifier",
+        "type"
+      ],
+      "properties": {
+        "name": {
+          "type": "string",
+          "description": "The name assigned to the PayID by the owner of the PayID"
+        },
+        "identifier": {
+          "type": "string",
+          "description": "The identifier of the PayID (dependent on type)"
+        },
+        "type": {
+          "type": "string",
+          "description": "The type of the PayID",
+          "enum": [
+            "EMAIL",
+            "TELEPHONE",
+            "ABN",
+            "ORG_IDENTIFIER"
+          ]
+        }
+      }
+    },
+    "BankingBillerPayee": {
+      "type": "object",
+      "required": [
+        "billerCode",
+        "billerName"
+      ],
+      "x-conditional": [
+        "crn"
+      ],
+      "properties": {
+        "billerCode": {
+          "type": "string",
+          "description": "BPAY Biller Code of the Biller"
+        },
+        "crn": {
+          "type": "string",
+          "description": "BPAY CRN of the Biller. If the contents of the CRN match the format of a Credit Card PAN then it should be masked using the rules applicable for the MaskedPANString common type"
+        },
+        "billerName": {
+          "type": "string",
+          "description": "Name of the Biller"
+        }
+      }
+    },
+    "BankingInternationalPayee": {
+      "type": "object",
+      "required": [
+        "beneficiaryDetails",
+        "bankDetails"
+      ],
+      "properties": {
+        "beneficiaryDetails": {
+          "type": "object",
+          "required": [
+            "country"
+          ],
+          "properties": {
+            "name": {
+              "type": "string",
+              "description": "Name of the beneficiary"
+            },
+            "country": {
+              "type": "string",
+              "description": "Country where the beneficiary resides. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+              "x-cds-type": "ExternalRef"
+            },
+            "message": {
+              "type": "string",
+              "description": "Response message for the payment"
+            }
+          }
+        },
+        "bankDetails": {
+          "type": "object",
+          "required": [
+            "country",
+            "accountNumber"
+          ],
+          "properties": {
+            "country": {
+              "type": "string",
+              "description": "Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code",
+              "x-cds-type": "ExternalRef"
+            },
+            "accountNumber": {
+              "type": "string",
+              "description": "Account Targeted for payment"
+            },
+            "bankAddress": {
+              "type": "object",
+              "required": [
+                "name",
+                "address"
+              ],
+              "properties": {
+                "name": {
+                  "type": "string",
+                  "description": "Name of the recipient Bank"
+                },
+                "address": {
+                  "type": "string",
+                  "description": "Address of the recipient Bank"
+                }
+              }
+            },
+            "beneficiaryBankBIC": {
+              "type": "string",
+              "description": "Swift bank code.  Aligns with standard [ISO 9362](https://www.iso.org/standard/60390.html)",
+              "x-cds-type": "ExternalRef"
+            },
+            "fedWireNumber": {
+              "type": "string",
+              "description": "Number for Fedwire payment (Federal Reserve Wire Network)"
+            },
+            "sortCode": {
+              "type": "string",
+              "description": "Sort code used for account identification in some jurisdictions"
+            },
+            "chipNumber": {
+              "type": "string",
+              "description": "Number for the Clearing House Interbank Payments System"
+            },
+            "routingNumber": {
+              "type": "string",
+              "description": "International bank routing number"
+            },
+            "legalEntityIdentifier": {
+              "type": "string",
+              "description": "The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)",
+              "x-cds-type": "ExternalRef"
+            }
+          }
+        }
+      }
+    },
+    "ResponseBankingDirectDebitAuthorisationList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "directDebitAuthorisations"
+          ],
+          "properties": {
+            "directDebitAuthorisations": {
+              "type": "array",
+              "description": "The list of authorisations returned",
+              "items": {
+                "$ref": "#/definitions/BankingDirectDebit"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingDirectDebit": {
+      "type": "object",
+      "required": [
+        "accountId",
+        "authorisedEntity"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "A unique ID of the account adhering to the standards for ID permanence.",
+          "x-cds-type": "ASCIIString"
+        },
+        "authorisedEntity": {
+          "$ref": "#/definitions/BankingAuthorisedEntity"
+        },
+        "lastDebitDateTime": {
+          "type": "string",
+          "description": "The date and time of the last debit executed under this authorisation",
+          "x-cds-type": "DateTimeString"
+        },
+        "lastDebitAmount": {
+          "type": "string",
+          "description": "The amount of the last debit executed under this authorisation",
+          "x-cds-type": "AmountString"
+        }
+      }
+    },
+    "BankingAuthorisedEntity": {
+      "type": "object",
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the authorised entity derived from previously executed direct debits"
+        },
+        "financialInstitution": {
+          "type": "string",
+          "description": "Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme"
+        },
+        "abn": {
+          "type": "string",
+          "description": "Australian Business Number for the authorised entity"
+        },
+        "acn": {
+          "type": "string",
+          "description": "Australian Company Number for the authorised entity"
+        },
+        "arbn": {
+          "type": "string",
+          "description": "Australian Registered Body Number for the authorised entity"
+        }
+      }
+    },
+    "ResponseBankingScheduledPaymentsList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links",
+        "meta"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "scheduledPayments"
+          ],
+          "properties": {
+            "scheduledPayments": {
+              "type": "array",
+              "description": "The list of scheduled payments to return",
+              "items": {
+                "$ref": "#/definitions/BankingScheduledPayment"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/LinksPaginated"
+        },
+        "meta": {
+          "$ref": "#/definitions/MetaPaginated"
+        }
+      }
+    },
+    "BankingScheduledPayment": {
+      "type": "object",
+      "required": [
+        "scheduledPaymentId",
+        "payerReference",
+        "payeeReference",
+        "status",
+        "from",
+        "paymentSet",
+        "recurrence"
+      ],
+      "properties": {
+        "scheduledPaymentId": {
+          "type": "string",
+          "description": "A unique ID of the scheduled payment adhering to the standards for ID permanence",
+          "x-cds-type": "ASCIIString"
+        },
+        "nickname": {
+          "type": "string",
+          "description": "The short display name of the payee as provided by the customer"
+        },
+        "payerReference": {
+          "type": "string",
+          "description": "The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payer’s account. Empty string if no data provided"
+        },
+        "payeeReference": {
+          "type": "string",
+          "description": "The reference for the transaction that will be provided by the originating institution. Empty string if no data provided"
+        },
+        "status": {
+          "type": "string",
+          "description": "Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.",
+          "enum": [
+            "ACTIVE",
+            "SKIP",
+            "INACTIVE"
+          ]
+        },
+        "from": {
+          "$ref": "#/definitions/BankingScheduledPaymentFrom"
+        },
+        "paymentSet": {
+          "type": "array",
+          "items": {
+            "$ref": "#/definitions/BankingScheduledPaymentSet"
+          }
+        },
+        "recurrence": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrence"
+        }
+      }
+    },
+    "BankingScheduledPaymentSet": {
+      "description": "The set of payment amounts and destination accounts for this payment accommodating multi-part payments. A single entry indicates a simple payment with one destination account. Must have at least one entry",
+      "required": [
+        "to"
+      ],
+      "x-conditional": [
+        "amount"
+      ],
+      "properties": {
+        "to": {
+          "$ref": "#/definitions/BankingScheduledPaymentTo"
+        },
+        "isAmountCalculated": {
+          "type": "boolean",
+          "description": "Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed",
+          "x-cds-type": "Boolean"
+        },
+        "amount": {
+          "type": "string",
+          "description": "The amount of the next payment if known. Mandatory unless the isAmountCalculated field is set to true. Must be zero or positive if present",
+          "x-cds-type": "AmountString"
+        },
+        "currency": {
+          "type": "string",
+          "description": "The currency for the payment. AUD assumed if not present",
+          "x-cds-type": "CurrencyString"
+        }
+      }
+    },
+    "BankingScheduledPaymentTo": {
+      "type": "object",
+      "description": "Object containing details of the destination of the payment. Used to specify a variety of payment destination types",
+      "required": [
+        "toUType"
+      ],
+      "x-conditional": [
+        "accountId",
+        "payeeId",
+        "domestic",
+        "biller",
+        "international"
+      ],
+      "properties": {
+        "toUType": {
+          "type": "string",
+          "description": "The type of object provided that specifies the destination of the funds for the payment.",
+          "enum": [
+            "accountId",
+            "payeeId",
+            "domestic",
+            "biller",
+            "international"
+          ]
+        },
+        "accountId": {
+          "type": "string",
+          "description": "Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent",
+          "x-cds-type": "ASCIIString"
+        },
+        "payeeId": {
+          "type": "string",
+          "description": "Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead",
+          "x-cds-type": "ASCIIString"
+        },
+        "domestic": {
+          "$ref": "#/definitions/BankingDomesticPayee"
+        },
+        "biller": {
+          "$ref": "#/definitions/BankingBillerPayee"
+        },
+        "international": {
+          "$ref": "#/definitions/BankingInternationalPayee"
+        }
+      }
+    },
+    "BankingScheduledPaymentFrom": {
+      "type": "object",
+      "description": "Object containing details of the source of the payment. Currently only specifies an account ID but provided as an object to facilitate future extensibility and consistency with the to object",
+      "required": [
+        "accountId"
+      ],
+      "properties": {
+        "accountId": {
+          "type": "string",
+          "description": "ID of the account that is the source of funds for the payment",
+          "x-cds-type": "ASCIIString"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrence": {
+      "type": "object",
+      "description": "Object containing the detail of the schedule for the payment",
+      "required": [
+        "recurrenceUType"
+      ],
+      "x-conditional": [
+        "onceOff",
+        "intervalSchedule",
+        "lastWeekDay",
+        "eventBased"
+      ],
+      "properties": {
+        "nextPaymentDate": {
+          "type": "string",
+          "description": "The date of the next payment under the recurrence schedule",
+          "x-cds-type": "DateString"
+        },
+        "recurrenceUType": {
+          "type": "string",
+          "description": "The type of recurrence used to define the schedule",
+          "enum": [
+            "onceOff",
+            "intervalSchedule",
+            "lastWeekDay",
+            "eventBased"
+          ]
+        },
+        "onceOff": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceOnceOff"
+        },
+        "intervalSchedule": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceIntervalSchedule"
+        },
+        "lastWeekDay": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceLastWeekday"
+        },
+        "eventBased": {
+          "$ref": "#/definitions/BankingScheduledPaymentRecurrenceEventBased"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceOnceOff": {
+      "type": "object",
+      "description": "Indicates that the payment is a once off payment on a specific future date. Mandatory if recurrenceUType is set to onceOff",
+      "required": [
+        "paymentDate"
+      ],
+      "properties": {
+        "paymentDate": {
+          "type": "string",
+          "description": "The scheduled date for the once off payment",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceIntervalSchedule": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined by a series of intervals. Mandatory if recurrenceUType is set to intervalSchedule",
+      "required": [
+        "intervals"
+      ],
+      "properties": {
+        "finalPaymentDate": {
+          "type": "string",
+          "description": "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "DateString"
+        },
+        "paymentsRemaining": {
+          "type": "integer",
+          "description": "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "PositiveInteger"
+        },
+        "nonBusinessDayTreatment": {
+          "type": "string",
+          "description": "Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored",
+          "enum": [
+            "AFTER",
+            "BEFORE",
+            "ON",
+            "ONLY"
+          ],
+          "default": "ON"
+        },
+        "intervals": {
+          "type": "array",
+          "description": "An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry",
+          "items": {
+            "$ref": "#/definitions/BankingScheduledPaymentInterval"
+          }
+        }
+      }
+    },
+    "BankingScheduledPaymentInterval": {
+      "type": "object",
+      "required": [
+        "interval"
+      ],
+      "properties": {
+        "interval": {
+          "type": "string",
+          "description": "An interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)  (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+          "x-cds-type": "ExternalRef"
+        },
+        "dayInInterval": {
+          "type": "string",
+          "description": "Uses an interval to define the ordinal day within the interval defined by the interval field on which the payment occurs. If the resulting duration is 0 days in length or larger than the number of days in the interval then the payment will occur on the last day of the interval. A duration of 1 day indicates the first day of the interval. If absent the assumed value is P1D. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. The first day of a week is considered to be Monday.",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceLastWeekday": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined according to the last occurrence of a specific weekday in an interval. Mandatory if recurrenceUType is set to lastWeekDay",
+      "required": [
+        "interval",
+        "lastWeekDay"
+      ],
+      "properties": {
+        "finalPaymentDate": {
+          "type": "string",
+          "description": "The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "DateString"
+        },
+        "paymentsRemaining": {
+          "type": "integer",
+          "description": "Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely",
+          "x-cds-type": "PositiveInteger"
+        },
+        "interval": {
+          "type": "string",
+          "description": "The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate",
+          "x-cds-type": "ExternalRef"
+        },
+        "lastWeekDay": {
+          "type": "string",
+          "description": "The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval.",
+          "enum": [
+            "MON",
+            "TUE",
+            "WED",
+            "THU",
+            "FRI",
+            "SAT",
+            "SUN"
+          ]
+        },
+        "nonBusinessDayTreatment": {
+          "type": "string",
+          "description": "Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored",
+          "enum": [
+            "AFTER",
+            "BEFORE",
+            "ON",
+            "ONLY"
+          ],
+          "default": "ON"
+        }
+      }
+    },
+    "BankingScheduledPaymentRecurrenceEventBased": {
+      "type": "object",
+      "description": "Indicates that the schedule of payments is defined according to an external event that cannot be predetermined. Mandatory if recurrenceUType is set to eventBased",
+      "required": [
+        "description"
+      ],
+      "properties": {
+        "description": {
+          "type": "string",
+          "description": "Description of the event and conditions that will result in the payment. Expected to be formatted for display to a customer"
+        }
+      }
+    },
+    "ResponseCommonDiscoveryStatus": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "status",
+            "updateTime"
+          ],
+          "x-conditional": [
+            "explanation"
+          ],
+          "properties": {
+            "status": {
+              "type": "string",
+              "description": "Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)",
+              "enum": [
+                "OK",
+                "PARTIAL_FAILURE",
+                "UNAVAILABLE",
+                "SCHEDULED_OUTAGE"
+              ]
+            },
+            "explanation": {
+              "type": "string",
+              "description": "Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK"
+            },
+            "detectionTime": {
+              "type": "string",
+              "description": "The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE",
+              "x-cds-type": "DateTimeString"
+            },
+            "expectedResolutionTime": {
+              "type": "string",
+              "description": "The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.",
+              "x-cds-type": "DateTimeString"
+            },
+            "updateTime": {
+              "type": "string",
+              "description": "The date and time that this status was last updated by the Data Holder.",
+              "x-cds-type": "DateTimeString"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseDiscoveryOutagesList": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "outages"
+          ],
+          "properties": {
+            "outages": {
+              "description": "List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled",
+              "type": "array",
+              "items": {
+                "$ref": "#/definitions/DiscoveryOutage"
+              }
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "DiscoveryOutage": {
+      "type": "object",
+      "required": [
+        "outageTime",
+        "duration",
+        "explanation"
+      ],
+      "properties": {
+        "outageTime": {
+          "type": "string",
+          "description": "Date and time that the outage is scheduled to begin",
+          "x-cds-type": "DateTimeString"
+        },
+        "duration": {
+          "type": "string",
+          "description": "Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
+          "x-cds-type": "ExternalRef"
+        },
+        "isPartial": {
+          "type": "boolean",
+          "description": "Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage"
+        },
+        "explanation": {
+          "type": "string",
+          "description": "Provides an explanation of the current outage that can be displayed to an end customer"
+        }
+      }
+    },
+    "ResponseCommonCustomer": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "x-conditional": [
+        "person",
+        "organisation"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "customerUType"
+          ],
+          "properties": {
+            "customerUType": {
+              "type": "string",
+              "description": "The type of customer object that is present",
+              "enum": [
+                "person",
+                "organisation"
+              ]
+            },
+            "person": {
+              "$ref": "#/definitions/CommonPerson"
+            },
+            "organisation": {
+              "$ref": "#/definitions/CommonOrganisation"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "ResponseCommonCustomerDetail": {
+      "type": "object",
+      "required": [
+        "data",
+        "links"
+      ],
+      "x-conditional": [
+        "person",
+        "organisation"
+      ],
+      "properties": {
+        "data": {
+          "type": "object",
+          "required": [
+            "customerUType"
+          ],
+          "properties": {
+            "customerUType": {
+              "type": "string",
+              "description": "The type of customer object that is present",
+              "enum": [
+                "person",
+                "organisation"
+              ]
+            },
+            "person": {
+              "$ref": "#/definitions/CommonPersonDetail"
+            },
+            "organisation": {
+              "$ref": "#/definitions/CommonOrganisationDetail"
+            }
+          }
+        },
+        "links": {
+          "$ref": "#/definitions/Links"
+        },
+        "meta": {
+          "$ref": "#/definitions/Meta"
+        }
+      }
+    },
+    "CommonPerson": {
+      "type": "object",
+      "required": [
+        "lastName",
+        "middleNames"
+      ],
+      "properties": {
+        "lastUpdateTime": {
+          "type": "string",
+          "description": "The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data",
+          "x-cds-type": "DateTimeString"
+        },
+        "firstName": {
+          "type": "string",
+          "description": "For people with single names this field need not be present.  The single name should be in the lastName field"
+        },
+        "lastName": {
+          "type": "string",
+          "description": "For people with single names the single name should be in this field"
+        },
+        "middleNames": {
+          "type": "array",
+          "description": "Field is mandatory but array may be empty",
+          "items": {
+            "type": "string"
+          }
+        },
+        "prefix": {
+          "type": "string",
+          "description": "Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)"
+        },
+        "suffix": {
+          "type": "string",
+          "description": "Used for a trailing suffix to the name (e.g. Jr)"
+        },
+        "occupationCode": {
+          "type": "string",
+          "description": "Value is a valid [ANZSCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification."
+        }
+      }
+    },
+    "CommonPersonDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonPerson"
+        },
+        {
+          "type": "object",
+          "required": [
+            "phoneNumbers",
+            "emailAddresses",
+            "physicalAddresses"
+          ],
+          "properties": {
+            "phoneNumbers": {
+              "type": "array",
+              "description": "Array is mandatory but may be empty if no phone numbers are held",
+              "items": {
+                "$ref": "#/definitions/CommonPhoneNumber"
+              }
+            },
+            "emailAddresses": {
+              "type": "array",
+              "description": "May be empty",
+              "items": {
+                "$ref": "#/definitions/CommonEmailAddress"
+              }
+            },
+            "physicalAddresses": {
+              "type": "array",
+              "description": "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddressWithPurpose"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "CommonOrganisation": {
+      "type": "object",
+      "required": [
+        "agentLastName",
+        "agentRole",
+        "businessName",
+        "organisationType"
+      ],
+      "properties": {
+        "lastUpdateTime": {
+          "type": "string",
+          "description": "The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data",
+          "x-cds-type": "DateTimeString"
+        },
+        "agentFirstName": {
+          "type": "string",
+          "description": "The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field"
+        },
+        "agentLastName": {
+          "type": "string",
+          "description": "The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field"
+        },
+        "agentRole": {
+          "type": "string",
+          "description": "The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known"
+        },
+        "businessName": {
+          "type": "string",
+          "description": "Name of the organisation"
+        },
+        "legalName": {
+          "type": "string",
+          "description": "Legal name, if different to the business name"
+        },
+        "shortName": {
+          "type": "string",
+          "description": "Short name used for communication, if different to the business name"
+        },
+        "abn": {
+          "type": "string",
+          "description": "Australian Business Number for the organisation"
+        },
+        "acn": {
+          "type": "string",
+          "description": "Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type"
+        },
+        "isACNCRegistered": {
+          "type": "boolean",
+          "description": "True if registered with the ACNC.  False if not. Absent or null if not confirmed.",
+          "x-cds-type": "Boolean"
+        },
+        "industryCode": {
+          "type": "string",
+          "description": "[ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation."
+        },
+        "organisationType": {
+          "type": "string",
+          "description": "Legal organisation type",
+          "enum": [
+            "SOLE_TRADER",
+            "COMPANY",
+            "PARTNERSHIP",
+            "TRUST",
+            "GOVERNMENT_ENTITY",
+            "OTHER"
+          ]
+        },
+        "registeredCountry": {
+          "type": "string",
+          "description": "Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent",
+          "x-cds-type": "ExternalRef"
+        },
+        "establishmentDate": {
+          "type": "string",
+          "description": "The date the organisation described was established",
+          "x-cds-type": "DateString"
+        }
+      }
+    },
+    "CommonOrganisationDetail": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonOrganisation"
+        },
+        {
+          "type": "object",
+          "required": [
+            "physicalAddresses"
+          ],
+          "properties": {
+            "physicalAddresses": {
+              "type": "array",
+              "description": "Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
+              "items": {
+                "$ref": "#/definitions/CommonPhysicalAddressWithPurpose"
+              }
+            }
+          }
+        }
+      ]
+    },
+    "CommonPhoneNumber": {
+      "type": "object",
+      "required": [
+        "purpose",
+        "number",
+        "fullNumber"
+      ],
+      "x-conditional": [
+        "areaCode"
+      ],
+      "properties": {
+        "isPreferred": {
+          "type": "boolean",
+          "description": "May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present",
+          "x-cds-type": "Boolean"
+        },
+        "purpose": {
+          "type": "string",
+          "description": "The purpose of the number as specified by the customer",
+          "enum": [
+            "MOBILE",
+            "HOME",
+            "WORK",
+            "OTHER",
+            "INTERNATIONAL",
+            "UNSPECIFIED"
+          ]
+        },
+        "countryCode": {
+          "type": "string",
+          "description": "If absent, assumed to be Australia (+61). The + should be included"
+        },
+        "areaCode": {
+          "type": "string",
+          "description": "Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted."
+        },
+        "number": {
+          "type": "string",
+          "description": "The actual phone number, with leading zeros as appropriate"
+        },
+        "extension": {
+          "type": "string",
+          "description": "An extension number (if applicable)"
+        },
+        "fullNumber": {
+          "type": "string",
+          "description": "Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of [RFC 3966](https://www.ietf.org/rfc/rfc3966.txt)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "CommonEmailAddress": {
+      "type": "object",
+      "required": [
+        "purpose",
+        "address"
+      ],
+      "properties": {
+        "isPreferred": {
+          "type": "boolean",
+          "description": "May be true for one and only one email record in the collection. Denotes the default email address",
+          "x-cds-type": "Boolean"
+        },
+        "purpose": {
+          "type": "string",
+          "description": "The purpose for the email, as specified by the customer (Enumeration)",
+          "enum": [
+            "WORK",
+            "HOME",
+            "OTHER",
+            "UNSPECIFIED"
+          ]
+        },
+        "address": {
+          "type": "string",
+          "description": "A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)",
+          "x-cds-type": "ExternalRef"
+        }
+      }
+    },
+    "CommonPhysicalAddressWithPurpose": {
+      "allOf": [
+        {
+          "$ref": "#/definitions/CommonPhysicalAddress"
+        },
+        {
+          "type": "object",
+          "required": [
+            "purpose"
+          ],
+          "properties": {
+            "purpose": {
+              "type": "string",
+              "description": "Enumeration of values indicating the purpose of the physical address",
+              "enum": [
+                "REGISTERED",
+                "MAIL",
+                "PHYSICAL",
+                "WORK",
+                "OTHER"
+              ]
+            }
+          }
+        }
+      ]
+    },
+    "CommonPhysicalAddress": {
+      "type": "object",
+      "required": [
+        "addressUType"
+      ],
+      "x-conditional": [
+        "simple",
+        "paf"
+      ],
+      "properties": {
+        "addressUType": {
+          "type": "string",
+          "description": "The type of address object present",
+          "enum": [
+            "simple",
+            "paf"
+          ]
+        },
+        "simple": {
+          "$ref": "#/definitions/CommonSimpleAddress"
+        },
+        "paf": {
+          "$ref": "#/definitions/CommonPAFAddress"
+        }
+      }
+    },
+    "CommonSimpleAddress": {
+      "type": "object",
+      "required": [
+        "addressLine1",
+        "city",
+        "state"
+      ],
+      "x-conditional": [
+        "postcode"
+      ],
+      "properties": {
+        "mailingName": {
+          "type": "string",
+          "description": "Name of the individual or business formatted for inclusion in an address used for physical mail"
+        },
+        "addressLine1": {
+          "type": "string",
+          "description": "First line of the standard address object"
+        },
+        "addressLine2": {
+          "type": "string",
+          "description": "Second line of the standard address object"
+        },
+        "addressLine3": {
+          "type": "string",
+          "description": "Third line of the standard address object"
+        },
+        "postcode": {
+          "type": "string",
+          "description": "Mandatory for Australian addresses"
+        },
+        "city": {
+          "type": "string",
+          "description": "Name of the city or locality"
+        },
+        "state": {
+          "type": "string",
+          "description": "Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT"
+        },
+        "country": {
+          "type": "string",
+          "description": "A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.",
+          "x-cds-type": "ExternalRef",
+          "default": "AUS"
+        }
+      }
+    },
+    "CommonPAFAddress": {
+      "type": "object",
+      "description": "Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)",
+      "required": [
+        "localityName",
+        "postcode",
+        "state"
+      ],
+      "properties": {
+        "dpid": {
+          "type": "string",
+          "description": "Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier"
+        },
+        "thoroughfareNumber1": {
+          "type": "integer",
+          "description": "Thoroughfare number for a property (first number in a property ranged address)",
+          "x-cds-type": "PositiveInteger"
+        },
+        "thoroughfareNumber1Suffix": {
+          "type": "string",
+          "description": "Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated"
+        },
+        "thoroughfareNumber2": {
+          "type": "integer",
+          "description": "Second thoroughfare number (only used if the property has a ranged address eg 23-25)",
+          "x-cds-type": "PositiveInteger"
+        },
+        "thoroughfareNumber2Suffix": {
+          "type": "string",
+          "description": "Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated"
+        },
+        "flatUnitType": {
+          "type": "string",
+          "description": "Type of flat or unit for the address"
+        },
+        "flatUnitNumber": {
+          "type": "string",
+          "description": "Unit number (including suffix, if applicable)"
+        },
+        "floorLevelType": {
+          "type": "string",
+          "description": "Type of floor or level for the address"
+        },
+        "floorLevelNumber": {
+          "type": "string",
+          "description": "Floor or level number (including alpha characters)"
+        },
+        "lotNumber": {
+          "type": "string",
+          "description": "Allotment number for the address"
+        },
+        "buildingName1": {
+          "type": "string",
+          "description": "Building/Property name 1"
+        },
+        "buildingName2": {
+          "type": "string",
+          "description": "Building/Property name 2"
+        },
+        "streetName": {
+          "type": "string",
+          "description": "The name of the street"
+        },
+        "streetType": {
+          "type": "string",
+          "description": "The street type. Valid enumeration defined by Australia Post PAF code file"
+        },
+        "streetSuffix": {
+          "type": "string",
+          "description": "The street type suffix. Valid enumeration defined by Australia Post PAF code file"
+        },
+        "postalDeliveryType": {
+          "type": "string",
+          "description": "Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file"
+        },
+        "postalDeliveryNumber": {
+          "type": "integer",
+          "description": "Postal delivery number if the address is a postal delivery type",
+          "x-cds-type": "PositiveInteger"
+        },
+        "postalDeliveryNumberPrefix": {
+          "type": "string",
+          "description": "Postal delivery number prefix related to the postal delivery number"
+        },
+        "postalDeliveryNumberSuffix": {
+          "type": "string",
+          "description": "Postal delivery number suffix related to the postal delivery number"
+        },
+        "localityName": {
+          "type": "string",
+          "description": "Full name of locality"
+        },
+        "postcode": {
+          "type": "string",
+          "description": "Postcode for the locality"
+        },
+        "state": {
+          "type": "string",
+          "description": "State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT"
+        }
+      }
+    },
+    "Links": {
+      "type": "object",
+      "required": [
+        "self"
+      ],
+      "properties": {
+        "self": {
+          "type": "string",
+          "description": "Fully qualified link that generated the current response document",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "Meta": {
+      "type": "object"
+    },
+    "LinksPaginated": {
+      "type": "object",
+      "required": [
+        "self"
+      ],
+      "x-conditional": [
+        "prev",
+        "next",
+        "first",
+        "last"
+      ],
+      "properties": {
+        "self": {
+          "type": "string",
+          "description": "Fully qualified link that generated the current response document",
+          "x-cds-type": "URIString"
+        },
+        "first": {
+          "type": "string",
+          "description": "URI to the first page of this set. Mandatory if this response is not the first page",
+          "x-cds-type": "URIString"
+        },
+        "prev": {
+          "type": "string",
+          "description": "URI to the previous page of this set. Mandatory if this response is not the first page",
+          "x-cds-type": "URIString"
+        },
+        "next": {
+          "type": "string",
+          "description": "URI to the next page of this set. Mandatory if this response is not the last page",
+          "x-cds-type": "URIString"
+        },
+        "last": {
+          "type": "string",
+          "description": "URI to the last page of this set. Mandatory if this response is not the last page",
+          "x-cds-type": "URIString"
+        }
+      }
+    },
+    "MetaPaginated": {
+      "type": "object",
+      "required": [
+        "totalRecords",
+        "totalPages"
+      ],
+      "properties": {
+        "totalRecords": {
+          "type": "integer",
+          "description": "The total number of records in the full set. See [pagination](#pagination).",
+          "x-cds-type": "NaturalNumber"
+        },
+        "totalPages": {
+          "type": "integer",
+          "description": "The total number of pages in the full set. See [pagination](#pagination).",
+          "x-cds-type": "NaturalNumber"
+        }
+      }
+    },
+    "ResponseErrorList": {
+      "type": "object",
+      "required": [
+        "errors"
+      ],
+      "properties": {
+        "errors": {
+          "type": "array",
+          "items": {
+            "type": "object",
+            "required": [
+              "code",
+              "title",
+              "detail"
+            ],
+            "properties": {
+              "code": {
+                "type": "string",
+                "description": "Must be one of the following: 0001 – Account not able to be found"
+              },
+              "title": {
+                "type": "string",
+                "description": "Must be one of the following: Invalid account"
+              },
+              "detail": {
+                "type": "string",
+                "description": "ID of the account not found"
+              },
+              "meta": {
+                "type": "object",
+                "description": "Optional additional data for specific error types"
+              }
+            }
+          }
+        }
+      }
+    },
+    "BankingProductCategory": {
+      "type": "string",
+      "description": "The category to which a product or account belongs. See [here](#product-categories) for more details",
+      "enum": [
+        "TRANS_AND_SAVINGS_ACCOUNTS",
+        "TERM_DEPOSITS",
+        "TRAVEL_CARDS",
+        "REGULATED_TRUST_ACCOUNTS",
+        "RESIDENTIAL_MORTGAGES",
+        "CRED_AND_CHRG_CARDS",
+        "PERS_LOANS",
+        "MARGIN_LOANS",
+        "LEASES",
+        "TRADE_FINANCE",
+        "OVERDRAFTS",
+        "BUSINESS_LOANS"
+      ]
+    }
+  }
+}
diff --git a/client-cli/pom.xml b/client-cli/pom.xml
index f685d54..c121797 100644
--- a/client-cli/pom.xml
+++ b/client-cli/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>client-cli</artifactId>
     <name>Client CLI</name>
diff --git a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingAccounts.java b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingAccounts.java
index a6dba37..590d193 100644
--- a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingAccounts.java
+++ b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingAccounts.java
@@ -109,10 +109,10 @@ public String getTransactions(@ShellOption(defaultValue = ShellOption.NULL) Bool
 
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingTransactionList response = api.getTransactions(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text);
+        ResponseBankingTransactionList response = api.getTransactions(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.getTransactionsCall(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text, null);
+            okhttp3.Call call = api.getTransactionsCall(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "getTransactions", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
@@ -139,10 +139,10 @@ public String listAccounts(@ShellOption(defaultValue = ShellOption.NULL) Boolean
 
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingAccountList response = api.listAccounts(isOwned, openStatus, page, pageSize, productCategory);
+        ResponseBankingAccountList response = api.listAccounts(productCategory, openStatus, isOwned, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listAccountsCall(isOwned, openStatus, page, pageSize, productCategory, null);
+            okhttp3.Call call = api.listAccountsCall(productCategory, openStatus, isOwned, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listAccounts", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
@@ -160,10 +160,10 @@ public String listBalance(@ShellOption(defaultValue = ShellOption.NULL) Boolean
             accountId);
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingAccountsBalanceById response = api.listBalance(accountId);
+        ResponseBankingAccountsBalanceById response = api.getBalance(accountId);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listBalanceCall(accountId, null);
+            okhttp3.Call call = api.getBalanceCall(accountId, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listBalance", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
@@ -189,10 +189,10 @@ public String listBalancesBulk(@ShellOption(defaultValue = ShellOption.NULL) Boo
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
         ResponseBankingAccountsBalanceList response =
-            api.listBalancesBulk(isOwned, openStatus, page, pageSize, productCategory);
+            api.listBalancesBulk(productCategory, openStatus, isOwned, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listBalancesBulkCall(isOwned, openStatus, page, pageSize, productCategory, null);
+            okhttp3.Call call = api.listBalancesBulkCall(productCategory, openStatus, isOwned, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listBalancesBulk", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
diff --git a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingDirectDebits.java b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingDirectDebits.java
index 99dc2a0..7e5a4b9 100644
--- a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingDirectDebits.java
+++ b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingDirectDebits.java
@@ -77,10 +77,10 @@ public String listDirectDebitsBulk(@ShellOption(defaultValue = ShellOption.NULL)
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
         ResponseBankingDirectDebitAuthorisationList response =
-            api.listDirectDebitsBulk(isOwned, openStatus, page, pageSize, productCategory);
+            api.listDirectDebitsBulk(productCategory, openStatus, isOwned, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listDirectDebitsBulkCall(isOwned, openStatus, page, pageSize, productCategory, null);
+            okhttp3.Call call = api.listDirectDebitsBulkCall(productCategory, openStatus, isOwned, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listDirectDebitsBulk", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
@@ -89,7 +89,7 @@ public String listDirectDebitsBulk(@ShellOption(defaultValue = ShellOption.NULL)
         }
         return JsonPrinter.toJson(response);
     }
-    
+
     @ShellMethod("List direct debits specific accounts")
     public String listDirectDebitsSpecificAccounts(@ShellOption(defaultValue = ShellOption.NULL) Boolean check,
         @ShellOption(defaultValue = ShellOption.NULL) List<String> accountIds,
diff --git a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingPayees.java b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingPayees.java
index 60f1964..b3fe4c5 100644
--- a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingPayees.java
+++ b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingPayees.java
@@ -67,10 +67,10 @@ public String listPayees(@ShellOption(defaultValue = ShellOption.NULL) Boolean c
             type);
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingPayeeList response = api.listPayees(page, pageSize, type);
+        ResponseBankingPayeeList response = api.listPayees(type, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listPayeesCall(page, pageSize, type, null);
+            okhttp3.Call call = api.listPayeesCall(type, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listPayees", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
diff --git a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingProducts.java b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingProducts.java
index 275c605..8320aba 100644
--- a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingProducts.java
+++ b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/BankingProducts.java
@@ -38,16 +38,17 @@
 
     @ShellMethod("Get product detail")
     public String getProductDetail(@ShellOption(defaultValue = ShellOption.NULL) Boolean check,
-        @ShellOption(defaultValue = ShellOption.NULL) String productId) throws Exception {
+        @ShellOption(defaultValue = ShellOption.NULL) String productId,
+        @ShellOption(defaultValue = "1") Integer version) throws Exception {
 
-        LOGGER.info("Get product detail CLI initiated with productId: {}",
-            productId);
+        LOGGER.info("Get product detail CLI initiated with productId: {}, version: {}",
+            productId, version);
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingProductById response = api.getProductDetail(productId);
+        ResponseBankingProductById response = api.getProductDetail(productId, version);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.getProductDetailCall(productId, null);
+            okhttp3.Call call = api.getProductDetailCall(productId, version, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "getProductDetail", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
@@ -64,21 +65,23 @@ public String listProducts(@ShellOption(defaultValue = ShellOption.NULL) Boolean
         @ShellOption(defaultValue = ShellOption.NULL) Integer page,
         @ShellOption(defaultValue = ShellOption.NULL) Integer pageSize,
         @ShellOption(defaultValue = ShellOption.NULL) ParamProductCategory productCategory,
-        @ShellOption(defaultValue = ShellOption.NULL) OffsetDateTime updatedSince) throws Exception {
+        @ShellOption(defaultValue = ShellOption.NULL) OffsetDateTime updatedSince,
+        @ShellOption(defaultValue = "1") Integer version) throws Exception {
 
-        LOGGER.info("List products CLI initiated with brand: {}, effective: {}, page: {}, page-size: {}, product-category: {}, updated-since: {}",
+        LOGGER.info("List products CLI initiated with brand: {}, effective: {}, page: {}, page-size: {}, product-category: {}, updated-since: {}, version: {}",
             brand,
             effective,
             page,
             pageSize,
             productCategory,
-            updatedSince);
+            updatedSince,
+            version);
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        ResponseBankingProductList response = api.listProducts(brand, effective, page, pageSize, productCategory, updatedSince);
+        ResponseBankingProductList response = api.listProducts(effective, updatedSince, brand, productCategory, version, page, pageSize);
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
-            okhttp3.Call call = api.listProductsCall(brand, effective, page, pageSize, productCategory, updatedSince, null);
+            okhttp3.Call call = api.listProductsCall(effective, updatedSince, brand, productCategory, version, page, pageSize, null);
             List<ConformanceError> conformanceErrors = payloadValidator
                 .validateResponse(call.request().url().toString(), response, "listProducts", ResponseCode.OK);
             if (!conformanceErrors.isEmpty()) {
diff --git a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/CommonDiscovery.java b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/CommonDiscovery.java
index 1663e11..6b275cf 100644
--- a/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/CommonDiscovery.java
+++ b/client-cli/src/main/java/au/org/consumerdatastandards/client/cli/CommonDiscovery.java
@@ -10,7 +10,7 @@
 import au.org.consumerdatastandards.client.api.CommonDiscoveryAPI;
 import au.org.consumerdatastandards.client.cli.support.ApiUtil;
 import au.org.consumerdatastandards.client.cli.support.JsonPrinter;
-import au.org.consumerdatastandards.client.model.CommonDiscoveryStatus;
+import au.org.consumerdatastandards.client.model.ResponseCommonDiscoveryStatus;
 import au.org.consumerdatastandards.client.model.ResponseDiscoveryOutagesList;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.PayloadValidator;
@@ -58,7 +58,7 @@ public String getStatus(@ShellOption(defaultValue = ShellOption.NULL) Boolean ch
         LOGGER.info("Get status CLI initiated");
 
         api.setApiClient(ApiUtil.createApiClient(apiClientOptions));
-        CommonDiscoveryStatus response = api.getStatus();
+        ResponseCommonDiscoveryStatus response = api.getStatus();
         if (apiClientOptions.isValidationEnabled() || (check != null && check)) {
             LOGGER.info("Payload validation is enabled");
             okhttp3.Call call = api.getStatusCall(null);
diff --git a/client/pom.xml b/client/pom.xml
index a415bee..5d8f59c 100644
--- a/client/pom.xml
+++ b/client/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>client</artifactId>
     <name>Client Library</name>
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/ApiClient.java b/client/src/main/java/au/org/consumerdatastandards/client/ApiClient.java
index af49774..b73394a 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/ApiClient.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/ApiClient.java
@@ -7,6 +7,7 @@
  */
 package au.org.consumerdatastandards.client;
 
+import au.org.consumerdatastandards.client.api.ReturnTypeResolver;
 import okhttp3.*;
 import okhttp3.internal.http.HttpMethod;
 import okhttp3.logging.HttpLoggingInterceptor;
@@ -68,12 +69,11 @@ private void init() {
         json = new JSON();
 
         // Set default User-Agent.
-        setUserAgent("CDS Client/1.0.0/java");
+        setUserAgent("CDS Client/1.1.1/java");
 
         addDefaultHeader("Accept", "application/json");
         addDefaultHeader("Content-Type", "application/json");
         addDefaultHeader("x-v", "1");
-        addDefaultHeader("x-min-v", "1");
         addDefaultHeader("x-fapi-interaction-id", UUID.randomUUID().toString());
     }
 
@@ -242,10 +242,6 @@ public ApiClient setUserAgent(String userAgent) {
         return this;
     }
 
-    public String getUserAgent() {
-        return defaultHeaderMap.get("User-Agent");
-    }
-
     /**
      * Add a default header.
      *
@@ -695,13 +691,17 @@ public File prepareDownloadFile(Response response) throws IOException {
     public <T> ApiResponse<T> execute(Call call, Type returnType) throws ApiException {
         try {
             Response response = call.execute();
-            T data = handleResponse(response, returnType);
-            return new ApiResponse<>(response.code(), response.headers().toMultimap(), data);
+            return handle(response, returnType);
         } catch (IOException e) {
             throw new ApiException(e);
         }
     }
 
+    public <T> ApiResponse<T> handle(Response response, Type returnType) throws ApiException {
+        T data = handleResponse(response, returnType);
+        return new ApiResponse<>(response.code(), response.headers().toMultimap(), data);
+    }
+
     /**
      * {@link #executeAsync(Call, Type, ApiCallback)}
      *
@@ -744,6 +744,28 @@ public void onResponse(Call call, Response response) {
             });
     }
 
+    public <T> void executeAsync(Call call, final ApiCallback<T> callback, ReturnTypeResolver returnTypeResolver) {
+        call.enqueue(
+            new Callback() {
+                @Override
+                public void onFailure(Call call, IOException e) {
+                    callback.onFailure(new ApiException(e), 0, null);
+                }
+
+                @Override
+                public void onResponse(Call call, Response response) {
+                    T result;
+                    try {
+                        result = handleResponse(response, returnTypeResolver.resolve(response));
+                    } catch (ApiException e) {
+                        callback.onFailure(e, response.code(), response.headers().toMultimap());
+                        return;
+                    }
+                    callback.onSuccess(result, response.code(), response.headers().toMultimap());
+                }
+            });
+    }
+
     /**
      * Handle the given response, return the deserialized object when the response is successful.
      *
@@ -983,7 +1005,7 @@ private Interceptor getProgressInterceptor() {
     private void applySslSettings() {
         try {
             TrustManager[] trustManagers = null;
-            HostnameVerifier hostnameVerifier;
+            HostnameVerifier hostnameVerifier = null;
             if (!verifyingSsl) {
                 trustManagers = new TrustManager[]{
                     new X509TrustManager() {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingAccountsAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingAccountsAPI.java
index cd9d7ee..d1446ed 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingAccountsAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingAccountsAPI.java
@@ -7,33 +7,21 @@
  */
 package au.org.consumerdatastandards.client.api;
 
-import au.org.consumerdatastandards.client.ApiCallback;
-import au.org.consumerdatastandards.client.ApiException;
-import au.org.consumerdatastandards.client.ApiResponse;
-import au.org.consumerdatastandards.client.Pair;
-import au.org.consumerdatastandards.client.model.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.client.model.ParamProductCategory;
-import au.org.consumerdatastandards.client.model.RequestAccountIds;
-import au.org.consumerdatastandards.client.model.ResponseBankingAccountById;
-import au.org.consumerdatastandards.client.model.ResponseBankingAccountList;
-import au.org.consumerdatastandards.client.model.ResponseBankingAccountsBalanceById;
-import au.org.consumerdatastandards.client.model.ResponseBankingAccountsBalanceList;
-import au.org.consumerdatastandards.client.model.ResponseBankingTransactionById;
-import au.org.consumerdatastandards.client.model.ResponseBankingTransactionList;
-import ch.qos.logback.classic.Logger;
+import au.org.consumerdatastandards.client.*;
+import au.org.consumerdatastandards.client.model.*;
 import com.google.gson.reflect.TypeToken;
-import org.slf4j.LoggerFactory;
-
 import java.lang.reflect.Type;
 import java.time.OffsetDateTime;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class BankingAccountsAPI extends ProtectedAPI {
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(BankingAccountsAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BankingAccountsAPI.class);
 
     /**
      * Build call for getAccountDetail
@@ -44,7 +32,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getAccountDetailCall(String accountId, final ApiCallback _callback) throws ApiException {
@@ -69,12 +57,12 @@
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getAccountDetailValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
-        
+
         // verify the required parameter 'accountId' is set
         if (accountId == null) {
             throw new ApiException("Missing the required parameter 'accountId' when calling getAccountDetail(Async)");
         }
-        
+
 
         return getAccountDetailCall(accountId, _callback);
     }
@@ -88,7 +76,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiException {
@@ -109,7 +97,7 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingAccountById> getAccountDetailWithHttpInfo(String accountId) throws ApiException {
@@ -127,8 +115,8 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getAccountDetailAsync(String accountId, final ApiCallback<ResponseBankingAccountById> _callback) throws ApiException {
@@ -141,6 +129,112 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
+    /**
+     * Build call for getBalance
+     * @param accountId ID of the specific account requested (required)
+     * @param _callback Callback for upload/download progress
+     * @return Call to execute
+     * @throws ApiException If fail to serialize the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call getBalanceCall(String accountId, final ApiCallback _callback) throws ApiException {
+
+        Object postBody = null;
+
+        // create path and map variables
+        String path = "/banking/accounts/{accountId}/balance"
+            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId));
+
+        LOGGER.trace("Building Call for getBalance with path: {}, accountId: {}",
+            path,
+            accountId);
+
+        List<Pair> queryParams = new ArrayList<>();
+        List<Pair> collectionQueryParams = new ArrayList<>();
+        Map<String, String> headerParams = new HashMap<>();
+        addCdsProtectedApiHeaders(headerParams);
+        String[] authNames = new String[] {  };
+        return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
+    }
+
+    @SuppressWarnings("rawtypes")
+    private okhttp3.Call getBalanceValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
+
+        // verify the required parameter 'accountId' is set
+        if (accountId == null) {
+            throw new ApiException("Missing the required parameter 'accountId' when calling getBalance(Async)");
+        }
+
+
+        return getBalanceCall(accountId, _callback);
+    }
+
+    /**
+     * Get Account Balance
+     * Obtain the balance for a single specified account
+     * @param accountId ID of the specific account requested (required)
+     * @return ResponseBankingAccountsBalanceById
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public ResponseBankingAccountsBalanceById getBalance(String accountId) throws ApiException {
+
+        LOGGER.trace("getBalance with accountId: {}",
+            accountId);
+
+        ApiResponse<ResponseBankingAccountsBalanceById> resp = getBalanceWithHttpInfo(accountId);
+        return resp.getData();
+    }
+
+    /**
+     * Get Account Balance
+     * Obtain the balance for a single specified account
+     * @param accountId ID of the specific account requested (required)
+     * @return ApiResponse&lt;ResponseBankingAccountsBalanceById&gt;
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public ApiResponse<ResponseBankingAccountsBalanceById> getBalanceWithHttpInfo(String accountId) throws ApiException {
+        okhttp3.Call call = getBalanceValidateBeforeCall(accountId, null);
+        Type returnType = new TypeToken<ResponseBankingAccountsBalanceById>(){}.getType();
+        return apiClient.execute(call, returnType);
+    }
+
+    /**
+     * Get Account Balance (asynchronously)
+     * Obtain the balance for a single specified account
+     * @param accountId ID of the specific account requested (required)
+     * @param _callback The callback to be executed when the API call finishes
+     * @return The request call
+     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call getBalanceAsync(String accountId, final ApiCallback<ResponseBankingAccountsBalanceById> _callback) throws ApiException {
+
+        LOGGER.trace("Asynchronously getBalance with accountId: {}",
+            accountId);
+
+        okhttp3.Call call = getBalanceValidateBeforeCall(accountId, _callback);
+        Type returnType = new TypeToken<ResponseBankingAccountsBalanceById>(){}.getType();
+        apiClient.executeAsync(call, returnType, _callback);
+        return call;
+    }
     /**
      * Build call for getTransactionDetail
      * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points (required)
@@ -151,7 +245,7 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getTransactionDetailCall(String accountId, String transactionId, final ApiCallback _callback) throws ApiException {
@@ -178,17 +272,17 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getTransactionDetailValidateBeforeCall(String accountId, String transactionId, final ApiCallback _callback) throws ApiException {
-        
+
         // verify the required parameter 'accountId' is set
         if (accountId == null) {
             throw new ApiException("Missing the required parameter 'accountId' when calling getTransactionDetail(Async)");
         }
-        
+
         // verify the required parameter 'transactionId' is set
         if (transactionId == null) {
             throw new ApiException("Missing the required parameter 'transactionId' when calling getTransactionDetail(Async)");
         }
-        
+
 
         return getTransactionDetailCall(accountId, transactionId, _callback);
     }
@@ -203,7 +297,7 @@ public ResponseBankingAccountById getAccountDetail(String accountId) throws ApiE
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingTransactionById getTransactionDetail(String accountId, String transactionId) throws ApiException {
@@ -226,7 +320,7 @@ public ResponseBankingTransactionById getTransactionDetail(String accountId, Str
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingTransactionById> getTransactionDetailWithHttpInfo(String accountId, String transactionId) throws ApiException {
@@ -245,8 +339,8 @@ public ResponseBankingTransactionById getTransactionDetail(String accountId, Str
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getTransactionDetailAsync(String accountId, String transactionId, final ApiCallback<ResponseBankingTransactionById> _callback) throws ApiException {
@@ -263,23 +357,23 @@ public ResponseBankingTransactionById getTransactionDetail(String accountId, Str
     /**
      * Build call for getTransactions
      * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
-     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
-     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
-     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
      * @param oldestTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type (optional)
+     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
+     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
+     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
+     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not) (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied (optional)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call getTransactionsCall(String accountId, String maxAmount, String minAmount, OffsetDateTime newestTime, OffsetDateTime oldestTime, Integer page, Integer pageSize, String text, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call getTransactionsCall(String accountId, OffsetDateTime oldestTime, OffsetDateTime newestTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
@@ -287,26 +381,26 @@ public ResponseBankingTransactionById getTransactionDetail(String accountId, Str
         String path = "/banking/accounts/{accountId}/transactions"
             .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId));
 
-        LOGGER.trace("Building Call for getTransactions with path: {}, accountId: {}, max-amount: {}, min-amount: {}, newest-time: {}, oldest-time: {}, page: {}, page-size: {}, text: {}",
+        LOGGER.trace("Building Call for getTransactions with path: {}, accountId: {}, oldest-time: {}, newest-time: {}, min-amount: {}, max-amount: {}, text: {}, page: {}, page-size: {}",
             path,
             accountId,
-            maxAmount,
-            minAmount,
-            newestTime,
             oldestTime,
+            newestTime,
+            minAmount,
+            maxAmount,
+            text,
             page,
-            pageSize,
-            text);
+            pageSize);
 
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
-        addQueryParam(queryParams, "max-amount", maxAmount);
-        addQueryParam(queryParams, "min-amount", minAmount);
-        addQueryParam(queryParams, "newest-time", newestTime);
         addQueryParam(queryParams, "oldest-time", oldestTime);
+        addQueryParam(queryParams, "newest-time", newestTime);
+        addQueryParam(queryParams, "min-amount", minAmount);
+        addQueryParam(queryParams, "max-amount", maxAmount);
+        addQueryParam(queryParams, "text", text);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "text", text);
         Map<String, String> headerParams = new HashMap<>();
         addCdsProtectedApiHeaders(headerParams);
         String[] authNames = new String[] {  };
@@ -314,152 +408,152 @@ public ResponseBankingTransactionById getTransactionDetail(String accountId, Str
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call getTransactionsValidateBeforeCall(String accountId, String maxAmount, String minAmount, OffsetDateTime newestTime, OffsetDateTime oldestTime, Integer page, Integer pageSize, String text, final ApiCallback _callback) throws ApiException {
-        
+    private okhttp3.Call getTransactionsValidateBeforeCall(String accountId, OffsetDateTime oldestTime, OffsetDateTime newestTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
+
         // verify the required parameter 'accountId' is set
         if (accountId == null) {
             throw new ApiException("Missing the required parameter 'accountId' when calling getTransactions(Async)");
         }
-        
 
-        return getTransactionsCall(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text, _callback);
+
+        return getTransactionsCall(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize, _callback);
     }
 
     /**
      * Get Transactions For Account
-     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account
+     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account - For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared
      * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
-     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
-     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
-     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
      * @param oldestTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type (optional)
+     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
+     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
+     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
+     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not) (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied (optional)
      * @return ResponseBankingTransactionList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ResponseBankingTransactionList getTransactions(String accountId, String maxAmount, String minAmount, OffsetDateTime newestTime, OffsetDateTime oldestTime, Integer page, Integer pageSize, String text) throws ApiException {
+    public ResponseBankingTransactionList getTransactions(String accountId, OffsetDateTime oldestTime, OffsetDateTime newestTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("getTransactions with accountId: {}, max-amount: {}, min-amount: {}, newest-time: {}, oldest-time: {}, page: {}, page-size: {}, text: {}",
+        LOGGER.trace("getTransactions with accountId: {}, oldest-time: {}, newest-time: {}, min-amount: {}, max-amount: {}, text: {}, page: {}, page-size: {}",
             accountId,
-            maxAmount,
-            minAmount,
-            newestTime,
             oldestTime,
+            newestTime,
+            minAmount,
+            maxAmount,
+            text,
             page,
-            pageSize,
-            text);
+            pageSize);
 
-        ApiResponse<ResponseBankingTransactionList> resp = getTransactionsWithHttpInfo(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text);
+        ApiResponse<ResponseBankingTransactionList> resp = getTransactionsWithHttpInfo(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Transactions For Account
-     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account
+     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account - For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared
      * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
-     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
-     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
-     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
      * @param oldestTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type (optional)
+     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
+     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
+     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
+     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not) (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied (optional)
      * @return ApiResponse&lt;ResponseBankingTransactionList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<ResponseBankingTransactionList> getTransactionsWithHttpInfo(String accountId, String maxAmount, String minAmount, OffsetDateTime newestTime, OffsetDateTime oldestTime, Integer page, Integer pageSize, String text) throws ApiException {
-        okhttp3.Call call = getTransactionsValidateBeforeCall(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text, null);
+    public ApiResponse<ResponseBankingTransactionList> getTransactionsWithHttpInfo(String accountId, OffsetDateTime oldestTime, OffsetDateTime newestTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = getTransactionsValidateBeforeCall(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize, null);
         Type returnType = new TypeToken<ResponseBankingTransactionList>(){}.getType();
         return apiClient.execute(call, returnType);
     }
 
     /**
      * Get Transactions For Account (asynchronously)
-     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account
+     * Obtain transactions for a specific account.  Some general notes that apply to all end points that retrieve transactions:  - Where multiple transactions are returned, transactions should be ordered according to effective date in descending order - As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:   - Posted date/time if available, then   - Execution date/time if available, then   - A reasonable date/time nominated by the data holder using internal data structures - For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account - For aggregated transactions (ie. groups of sub transactions reported as a single entry for the account) only the aggregated information, with as much consistent information accross the subsidiary transactions as possible, is required to be shared
      * @param accountId ID of the account to get transactions for.  Must have previously been returned by one of the account list end points. (required)
-     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
-     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
-     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
      * @param oldestTime Constrain the transaction history request to transactions with effective time at or after this date/time. If absent defaults to newest-time minus 90 days.  Format is aligned to DateTimeString common type (optional)
+     * @param newestTime Constrain the transaction history request to transactions with effective time at or before this date/time.  If absent defaults to today.  Format is aligned to DateTimeString common type (optional)
+     * @param minAmount Filter transactions to only transactions with amounts higher or equal to than this amount (optional)
+     * @param maxAmount Filter transactions to only transactions with amounts less than or equal to than this amount (optional)
+     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied and an additional boolean field named isQueryParamUnsupported should be included in the meta object and set to true (whether the text parameter is supplied or not) (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param text Filter transactions to only transactions where this string value is found as a substring of either the reference or description fields. Format is arbitrary ASCII string. This parameter is optionally implemented by data holders. If it is not implemented then a response should be provided as normal without text filtering applied (optional)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call getTransactionsAsync(String accountId, String maxAmount, String minAmount, OffsetDateTime newestTime, OffsetDateTime oldestTime, Integer page, Integer pageSize, String text, final ApiCallback<ResponseBankingTransactionList> _callback) throws ApiException {
+    public okhttp3.Call getTransactionsAsync(String accountId, OffsetDateTime oldestTime, OffsetDateTime newestTime, String minAmount, String maxAmount, String text, Integer page, Integer pageSize, final ApiCallback<ResponseBankingTransactionList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously getTransactions with accountId: {}, max-amount: {}, min-amount: {}, newest-time: {}, oldest-time: {}, page: {}, page-size: {}, text: {}",
+        LOGGER.trace("Asynchronously getTransactions with accountId: {}, oldest-time: {}, newest-time: {}, min-amount: {}, max-amount: {}, text: {}, page: {}, page-size: {}",
             accountId,
-            maxAmount,
-            minAmount,
-            newestTime,
             oldestTime,
+            newestTime,
+            minAmount,
+            maxAmount,
+            text,
             page,
-            pageSize,
-            text);
+            pageSize);
 
-        okhttp3.Call call = getTransactionsValidateBeforeCall(accountId, maxAmount, minAmount, newestTime, oldestTime, page, pageSize, text, _callback);
+        okhttp3.Call call = getTransactionsValidateBeforeCall(accountId, oldestTime, newestTime, minAmount, maxAmount, text, page, pageSize, _callback);
         Type returnType = new TypeToken<ResponseBankingTransactionList>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
     /**
      * Build call for listAccounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listAccountsCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call listAccountsCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
         // create path and map variables
         String path = "/banking/accounts";
 
-        LOGGER.trace("Building Call for listAccounts with path: {}, is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
+        LOGGER.trace("Building Call for listAccounts with path: {}, product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
             path,
-            isOwned,
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
-        addQueryParam(queryParams, "is-owned", isOwned);
+        addQueryParam(queryParams, "product-category", productCategory);
         addQueryParam(queryParams, "open-status", openStatus);
+        addQueryParam(queryParams, "is-owned", isOwned);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "product-category", productCategory);
         Map<String, String> headerParams = new HashMap<>();
         addCdsProtectedApiHeaders(headerParams);
         String[] authNames = new String[] {  };
@@ -467,59 +561,59 @@ public ResponseBankingTransactionList getTransactions(String accountId, String m
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call listAccountsValidateBeforeCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
-        
+    private okhttp3.Call listAccountsValidateBeforeCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
-        return listAccountsCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+
+        return listAccountsCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
     }
 
     /**
      * Get Accounts
      * Obtain a list of accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ResponseBankingAccountList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ResponseBankingAccountList listAccounts(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
+    public ResponseBankingAccountList listAccounts(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("listAccounts with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("listAccounts with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        ApiResponse<ResponseBankingAccountList> resp = listAccountsWithHttpInfo(isOwned, openStatus, page, pageSize, productCategory);
+        ApiResponse<ResponseBankingAccountList> resp = listAccountsWithHttpInfo(productCategory, openStatus, isOwned, page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Accounts
      * Obtain a list of accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ApiResponse&lt;ResponseBankingAccountList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<ResponseBankingAccountList> listAccountsWithHttpInfo(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
-        okhttp3.Call call = listAccountsValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, null);
+    public ApiResponse<ResponseBankingAccountList> listAccountsWithHttpInfo(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listAccountsValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, null);
         Type returnType = new TypeToken<ResponseBankingAccountList>(){}.getType();
         return apiClient.execute(call, returnType);
     }
@@ -527,240 +621,132 @@ public ResponseBankingAccountList listAccounts(Boolean isOwned, ParamAccountOpen
     /**
      * Get Accounts (asynchronously)
      * Obtain a list of accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listAccountsAsync(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback<ResponseBankingAccountList> _callback) throws ApiException {
+    public okhttp3.Call listAccountsAsync(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback<ResponseBankingAccountList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously listAccounts with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("Asynchronously listAccounts with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        okhttp3.Call call = listAccountsValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+        okhttp3.Call call = listAccountsValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
         Type returnType = new TypeToken<ResponseBankingAccountList>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
-    /**
-     * Build call for listBalance
-     * @param accountId ID of the specific account requested (required)
-     * @param _callback Callback for upload/download progress
-     * @return Call to execute
-     * @throws ApiException If fail to serialize the request body object
-     * http.response.details
-     * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     * </table>
-     */
-    public okhttp3.Call listBalanceCall(String accountId, final ApiCallback _callback) throws ApiException {
-
-        Object postBody = null;
-
-        // create path and map variables
-        String path = "/banking/accounts/{accountId}/balance"
-            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId));
-
-        LOGGER.trace("Building Call for listBalance with path: {}, accountId: {}",
-            path,
-            accountId);
-
-        List<Pair> queryParams = new ArrayList<>();
-        List<Pair> collectionQueryParams = new ArrayList<>();
-        Map<String, String> headerParams = new HashMap<>();
-        addCdsProtectedApiHeaders(headerParams);
-        String[] authNames = new String[] {  };
-        return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
-    }
-
-    @SuppressWarnings("rawtypes")
-    private okhttp3.Call listBalanceValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
-        
-        // verify the required parameter 'accountId' is set
-        if (accountId == null) {
-            throw new ApiException("Missing the required parameter 'accountId' when calling listBalance(Async)");
-        }
-        
-
-        return listBalanceCall(accountId, _callback);
-    }
-
-    /**
-     * Get Account Balance
-     * Obtain the balance for a single specified account
-     * @param accountId ID of the specific account requested (required)
-     * @return ResponseBankingAccountsBalanceById
-     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
-     * http.response.details
-     * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     * </table>
-     */
-    public ResponseBankingAccountsBalanceById listBalance(String accountId) throws ApiException {
-
-        LOGGER.trace("listBalance with accountId: {}",
-            accountId);
-
-        ApiResponse<ResponseBankingAccountsBalanceById> resp = listBalanceWithHttpInfo(accountId);
-        return resp.getData();
-    }
-
-    /**
-     * Get Account Balance
-     * Obtain the balance for a single specified account
-     * @param accountId ID of the specific account requested (required)
-     * @return ApiResponse&lt;ResponseBankingAccountsBalanceById&gt;
-     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
-     * http.response.details
-     * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     * </table>
-     */
-    public ApiResponse<ResponseBankingAccountsBalanceById> listBalanceWithHttpInfo(String accountId) throws ApiException {
-        okhttp3.Call call = listBalanceValidateBeforeCall(accountId, null);
-        Type returnType = new TypeToken<ResponseBankingAccountsBalanceById>(){}.getType();
-        return apiClient.execute(call, returnType);
-    }
-
-    /**
-     * Get Account Balance (asynchronously)
-     * Obtain the balance for a single specified account
-     * @param accountId ID of the specific account requested (required)
-     * @param _callback The callback to be executed when the API call finishes
-     * @return The request call
-     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
-     * http.response.details
-     * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     * </table>
-     */
-    public okhttp3.Call listBalanceAsync(String accountId, final ApiCallback<ResponseBankingAccountsBalanceById> _callback) throws ApiException {
-
-        LOGGER.trace("Asynchronously listBalance with accountId: {}",
-            accountId);
-
-        okhttp3.Call call = listBalanceValidateBeforeCall(accountId, _callback);
-        Type returnType = new TypeToken<ResponseBankingAccountsBalanceById>(){}.getType();
-        apiClient.executeAsync(call, returnType, _callback);
-        return call;
-    }
-
     /**
      * Build call for listBalancesBulk
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listBalancesBulkCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call listBalancesBulkCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
         // create path and map variables
         String path = "/banking/accounts/balances";
 
-        LOGGER.trace("Building Call for listBalancesBulk with path: {}, is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
+        LOGGER.trace("Building Call for listBalancesBulk with path: {}, product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
             path,
-            isOwned,
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
-        addQueryParam(queryParams, "is-owned", isOwned);
+        addQueryParam(queryParams, "product-category", productCategory);
         addQueryParam(queryParams, "open-status", openStatus);
+        addQueryParam(queryParams, "is-owned", isOwned);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "product-category", productCategory);
         Map<String, String> headerParams = new HashMap<>();
-        addCdsProtectedApiHeaders(headerParams);        String[] authNames = new String[] {  };
+        addCdsProtectedApiHeaders(headerParams);
+        String[] authNames = new String[] {  };
         return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call listBalancesBulkValidateBeforeCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
+    private okhttp3.Call listBalancesBulkValidateBeforeCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
 
-        return listBalancesBulkCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+        return listBalancesBulkCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
     }
 
     /**
      * Get Bulk Balances
      * Obtain balances for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ResponseBankingAccountsBalanceList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
-    * <table summary="Response Details" border="1">
- *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
- *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
- *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
-    * </table>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
      */
-    public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
+    public ResponseBankingAccountsBalanceList listBalancesBulk(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("listBalancesBulk with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("listBalancesBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        ApiResponse<ResponseBankingAccountsBalanceList> resp = listBalancesBulkWithHttpInfo(isOwned, openStatus, page, pageSize, productCategory);
+        ApiResponse<ResponseBankingAccountsBalanceList> resp = listBalancesBulkWithHttpInfo(productCategory, openStatus, isOwned, page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Bulk Balances
      * Obtain balances for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ApiResponse&lt;ResponseBankingAccountsBalanceList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<ResponseBankingAccountsBalanceList> listBalancesBulkWithHttpInfo(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
-        okhttp3.Call call = listBalancesBulkValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, null);
+    public ApiResponse<ResponseBankingAccountsBalanceList> listBalancesBulkWithHttpInfo(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listBalancesBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, null);
         Type returnType = new TypeToken<ResponseBankingAccountsBalanceList>(){}.getType();
         return apiClient.execute(call, returnType);
     }
@@ -768,39 +754,37 @@ public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, Para
     /**
      * Get Bulk Balances (asynchronously)
      * Obtain balances for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listBalancesBulkAsync(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback<ResponseBankingAccountsBalanceList> _callback) throws ApiException {
+    public okhttp3.Call listBalancesBulkAsync(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback<ResponseBankingAccountsBalanceList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously listBalancesBulk with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("Asynchronously listBalancesBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        okhttp3.Call call = listBalancesBulkValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+        okhttp3.Call call = listBalancesBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
         Type returnType = new TypeToken<ResponseBankingAccountsBalanceList>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
-
     /**
      * Build call for listBalancesSpecificAccounts
-     * @param accountIds The list of account IDs to obtain balances for (optional)
+     * @param accountIds The list of account IDs to obtain balances for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback Callback for upload/download progress
@@ -809,13 +793,13 @@ public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, Para
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listBalancesSpecificAccountsCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
-        Object postBody = accountIds;
+        Object postBody = null;
 
         // create path and map variables
         String path = "/banking/accounts/balances";
@@ -838,7 +822,12 @@ public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, Para
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call listBalancesSpecificAccountsValidateBeforeCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
-        
+
+        // verify the required parameter 'accountIds' is set
+        if (accountIds == null) {
+            throw new ApiException("Missing the required parameter 'accountIds' when calling listBalancesSpecificAccounts(Async)");
+        }
+
 
         return listBalancesSpecificAccountsCall(accountIds, page, pageSize, _callback);
     }
@@ -846,7 +835,7 @@ public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, Para
     /**
      * Get Balances For Specific Accounts
      * Obtain balances for a specified list of accounts
-     * @param accountIds The list of account IDs to obtain balances for (optional)
+     * @param accountIds The list of account IDs to obtain balances for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ResponseBankingAccountsBalanceList
@@ -854,8 +843,8 @@ public ResponseBankingAccountsBalanceList listBalancesBulk(Boolean isOwned, Para
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -872,7 +861,7 @@ public ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(RequestAc
     /**
      * Get Balances For Specific Accounts
      * Obtain balances for a specified list of accounts
-     * @param accountIds The list of account IDs to obtain balances for (optional)
+     * @param accountIds The list of account IDs to obtain balances for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ApiResponse&lt;ResponseBankingAccountsBalanceList&gt;
@@ -880,8 +869,8 @@ public ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(RequestAc
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingAccountsBalanceList> listBalancesSpecificAccountsWithHttpInfo(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -893,7 +882,7 @@ public ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(RequestAc
     /**
      * Get Balances For Specific Accounts (asynchronously)
      * Obtain balances for a specified list of accounts
-     * @param accountIds The list of account IDs to obtain balances for (optional)
+     * @param accountIds The list of account IDs to obtain balances for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback The callback to be executed when the API call finishes
@@ -901,9 +890,9 @@ public ResponseBankingAccountsBalanceList listBalancesSpecificAccounts(RequestAc
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *    <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listBalancesSpecificAccountsAsync(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback<ResponseBankingAccountsBalanceList> _callback) throws ApiException {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingDirectDebitsAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingDirectDebitsAPI.java
index b1168a6..e9c2737 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingDirectDebitsAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingDirectDebitsAPI.java
@@ -7,27 +7,20 @@
  */
 package au.org.consumerdatastandards.client.api;
 
-import au.org.consumerdatastandards.client.ApiCallback;
-import au.org.consumerdatastandards.client.ApiException;
-import au.org.consumerdatastandards.client.ApiResponse;
-import au.org.consumerdatastandards.client.Pair;
-import au.org.consumerdatastandards.client.model.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.client.model.ParamProductCategory;
-import au.org.consumerdatastandards.client.model.RequestAccountIds;
-import au.org.consumerdatastandards.client.model.ResponseBankingDirectDebitAuthorisationList;
-import ch.qos.logback.classic.Logger;
+import au.org.consumerdatastandards.client.*;
+import au.org.consumerdatastandards.client.model.*;
 import com.google.gson.reflect.TypeToken;
-import org.slf4j.LoggerFactory;
-
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class BankingDirectDebitsAPI extends ProtectedAPI {
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(BankingDirectDebitsAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BankingDirectDebitsAPI.class);
 
     /**
      * Build call for listDirectDebits
@@ -40,7 +33,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listDirectDebitsCall(String accountId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
@@ -69,12 +62,12 @@
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call listDirectDebitsValidateBeforeCall(String accountId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
-        
+
         // verify the required parameter 'accountId' is set
         if (accountId == null) {
             throw new ApiException("Missing the required parameter 'accountId' when calling listDirectDebits(Async)");
         }
-        
+
 
         return listDirectDebitsCall(accountId, page, pageSize, _callback);
     }
@@ -90,7 +83,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingDirectDebitAuthorisationList listDirectDebits(String accountId, Integer page, Integer pageSize) throws ApiException {
@@ -115,7 +108,7 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebits(String accou
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingDirectDebitAuthorisationList> listDirectDebitsWithHttpInfo(String accountId, Integer page, Integer pageSize) throws ApiException {
@@ -135,8 +128,8 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebits(String accou
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listDirectDebitsAsync(String accountId, Integer page, Integer pageSize, final ApiCallback<ResponseBankingDirectDebitAuthorisationList> _callback) throws ApiException {
@@ -151,106 +144,104 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebits(String accou
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
-
     /**
      * Build call for listDirectDebitsBulk
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listDirectDebitsBulkCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call listDirectDebitsBulkCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
         // create path and map variables
-        String path = "/banking/accounts/balances";
+        String path = "/banking/accounts/direct-debits";
 
-        LOGGER.trace("Building Call for listDirectDebits with path: {}, is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
+        LOGGER.trace("Building Call for listDirectDebitsBulk with path: {}, product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
             path,
-            isOwned,
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
-        addQueryParam(queryParams, "is-owned", isOwned);
+        addQueryParam(queryParams, "product-category", productCategory);
         addQueryParam(queryParams, "open-status", openStatus);
+        addQueryParam(queryParams, "is-owned", isOwned);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "product-category", productCategory);
         Map<String, String> headerParams = new HashMap<>();
-        addCdsProtectedApiHeaders(headerParams);        String[] authNames = new String[] {  };
+        addCdsProtectedApiHeaders(headerParams);
+        String[] authNames = new String[] {  };
         return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call listDirectDebitsBulkValidateBeforeCall(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback _callback) throws ApiException {
+    private okhttp3.Call listDirectDebitsBulkValidateBeforeCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
 
-        return listDirectDebitsBulkCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+        return listDirectDebitsBulkCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
     }
 
     /**
      * Get Bulk Direct Debits
      * Obtain direct debit authorisations for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ResponseBankingDirectDebitAuthorisationList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
-    * <table summary="Response Details" border="1">
- *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
- *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
- *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
-    * </table>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
      */
-    public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
+    public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("listDirectDebits with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("listDirectDebitsBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        ApiResponse<ResponseBankingDirectDebitAuthorisationList> resp = listDirectDebitsBulkWithHttpInfo(isOwned, openStatus, page, pageSize, productCategory);
+        ApiResponse<ResponseBankingDirectDebitAuthorisationList> resp = listDirectDebitsBulkWithHttpInfo(productCategory, openStatus, isOwned, page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Bulk Direct Debits
      * Obtain direct debit authorisations for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @return ApiResponse&lt;ResponseBankingDirectDebitAuthorisationList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
-    * <table summary="Response Details" border="1">
- *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
- *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
- *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
-    * </table>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
      */
-    public ApiResponse<ResponseBankingDirectDebitAuthorisationList> listDirectDebitsBulkWithHttpInfo(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory) throws ApiException {
-        okhttp3.Call call = listDirectDebitsBulkValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, null);
+    public ApiResponse<ResponseBankingDirectDebitAuthorisationList> listDirectDebitsBulkWithHttpInfo(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listDirectDebitsBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, null);
         Type returnType = new TypeToken<ResponseBankingDirectDebitAuthorisationList>(){}.getType();
         return apiClient.execute(call, returnType);
     }
@@ -258,39 +249,37 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean
     /**
      * Get Bulk Direct Debits (asynchronously)
      * Obtain direct debit authorisations for multiple, filtered accounts
-     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
-    * <table summary="Response Details" border="1">
- *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
- *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
- *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
-    * </table>
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
      */
-    public okhttp3.Call listDirectDebitsBulkAsync(Boolean isOwned, ParamAccountOpenStatus openStatus, Integer page, Integer pageSize, ParamProductCategory productCategory, final ApiCallback<ResponseBankingDirectDebitAuthorisationList> _callback) throws ApiException {
+    public okhttp3.Call listDirectDebitsBulkAsync(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback<ResponseBankingDirectDebitAuthorisationList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously listDirectDebits with is-owned: {}, open-status: {}, page: {}, page-size: {}, product-category: {}",
-            isOwned,
+        LOGGER.trace("Asynchronously listDirectDebitsBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
             openStatus,
+            isOwned,
             page,
-            pageSize,
-            productCategory);
+            pageSize);
 
-        okhttp3.Call call = listDirectDebitsBulkValidateBeforeCall(isOwned, openStatus, page, pageSize, productCategory, _callback);
+        okhttp3.Call call = listDirectDebitsBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
         Type returnType = new TypeToken<ResponseBankingDirectDebitAuthorisationList>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
-    
     /**
      * Build call for listDirectDebitsSpecificAccounts
-     * @param accountIds Array of specific accountIds to obtain authorisations for (optional)
+     * @param accountIds Array of specific accountIds to obtain authorisations for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback Callback for upload/download progress
@@ -299,13 +288,13 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listDirectDebitsSpecificAccountsCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
-        Object postBody = accountIds;
+        Object postBody = null;
 
         // create path and map variables
         String path = "/banking/accounts/direct-debits";
@@ -328,7 +317,12 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call listDirectDebitsSpecificAccountsValidateBeforeCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
-        
+
+        // verify the required parameter 'accountIds' is set
+        if (accountIds == null) {
+            throw new ApiException("Missing the required parameter 'accountIds' when calling listDirectDebitsSpecificAccounts(Async)");
+        }
+
 
         return listDirectDebitsSpecificAccountsCall(accountIds, page, pageSize, _callback);
     }
@@ -336,7 +330,7 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean
     /**
      * Get Direct Debits For Specific Accounts
      * Obtain direct debit authorisations for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain authorisations for (optional)
+     * @param accountIds Array of specific accountIds to obtain authorisations for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ResponseBankingDirectDebitAuthorisationList
@@ -344,8 +338,8 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsBulk(Boolean
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccounts(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -362,7 +356,7 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccou
     /**
      * Get Direct Debits For Specific Accounts
      * Obtain direct debit authorisations for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain authorisations for (optional)
+     * @param accountIds Array of specific accountIds to obtain authorisations for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ApiResponse&lt;ResponseBankingDirectDebitAuthorisationList&gt;
@@ -370,8 +364,8 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccou
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingDirectDebitAuthorisationList> listDirectDebitsSpecificAccountsWithHttpInfo(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -383,7 +377,7 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccou
     /**
      * Get Direct Debits For Specific Accounts (asynchronously)
      * Obtain direct debit authorisations for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain authorisations for (optional)
+     * @param accountIds Array of specific accountIds to obtain authorisations for (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback The callback to be executed when the API call finishes
@@ -391,9 +385,9 @@ public ResponseBankingDirectDebitAuthorisationList listDirectDebitsSpecificAccou
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *    <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listDirectDebitsSpecificAccountsAsync(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback<ResponseBankingDirectDebitAuthorisationList> _callback) throws ApiException {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingPayeesAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingPayeesAPI.java
index 1bc743d..14f43a4 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingPayeesAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingPayeesAPI.java
@@ -15,19 +15,19 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import ch.qos.logback.classic.Logger;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class BankingPayeesAPI extends ProtectedAPI {
 
     public enum ParamType {
-        ALL,
-        BILLER,
         DOMESTIC,
-        INTERNATIONAL
+        INTERNATIONAL,
+        BILLER,
+        ALL
     }
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(BankingPayeesAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BankingPayeesAPI.class);
 
     /**
      * Build call for getPayeeDetail
@@ -38,7 +38,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getPayeeDetailCall(String payeeId, final ApiCallback _callback) throws ApiException {
@@ -63,26 +63,24 @@
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getPayeeDetailValidateBeforeCall(String payeeId, final ApiCallback _callback) throws ApiException {
-        
         // verify the required parameter 'payeeId' is set
         if (payeeId == null) {
             throw new ApiException("Missing the required parameter 'payeeId' when calling getPayeeDetail(Async)");
         }
-        
 
         return getPayeeDetailCall(payeeId, _callback);
     }
 
     /**
      * Get Payee Detail
-     * Obtain detailed information on a single payee
+     * Obtain detailed information on a single payee.  Note that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient
      * @param payeeId The ID used to locate the details of a particular payee (required)
      * @return ResponseBankingPayeeById
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingPayeeById getPayeeDetail(String payeeId) throws ApiException {
@@ -96,14 +94,14 @@ public ResponseBankingPayeeById getPayeeDetail(String payeeId) throws ApiExcepti
 
     /**
      * Get Payee Detail
-     * Obtain detailed information on a single payee
+     * Obtain detailed information on a single payee.  Note that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient
      * @param payeeId The ID used to locate the details of a particular payee (required)
      * @return ApiResponse&lt;ResponseBankingPayeeById&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingPayeeById> getPayeeDetailWithHttpInfo(String payeeId) throws ApiException {
@@ -114,15 +112,15 @@ public ResponseBankingPayeeById getPayeeDetail(String payeeId) throws ApiExcepti
 
     /**
      * Get Payee Detail (asynchronously)
-     * Obtain detailed information on a single payee
+     * Obtain detailed information on a single payee.  Note that the payee sub-structure should be selected to represent the payment destination only rather than any known characteristics of the payment recipient
      * @param payeeId The ID used to locate the details of a particular payee (required)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getPayeeDetailAsync(String payeeId, final ApiCallback<ResponseBankingPayeeById> _callback) throws ApiException {
@@ -137,36 +135,36 @@ public ResponseBankingPayeeById getPayeeDetail(String payeeId) throws ApiExcepti
     }
     /**
      * Build call for listPayees
+     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listPayeesCall(Integer page, Integer pageSize, ParamType type, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call listPayeesCall(ParamType type, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
         // create path and map variables
         String path = "/banking/payees";
 
-        LOGGER.trace("Building Call for listPayees with path: {}, page: {}, page-size: {}, type: {}",
+        LOGGER.trace("Building Call for listPayees with path: {}, type: {}, page: {}, page-size: {}",
             path,
+            type,
             page,
-            pageSize,
-            type);
+            pageSize);
 
-        List<Pair> collectionQueryParams = new ArrayList<>();
         List<Pair> queryParams = new ArrayList<>();
+        List<Pair> collectionQueryParams = new ArrayList<>();
+        addQueryParam(queryParams, "type", type);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "type", type);
         Map<String, String> headerParams = new HashMap<>();
         addCdsProtectedApiHeaders(headerParams);
         String[] authNames = new String[] {  };
@@ -174,53 +172,53 @@ public ResponseBankingPayeeById getPayeeDetail(String payeeId) throws ApiExcepti
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call listPayeesValidateBeforeCall(Integer page, Integer pageSize, ParamType type, final ApiCallback _callback) throws ApiException {
-        
+    private okhttp3.Call listPayeesValidateBeforeCall(ParamType type, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
-        return listPayeesCall(page, pageSize, type, _callback);
+
+        return listPayeesCall(type, page, pageSize, _callback);
     }
 
     /**
      * Get Payees
      * Obtain a list of pre-registered payees
+     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @return ResponseBankingPayeeList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ResponseBankingPayeeList listPayees(Integer page, Integer pageSize, ParamType type) throws ApiException {
+    public ResponseBankingPayeeList listPayees(ParamType type, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("listPayees with page: {}, page-size: {}, type: {}",
+        LOGGER.trace("listPayees with type: {}, page: {}, page-size: {}",
+            type,
             page,
-            pageSize,
-            type);
+            pageSize);
 
-        ApiResponse<ResponseBankingPayeeList> resp = listPayeesWithHttpInfo(page, pageSize, type);
+        ApiResponse<ResponseBankingPayeeList> resp = listPayeesWithHttpInfo(type, page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Payees
      * Obtain a list of pre-registered payees
+     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @return ApiResponse&lt;ResponseBankingPayeeList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<ResponseBankingPayeeList> listPayeesWithHttpInfo(Integer page, Integer pageSize, ParamType type) throws ApiException {
-        okhttp3.Call call = listPayeesValidateBeforeCall(page, pageSize, type, null);
+    public ApiResponse<ResponseBankingPayeeList> listPayeesWithHttpInfo(ParamType type, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listPayeesValidateBeforeCall(type, page, pageSize, null);
         Type returnType = new TypeToken<ResponseBankingPayeeList>(){}.getType();
         return apiClient.execute(call, returnType);
     }
@@ -228,26 +226,26 @@ public ResponseBankingPayeeList listPayees(Integer page, Integer pageSize, Param
     /**
      * Get Payees (asynchronously)
      * Obtain a list of pre-registered payees
+     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param type Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL (optional, default to ALL)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listPayeesAsync(Integer page, Integer pageSize, ParamType type, final ApiCallback<ResponseBankingPayeeList> _callback) throws ApiException {
+    public okhttp3.Call listPayeesAsync(ParamType type, Integer page, Integer pageSize, final ApiCallback<ResponseBankingPayeeList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously listPayees with page: {}, page-size: {}, type: {}",
+        LOGGER.trace("Asynchronously listPayees with type: {}, page: {}, page-size: {}",
+            type,
             page,
-            pageSize,
-            type);
+            pageSize);
 
-        okhttp3.Call call = listPayeesValidateBeforeCall(page, pageSize, type, _callback);
+        okhttp3.Call call = listPayeesValidateBeforeCall(type, page, pageSize, _callback);
         Type returnType = new TypeToken<ResponseBankingPayeeList>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingProductsAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingProductsAPI.java
index b86fdd0..204ea5d 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingProductsAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingProductsAPI.java
@@ -9,25 +9,29 @@
 
 import au.org.consumerdatastandards.client.*;
 import au.org.consumerdatastandards.client.model.*;
-import java.time.OffsetDateTime;
 import com.google.gson.reflect.TypeToken;
+
+import java.io.IOException;
 import java.lang.reflect.Type;
+import java.time.OffsetDateTime;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import ch.qos.logback.classic.Logger;
+
+import okhttp3.Response;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class BankingProductsAPI {
 
     public enum ParamEffective {
-        ALL,
         CURRENT,
-        FUTURE
+        FUTURE,
+        ALL
     }
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(BankingProductsAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BankingProductsAPI.class);
 
     private ApiClient apiClient;
 
@@ -56,11 +60,29 @@ public void setApiClient(ApiClient apiClient) {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getProductDetailCall(String productId, final ApiCallback _callback) throws ApiException {
 
+        return getProductDetailCall(productId, 1, _callback);
+    }
+
+    /**
+     * Build call for getProductDetail
+     * @param productId ID of the specific product requested (required)
+     * @param _callback Callback for upload/download progress
+     * @param version endpoint version
+     * @return Call to execute
+     * @throws ApiException If fail to serialize the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call getProductDetailCall(String productId, Integer version, final ApiCallback _callback) throws ApiException {
+
         Object postBody = null;
 
         // create path and map variables
@@ -74,222 +96,357 @@ public void setApiClient(ApiClient apiClient) {
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
         Map<String, String> headerParams = new HashMap<>();
+        headerParams.put("x-v", "" + version);
         String[] authNames = new String[] {  };
         return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call getProductDetailValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
-        
+    private okhttp3.Call getProductDetailValidateBeforeCall(String productId, Integer version, final ApiCallback _callback) throws ApiException {
+
         // verify the required parameter 'productId' is set
         if (productId == null) {
             throw new ApiException("Missing the required parameter 'productId' when calling getProductDetail(Async)");
         }
-        
 
-        return getProductDetailCall(productId, _callback);
+        return getProductDetailCall(productId, version, _callback);
     }
 
     /**
      * Get Product Detail
-     * Obtain detailed information on a single product offered openly to the market
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
      * @param productId ID of the specific product requested (required)
      * @return ResponseBankingProductById
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingProductById getProductDetail(String productId) throws ApiException {
 
-        LOGGER.trace("getProductDetail with productId: {}",
-            productId);
+        return getProductDetail(productId, 1);
+    }
 
-        ApiResponse<ResponseBankingProductById> resp = getProductDetailWithHttpInfo(productId);
+    /**
+     * Get Product Detail
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
+     * @param productId ID of the specific product requested (required)
+     * @param version endpoint version
+     * @return ResponseBankingProductById
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public ResponseBankingProductById getProductDetail(String productId, Integer version) throws ApiException {
+
+        LOGGER.trace("getProductDetail with productId: {}, version: {}",
+            productId, version);
+
+        ApiResponse<ResponseBankingProductById> resp = getProductDetailWithHttpInfo(productId, version);
         return resp.getData();
     }
 
     /**
      * Get Product Detail
-     * Obtain detailed information on a single product offered openly to the market
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
      * @param productId ID of the specific product requested (required)
      * @return ApiResponse&lt;ResponseBankingProductById&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingProductById> getProductDetailWithHttpInfo(String productId) throws ApiException {
-        okhttp3.Call call = getProductDetailValidateBeforeCall(productId, null);
-        Type returnType = new TypeToken<ResponseBankingProductById>(){}.getType();
-        return apiClient.execute(call, returnType);
+        return getProductDetailWithHttpInfo(productId, 1);
+    }
+
+    /**
+     * Get Product Detail
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
+     * @param productId ID of the specific product requested (required)
+     * @param version endpoint version
+     * @return ApiResponse&lt;ResponseBankingProductById&gt;
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public ApiResponse<ResponseBankingProductById> getProductDetailWithHttpInfo(String productId, Integer version) throws ApiException {
+        okhttp3.Call call = getProductDetailValidateBeforeCall(productId, version, null);
+        try {
+            Response response = call.execute();
+            Type returnType = new GetProductDetailReturnTypeResolver().resolve(response);
+            return apiClient.handle(response, returnType);
+        } catch (IOException e) {
+            throw new ApiException(e);
+        }
     }
 
     /**
      * Get Product Detail (asynchronously)
-     * Obtain detailed information on a single product offered openly to the market
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
      * @param productId ID of the specific product requested (required)
      * @param _callback The callback to be executed when the API call finishes
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getProductDetailAsync(String productId, final ApiCallback<ResponseBankingProductById> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously getProductDetail with productId: {}",
-            productId);
+        return getProductDetailAsync(productId, 1, _callback);
+    }
+
+    /**
+     * Get Product Detail (asynchronously)
+     * Obtain detailed information on a single product offered openly to the market.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-product-detail-v1.html)
+     * @param productId ID of the specific product requested (required)
+     * @param _callback The callback to be executed when the API call finishes
+     * @param version endpoint version
+     * @return The request call
+     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call getProductDetailAsync(String productId, Integer version, final ApiCallback<ResponseBankingProductById> _callback) throws ApiException {
 
-        okhttp3.Call call = getProductDetailValidateBeforeCall(productId, _callback);
-        Type returnType = new TypeToken<ResponseBankingProductById>(){}.getType();
-        apiClient.executeAsync(call, returnType, _callback);
+        LOGGER.trace("Asynchronously getProductDetail with productId: {}, version: {}",
+            productId, version);
+
+        okhttp3.Call call = getProductDetailValidateBeforeCall(productId, version, _callback);
+        apiClient.executeAsync(call, _callback, new GetProductDetailReturnTypeResolver());
         return call;
     }
+
     /**
      * Build call for listProducts
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
+     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
      * @param brand Filter results based on a specific brand (optional)
-     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &amp;#39;CURRENT&amp;#39; (optional, default to CURRENT)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
-     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
      * @param _callback Callback for upload/download progress
      * @return Call to execute
      * @throws ApiException If fail to serialize the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listProductsCall(String brand, ParamEffective effective, Integer page, Integer pageSize, ParamProductCategory productCategory, OffsetDateTime updatedSince, final ApiCallback _callback) throws ApiException {
+    public okhttp3.Call listProductsCall(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer version, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
 
         Object postBody = null;
 
         // create path and map variables
         String path = "/banking/products";
 
-        LOGGER.trace("Building Call for listProducts with path: {}, brand: {}, effective: {}, page: {}, page-size: {}, product-category: {}, updated-since: {}",
+        LOGGER.trace("Building Call for listProducts with path: {}, effective: {}, updated-since: {}, brand: {}, product-category: {}, page: {}, page-size: {}",
             path,
-            brand,
             effective,
-            page,
-            pageSize,
+            updatedSince,
+            brand,
             productCategory,
-            updatedSince);
+            page,
+            pageSize);
 
         List<Pair> queryParams = new ArrayList<>();
         List<Pair> collectionQueryParams = new ArrayList<>();
-        addQueryParam(queryParams, "brand", brand);
         addQueryParam(queryParams, "effective", effective);
+        addQueryParam(queryParams, "updated-since", updatedSince);
+        addQueryParam(queryParams, "brand", brand);
+        addQueryParam(queryParams, "product-category", productCategory);
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
-        addQueryParam(queryParams, "product-category", productCategory);
-        addQueryParam(queryParams, "updated-since", updatedSince);
         Map<String, String> headerParams = new HashMap<>();
+        headerParams.put("x-v", "" + version);
         String[] authNames = new String[] {  };
         return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
     }
 
     @SuppressWarnings("rawtypes")
-    private okhttp3.Call listProductsValidateBeforeCall(String brand, ParamEffective effective, Integer page, Integer pageSize, ParamProductCategory productCategory, OffsetDateTime updatedSince, final ApiCallback _callback) throws ApiException {
-        
+    private okhttp3.Call listProductsValidateBeforeCall(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer version, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
+
 
-        return listProductsCall(brand, effective, page, pageSize, productCategory, updatedSince, _callback);
+        return listProductsCall(effective, updatedSince, brand, productCategory, version, page, pageSize, _callback);
     }
 
     /**
      * Get Products
-     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
+     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
      * @param brand Filter results based on a specific brand (optional)
-     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &amp;#39;CURRENT&amp;#39; (optional, default to CURRENT)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
-     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
+     * @param version endpoint version
      * @return ResponseBankingProductList
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public ResponseBankingProductList listProducts(String brand, ParamEffective effective, Integer page, Integer pageSize, ParamProductCategory productCategory, OffsetDateTime updatedSince) throws ApiException {
+    public ResponseBankingProductList listProducts(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer version, Integer page, Integer pageSize) throws ApiException {
 
-        LOGGER.trace("listProducts with brand: {}, effective: {}, page: {}, page-size: {}, product-category: {}, updated-since: {}",
-            brand,
+        LOGGER.trace("listProducts with effective: {}, updated-since: {}, brand: {}, product-category: {}, page: {}, page-size: {}, version: {}",
             effective,
+            updatedSince,
+            brand,
+            productCategory,
             page,
             pageSize,
-            productCategory,
-            updatedSince);
+            version);
 
-        ApiResponse<ResponseBankingProductList> resp = listProductsWithHttpInfo(brand, effective, page, pageSize, productCategory, updatedSince);
+        ApiResponse<ResponseBankingProductList> resp = listProductsWithHttpInfo(effective, updatedSince, brand, productCategory, version,  page, pageSize);
         return resp.getData();
     }
 
     /**
      * Get Products
-     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
+     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
      * @param brand Filter results based on a specific brand (optional)
-     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &amp;#39;CURRENT&amp;#39; (optional, default to CURRENT)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @return ResponseBankingProductList
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public ResponseBankingProductList listProducts(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer page, Integer pageSize) throws ApiException {
+
+        return listProducts(effective, updatedSince, brand, productCategory, 1, page, pageSize);
+    }
+
+
+    /**
+     * Get Products
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
+     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
+     * @param brand Filter results based on a specific brand (optional)
      * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @return ApiResponse&lt;ResponseBankingProductList&gt;
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public ApiResponse<ResponseBankingProductList> listProductsWithHttpInfo(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer page, Integer pageSize) throws ApiException {
+        return listProductsWithHttpInfo(effective, updatedSince, brand, productCategory, 1, page, pageSize);
+    }
+
+    /**
+     * Get Products
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
      * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
+     * @param brand Filter results based on a specific brand (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @param version endpoint version
      * @return ApiResponse&lt;ResponseBankingProductList&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<ResponseBankingProductList> listProductsWithHttpInfo(String brand, ParamEffective effective, Integer page, Integer pageSize, ParamProductCategory productCategory, OffsetDateTime updatedSince) throws ApiException {
-        okhttp3.Call call = listProductsValidateBeforeCall(brand, effective, page, pageSize, productCategory, updatedSince, null);
-        Type returnType = new TypeToken<ResponseBankingProductList>(){}.getType();
-        return apiClient.execute(call, returnType);
+    public ApiResponse<ResponseBankingProductList> listProductsWithHttpInfo(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer version, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listProductsValidateBeforeCall(effective, updatedSince, brand, productCategory, version, page, pageSize, null);
+        try {
+            Response response = call.execute();
+            Type returnType = new ListProductsReturnTypeResolver().resolve(response);
+            return apiClient.handle(response, returnType);
+        } catch (IOException e) {
+            throw new ApiException(e);
+        }
     }
 
     /**
      * Get Products (asynchronously)
-     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
+     * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
      * @param brand Filter results based on a specific brand (optional)
-     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &amp;#39;CURRENT&amp;#39; (optional, default to CURRENT)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
-     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param _callback The callback to be executed when the API call finishes
+     * @return The request call
+     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call listProductsAsync(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer page, Integer pageSize, final ApiCallback<ResponseBankingProductList> _callback) throws ApiException {
+
+        return listProductsAsync(effective, updatedSince, brand, productCategory, 1, page, pageSize, _callback);
+    }
+
+    /**
+     * Get Products (asynchronously)
+     * Obtain a list of products that are currently openly offered to the market  Note that the results returned by this end point are expected to be ordered according to updated-since  ### Conventions In the product reference payloads there are a number of recurring conventions that are explained here, in one place.  #### Arrays Of Features  In the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:  - Each element in an array has the same structure so that clients can reliably interpret the payloads - Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees. - Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product. - An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths. - An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product. - Depending on the type of data being represented there may be additional specific fields.  #### URIs To More Information  As the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.  These URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.  #### Linkage To Accounts From the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.  For this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.  Similarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.  #### Dates It is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.  In addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely.  NOTE: This version must be implemented by **July 2020**  Obsolete versions: [v1](includes/obsolete/get-products-v1.html)
+     * @param effective Allows for the filtering of products based on whether the current time is within the period of time defined as effective by the effectiveFrom and effectiveTo fields. Valid values are ‘CURRENT’, ‘FUTURE’ and ‘ALL’. If absent defaults to &#39;CURRENT&#39; (optional, default to CURRENT)
      * @param updatedSince Only include products that have been updated after the specified date and time. If absent defaults to include all products (optional)
+     * @param brand Filter results based on a specific brand (optional)
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback The callback to be executed when the API call finishes
+     * @param version endpoint version
      * @return The request call
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call listProductsAsync(String brand, ParamEffective effective, Integer page, Integer pageSize, ParamProductCategory productCategory, OffsetDateTime updatedSince, final ApiCallback<ResponseBankingProductList> _callback) throws ApiException {
+    public okhttp3.Call listProductsAsync(ParamEffective effective, OffsetDateTime updatedSince, String brand, ParamProductCategory productCategory, Integer version, Integer page, Integer pageSize, final ApiCallback<ResponseBankingProductList> _callback) throws ApiException {
 
-        LOGGER.trace("Asynchronously listProducts with brand: {}, effective: {}, page: {}, page-size: {}, product-category: {}, updated-since: {}",
-            brand,
+        LOGGER.trace("Asynchronously listProducts with effective: {}, updated-since: {}, brand: {}, product-category: {}, page: {}, page-size: {}",
             effective,
-            page,
-            pageSize,
+            updatedSince,
+            brand,
             productCategory,
-            updatedSince);
+            page,
+            pageSize);
 
-        okhttp3.Call call = listProductsValidateBeforeCall(brand, effective, page, pageSize, productCategory, updatedSince, _callback);
-        Type returnType = new TypeToken<ResponseBankingProductList>(){}.getType();
-        apiClient.executeAsync(call, returnType, _callback);
+        okhttp3.Call call = listProductsValidateBeforeCall(effective, updatedSince, brand, productCategory, version, page, pageSize, _callback);
+        apiClient.executeAsync(call, _callback, new ListProductsReturnTypeResolver());
         return call;
     }
 
@@ -299,4 +456,32 @@ private void addQueryParam(List<Pair> queryParams, String paramName, Object para
             queryParams.addAll(apiClient.parameterToPair(paramName, paramValue));
         }
     }
+
+    private class ListProductsReturnTypeResolver implements ReturnTypeResolver {
+        @Override
+        public Type resolve(Response response) {
+            String version = response.header("x-v");
+            Integer versionNumber = Integer.parseInt(version);
+            switch (versionNumber) {
+                case 2:
+                    return new TypeToken<ResponseBankingProductList<BankingProductV2>>(){}.getType();
+                default:
+                    return new TypeToken<ResponseBankingProductList<BankingProductV1>>(){}.getType();
+            }
+        }
+    }
+
+    private class GetProductDetailReturnTypeResolver implements ReturnTypeResolver {
+        @Override
+        public Type resolve(Response response) {
+            String version = response.header("x-v");
+            Integer versionNumber = Integer.parseInt(version);
+            switch (versionNumber) {
+                case 2:
+                    return new TypeToken<ResponseBankingProductById<BankingProductV2Detail>>(){}.getType();
+                default:
+                    return new TypeToken<ResponseBankingProductById<BankingProductV1Detail>>(){}.getType();
+            }
+        }
+    }
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingScheduledPaymentsAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingScheduledPaymentsAPI.java
index 97365a5..fcdfd4f 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/BankingScheduledPaymentsAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/BankingScheduledPaymentsAPI.java
@@ -15,12 +15,12 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import ch.qos.logback.classic.Logger;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class BankingScheduledPaymentsAPI extends ProtectedAPI {
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(BankingScheduledPaymentsAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(BankingScheduledPaymentsAPI.class);
 
     /**
      * Build call for listScheduledPayments
@@ -33,7 +33,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listScheduledPaymentsCall(String accountId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
@@ -62,12 +62,12 @@
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call listScheduledPaymentsValidateBeforeCall(String accountId, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
-        
+
         // verify the required parameter 'accountId' is set
         if (accountId == null) {
             throw new ApiException("Missing the required parameter 'accountId' when calling listScheduledPayments(Async)");
         }
-        
+
 
         return listScheduledPaymentsCall(accountId, page, pageSize, _callback);
     }
@@ -83,7 +83,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingScheduledPaymentsList listScheduledPayments(String accountId, Integer page, Integer pageSize) throws ApiException {
@@ -108,7 +108,7 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingScheduledPaymentsList> listScheduledPaymentsWithHttpInfo(String accountId, Integer page, Integer pageSize) throws ApiException {
@@ -128,8 +128,8 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listScheduledPaymentsAsync(String accountId, Integer page, Integer pageSize, final ApiCallback<ResponseBankingScheduledPaymentsList> _callback) throws ApiException {
@@ -144,9 +144,142 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
+    /**
+     * Build call for listScheduledPaymentsBulk
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @param _callback Callback for upload/download progress
+     * @return Call to execute
+     * @throws ApiException If fail to serialize the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call listScheduledPaymentsBulkCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
+
+        Object postBody = null;
+
+        // create path and map variables
+        String path = "/banking/payments/scheduled";
+
+        LOGGER.trace("Building Call for listScheduledPaymentsBulk with path: {}, product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            path,
+            productCategory,
+            openStatus,
+            isOwned,
+            page,
+            pageSize);
+
+        List<Pair> queryParams = new ArrayList<>();
+        List<Pair> collectionQueryParams = new ArrayList<>();
+        addQueryParam(queryParams, "product-category", productCategory);
+        addQueryParam(queryParams, "open-status", openStatus);
+        addQueryParam(queryParams, "is-owned", isOwned);
+        addQueryParam(queryParams, "page", page);
+        addQueryParam(queryParams, "page-size", pageSize);
+        Map<String, String> headerParams = new HashMap<>();
+        addCdsProtectedApiHeaders(headerParams);
+        String[] authNames = new String[] {  };
+        return apiClient.buildCall(path, "GET", queryParams, collectionQueryParams, postBody, headerParams, authNames, _callback);
+    }
+
+    @SuppressWarnings("rawtypes")
+    private okhttp3.Call listScheduledPaymentsBulkValidateBeforeCall(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
+
+
+        return listScheduledPaymentsBulkCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
+    }
+
+    /**
+     * Get Scheduled Payments Bulk
+     * Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @return ResponseBankingScheduledPaymentsList
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public ResponseBankingScheduledPaymentsList listScheduledPaymentsBulk(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
+
+        LOGGER.trace("listScheduledPaymentsBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
+            openStatus,
+            isOwned,
+            page,
+            pageSize);
+
+        ApiResponse<ResponseBankingScheduledPaymentsList> resp = listScheduledPaymentsBulkWithHttpInfo(productCategory, openStatus, isOwned, page, pageSize);
+        return resp.getData();
+    }
+
+    /**
+     * Get Scheduled Payments Bulk
+     * Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @return ApiResponse&lt;ResponseBankingScheduledPaymentsList&gt;
+     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public ApiResponse<ResponseBankingScheduledPaymentsList> listScheduledPaymentsBulkWithHttpInfo(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize) throws ApiException {
+        okhttp3.Call call = listScheduledPaymentsBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, null);
+        Type returnType = new TypeToken<ResponseBankingScheduledPaymentsList>(){}.getType();
+        return apiClient.execute(call, returnType);
+    }
+
+    /**
+     * Get Scheduled Payments Bulk (asynchronously)
+     * Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments
+     * @param productCategory Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned. (optional)
+     * @param openStatus Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed (optional, default to ALL)
+     * @param isOwned Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts (optional)
+     * @param page Page of results to request (standard pagination) (optional, default to 1)
+     * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
+     * @param _callback The callback to be executed when the API call finishes
+     * @return The request call
+     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
+     * http.response.details
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     * </table>
+     */
+    public okhttp3.Call listScheduledPaymentsBulkAsync(ParamProductCategory productCategory, ParamAccountOpenStatus openStatus, Boolean isOwned, Integer page, Integer pageSize, final ApiCallback<ResponseBankingScheduledPaymentsList> _callback) throws ApiException {
+
+        LOGGER.trace("Asynchronously listScheduledPaymentsBulk with product-category: {}, open-status: {}, is-owned: {}, page: {}, page-size: {}",
+            productCategory,
+            openStatus,
+            isOwned,
+            page,
+            pageSize);
+
+        okhttp3.Call call = listScheduledPaymentsBulkValidateBeforeCall(productCategory, openStatus, isOwned, page, pageSize, _callback);
+        Type returnType = new TypeToken<ResponseBankingScheduledPaymentsList>(){}.getType();
+        apiClient.executeAsync(call, returnType, _callback);
+        return call;
+    }
     /**
      * Build call for listScheduledPaymentsSpecificAccounts
-     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (optional)
+     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback Callback for upload/download progress
@@ -155,8 +288,8 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listScheduledPaymentsSpecificAccountsCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
@@ -172,8 +305,8 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
             page,
             pageSize);
 
-        List<Pair> collectionQueryParams = new ArrayList<>();
         List<Pair> queryParams = new ArrayList<>();
+        List<Pair> collectionQueryParams = new ArrayList<>();
         addQueryParam(queryParams, "page", page);
         addQueryParam(queryParams, "page-size", pageSize);
         Map<String, String> headerParams = new HashMap<>();
@@ -184,7 +317,12 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call listScheduledPaymentsSpecificAccountsValidateBeforeCall(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
-        
+
+        // verify the required parameter 'accountIds' is set
+        if (accountIds == null) {
+            throw new ApiException("Missing the required parameter 'accountIds' when calling listScheduledPaymentsSpecificAccounts(Async)");
+        }
+
 
         return listScheduledPaymentsSpecificAccountsCall(accountIds, page, pageSize, _callback);
     }
@@ -192,7 +330,7 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
     /**
      * Get Scheduled Payments For Specific Accounts
      * Obtain scheduled payments for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (optional)
+     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ResponseBankingScheduledPaymentsList
@@ -200,8 +338,8 @@ public ResponseBankingScheduledPaymentsList listScheduledPayments(String account
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccounts(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -218,7 +356,7 @@ public ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccount
     /**
      * Get Scheduled Payments For Specific Accounts
      * Obtain scheduled payments for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (optional)
+     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @return ApiResponse&lt;ResponseBankingScheduledPaymentsList&gt;
@@ -226,8 +364,8 @@ public ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccount
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *   <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseBankingScheduledPaymentsList> listScheduledPaymentsSpecificAccountsWithHttpInfo(RequestAccountIds accountIds, Integer page, Integer pageSize) throws ApiException {
@@ -239,7 +377,7 @@ public ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccount
     /**
      * Get Scheduled Payments For Specific Accounts (asynchronously)
      * Obtain scheduled payments for a specified list of accounts
-     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (optional)
+     * @param accountIds Array of specific accountIds to obtain scheduled payments for.  The accounts specified are the source of funds for the payments returned (required)
      * @param page Page of results to request (standard pagination) (optional, default to 1)
      * @param pageSize Page size to request. Default is 25 (standard pagination) (optional, default to 25)
      * @param _callback The callback to be executed when the API call finishes
@@ -247,9 +385,9 @@ public ResponseBankingScheduledPaymentsList listScheduledPaymentsSpecificAccount
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
-     *   <tr><td> ResponseCode.UNPROCESSABLE_ENTITY </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
+     *    <tr><td> 422 </td><td> The request was well formed but was unable to be processed due to business logic specific to the request </td><td>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call listScheduledPaymentsSpecificAccountsAsync(RequestAccountIds accountIds, Integer page, Integer pageSize, final ApiCallback<ResponseBankingScheduledPaymentsList> _callback) throws ApiException {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/CommonCustomerAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/CommonCustomerAPI.java
index 33835d7..1cebbfe 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/CommonCustomerAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/CommonCustomerAPI.java
@@ -15,7 +15,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,7 +30,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getCustomerCall(final ApiCallback _callback) throws ApiException {
@@ -54,7 +53,7 @@
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getCustomerValidateBeforeCall(final ApiCallback _callback) throws ApiException {
-        
+
 
         return getCustomerCall(_callback);
     }
@@ -67,7 +66,7 @@
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ResponseCommonCustomer getCustomer() throws ApiException {
@@ -86,7 +85,7 @@ public ResponseCommonCustomer getCustomer() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseCommonCustomer> getCustomerWithHttpInfo() throws ApiException {
@@ -103,8 +102,8 @@ public ResponseCommonCustomer getCustomer() throws ApiException {
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getCustomerAsync(final ApiCallback<ResponseCommonCustomer> _callback) throws ApiException {
@@ -124,7 +123,7 @@ public ResponseCommonCustomer getCustomer() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getCustomerDetailCall(final ApiCallback _callback) throws ApiException {
@@ -147,7 +146,7 @@ public ResponseCommonCustomer getCustomer() throws ApiException {
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getCustomerDetailValidateBeforeCall(final ApiCallback _callback) throws ApiException {
-        
+
 
         return getCustomerDetailCall(_callback);
     }
@@ -160,7 +159,7 @@ public ResponseCommonCustomer getCustomer() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ResponseCommonCustomerDetail getCustomerDetail() throws ApiException {
@@ -179,7 +178,7 @@ public ResponseCommonCustomerDetail getCustomerDetail() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseCommonCustomerDetail> getCustomerDetailWithHttpInfo() throws ApiException {
@@ -196,8 +195,8 @@ public ResponseCommonCustomerDetail getCustomerDetail() throws ApiException {
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  * x-fapi-interaction-id - An [RFC4122](https://tools.ietf.org/html/rfc4122) UUID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getCustomerDetailAsync(final ApiCallback<ResponseCommonCustomerDetail> _callback) throws ApiException {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/CommonDiscoveryAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/CommonDiscoveryAPI.java
index b0e5000..d5464ee 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/CommonDiscoveryAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/CommonDiscoveryAPI.java
@@ -15,12 +15,12 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import ch.qos.logback.classic.Logger;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 public class CommonDiscoveryAPI {
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger(CommonDiscoveryAPI.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(CommonDiscoveryAPI.class);
 
     private ApiClient apiClient;
 
@@ -48,7 +48,7 @@ public void setApiClient(ApiClient apiClient) {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getOutagesCall(final ApiCallback _callback) throws ApiException {
@@ -70,7 +70,7 @@ public void setApiClient(ApiClient apiClient) {
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getOutagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
-        
+
 
         return getOutagesCall(_callback);
     }
@@ -83,7 +83,7 @@ public void setApiClient(ApiClient apiClient) {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ResponseDiscoveryOutagesList getOutages() throws ApiException {
@@ -102,7 +102,7 @@ public ResponseDiscoveryOutagesList getOutages() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public ApiResponse<ResponseDiscoveryOutagesList> getOutagesWithHttpInfo() throws ApiException {
@@ -119,8 +119,8 @@ public ResponseDiscoveryOutagesList getOutages() throws ApiException {
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getOutagesAsync(final ApiCallback<ResponseDiscoveryOutagesList> _callback) throws ApiException {
@@ -140,7 +140,7 @@ public ResponseDiscoveryOutagesList getOutages() throws ApiException {
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
     public okhttp3.Call getStatusCall(final ApiCallback _callback) throws ApiException {
@@ -162,7 +162,7 @@ public ResponseDiscoveryOutagesList getOutages() throws ApiException {
 
     @SuppressWarnings("rawtypes")
     private okhttp3.Call getStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
-        
+
 
         return getStatusCall(_callback);
     }
@@ -170,36 +170,36 @@ public ResponseDiscoveryOutagesList getOutages() throws ApiException {
     /**
      * Get Status
      * Obtain a health check status for the implementation
-     * @return CommonDiscoveryStatus
+     * @return ResponseCommonDiscoveryStatus
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public CommonDiscoveryStatus getStatus() throws ApiException {
+    public ResponseCommonDiscoveryStatus getStatus() throws ApiException {
 
         LOGGER.trace("getStatus");
 
-        ApiResponse<CommonDiscoveryStatus> resp = getStatusWithHttpInfo();
+        ApiResponse<ResponseCommonDiscoveryStatus> resp = getStatusWithHttpInfo();
         return resp.getData();
     }
 
     /**
      * Get Status
      * Obtain a health check status for the implementation
-     * @return ApiResponse&lt;CommonDiscoveryStatus&gt;
+     * @return ApiResponse&lt;ResponseCommonDiscoveryStatus&gt;
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      * http.response.details
      * <table summary="Response Details" border="1">
      *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *   <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public ApiResponse<CommonDiscoveryStatus> getStatusWithHttpInfo() throws ApiException {
+    public ApiResponse<ResponseCommonDiscoveryStatus> getStatusWithHttpInfo() throws ApiException {
         okhttp3.Call call = getStatusValidateBeforeCall(null);
-        Type returnType = new TypeToken<CommonDiscoveryStatus>(){}.getType();
+        Type returnType = new TypeToken<ResponseCommonDiscoveryStatus>(){}.getType();
         return apiClient.execute(call, returnType);
     }
 
@@ -211,16 +211,16 @@ public CommonDiscoveryStatus getStatus() throws ApiException {
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      * http.response.details
      * <table summary="Response Details" border="1">
-     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
-     *   <tr><td> ResponseCode.OK </td><td> Success </td><td>  -  </td></tr>
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     *    <tr><td> 200 </td><td> Success </td><td>  * x-v - The [version](#response-headers) of the API end point that the data holder has responded with. <br>  </td></tr>
      * </table>
      */
-    public okhttp3.Call getStatusAsync(final ApiCallback<CommonDiscoveryStatus> _callback) throws ApiException {
+    public okhttp3.Call getStatusAsync(final ApiCallback<ResponseCommonDiscoveryStatus> _callback) throws ApiException {
 
         LOGGER.trace("Asynchronously getStatus");
 
         okhttp3.Call call = getStatusValidateBeforeCall(_callback);
-        Type returnType = new TypeToken<CommonDiscoveryStatus>(){}.getType();
+        Type returnType = new TypeToken<ResponseCommonDiscoveryStatus>(){}.getType();
         apiClient.executeAsync(call, returnType, _callback);
         return call;
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/ProtectedAPI.java b/client/src/main/java/au/org/consumerdatastandards/client/api/ProtectedAPI.java
index ebb0f5e..a20c440 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/api/ProtectedAPI.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/ProtectedAPI.java
@@ -8,7 +8,6 @@
 import java.net.SocketException;
 import java.net.UnknownHostException;
 import java.time.OffsetDateTime;
-import java.util.Base64;
 import java.util.Map;
 
 public class ProtectedAPI {
@@ -26,7 +25,6 @@ public ProtectedAPI(ApiClient apiClient) {
     protected void addCdsProtectedApiHeaders(Map<String, String> headers) {
         headers.put("x-fapi-customer-ip-address", getIpAddress());
         headers.put("x-fapi-auth-date", OffsetDateTime.now().toString());
-        headers.put("x-cds-user-agent", Base64.getEncoder().encodeToString(apiClient.getUserAgent().getBytes()));
     }
 
     private String getIpAddress() {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/api/ReturnTypeResolver.java b/client/src/main/java/au/org/consumerdatastandards/client/api/ReturnTypeResolver.java
new file mode 100644
index 0000000..ed652ba
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/api/ReturnTypeResolver.java
@@ -0,0 +1,10 @@
+package au.org.consumerdatastandards.client.api;
+
+import okhttp3.Response;
+
+import java.lang.reflect.Type;
+
+public interface ReturnTypeResolver {
+
+    Type resolve(Response response);
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccount.java
index 0580765..1e15842 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccount.java
@@ -13,8 +13,8 @@
 public class BankingAccount {
 
     public enum OpenStatus {
-        CLOSED,
-        OPEN
+        OPEN,
+        CLOSED
     }
 
     private String accountId;
@@ -23,13 +23,13 @@
 
     private String displayName;
 
-    private Boolean isOwned = true;
+    private String nickname;
 
-    private String maskedNumber;
+    private OpenStatus openStatus = OpenStatus.OPEN;
 
-    private String nickname;
+    private Boolean isOwned = true;
 
-    private OpenStatus openStatus;
+    private String maskedNumber;
 
     private BankingProductCategory productCategory;
 
@@ -72,51 +72,51 @@ public void setDisplayName(String displayName) {
     }
 
     /**
-     * Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then &#39;true&#39; is assumed
-     * @return isOwned
+     * A customer supplied nick name for the account
+     * @return nickname
      */
-    public Boolean getIsOwned() {
-        return isOwned;
+    public String getNickname() {
+        return nickname;
     }
 
-    public void setIsOwned(Boolean isOwned) {
-        this.isOwned = isOwned;
+    public void setNickname(String nickname) {
+        this.nickname = nickname;
     }
 
     /**
-     * A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number
-     * @return maskedNumber
+     * Open or closed status for the account. If not present then OPEN is assumed
+     * @return openStatus
      */
-    public String getMaskedNumber() {
-        return maskedNumber;
+    public OpenStatus getOpenStatus() {
+        return openStatus;
     }
 
-    public void setMaskedNumber(String maskedNumber) {
-        this.maskedNumber = maskedNumber;
+    public void setOpenStatus(OpenStatus openStatus) {
+        this.openStatus = openStatus;
     }
 
     /**
-     * A customer supplied nick name for the account
-     * @return nickname
+     * Flag indicating that the customer associated with the authorisation is an owner of the account. Does not indicate sole ownership, however. If not present then &#39;true&#39; is assumed
+     * @return isOwned
      */
-    public String getNickname() {
-        return nickname;
+    public Boolean getIsOwned() {
+        return isOwned;
     }
 
-    public void setNickname(String nickname) {
-        this.nickname = nickname;
+    public void setIsOwned(Boolean isOwned) {
+        this.isOwned = isOwned;
     }
 
     /**
-     * Get openStatus
-     * @return openStatus
+     * A masked version of the account. Whether BSB/Account Number, Credit Card PAN or another number
+     * @return maskedNumber
      */
-    public OpenStatus getOpenStatus() {
-        return openStatus;
+    public String getMaskedNumber() {
+        return maskedNumber;
     }
 
-    public void setOpenStatus(OpenStatus openStatus) {
-        this.openStatus = openStatus;
+    public void setMaskedNumber(String maskedNumber) {
+        this.maskedNumber = maskedNumber;
     }
 
     /**
@@ -132,7 +132,7 @@ public void setProductCategory(BankingProductCategory productCategory) {
     }
 
     /**
-     * The unique identifier of the account as defined by the account holder (akin to model number for the account)
+     * The unique identifier of the account as defined by the data holder (akin to model number for the account)
      * @return productName
      */
     public String getProductName() {
@@ -155,10 +155,10 @@ public boolean equals(Object o) {
         return Objects.equals(this.accountId, bankingAccount.accountId) &&
             Objects.equals(this.creationDate, bankingAccount.creationDate) &&
             Objects.equals(this.displayName, bankingAccount.displayName) &&
-            Objects.equals(this.isOwned, bankingAccount.isOwned) &&
-            Objects.equals(this.maskedNumber, bankingAccount.maskedNumber) &&
             Objects.equals(this.nickname, bankingAccount.nickname) &&
             Objects.equals(this.openStatus, bankingAccount.openStatus) &&
+            Objects.equals(this.isOwned, bankingAccount.isOwned) &&
+            Objects.equals(this.maskedNumber, bankingAccount.maskedNumber) &&
             Objects.equals(this.productCategory, bankingAccount.productCategory) &&
             Objects.equals(this.productName, bankingAccount.productName);
     }
@@ -169,10 +169,10 @@ public int hashCode() {
             accountId,
             creationDate,
             displayName,
-            isOwned,
-            maskedNumber,
             nickname,
             openStatus,
+            isOwned,
+            maskedNumber,
             productCategory,
             productName);
     }
@@ -183,10 +183,10 @@ public String toString() {
             "   accountId: " + toIndentedString(accountId) + "\n" + 
             "   creationDate: " + toIndentedString(creationDate) + "\n" + 
             "   displayName: " + toIndentedString(displayName) + "\n" + 
-            "   isOwned: " + toIndentedString(isOwned) + "\n" + 
-            "   maskedNumber: " + toIndentedString(maskedNumber) + "\n" + 
             "   nickname: " + toIndentedString(nickname) + "\n" + 
             "   openStatus: " + toIndentedString(openStatus) + "\n" + 
+            "   isOwned: " + toIndentedString(isOwned) + "\n" + 
+            "   maskedNumber: " + toIndentedString(maskedNumber) + "\n" + 
             "   productCategory: " + toIndentedString(productCategory) + "\n" + 
             "   productName: " + toIndentedString(productName) + "\n" + 
             "}";
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccountDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccountDetail.java
index e7eb687..bde549b 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccountDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAccountDetail.java
@@ -13,38 +13,50 @@
 public class BankingAccountDetail extends BankingAccount {
 
     public enum SpecificAccountUType {
+        termDeposit,
         creditCard,
-        loan,
-        termDeposit
+        loan
     }
 
+    private String bsb;
+
     private String accountNumber;
 
-    private List<CommonPhysicalAddress> addresses;
+    private String bundleName;
 
-    private String bsb;
+    private SpecificAccountUType specificAccountUType;
 
-    private String bundleName;
+    private List<BankingTermDepositAccount> termDeposit;
 
     private BankingCreditCardAccount creditCard;
 
+    private BankingLoanAccount loan;
+
     private String depositRate;
 
+    private String lendingRate;
+
     private List<BankingProductDepositRate> depositRates;
 
+    private List<BankingProductLendingRate> lendingRates;
+
     private List<Object> features;
 
     private List<BankingProductFee> fees;
 
-    private String lendingRate;
-
-    private List<BankingProductLendingRate> lendingRates;
-
-    private BankingLoanAccount loan;
+    private List<CommonPhysicalAddress> addresses;
 
-    private SpecificAccountUType specificAccountUType;
+    /**
+     * The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
+     * @return bsb
+     */
+    public String getBsb() {
+        return bsb;
+    }
 
-    private BankingTermDepositAccount termDeposit;
+    public void setBsb(String bsb) {
+        this.bsb = bsb;
+    }
 
     /**
      * The unmasked account number for the account. Should not be supplied if the account number is a PAN requiring PCI compliance. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
@@ -58,30 +70,6 @@ public void setAccountNumber(String accountNumber) {
         this.accountNumber = accountNumber;
     }
 
-    /**
-     * The addresses for the account to be used for correspondence
-     * @return addresses
-     */
-    public List<CommonPhysicalAddress> getAddresses() {
-        return addresses;
-    }
-
-    public void setAddresses(List<CommonPhysicalAddress> addresses) {
-        this.addresses = addresses;
-    }
-
-    /**
-     * The unmasked BSB for the account. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces
-     * @return bsb
-     */
-    public String getBsb() {
-        return bsb;
-    }
-
-    public void setBsb(String bsb) {
-        this.bsb = bsb;
-    }
-
     /**
      * Optional field to indicate if this account is part of a bundle that is providing additional benefit for to the customer
      * @return bundleName
@@ -95,63 +83,63 @@ public void setBundleName(String bundleName) {
     }
 
     /**
-     * Get creditCard
-     * @return creditCard
+     * The type of structure to present account specific fields.
+     * @return specificAccountUType
      */
-    public BankingCreditCardAccount getCreditCard() {
-        return creditCard;
+    public SpecificAccountUType getSpecificAccountUType() {
+        return specificAccountUType;
     }
 
-    public void setCreditCard(BankingCreditCardAccount creditCard) {
-        this.creditCard = creditCard;
+    public void setSpecificAccountUType(SpecificAccountUType specificAccountUType) {
+        this.specificAccountUType = specificAccountUType;
     }
 
     /**
-     * current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call
-     * @return depositRate
+     * Get termDeposit
+     * @return termDeposit
      */
-    public String getDepositRate() {
-        return depositRate;
+    public List<BankingTermDepositAccount> getTermDeposit() {
+        return termDeposit;
     }
 
-    public void setDepositRate(String depositRate) {
-        this.depositRate = depositRate;
+    public void setTermDeposit(List<BankingTermDepositAccount> termDeposit) {
+        this.termDeposit = termDeposit;
     }
 
     /**
-     * Fully described deposit rates for this account based on the equivalent structure in Product Reference
-     * @return depositRates
+     * Get creditCard
+     * @return creditCard
      */
-    public List<BankingProductDepositRate> getDepositRates() {
-        return depositRates;
+    public BankingCreditCardAccount getCreditCard() {
+        return creditCard;
     }
 
-    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
-        this.depositRates = depositRates;
+    public void setCreditCard(BankingCreditCardAccount creditCard) {
+        this.creditCard = creditCard;
     }
 
     /**
-     * Array of features of the account based on the equivalent structure in Product Reference with the following additional field
-     * @return features
+     * Get loan
+     * @return loan
      */
-    public List<Object> getFeatures() {
-        return features;
+    public BankingLoanAccount getLoan() {
+        return loan;
     }
 
-    public void setFeatures(List<Object> features) {
-        this.features = features;
+    public void setLoan(BankingLoanAccount loan) {
+        this.loan = loan;
     }
 
     /**
-     * Fees and charges applicable to the account based on the equivalent structure in Product Reference
-     * @return fees
+     * current rate to calculate interest earned being applied to deposit balances as it stands at the time of the API call
+     * @return depositRate
      */
-    public List<BankingProductFee> getFees() {
-        return fees;
+    public String getDepositRate() {
+        return depositRate;
     }
 
-    public void setFees(List<BankingProductFee> fees) {
-        this.fees = fees;
+    public void setDepositRate(String depositRate) {
+        this.depositRate = depositRate;
     }
 
     /**
@@ -166,6 +154,18 @@ public void setLendingRate(String lendingRate) {
         this.lendingRate = lendingRate;
     }
 
+    /**
+     * Fully described deposit rates for this account based on the equivalent structure in Product Reference
+     * @return depositRates
+     */
+    public List<BankingProductDepositRate> getDepositRates() {
+        return depositRates;
+    }
+
+    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+    }
+
     /**
      * Fully described deposit rates for this account based on the equivalent structure in Product Reference
      * @return lendingRates
@@ -179,39 +179,39 @@ public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
     }
 
     /**
-     * Get loan
-     * @return loan
+     * Array of features of the account based on the equivalent structure in Product Reference with the following additional field
+     * @return features
      */
-    public BankingLoanAccount getLoan() {
-        return loan;
+    public List<Object> getFeatures() {
+        return features;
     }
 
-    public void setLoan(BankingLoanAccount loan) {
-        this.loan = loan;
+    public void setFeatures(List<Object> features) {
+        this.features = features;
     }
 
     /**
-     * Get specificAccountUType
-     * @return specificAccountUType
+     * Fees and charges applicable to the account based on the equivalent structure in Product Reference
+     * @return fees
      */
-    public SpecificAccountUType getSpecificAccountUType() {
-        return specificAccountUType;
+    public List<BankingProductFee> getFees() {
+        return fees;
     }
 
-    public void setSpecificAccountUType(SpecificAccountUType specificAccountUType) {
-        this.specificAccountUType = specificAccountUType;
+    public void setFees(List<BankingProductFee> fees) {
+        this.fees = fees;
     }
 
     /**
-     * Get termDeposit
-     * @return termDeposit
+     * The addresses for the account to be used for correspondence
+     * @return addresses
      */
-    public BankingTermDepositAccount getTermDeposit() {
-        return termDeposit;
+    public List<CommonPhysicalAddress> getAddresses() {
+        return addresses;
     }
 
-    public void setTermDeposit(BankingTermDepositAccount termDeposit) {
-        this.termDeposit = termDeposit;
+    public void setAddresses(List<CommonPhysicalAddress> addresses) {
+        this.addresses = addresses;
     }
 
     @Override
@@ -223,69 +223,69 @@ public boolean equals(Object o) {
             return false;
         }
         BankingAccountDetail bankingAccountDetail = (BankingAccountDetail) o;
-        return Objects.equals(this.accountNumber, bankingAccountDetail.accountNumber) &&
-            Objects.equals(this.addresses, bankingAccountDetail.addresses) &&
-            Objects.equals(this.bsb, bankingAccountDetail.bsb) &&
+        return Objects.equals(this.bsb, bankingAccountDetail.bsb) &&
+            Objects.equals(this.accountNumber, bankingAccountDetail.accountNumber) &&
             Objects.equals(this.bundleName, bankingAccountDetail.bundleName) &&
+            Objects.equals(this.specificAccountUType, bankingAccountDetail.specificAccountUType) &&
+            Objects.equals(this.termDeposit, bankingAccountDetail.termDeposit) &&
             Objects.equals(this.creditCard, bankingAccountDetail.creditCard) &&
+            Objects.equals(this.loan, bankingAccountDetail.loan) &&
             Objects.equals(this.depositRate, bankingAccountDetail.depositRate) &&
+            Objects.equals(this.lendingRate, bankingAccountDetail.lendingRate) &&
             Objects.equals(this.depositRates, bankingAccountDetail.depositRates) &&
+            Objects.equals(this.lendingRates, bankingAccountDetail.lendingRates) &&
             Objects.equals(this.features, bankingAccountDetail.features) &&
             Objects.equals(this.fees, bankingAccountDetail.fees) &&
-            Objects.equals(this.lendingRate, bankingAccountDetail.lendingRate) &&
-            Objects.equals(this.lendingRates, bankingAccountDetail.lendingRates) &&
-            Objects.equals(this.loan, bankingAccountDetail.loan) &&
-            Objects.equals(this.specificAccountUType, bankingAccountDetail.specificAccountUType) &&
-            Objects.equals(this.termDeposit, bankingAccountDetail.termDeposit) &&
+            Objects.equals(this.addresses, bankingAccountDetail.addresses) &&
             super.equals(o);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            accountNumber,
-            addresses,
             bsb,
+            accountNumber,
             bundleName,
+            specificAccountUType,
+            termDeposit,
             creditCard,
+            loan,
             depositRate,
+            lendingRate,
             depositRates,
+            lendingRates,
             features,
             fees,
-            lendingRate,
-            lendingRates,
-            loan,
-            specificAccountUType,
-            termDeposit,
+            addresses,
             super.hashCode());
     }
 
     @Override
     public String toString() {
         return "class BankingAccountDetail {\n" +
-            "   accountId: " + toIndentedString(getAccountId()) + "\n" + 
-            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" + 
-            "   displayName: " + toIndentedString(getDisplayName()) + "\n" + 
-            "   isOwned: " + toIndentedString(getIsOwned()) + "\n" + 
-            "   maskedNumber: " + toIndentedString(getMaskedNumber()) + "\n" + 
-            "   nickname: " + toIndentedString(getNickname()) + "\n" + 
-            "   openStatus: " + toIndentedString(getOpenStatus()) + "\n" + 
-            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" + 
-            "   productName: " + toIndentedString(getProductName()) + "\n" + 
-            "   accountNumber: " + toIndentedString(accountNumber) + "\n" + 
-            "   addresses: " + toIndentedString(addresses) + "\n" + 
-            "   bsb: " + toIndentedString(bsb) + "\n" + 
-            "   bundleName: " + toIndentedString(bundleName) + "\n" + 
-            "   creditCard: " + toIndentedString(creditCard) + "\n" + 
-            "   depositRate: " + toIndentedString(depositRate) + "\n" + 
-            "   depositRates: " + toIndentedString(depositRates) + "\n" + 
-            "   features: " + toIndentedString(features) + "\n" + 
-            "   fees: " + toIndentedString(fees) + "\n" + 
-            "   lendingRate: " + toIndentedString(lendingRate) + "\n" + 
-            "   lendingRates: " + toIndentedString(lendingRates) + "\n" + 
-            "   loan: " + toIndentedString(loan) + "\n" + 
-            "   specificAccountUType: " + toIndentedString(specificAccountUType) + "\n" + 
-            "   termDeposit: " + toIndentedString(termDeposit) + "\n" + 
+            "   accountId: " + toIndentedString(getAccountId()) + "\n" +
+            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" +
+            "   displayName: " + toIndentedString(getDisplayName()) + "\n" +
+            "   nickname: " + toIndentedString(getNickname()) + "\n" +
+            "   openStatus: " + toIndentedString(getOpenStatus()) + "\n" +
+            "   isOwned: " + toIndentedString(getIsOwned()) + "\n" +
+            "   maskedNumber: " + toIndentedString(getMaskedNumber()) + "\n" +
+            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" +
+            "   productName: " + toIndentedString(getProductName()) + "\n" +
+            "   bsb: " + toIndentedString(bsb) + "\n" +
+            "   accountNumber: " + toIndentedString(accountNumber) + "\n" +
+            "   bundleName: " + toIndentedString(bundleName) + "\n" +
+            "   specificAccountUType: " + toIndentedString(specificAccountUType) + "\n" +
+            "   termDeposit: " + toIndentedString(termDeposit) + "\n" +
+            "   creditCard: " + toIndentedString(creditCard) + "\n" +
+            "   loan: " + toIndentedString(loan) + "\n" +
+            "   depositRate: " + toIndentedString(depositRate) + "\n" +
+            "   lendingRate: " + toIndentedString(lendingRate) + "\n" +
+            "   depositRates: " + toIndentedString(depositRates) + "\n" +
+            "   lendingRates: " + toIndentedString(lendingRates) + "\n" +
+            "   features: " + toIndentedString(features) + "\n" +
+            "   fees: " + toIndentedString(fees) + "\n" +
+            "   addresses: " + toIndentedString(addresses) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAuthorisedEntity.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAuthorisedEntity.java
index ffd01d0..9c8534d 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAuthorisedEntity.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingAuthorisedEntity.java
@@ -11,15 +11,39 @@
 
 public class BankingAuthorisedEntity {
 
+    private String description;
+
+    private String financialInstitution;
+
     private String abn;
 
     private String acn;
 
     private String arbn;
 
-    private String description;
+    /**
+     * Description of the authorised entity derived from previously executed direct debits
+     * @return description
+     */
+    public String getDescription() {
+        return description;
+    }
 
-    private String financialInstitution;
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    /**
+     * Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme
+     * @return financialInstitution
+     */
+    public String getFinancialInstitution() {
+        return financialInstitution;
+    }
+
+    public void setFinancialInstitution(String financialInstitution) {
+        this.financialInstitution = financialInstitution;
+    }
 
     /**
      * Australian Business Number for the authorised entity
@@ -57,30 +81,6 @@ public void setArbn(String arbn) {
         this.arbn = arbn;
     }
 
-    /**
-     * Description of the authorised entity derived from previously executed direct debits
-     * @return description
-     */
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    /**
-     * Name of the financial institution through which the direct debit will be executed. Is required unless the payment is made via a credit card scheme
-     * @return financialInstitution
-     */
-    public String getFinancialInstitution() {
-        return financialInstitution;
-    }
-
-    public void setFinancialInstitution(String financialInstitution) {
-        this.financialInstitution = financialInstitution;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -90,31 +90,31 @@ public boolean equals(Object o) {
             return false;
         }
         BankingAuthorisedEntity bankingAuthorisedEntity = (BankingAuthorisedEntity) o;
-        return Objects.equals(this.abn, bankingAuthorisedEntity.abn) &&
+        return Objects.equals(this.description, bankingAuthorisedEntity.description) &&
+            Objects.equals(this.financialInstitution, bankingAuthorisedEntity.financialInstitution) &&
+            Objects.equals(this.abn, bankingAuthorisedEntity.abn) &&
             Objects.equals(this.acn, bankingAuthorisedEntity.acn) &&
-            Objects.equals(this.arbn, bankingAuthorisedEntity.arbn) &&
-            Objects.equals(this.description, bankingAuthorisedEntity.description) &&
-            Objects.equals(this.financialInstitution, bankingAuthorisedEntity.financialInstitution);
+            Objects.equals(this.arbn, bankingAuthorisedEntity.arbn);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            description,
+            financialInstitution,
             abn,
             acn,
-            arbn,
-            description,
-            financialInstitution);
+            arbn);
     }
 
     @Override
     public String toString() {
         return "class BankingAuthorisedEntity {\n" +
+            "   description: " + toIndentedString(description) + "\n" + 
+            "   financialInstitution: " + toIndentedString(financialInstitution) + "\n" + 
             "   abn: " + toIndentedString(abn) + "\n" + 
             "   acn: " + toIndentedString(acn) + "\n" + 
             "   arbn: " + toIndentedString(arbn) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   financialInstitution: " + toIndentedString(financialInstitution) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBalance.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBalance.java
index 352e276..c7072f9 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBalance.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBalance.java
@@ -14,15 +14,15 @@
 
     private String accountId;
 
-    private String amortisedLimit;
+    private String currentBalance;
 
     private String availableBalance;
 
     private String creditLimit;
 
-    private String currency;
+    private String amortisedLimit;
 
-    private String currentBalance;
+    private String currency;
 
     private List<BankingBalancePurse> purses;
 
@@ -39,15 +39,15 @@ public void setAccountId(String accountId) {
     }
 
     /**
-     * Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent
-     * @return amortisedLimit
+     * The balance of the account at this time. Should align to the balance available via other channels such as Internet Banking. Assumed to be negative if the customer has money owing
+     * @return currentBalance
      */
-    public String getAmortisedLimit() {
-        return amortisedLimit;
+    public String getCurrentBalance() {
+        return currentBalance;
     }
 
-    public void setAmortisedLimit(String amortisedLimit) {
-        this.amortisedLimit = amortisedLimit;
+    public void setCurrentBalance(String currentBalance) {
+        this.currentBalance = currentBalance;
     }
 
     /**
@@ -75,27 +75,27 @@ public void setCreditLimit(String creditLimit) {
     }
 
     /**
-     * The currency for the balance amounts. If absent assumed to be AUD
-     * @return currency
+     * Object representing the available limit amortised according to payment schedule. Assumed to be zero if absent
+     * @return amortisedLimit
      */
-    public String getCurrency() {
-        return currency;
+    public String getAmortisedLimit() {
+        return amortisedLimit;
     }
 
-    public void setCurrency(String currency) {
-        this.currency = currency;
+    public void setAmortisedLimit(String amortisedLimit) {
+        this.amortisedLimit = amortisedLimit;
     }
 
     /**
-     * The balance of the account at this time. Should align to the balance available via other channels such as Internet Banking. Assumed to be negative if the customer has money owing
-     * @return currentBalance
+     * The currency for the balance amounts. If absent assumed to be AUD
+     * @return currency
      */
-    public String getCurrentBalance() {
-        return currentBalance;
+    public String getCurrency() {
+        return currency;
     }
 
-    public void setCurrentBalance(String currentBalance) {
-        this.currentBalance = currentBalance;
+    public void setCurrency(String currency) {
+        this.currency = currency;
     }
 
     /**
@@ -120,11 +120,11 @@ public boolean equals(Object o) {
         }
         BankingBalance bankingBalance = (BankingBalance) o;
         return Objects.equals(this.accountId, bankingBalance.accountId) &&
-            Objects.equals(this.amortisedLimit, bankingBalance.amortisedLimit) &&
+            Objects.equals(this.currentBalance, bankingBalance.currentBalance) &&
             Objects.equals(this.availableBalance, bankingBalance.availableBalance) &&
             Objects.equals(this.creditLimit, bankingBalance.creditLimit) &&
+            Objects.equals(this.amortisedLimit, bankingBalance.amortisedLimit) &&
             Objects.equals(this.currency, bankingBalance.currency) &&
-            Objects.equals(this.currentBalance, bankingBalance.currentBalance) &&
             Objects.equals(this.purses, bankingBalance.purses);
     }
 
@@ -132,11 +132,11 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Objects.hash(
             accountId,
-            amortisedLimit,
+            currentBalance,
             availableBalance,
             creditLimit,
+            amortisedLimit,
             currency,
-            currentBalance,
             purses);
     }
 
@@ -144,11 +144,11 @@ public int hashCode() {
     public String toString() {
         return "class BankingBalance {\n" +
             "   accountId: " + toIndentedString(accountId) + "\n" + 
-            "   amortisedLimit: " + toIndentedString(amortisedLimit) + "\n" + 
+            "   currentBalance: " + toIndentedString(currentBalance) + "\n" + 
             "   availableBalance: " + toIndentedString(availableBalance) + "\n" + 
             "   creditLimit: " + toIndentedString(creditLimit) + "\n" + 
+            "   amortisedLimit: " + toIndentedString(amortisedLimit) + "\n" + 
             "   currency: " + toIndentedString(currency) + "\n" + 
-            "   currentBalance: " + toIndentedString(currentBalance) + "\n" + 
             "   purses: " + toIndentedString(purses) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBillerPayee.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBillerPayee.java
index 6390f74..5a43c9e 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBillerPayee.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingBillerPayee.java
@@ -13,10 +13,10 @@
 
     private String billerCode;
 
-    private String billerName;
-
     private String crn;
 
+    private String billerName;
+
     /**
      * BPAY Biller Code of the Biller
      * @return billerCode
@@ -29,18 +29,6 @@ public void setBillerCode(String billerCode) {
         this.billerCode = billerCode;
     }
 
-    /**
-     * Name of the Biller
-     * @return billerName
-     */
-    public String getBillerName() {
-        return billerName;
-    }
-
-    public void setBillerName(String billerName) {
-        this.billerName = billerName;
-    }
-
     /**
      * BPAY CRN of the Biller. If the contents of the CRN match the format of a Credit Card PAN then it should be masked using the rules applicable for the MaskedPANString common type
      * @return crn
@@ -53,6 +41,18 @@ public void setCrn(String crn) {
         this.crn = crn;
     }
 
+    /**
+     * Name of the Biller
+     * @return billerName
+     */
+    public String getBillerName() {
+        return billerName;
+    }
+
+    public void setBillerName(String billerName) {
+        this.billerName = billerName;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -63,24 +63,24 @@ public boolean equals(Object o) {
         }
         BankingBillerPayee bankingBillerPayee = (BankingBillerPayee) o;
         return Objects.equals(this.billerCode, bankingBillerPayee.billerCode) &&
-            Objects.equals(this.billerName, bankingBillerPayee.billerName) &&
-            Objects.equals(this.crn, bankingBillerPayee.crn);
+            Objects.equals(this.crn, bankingBillerPayee.crn) &&
+            Objects.equals(this.billerName, bankingBillerPayee.billerName);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             billerCode,
-            billerName,
-            crn);
+            crn,
+            billerName);
     }
 
     @Override
     public String toString() {
         return "class BankingBillerPayee {\n" +
             "   billerCode: " + toIndentedString(billerCode) + "\n" + 
-            "   billerName: " + toIndentedString(billerName) + "\n" + 
             "   crn: " + toIndentedString(crn) + "\n" + 
+            "   billerName: " + toIndentedString(billerName) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingCreditCardAccount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingCreditCardAccount.java
index 5db981f..fd7eb25 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingCreditCardAccount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingCreditCardAccount.java
@@ -14,10 +14,10 @@
 
     private String minPaymentAmount;
 
-    private String paymentCurrency;
-
     private String paymentDueAmount;
 
+    private String paymentCurrency;
+
     private LocalDate paymentDueDate;
 
     /**
@@ -32,18 +32,6 @@ public void setMinPaymentAmount(String minPaymentAmount) {
         this.minPaymentAmount = minPaymentAmount;
     }
 
-    /**
-     * If absent assumes AUD
-     * @return paymentCurrency
-     */
-    public String getPaymentCurrency() {
-        return paymentCurrency;
-    }
-
-    public void setPaymentCurrency(String paymentCurrency) {
-        this.paymentCurrency = paymentCurrency;
-    }
-
     /**
      * The amount due for the next card payment
      * @return paymentDueAmount
@@ -56,6 +44,18 @@ public void setPaymentDueAmount(String paymentDueAmount) {
         this.paymentDueAmount = paymentDueAmount;
     }
 
+    /**
+     * If absent assumes AUD
+     * @return paymentCurrency
+     */
+    public String getPaymentCurrency() {
+        return paymentCurrency;
+    }
+
+    public void setPaymentCurrency(String paymentCurrency) {
+        this.paymentCurrency = paymentCurrency;
+    }
+
     /**
      * Date that the next payment for the card is due
      * @return paymentDueDate
@@ -78,8 +78,8 @@ public boolean equals(Object o) {
         }
         BankingCreditCardAccount bankingCreditCardAccount = (BankingCreditCardAccount) o;
         return Objects.equals(this.minPaymentAmount, bankingCreditCardAccount.minPaymentAmount) &&
-            Objects.equals(this.paymentCurrency, bankingCreditCardAccount.paymentCurrency) &&
             Objects.equals(this.paymentDueAmount, bankingCreditCardAccount.paymentDueAmount) &&
+            Objects.equals(this.paymentCurrency, bankingCreditCardAccount.paymentCurrency) &&
             Objects.equals(this.paymentDueDate, bankingCreditCardAccount.paymentDueDate);
     }
 
@@ -87,8 +87,8 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Objects.hash(
             minPaymentAmount,
-            paymentCurrency,
             paymentDueAmount,
+            paymentCurrency,
             paymentDueDate);
     }
 
@@ -96,8 +96,8 @@ public int hashCode() {
     public String toString() {
         return "class BankingCreditCardAccount {\n" +
             "   minPaymentAmount: " + toIndentedString(minPaymentAmount) + "\n" + 
-            "   paymentCurrency: " + toIndentedString(paymentCurrency) + "\n" + 
             "   paymentDueAmount: " + toIndentedString(paymentDueAmount) + "\n" + 
+            "   paymentCurrency: " + toIndentedString(paymentCurrency) + "\n" + 
             "   paymentDueDate: " + toIndentedString(paymentDueDate) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDirectDebit.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDirectDebit.java
index 1f7de71..5882637 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDirectDebit.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDirectDebit.java
@@ -16,10 +16,10 @@
 
     private BankingAuthorisedEntity authorisedEntity;
 
-    private String lastDebitAmount;
-
     private OffsetDateTime lastDebitDateTime;
 
+    private String lastDebitAmount;
+
     /**
      * A unique ID of the account adhering to the standards for ID permanence.
      * @return accountId
@@ -44,18 +44,6 @@ public void setAuthorisedEntity(BankingAuthorisedEntity authorisedEntity) {
         this.authorisedEntity = authorisedEntity;
     }
 
-    /**
-     * The amount of the last debit executed under this authorisation
-     * @return lastDebitAmount
-     */
-    public String getLastDebitAmount() {
-        return lastDebitAmount;
-    }
-
-    public void setLastDebitAmount(String lastDebitAmount) {
-        this.lastDebitAmount = lastDebitAmount;
-    }
-
     /**
      * The date and time of the last debit executed under this authorisation
      * @return lastDebitDateTime
@@ -68,6 +56,18 @@ public void setLastDebitDateTime(OffsetDateTime lastDebitDateTime) {
         this.lastDebitDateTime = lastDebitDateTime;
     }
 
+    /**
+     * The amount of the last debit executed under this authorisation
+     * @return lastDebitAmount
+     */
+    public String getLastDebitAmount() {
+        return lastDebitAmount;
+    }
+
+    public void setLastDebitAmount(String lastDebitAmount) {
+        this.lastDebitAmount = lastDebitAmount;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -79,8 +79,8 @@ public boolean equals(Object o) {
         BankingDirectDebit bankingDirectDebit = (BankingDirectDebit) o;
         return Objects.equals(this.accountId, bankingDirectDebit.accountId) &&
             Objects.equals(this.authorisedEntity, bankingDirectDebit.authorisedEntity) &&
-            Objects.equals(this.lastDebitAmount, bankingDirectDebit.lastDebitAmount) &&
-            Objects.equals(this.lastDebitDateTime, bankingDirectDebit.lastDebitDateTime);
+            Objects.equals(this.lastDebitDateTime, bankingDirectDebit.lastDebitDateTime) &&
+            Objects.equals(this.lastDebitAmount, bankingDirectDebit.lastDebitAmount);
     }
 
     @Override
@@ -88,8 +88,8 @@ public int hashCode() {
         return Objects.hash(
             accountId,
             authorisedEntity,
-            lastDebitAmount,
-            lastDebitDateTime);
+            lastDebitDateTime,
+            lastDebitAmount);
     }
 
     @Override
@@ -97,8 +97,8 @@ public String toString() {
         return "class BankingDirectDebit {\n" +
             "   accountId: " + toIndentedString(accountId) + "\n" + 
             "   authorisedEntity: " + toIndentedString(authorisedEntity) + "\n" + 
-            "   lastDebitAmount: " + toIndentedString(lastDebitAmount) + "\n" + 
             "   lastDebitDateTime: " + toIndentedString(lastDebitDateTime) + "\n" + 
+            "   lastDebitAmount: " + toIndentedString(lastDebitAmount) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayee.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayee.java
index 3182935..44b0447 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayee.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayee.java
@@ -17,13 +17,25 @@
         payId
     }
 
+    private PayeeAccountUType payeeAccountUType;
+
     private BankingDomesticPayeeAccount account;
 
     private BankingDomesticPayeeCard card;
 
     private BankingDomesticPayeePayId payId;
 
-    private PayeeAccountUType payeeAccountUType;
+    /**
+     * Type of account object included. Valid values are: **account** A standard Australian account defined by BSB/Account Number. **card** A credit or charge card to pay to (note that PANs are masked). **payId** A PayID recognised by NPP
+     * @return payeeAccountUType
+     */
+    public PayeeAccountUType getPayeeAccountUType() {
+        return payeeAccountUType;
+    }
+
+    public void setPayeeAccountUType(PayeeAccountUType payeeAccountUType) {
+        this.payeeAccountUType = payeeAccountUType;
+    }
 
     /**
      * Get account
@@ -61,18 +73,6 @@ public void setPayId(BankingDomesticPayeePayId payId) {
         this.payId = payId;
     }
 
-    /**
-     * Get payeeAccountUType
-     * @return payeeAccountUType
-     */
-    public PayeeAccountUType getPayeeAccountUType() {
-        return payeeAccountUType;
-    }
-
-    public void setPayeeAccountUType(PayeeAccountUType payeeAccountUType) {
-        this.payeeAccountUType = payeeAccountUType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -82,28 +82,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingDomesticPayee bankingDomesticPayee = (BankingDomesticPayee) o;
-        return Objects.equals(this.account, bankingDomesticPayee.account) &&
+        return Objects.equals(this.payeeAccountUType, bankingDomesticPayee.payeeAccountUType) &&
+            Objects.equals(this.account, bankingDomesticPayee.account) &&
             Objects.equals(this.card, bankingDomesticPayee.card) &&
-            Objects.equals(this.payId, bankingDomesticPayee.payId) &&
-            Objects.equals(this.payeeAccountUType, bankingDomesticPayee.payeeAccountUType);
+            Objects.equals(this.payId, bankingDomesticPayee.payId);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            payeeAccountUType,
             account,
             card,
-            payId,
-            payeeAccountUType);
+            payId);
     }
 
     @Override
     public String toString() {
         return "class BankingDomesticPayee {\n" +
-            "   account: " + toIndentedString(account) + "\n" + 
-            "   card: " + toIndentedString(card) + "\n" + 
-            "   payId: " + toIndentedString(payId) + "\n" + 
-            "   payeeAccountUType: " + toIndentedString(payeeAccountUType) + "\n" + 
+            "   payeeAccountUType: " + toIndentedString(payeeAccountUType) + "\n" +
+            "   account: " + toIndentedString(account) + "\n" +
+            "   card: " + toIndentedString(card) + "\n" +
+            "   payId: " + toIndentedString(payId) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeeAccount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeeAccount.java
index 1642900..fc4e4d8 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeeAccount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeeAccount.java
@@ -13,10 +13,10 @@
 
     private String accountName;
 
-    private String accountNumber;
-
     private String bsb;
 
+    private String accountNumber;
+
     /**
      * Name of the account to pay to
      * @return accountName
@@ -29,18 +29,6 @@ public void setAccountName(String accountName) {
         this.accountName = accountName;
     }
 
-    /**
-     * Number of the account to pay to
-     * @return accountNumber
-     */
-    public String getAccountNumber() {
-        return accountNumber;
-    }
-
-    public void setAccountNumber(String accountNumber) {
-        this.accountNumber = accountNumber;
-    }
-
     /**
      * BSB of the account to pay to
      * @return bsb
@@ -53,6 +41,18 @@ public void setBsb(String bsb) {
         this.bsb = bsb;
     }
 
+    /**
+     * Number of the account to pay to
+     * @return accountNumber
+     */
+    public String getAccountNumber() {
+        return accountNumber;
+    }
+
+    public void setAccountNumber(String accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -63,24 +63,24 @@ public boolean equals(Object o) {
         }
         BankingDomesticPayeeAccount bankingDomesticPayeeAccount = (BankingDomesticPayeeAccount) o;
         return Objects.equals(this.accountName, bankingDomesticPayeeAccount.accountName) &&
-            Objects.equals(this.accountNumber, bankingDomesticPayeeAccount.accountNumber) &&
-            Objects.equals(this.bsb, bankingDomesticPayeeAccount.bsb);
+            Objects.equals(this.bsb, bankingDomesticPayeeAccount.bsb) &&
+            Objects.equals(this.accountNumber, bankingDomesticPayeeAccount.accountNumber);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             accountName,
-            accountNumber,
-            bsb);
+            bsb,
+            accountNumber);
     }
 
     @Override
     public String toString() {
         return "class BankingDomesticPayeeAccount {\n" +
             "   accountName: " + toIndentedString(accountName) + "\n" + 
-            "   accountNumber: " + toIndentedString(accountNumber) + "\n" + 
             "   bsb: " + toIndentedString(bsb) + "\n" + 
+            "   accountNumber: " + toIndentedString(accountNumber) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeePayId.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeePayId.java
index 4af0abb..761b607 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeePayId.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingDomesticPayeePayId.java
@@ -12,29 +12,17 @@
 public class BankingDomesticPayeePayId {
 
     public enum Type {
-        ABN,
         EMAIL,
-        ORG_IDENTIFIER,
-        TELEPHONE
+        TELEPHONE,
+        ABN,
+        ORG_IDENTIFIER
     }
 
-    private String identifier;
-
     private String name;
 
-    private Type type;
-
-    /**
-     * The identifier of the PayID (dependent on type)
-     * @return identifier
-     */
-    public String getIdentifier() {
-        return identifier;
-    }
+    private String identifier;
 
-    public void setIdentifier(String identifier) {
-        this.identifier = identifier;
-    }
+    private Type type;
 
     /**
      * The name assigned to the PayID by the owner of the PayID
@@ -49,7 +37,19 @@ public void setName(String name) {
     }
 
     /**
-     * Get type
+     * The identifier of the PayID (dependent on type)
+     * @return identifier
+     */
+    public String getIdentifier() {
+        return identifier;
+    }
+
+    public void setIdentifier(String identifier) {
+        this.identifier = identifier;
+    }
+
+    /**
+     * The type of the PayID
      * @return type
      */
     public Type getType() {
@@ -69,24 +69,24 @@ public boolean equals(Object o) {
             return false;
         }
         BankingDomesticPayeePayId bankingDomesticPayeePayId = (BankingDomesticPayeePayId) o;
-        return Objects.equals(this.identifier, bankingDomesticPayeePayId.identifier) &&
-            Objects.equals(this.name, bankingDomesticPayeePayId.name) &&
+        return Objects.equals(this.name, bankingDomesticPayeePayId.name) &&
+            Objects.equals(this.identifier, bankingDomesticPayeePayId.identifier) &&
             Objects.equals(this.type, bankingDomesticPayeePayId.type);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            identifier,
             name,
+            identifier,
             type);
     }
 
     @Override
     public String toString() {
         return "class BankingDomesticPayeePayId {\n" +
-            "   identifier: " + toIndentedString(identifier) + "\n" + 
             "   name: " + toIndentedString(name) + "\n" + 
+            "   identifier: " + toIndentedString(identifier) + "\n" + 
             "   type: " + toIndentedString(type) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayee.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayee.java
index 305fcb3..a5c224b 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayee.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayee.java
@@ -11,21 +11,9 @@
 
 public class BankingInternationalPayee {
 
-    private BankingInternationalPayeeBankDetails bankDetails;
-
     private BankingInternationalPayeeBeneficiaryDetails beneficiaryDetails;
 
-    /**
-     * Get bankDetails
-     * @return bankDetails
-     */
-    public BankingInternationalPayeeBankDetails getBankDetails() {
-        return bankDetails;
-    }
-
-    public void setBankDetails(BankingInternationalPayeeBankDetails bankDetails) {
-        this.bankDetails = bankDetails;
-    }
+    private BankingInternationalPayeeBankDetails bankDetails;
 
     /**
      * Get beneficiaryDetails
@@ -39,6 +27,18 @@ public void setBeneficiaryDetails(BankingInternationalPayeeBeneficiaryDetails be
         this.beneficiaryDetails = beneficiaryDetails;
     }
 
+    /**
+     * Get bankDetails
+     * @return bankDetails
+     */
+    public BankingInternationalPayeeBankDetails getBankDetails() {
+        return bankDetails;
+    }
+
+    public void setBankDetails(BankingInternationalPayeeBankDetails bankDetails) {
+        this.bankDetails = bankDetails;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -48,22 +48,22 @@ public boolean equals(Object o) {
             return false;
         }
         BankingInternationalPayee bankingInternationalPayee = (BankingInternationalPayee) o;
-        return Objects.equals(this.bankDetails, bankingInternationalPayee.bankDetails) &&
-            Objects.equals(this.beneficiaryDetails, bankingInternationalPayee.beneficiaryDetails);
+        return Objects.equals(this.beneficiaryDetails, bankingInternationalPayee.beneficiaryDetails) &&
+            Objects.equals(this.bankDetails, bankingInternationalPayee.bankDetails);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            bankDetails,
-            beneficiaryDetails);
+            beneficiaryDetails,
+            bankDetails);
     }
 
     @Override
     public String toString() {
         return "class BankingInternationalPayee {\n" +
-            "   bankDetails: " + toIndentedString(bankDetails) + "\n" + 
             "   beneficiaryDetails: " + toIndentedString(beneficiaryDetails) + "\n" + 
+            "   bankDetails: " + toIndentedString(bankDetails) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetails.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetails.java
index e58e24b..c450aea 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetails.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetails.java
@@ -11,23 +11,35 @@
 
 public class BankingInternationalPayeeBankDetails {
 
+    private String country;
+
     private String accountNumber;
 
     private BankingInternationalPayeeBankDetailsBankAddress bankAddress;
 
     private String beneficiaryBankBIC;
 
-    private String chipNumber;
+    private String fedWireNumber;
 
-    private String country;
+    private String sortCode;
 
-    private String fedWireNumber;
+    private String chipNumber;
+
+    private String routingNumber;
 
     private String legalEntityIdentifier;
 
-    private String routingNumber;
+    /**
+     * Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code
+     * @return country
+     */
+    public String getCountry() {
+        return country;
+    }
 
-    private String sortCode;
+    public void setCountry(String country) {
+        this.country = country;
+    }
 
     /**
      * Account Targeted for payment
@@ -65,30 +77,6 @@ public void setBeneficiaryBankBIC(String beneficiaryBankBIC) {
         this.beneficiaryBankBIC = beneficiaryBankBIC;
     }
 
-    /**
-     * Number for the Clearing House Interbank Payments System
-     * @return chipNumber
-     */
-    public String getChipNumber() {
-        return chipNumber;
-    }
-
-    public void setChipNumber(String chipNumber) {
-        this.chipNumber = chipNumber;
-    }
-
-    /**
-     * Country of the recipient institution. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code
-     * @return country
-     */
-    public String getCountry() {
-        return country;
-    }
-
-    public void setCountry(String country) {
-        this.country = country;
-    }
-
     /**
      * Number for Fedwire payment (Federal Reserve Wire Network)
      * @return fedWireNumber
@@ -102,15 +90,27 @@ public void setFedWireNumber(String fedWireNumber) {
     }
 
     /**
-     * The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)
-     * @return legalEntityIdentifier
+     * Sort code used for account identification in some jurisdictions
+     * @return sortCode
      */
-    public String getLegalEntityIdentifier() {
-        return legalEntityIdentifier;
+    public String getSortCode() {
+        return sortCode;
     }
 
-    public void setLegalEntityIdentifier(String legalEntityIdentifier) {
-        this.legalEntityIdentifier = legalEntityIdentifier;
+    public void setSortCode(String sortCode) {
+        this.sortCode = sortCode;
+    }
+
+    /**
+     * Number for the Clearing House Interbank Payments System
+     * @return chipNumber
+     */
+    public String getChipNumber() {
+        return chipNumber;
+    }
+
+    public void setChipNumber(String chipNumber) {
+        this.chipNumber = chipNumber;
     }
 
     /**
@@ -126,15 +126,15 @@ public void setRoutingNumber(String routingNumber) {
     }
 
     /**
-     * Sort code used for account identification in some jurisdictions
-     * @return sortCode
+     * The legal entity identifier (LEI) for the beneficiary.  Aligns with [ISO 17442](https://www.iso.org/standard/59771.html)
+     * @return legalEntityIdentifier
      */
-    public String getSortCode() {
-        return sortCode;
+    public String getLegalEntityIdentifier() {
+        return legalEntityIdentifier;
     }
 
-    public void setSortCode(String sortCode) {
-        this.sortCode = sortCode;
+    public void setLegalEntityIdentifier(String legalEntityIdentifier) {
+        this.legalEntityIdentifier = legalEntityIdentifier;
     }
 
     @Override
@@ -146,43 +146,43 @@ public boolean equals(Object o) {
             return false;
         }
         BankingInternationalPayeeBankDetails bankingInternationalPayeeBankDetails = (BankingInternationalPayeeBankDetails) o;
-        return Objects.equals(this.accountNumber, bankingInternationalPayeeBankDetails.accountNumber) &&
+        return Objects.equals(this.country, bankingInternationalPayeeBankDetails.country) &&
+            Objects.equals(this.accountNumber, bankingInternationalPayeeBankDetails.accountNumber) &&
             Objects.equals(this.bankAddress, bankingInternationalPayeeBankDetails.bankAddress) &&
             Objects.equals(this.beneficiaryBankBIC, bankingInternationalPayeeBankDetails.beneficiaryBankBIC) &&
-            Objects.equals(this.chipNumber, bankingInternationalPayeeBankDetails.chipNumber) &&
-            Objects.equals(this.country, bankingInternationalPayeeBankDetails.country) &&
             Objects.equals(this.fedWireNumber, bankingInternationalPayeeBankDetails.fedWireNumber) &&
-            Objects.equals(this.legalEntityIdentifier, bankingInternationalPayeeBankDetails.legalEntityIdentifier) &&
+            Objects.equals(this.sortCode, bankingInternationalPayeeBankDetails.sortCode) &&
+            Objects.equals(this.chipNumber, bankingInternationalPayeeBankDetails.chipNumber) &&
             Objects.equals(this.routingNumber, bankingInternationalPayeeBankDetails.routingNumber) &&
-            Objects.equals(this.sortCode, bankingInternationalPayeeBankDetails.sortCode);
+            Objects.equals(this.legalEntityIdentifier, bankingInternationalPayeeBankDetails.legalEntityIdentifier);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            country,
             accountNumber,
             bankAddress,
             beneficiaryBankBIC,
-            chipNumber,
-            country,
             fedWireNumber,
-            legalEntityIdentifier,
+            sortCode,
+            chipNumber,
             routingNumber,
-            sortCode);
+            legalEntityIdentifier);
     }
 
     @Override
     public String toString() {
         return "class BankingInternationalPayeeBankDetails {\n" +
+            "   country: " + toIndentedString(country) + "\n" + 
             "   accountNumber: " + toIndentedString(accountNumber) + "\n" + 
             "   bankAddress: " + toIndentedString(bankAddress) + "\n" + 
             "   beneficiaryBankBIC: " + toIndentedString(beneficiaryBankBIC) + "\n" + 
-            "   chipNumber: " + toIndentedString(chipNumber) + "\n" + 
-            "   country: " + toIndentedString(country) + "\n" + 
             "   fedWireNumber: " + toIndentedString(fedWireNumber) + "\n" + 
-            "   legalEntityIdentifier: " + toIndentedString(legalEntityIdentifier) + "\n" + 
-            "   routingNumber: " + toIndentedString(routingNumber) + "\n" + 
             "   sortCode: " + toIndentedString(sortCode) + "\n" + 
+            "   chipNumber: " + toIndentedString(chipNumber) + "\n" + 
+            "   routingNumber: " + toIndentedString(routingNumber) + "\n" + 
+            "   legalEntityIdentifier: " + toIndentedString(legalEntityIdentifier) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetailsBankAddress.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetailsBankAddress.java
index ddef161..5d64da8 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetailsBankAddress.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBankDetailsBankAddress.java
@@ -11,21 +11,9 @@
 
 public class BankingInternationalPayeeBankDetailsBankAddress {
 
-    private String address;
-
     private String name;
 
-    /**
-     * Address of the recipient Bank
-     * @return address
-     */
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
+    private String address;
 
     /**
      * Name of the recipient Bank
@@ -39,6 +27,18 @@ public void setName(String name) {
         this.name = name;
     }
 
+    /**
+     * Address of the recipient Bank
+     * @return address
+     */
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -48,22 +48,22 @@ public boolean equals(Object o) {
             return false;
         }
         BankingInternationalPayeeBankDetailsBankAddress bankingInternationalPayeeBankDetailsBankAddress = (BankingInternationalPayeeBankDetailsBankAddress) o;
-        return Objects.equals(this.address, bankingInternationalPayeeBankDetailsBankAddress.address) &&
-            Objects.equals(this.name, bankingInternationalPayeeBankDetailsBankAddress.name);
+        return Objects.equals(this.name, bankingInternationalPayeeBankDetailsBankAddress.name) &&
+            Objects.equals(this.address, bankingInternationalPayeeBankDetailsBankAddress.address);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            address,
-            name);
+            name,
+            address);
     }
 
     @Override
     public String toString() {
         return "class BankingInternationalPayeeBankDetailsBankAddress {\n" +
-            "   address: " + toIndentedString(address) + "\n" + 
             "   name: " + toIndentedString(name) + "\n" + 
+            "   address: " + toIndentedString(address) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBeneficiaryDetails.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBeneficiaryDetails.java
index a306f41..96cb9e6 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBeneficiaryDetails.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingInternationalPayeeBeneficiaryDetails.java
@@ -11,11 +11,23 @@
 
 public class BankingInternationalPayeeBeneficiaryDetails {
 
+    private String name;
+
     private String country;
 
     private String message;
 
-    private String name;
+    /**
+     * Name of the beneficiary
+     * @return name
+     */
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
 
     /**
      * Country where the beneficiary resides. A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code
@@ -41,18 +53,6 @@ public void setMessage(String message) {
         this.message = message;
     }
 
-    /**
-     * Name of the beneficiary
-     * @return name
-     */
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -62,25 +62,25 @@ public boolean equals(Object o) {
             return false;
         }
         BankingInternationalPayeeBeneficiaryDetails bankingInternationalPayeeBeneficiaryDetails = (BankingInternationalPayeeBeneficiaryDetails) o;
-        return Objects.equals(this.country, bankingInternationalPayeeBeneficiaryDetails.country) &&
-            Objects.equals(this.message, bankingInternationalPayeeBeneficiaryDetails.message) &&
-            Objects.equals(this.name, bankingInternationalPayeeBeneficiaryDetails.name);
+        return Objects.equals(this.name, bankingInternationalPayeeBeneficiaryDetails.name) &&
+            Objects.equals(this.country, bankingInternationalPayeeBeneficiaryDetails.country) &&
+            Objects.equals(this.message, bankingInternationalPayeeBeneficiaryDetails.message);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            name,
             country,
-            message,
-            name);
+            message);
     }
 
     @Override
     public String toString() {
         return "class BankingInternationalPayeeBeneficiaryDetails {\n" +
+            "   name: " + toIndentedString(name) + "\n" + 
             "   country: " + toIndentedString(country) + "\n" + 
             "   message: " + toIndentedString(message) + "\n" + 
-            "   name: " + toIndentedString(name) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingLoanAccount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingLoanAccount.java
index 7d659fb..3aabb4c 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingLoanAccount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingLoanAccount.java
@@ -18,70 +18,94 @@
         PRINCIPAL_AND_INTEREST
     }
 
-    private LocalDate loanEndDate;
+    private LocalDate originalStartDate;
 
-    private String maxRedraw;
+    private String originalLoanAmount;
 
-    private String maxRedrawCurrency;
+    private String originalLoanCurrency;
+
+    private LocalDate loanEndDate;
+
+    private LocalDate nextInstalmentDate;
 
     private String minInstalmentAmount;
 
     private String minInstalmentCurrency;
 
+    private String maxRedraw;
+
+    private String maxRedrawCurrency;
+
     private String minRedraw;
 
     private String minRedrawCurrency;
 
-    private LocalDate nextInstalmentDate;
-
     private Boolean offsetAccountEnabled;
 
     private List<String> offsetAccountIds;
 
-    private String originalLoanAmount;
+    private RepaymentType repaymentType = RepaymentType.PRINCIPAL_AND_INTEREST;
 
-    private String originalLoanCurrency;
+    private String repaymentFrequency;
 
-    private LocalDate originalStartDate;
+    /**
+     * Optional original start date for the loan
+     * @return originalStartDate
+     */
+    public LocalDate getOriginalStartDate() {
+        return originalStartDate;
+    }
 
-    private String repaymentFrequency;
+    public void setOriginalStartDate(LocalDate originalStartDate) {
+        this.originalStartDate = originalStartDate;
+    }
+
+    /**
+     * Optional original loan value
+     * @return originalLoanAmount
+     */
+    public String getOriginalLoanAmount() {
+        return originalLoanAmount;
+    }
 
-    private RepaymentType repaymentType;
+    public void setOriginalLoanAmount(String originalLoanAmount) {
+        this.originalLoanAmount = originalLoanAmount;
+    }
 
     /**
-     * Date that the loan is due to be repaid in full
-     * @return loanEndDate
+     * If absent assumes AUD
+     * @return originalLoanCurrency
      */
-    public LocalDate getLoanEndDate() {
-        return loanEndDate;
+    public String getOriginalLoanCurrency() {
+        return originalLoanCurrency;
     }
 
-    public void setLoanEndDate(LocalDate loanEndDate) {
-        this.loanEndDate = loanEndDate;
+    public void setOriginalLoanCurrency(String originalLoanCurrency) {
+        this.originalLoanCurrency = originalLoanCurrency;
     }
 
     /**
-     * Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account
-     * @return maxRedraw
+     * Date that the loan is due to be repaid in full
+     * @return loanEndDate
      */
-    public String getMaxRedraw() {
-        return maxRedraw;
+    public LocalDate getLoanEndDate() {
+        return loanEndDate;
     }
 
-    public void setMaxRedraw(String maxRedraw) {
-        this.maxRedraw = maxRedraw;
+    public void setLoanEndDate(LocalDate loanEndDate) {
+        this.loanEndDate = loanEndDate;
     }
 
     /**
-     * If absent assumes AUD
-     * @return maxRedrawCurrency
+     * Next date that an instalment is required
+     * @return nextInstalmentDate
      */
-    public String getMaxRedrawCurrency() {
-        return maxRedrawCurrency;
+    public LocalDate getNextInstalmentDate() {
+        return nextInstalmentDate;
     }
 
-    public void setMaxRedrawCurrency(String maxRedrawCurrency) {
-        this.maxRedrawCurrency = maxRedrawCurrency;
+    public void setNextInstalmentDate(LocalDate nextInstalmentDate) {
+        this.nextInstalmentDate = nextInstalmentDate;
     }
 
     /**
@@ -108,6 +132,30 @@ public void setMinInstalmentCurrency(String minInstalmentCurrency) {
         this.minInstalmentCurrency = minInstalmentCurrency;
     }
 
+    /**
+     * Maximum amount of funds that can be redrawn. If not present redraw is not available even if the feature exists for the account
+     * @return maxRedraw
+     */
+    public String getMaxRedraw() {
+        return maxRedraw;
+    }
+
+    public void setMaxRedraw(String maxRedraw) {
+        this.maxRedraw = maxRedraw;
+    }
+
+    /**
+     * If absent assumes AUD
+     * @return maxRedrawCurrency
+     */
+    public String getMaxRedrawCurrency() {
+        return maxRedrawCurrency;
+    }
+
+    public void setMaxRedrawCurrency(String maxRedrawCurrency) {
+        this.maxRedrawCurrency = maxRedrawCurrency;
+    }
+
     /**
      * Minimum redraw amount
      * @return minRedraw
@@ -132,18 +180,6 @@ public void setMinRedrawCurrency(String minRedrawCurrency) {
         this.minRedrawCurrency = minRedrawCurrency;
     }
 
-    /**
-     * Next date that an instalment is required
-     * @return nextInstalmentDate
-     */
-    public LocalDate getNextInstalmentDate() {
-        return nextInstalmentDate;
-    }
-
-    public void setNextInstalmentDate(LocalDate nextInstalmentDate) {
-        this.nextInstalmentDate = nextInstalmentDate;
-    }
-
     /**
      * Set to true if one or more offset accounts are configured for this loan account
      * @return offsetAccountEnabled
@@ -169,43 +205,19 @@ public void setOffsetAccountIds(List<String> offsetAccountIds) {
     }
 
     /**
-     * Optional original loan value
-     * @return originalLoanAmount
-     */
-    public String getOriginalLoanAmount() {
-        return originalLoanAmount;
-    }
-
-    public void setOriginalLoanAmount(String originalLoanAmount) {
-        this.originalLoanAmount = originalLoanAmount;
-    }
-
-    /**
-     * If absent assumes AUD
-     * @return originalLoanCurrency
-     */
-    public String getOriginalLoanCurrency() {
-        return originalLoanCurrency;
-    }
-
-    public void setOriginalLoanCurrency(String originalLoanCurrency) {
-        this.originalLoanCurrency = originalLoanCurrency;
-    }
-
-    /**
-     * Optional original start date for the loan
-     * @return originalStartDate
+     * Options in place for repayments. If absent defaults to PRINCIPAL_AND_INTEREST
+     * @return repaymentType
      */
-    public LocalDate getOriginalStartDate() {
-        return originalStartDate;
+    public RepaymentType getRepaymentType() {
+        return repaymentType;
     }
 
-    public void setOriginalStartDate(LocalDate originalStartDate) {
-        this.originalStartDate = originalStartDate;
+    public void setRepaymentType(RepaymentType repaymentType) {
+        this.repaymentType = repaymentType;
     }
 
     /**
-     * The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
+     * The expected or required repayment frequency. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
      * @return repaymentFrequency
      */
     public String getRepaymentFrequency() {
@@ -216,18 +228,6 @@ public void setRepaymentFrequency(String repaymentFrequency) {
         this.repaymentFrequency = repaymentFrequency;
     }
 
-    /**
-     * Get repaymentType
-     * @return repaymentType
-     */
-    public RepaymentType getRepaymentType() {
-        return repaymentType;
-    }
-
-    public void setRepaymentType(RepaymentType repaymentType) {
-        this.repaymentType = repaymentType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -237,61 +237,61 @@ public boolean equals(Object o) {
             return false;
         }
         BankingLoanAccount bankingLoanAccount = (BankingLoanAccount) o;
-        return Objects.equals(this.loanEndDate, bankingLoanAccount.loanEndDate) &&
-            Objects.equals(this.maxRedraw, bankingLoanAccount.maxRedraw) &&
-            Objects.equals(this.maxRedrawCurrency, bankingLoanAccount.maxRedrawCurrency) &&
+        return Objects.equals(this.originalStartDate, bankingLoanAccount.originalStartDate) &&
+            Objects.equals(this.originalLoanAmount, bankingLoanAccount.originalLoanAmount) &&
+            Objects.equals(this.originalLoanCurrency, bankingLoanAccount.originalLoanCurrency) &&
+            Objects.equals(this.loanEndDate, bankingLoanAccount.loanEndDate) &&
+            Objects.equals(this.nextInstalmentDate, bankingLoanAccount.nextInstalmentDate) &&
             Objects.equals(this.minInstalmentAmount, bankingLoanAccount.minInstalmentAmount) &&
             Objects.equals(this.minInstalmentCurrency, bankingLoanAccount.minInstalmentCurrency) &&
+            Objects.equals(this.maxRedraw, bankingLoanAccount.maxRedraw) &&
+            Objects.equals(this.maxRedrawCurrency, bankingLoanAccount.maxRedrawCurrency) &&
             Objects.equals(this.minRedraw, bankingLoanAccount.minRedraw) &&
             Objects.equals(this.minRedrawCurrency, bankingLoanAccount.minRedrawCurrency) &&
-            Objects.equals(this.nextInstalmentDate, bankingLoanAccount.nextInstalmentDate) &&
             Objects.equals(this.offsetAccountEnabled, bankingLoanAccount.offsetAccountEnabled) &&
             Objects.equals(this.offsetAccountIds, bankingLoanAccount.offsetAccountIds) &&
-            Objects.equals(this.originalLoanAmount, bankingLoanAccount.originalLoanAmount) &&
-            Objects.equals(this.originalLoanCurrency, bankingLoanAccount.originalLoanCurrency) &&
-            Objects.equals(this.originalStartDate, bankingLoanAccount.originalStartDate) &&
-            Objects.equals(this.repaymentFrequency, bankingLoanAccount.repaymentFrequency) &&
-            Objects.equals(this.repaymentType, bankingLoanAccount.repaymentType);
+            Objects.equals(this.repaymentType, bankingLoanAccount.repaymentType) &&
+            Objects.equals(this.repaymentFrequency, bankingLoanAccount.repaymentFrequency);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            originalStartDate,
+            originalLoanAmount,
+            originalLoanCurrency,
             loanEndDate,
-            maxRedraw,
-            maxRedrawCurrency,
+            nextInstalmentDate,
             minInstalmentAmount,
             minInstalmentCurrency,
+            maxRedraw,
+            maxRedrawCurrency,
             minRedraw,
             minRedrawCurrency,
-            nextInstalmentDate,
             offsetAccountEnabled,
             offsetAccountIds,
-            originalLoanAmount,
-            originalLoanCurrency,
-            originalStartDate,
-            repaymentFrequency,
-            repaymentType);
+            repaymentType,
+            repaymentFrequency);
     }
 
     @Override
     public String toString() {
         return "class BankingLoanAccount {\n" +
+            "   originalStartDate: " + toIndentedString(originalStartDate) + "\n" + 
+            "   originalLoanAmount: " + toIndentedString(originalLoanAmount) + "\n" + 
+            "   originalLoanCurrency: " + toIndentedString(originalLoanCurrency) + "\n" + 
             "   loanEndDate: " + toIndentedString(loanEndDate) + "\n" + 
-            "   maxRedraw: " + toIndentedString(maxRedraw) + "\n" + 
-            "   maxRedrawCurrency: " + toIndentedString(maxRedrawCurrency) + "\n" + 
+            "   nextInstalmentDate: " + toIndentedString(nextInstalmentDate) + "\n" + 
             "   minInstalmentAmount: " + toIndentedString(minInstalmentAmount) + "\n" + 
             "   minInstalmentCurrency: " + toIndentedString(minInstalmentCurrency) + "\n" + 
+            "   maxRedraw: " + toIndentedString(maxRedraw) + "\n" + 
+            "   maxRedrawCurrency: " + toIndentedString(maxRedrawCurrency) + "\n" + 
             "   minRedraw: " + toIndentedString(minRedraw) + "\n" + 
             "   minRedrawCurrency: " + toIndentedString(minRedrawCurrency) + "\n" + 
-            "   nextInstalmentDate: " + toIndentedString(nextInstalmentDate) + "\n" + 
             "   offsetAccountEnabled: " + toIndentedString(offsetAccountEnabled) + "\n" + 
             "   offsetAccountIds: " + toIndentedString(offsetAccountIds) + "\n" + 
-            "   originalLoanAmount: " + toIndentedString(originalLoanAmount) + "\n" + 
-            "   originalLoanCurrency: " + toIndentedString(originalLoanCurrency) + "\n" + 
-            "   originalStartDate: " + toIndentedString(originalStartDate) + "\n" + 
-            "   repaymentFrequency: " + toIndentedString(repaymentFrequency) + "\n" + 
             "   repaymentType: " + toIndentedString(repaymentType) + "\n" + 
+            "   repaymentFrequency: " + toIndentedString(repaymentFrequency) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayee.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayee.java
index 6977b59..6abd7ff 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayee.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayee.java
@@ -13,43 +13,31 @@
 public class BankingPayee {
 
     public enum Type {
-        BILLER,
         DOMESTIC,
-        INTERNATIONAL
+        INTERNATIONAL,
+        BILLER
     }
 
-    private LocalDate creationDate;
-
-    private String description;
+    private String payeeId;
 
     private String nickname;
 
-    private String payeeId;
+    private String description;
 
     private Type type;
 
-    /**
-     * The date the payee was created by the customer
-     * @return creationDate
-     */
-    public LocalDate getCreationDate() {
-        return creationDate;
-    }
-
-    public void setCreationDate(LocalDate creationDate) {
-        this.creationDate = creationDate;
-    }
+    private LocalDate creationDate;
 
     /**
-     * A description of the payee provided by the customer
-     * @return description
+     * ID of the payee adhering to the rules of ID permanence
+     * @return payeeId
      */
-    public String getDescription() {
-        return description;
+    public String getPayeeId() {
+        return payeeId;
     }
 
-    public void setDescription(String description) {
-        this.description = description;
+    public void setPayeeId(String payeeId) {
+        this.payeeId = payeeId;
     }
 
     /**
@@ -65,19 +53,19 @@ public void setNickname(String nickname) {
     }
 
     /**
-     * ID of the payee adhering to the rules of ID permanence
-     * @return payeeId
+     * A description of the payee provided by the customer
+     * @return description
      */
-    public String getPayeeId() {
-        return payeeId;
+    public String getDescription() {
+        return description;
     }
 
-    public void setPayeeId(String payeeId) {
-        this.payeeId = payeeId;
+    public void setDescription(String description) {
+        this.description = description;
     }
 
     /**
-     * Get type
+     * The type of payee. DOMESTIC means a registered payee for domestic payments including NPP. INTERNATIONAL means a registered payee for international payments. BILLER means a registered payee for BPAY
      * @return type
      */
     public Type getType() {
@@ -88,6 +76,18 @@ public void setType(Type type) {
         this.type = type;
     }
 
+    /**
+     * The date the payee was created by the customer
+     * @return creationDate
+     */
+    public LocalDate getCreationDate() {
+        return creationDate;
+    }
+
+    public void setCreationDate(LocalDate creationDate) {
+        this.creationDate = creationDate;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -97,31 +97,31 @@ public boolean equals(Object o) {
             return false;
         }
         BankingPayee bankingPayee = (BankingPayee) o;
-        return Objects.equals(this.creationDate, bankingPayee.creationDate) &&
-            Objects.equals(this.description, bankingPayee.description) &&
+        return Objects.equals(this.payeeId, bankingPayee.payeeId) &&
             Objects.equals(this.nickname, bankingPayee.nickname) &&
-            Objects.equals(this.payeeId, bankingPayee.payeeId) &&
-            Objects.equals(this.type, bankingPayee.type);
+            Objects.equals(this.description, bankingPayee.description) &&
+            Objects.equals(this.type, bankingPayee.type) &&
+            Objects.equals(this.creationDate, bankingPayee.creationDate);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            creationDate,
-            description,
-            nickname,
             payeeId,
-            type);
+            nickname,
+            description,
+            type,
+            creationDate);
     }
 
     @Override
     public String toString() {
         return "class BankingPayee {\n" +
-            "   creationDate: " + toIndentedString(creationDate) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   nickname: " + toIndentedString(nickname) + "\n" + 
             "   payeeId: " + toIndentedString(payeeId) + "\n" + 
+            "   nickname: " + toIndentedString(nickname) + "\n" + 
+            "   description: " + toIndentedString(description) + "\n" + 
             "   type: " + toIndentedString(type) + "\n" + 
+            "   creationDate: " + toIndentedString(creationDate) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayeeDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayeeDetail.java
index 579c3e4..359bca8 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayeeDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingPayeeDetail.java
@@ -12,29 +12,29 @@
 public class BankingPayeeDetail extends BankingPayee {
 
     public enum PayeeUType {
-        biller,
         domestic,
+        biller,
         international
     }
 
-    private BankingBillerPayee biller;
+    private PayeeUType payeeUType;
 
     private BankingDomesticPayee domestic;
 
-    private BankingInternationalPayee international;
+    private BankingBillerPayee biller;
 
-    private PayeeUType payeeUType;
+    private BankingInternationalPayee international;
 
     /**
-     * Get biller
-     * @return biller
+     * Type of object included that describes the payee in detail
+     * @return payeeUType
      */
-    public BankingBillerPayee getBiller() {
-        return biller;
+    public PayeeUType getPayeeUType() {
+        return payeeUType;
     }
 
-    public void setBiller(BankingBillerPayee biller) {
-        this.biller = biller;
+    public void setPayeeUType(PayeeUType payeeUType) {
+        this.payeeUType = payeeUType;
     }
 
     /**
@@ -50,27 +50,27 @@ public void setDomestic(BankingDomesticPayee domestic) {
     }
 
     /**
-     * Get international
-     * @return international
+     * Get biller
+     * @return biller
      */
-    public BankingInternationalPayee getInternational() {
-        return international;
+    public BankingBillerPayee getBiller() {
+        return biller;
     }
 
-    public void setInternational(BankingInternationalPayee international) {
-        this.international = international;
+    public void setBiller(BankingBillerPayee biller) {
+        this.biller = biller;
     }
 
     /**
-     * Get payeeUType
-     * @return payeeUType
+     * Get international
+     * @return international
      */
-    public PayeeUType getPayeeUType() {
-        return payeeUType;
+    public BankingInternationalPayee getInternational() {
+        return international;
     }
 
-    public void setPayeeUType(PayeeUType payeeUType) {
-        this.payeeUType = payeeUType;
+    public void setInternational(BankingInternationalPayee international) {
+        this.international = international;
     }
 
     @Override
@@ -82,35 +82,35 @@ public boolean equals(Object o) {
             return false;
         }
         BankingPayeeDetail bankingPayeeDetail = (BankingPayeeDetail) o;
-        return Objects.equals(this.biller, bankingPayeeDetail.biller) &&
+        return Objects.equals(this.payeeUType, bankingPayeeDetail.payeeUType) &&
             Objects.equals(this.domestic, bankingPayeeDetail.domestic) &&
+            Objects.equals(this.biller, bankingPayeeDetail.biller) &&
             Objects.equals(this.international, bankingPayeeDetail.international) &&
-            Objects.equals(this.payeeUType, bankingPayeeDetail.payeeUType) &&
             super.equals(o);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            biller,
+            payeeUType,
             domestic,
+            biller,
             international,
-            payeeUType,
             super.hashCode());
     }
 
     @Override
     public String toString() {
         return "class BankingPayeeDetail {\n" +
-            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" + 
-            "   description: " + toIndentedString(getDescription()) + "\n" + 
-            "   nickname: " + toIndentedString(getNickname()) + "\n" + 
-            "   payeeId: " + toIndentedString(getPayeeId()) + "\n" + 
-            "   type: " + toIndentedString(getType()) + "\n" + 
-            "   biller: " + toIndentedString(biller) + "\n" + 
-            "   domestic: " + toIndentedString(domestic) + "\n" + 
-            "   international: " + toIndentedString(international) + "\n" + 
-            "   payeeUType: " + toIndentedString(payeeUType) + "\n" + 
+            "   payeeId: " + toIndentedString(getPayeeId()) + "\n" +
+            "   nickname: " + toIndentedString(getNickname()) + "\n" +
+            "   description: " + toIndentedString(getDescription()) + "\n" +
+            "   type: " + toIndentedString(getType()) + "\n" +
+            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" +
+            "   payeeUType: " + toIndentedString(payeeUType) + "\n" +
+            "   domestic: " + toIndentedString(domestic) + "\n" +
+            "   biller: " + toIndentedString(biller) + "\n" +
+            "   international: " + toIndentedString(international) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProduct.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProduct.java
index 8da568e..05db8b5 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProduct.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProduct.java
@@ -1,251 +1,53 @@
-/*
- * Consumer Data Standards
- * Sample client library to Demonstrate the Consumer Data Right APIs
- *
- * NOTE: This class is auto generated by the codegen artefact
- * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
- */
 package au.org.consumerdatastandards.client.model;
 
 import java.time.OffsetDateTime;
-import java.util.Objects;
 
-public class BankingProduct {
+public interface BankingProduct {
+    BankingProductAdditionalInformation getAdditionalInformation();
 
-    private BankingProductAdditionalInformation additionalInformation;
+    void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation);
 
-    private String applicationUri;
+    String getApplicationUri();
 
-    private String brand;
+    void setApplicationUri(String applicationUri);
 
-    private String brandName;
+    String getBrand();
 
-    private String description;
+    void setBrand(String brand);
 
-    private OffsetDateTime effectiveFrom;
-
-    private OffsetDateTime effectiveTo;
-
-    private Boolean isTailored;
-
-    private OffsetDateTime lastUpdated;
-
-    private String name;
-
-    private BankingProductCategory productCategory;
-
-    private String productId;
-
-    /**
-     * Get additionalInformation
-     * @return additionalInformation
-     */
-    public BankingProductAdditionalInformation getAdditionalInformation() {
-        return additionalInformation;
-    }
-
-    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
-        this.additionalInformation = additionalInformation;
-    }
-
-    /**
-     * A link to an application web page where this product can be applied for.
-     * @return applicationUri
-     */
-    public String getApplicationUri() {
-        return applicationUri;
-    }
-
-    public void setApplicationUri(String applicationUri) {
-        this.applicationUri = applicationUri;
-    }
-
-    /**
-     * A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required
-     * @return brand
-     */
-    public String getBrand() {
-        return brand;
-    }
-
-    public void setBrand(String brand) {
-        this.brand = brand;
-    }
-
-    /**
-     * An optional display name of the brand
-     * @return brandName
-     */
-    public String getBrandName() {
-        return brandName;
-    }
-
-    public void setBrandName(String brandName) {
-        this.brandName = brandName;
-    }
-
-    /**
-     * A description of the product
-     * @return description
-     */
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    /**
-     * The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
-     * @return effectiveFrom
-     */
-    public OffsetDateTime getEffectiveFrom() {
-        return effectiveFrom;
-    }
-
-    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
-        this.effectiveFrom = effectiveFrom;
-    }
-
-    /**
-     * The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
-     * @return effectiveTo
-     */
-    public OffsetDateTime getEffectiveTo() {
-        return effectiveTo;
-    }
-
-    public void setEffectiveTo(OffsetDateTime effectiveTo) {
-        this.effectiveTo = effectiveTo;
-    }
-
-    /**
-     * Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
-     * @return isTailored
-     */
-    public Boolean getIsTailored() {
-        return isTailored;
-    }
-
-    public void setIsTailored(Boolean isTailored) {
-        this.isTailored = isTailored;
-    }
-
-    /**
-     * The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
-     * @return lastUpdated
-     */
-    public OffsetDateTime getLastUpdated() {
-        return lastUpdated;
-    }
-
-    public void setLastUpdated(OffsetDateTime lastUpdated) {
-        this.lastUpdated = lastUpdated;
-    }
-
-    /**
-     * The display name of the product
-     * @return name
-     */
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    /**
-     * Get productCategory
-     * @return productCategory
-     */
-    public BankingProductCategory getProductCategory() {
-        return productCategory;
-    }
-
-    public void setProductCategory(BankingProductCategory productCategory) {
-        this.productCategory = productCategory;
-    }
-
-    /**
-     * A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
-     * @return productId
-     */
-    public String getProductId() {
-        return productId;
-    }
-
-    public void setProductId(String productId) {
-        this.productId = productId;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-        BankingProduct bankingProduct = (BankingProduct) o;
-        return Objects.equals(this.additionalInformation, bankingProduct.additionalInformation) &&
-            Objects.equals(this.applicationUri, bankingProduct.applicationUri) &&
-            Objects.equals(this.brand, bankingProduct.brand) &&
-            Objects.equals(this.brandName, bankingProduct.brandName) &&
-            Objects.equals(this.description, bankingProduct.description) &&
-            Objects.equals(this.effectiveFrom, bankingProduct.effectiveFrom) &&
-            Objects.equals(this.effectiveTo, bankingProduct.effectiveTo) &&
-            Objects.equals(this.isTailored, bankingProduct.isTailored) &&
-            Objects.equals(this.lastUpdated, bankingProduct.lastUpdated) &&
-            Objects.equals(this.name, bankingProduct.name) &&
-            Objects.equals(this.productCategory, bankingProduct.productCategory) &&
-            Objects.equals(this.productId, bankingProduct.productId);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(
-            additionalInformation,
-            applicationUri,
-            brand,
-            brandName,
-            description,
-            effectiveFrom,
-            effectiveTo,
-            isTailored,
-            lastUpdated,
-            name,
-            productCategory,
-            productId);
-    }
-
-    @Override
-    public String toString() {
-        return "class BankingProduct {\n" +
-            "   additionalInformation: " + toIndentedString(additionalInformation) + "\n" + 
-            "   applicationUri: " + toIndentedString(applicationUri) + "\n" + 
-            "   brand: " + toIndentedString(brand) + "\n" + 
-            "   brandName: " + toIndentedString(brandName) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   effectiveFrom: " + toIndentedString(effectiveFrom) + "\n" + 
-            "   effectiveTo: " + toIndentedString(effectiveTo) + "\n" + 
-            "   isTailored: " + toIndentedString(isTailored) + "\n" + 
-            "   lastUpdated: " + toIndentedString(lastUpdated) + "\n" + 
-            "   name: " + toIndentedString(name) + "\n" + 
-            "   productCategory: " + toIndentedString(productCategory) + "\n" + 
-            "   productId: " + toIndentedString(productId) + "\n" + 
-            "}";
-    }
-
-    /**
-     * Convert the given object to string with each line indented by 4 spaces
-     * (except the first line).
-     */
-    private String toIndentedString(Object o) {
-        if (o == null) {
-            return "null";
-        }
-        return o.toString().replace("\n", "\n    ");
-    }
+    String getBrandName();
+
+    void setBrandName(String brandName);
+
+    String getDescription();
+
+    void setDescription(String description);
+
+    OffsetDateTime getEffectiveFrom();
+
+    void setEffectiveFrom(OffsetDateTime effectiveFrom);
+
+    OffsetDateTime getEffectiveTo();
+
+    void setEffectiveTo(OffsetDateTime effectiveTo);
+
+    Boolean getIsTailored();
+
+    void setIsTailored(Boolean isTailored);
+
+    OffsetDateTime getLastUpdated();
+
+    void setLastUpdated(OffsetDateTime lastUpdated);
+
+    String getName();
+
+    void setName(String name);
+
+    BankingProductCategory getProductCategory();
+
+    void setProductCategory(BankingProductCategory productCategory);
+
+    String getProductId();
+
+    void setProductId(String productId);
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductAdditionalInformation.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductAdditionalInformation.java
index b89e1aa..d676abb 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductAdditionalInformation.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductAdditionalInformation.java
@@ -13,26 +13,38 @@
  */
 public class BankingProductAdditionalInformation {
 
-    private String bundleUri;
+    private String overviewUri;
+
+    private String termsUri;
 
     private String eligibilityUri;
 
     private String feesAndPricingUri;
 
-    private String overviewUri;
+    private String bundleUri;
 
-    private String termsUri;
+    /**
+     * General overview of the product
+     * @return overviewUri
+     */
+    public String getOverviewUri() {
+        return overviewUri;
+    }
+
+    public void setOverviewUri(String overviewUri) {
+        this.overviewUri = overviewUri;
+    }
 
     /**
-     * Description of a bundle that this product can be part of
-     * @return bundleUri
+     * Terms and conditions for the product
+     * @return termsUri
      */
-    public String getBundleUri() {
-        return bundleUri;
+    public String getTermsUri() {
+        return termsUri;
     }
 
-    public void setBundleUri(String bundleUri) {
-        this.bundleUri = bundleUri;
+    public void setTermsUri(String termsUri) {
+        this.termsUri = termsUri;
     }
 
     /**
@@ -60,27 +72,15 @@ public void setFeesAndPricingUri(String feesAndPricingUri) {
     }
 
     /**
-     * General overview of the product
-     * @return overviewUri
-     */
-    public String getOverviewUri() {
-        return overviewUri;
-    }
-
-    public void setOverviewUri(String overviewUri) {
-        this.overviewUri = overviewUri;
-    }
-
-    /**
-     * Terms and conditions for the product
-     * @return termsUri
+     * Description of a bundle that this product can be part of
+     * @return bundleUri
      */
-    public String getTermsUri() {
-        return termsUri;
+    public String getBundleUri() {
+        return bundleUri;
     }
 
-    public void setTermsUri(String termsUri) {
-        this.termsUri = termsUri;
+    public void setBundleUri(String bundleUri) {
+        this.bundleUri = bundleUri;
     }
 
     @Override
@@ -92,31 +92,31 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductAdditionalInformation bankingProductAdditionalInformation = (BankingProductAdditionalInformation) o;
-        return Objects.equals(this.bundleUri, bankingProductAdditionalInformation.bundleUri) &&
+        return Objects.equals(this.overviewUri, bankingProductAdditionalInformation.overviewUri) &&
+            Objects.equals(this.termsUri, bankingProductAdditionalInformation.termsUri) &&
             Objects.equals(this.eligibilityUri, bankingProductAdditionalInformation.eligibilityUri) &&
             Objects.equals(this.feesAndPricingUri, bankingProductAdditionalInformation.feesAndPricingUri) &&
-            Objects.equals(this.overviewUri, bankingProductAdditionalInformation.overviewUri) &&
-            Objects.equals(this.termsUri, bankingProductAdditionalInformation.termsUri);
+            Objects.equals(this.bundleUri, bankingProductAdditionalInformation.bundleUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            bundleUri,
+            overviewUri,
+            termsUri,
             eligibilityUri,
             feesAndPricingUri,
-            overviewUri,
-            termsUri);
+            bundleUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductAdditionalInformation {\n" +
-            "   bundleUri: " + toIndentedString(bundleUri) + "\n" + 
-            "   eligibilityUri: " + toIndentedString(eligibilityUri) + "\n" + 
-            "   feesAndPricingUri: " + toIndentedString(feesAndPricingUri) + "\n" + 
-            "   overviewUri: " + toIndentedString(overviewUri) + "\n" + 
-            "   termsUri: " + toIndentedString(termsUri) + "\n" + 
+            "   overviewUri: " + toIndentedString(overviewUri) + "\n" +
+            "   termsUri: " + toIndentedString(termsUri) + "\n" +
+            "   eligibilityUri: " + toIndentedString(eligibilityUri) + "\n" +
+            "   feesAndPricingUri: " + toIndentedString(feesAndPricingUri) + "\n" +
+            "   bundleUri: " + toIndentedString(bundleUri) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductBundle.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductBundle.java
index 6992242..d2adcfb 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductBundle.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductBundle.java
@@ -12,15 +12,39 @@
 
 public class BankingProductBundle {
 
+    private String name;
+
+    private String description;
+
     private String additionalInfo;
 
     private String additionalInfoUri;
 
-    private String description;
+    private List<String> productIds;
 
-    private String name;
+    /**
+     * Name of the bundle
+     * @return name
+     */
+    public String getName() {
+        return name;
+    }
 
-    private List<String> productIds;
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /**
+     * Description of the bundle
+     * @return description
+     */
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
 
     /**
      * Display text providing more information on the bundle
@@ -46,30 +70,6 @@ public void setAdditionalInfoUri(String additionalInfoUri) {
         this.additionalInfoUri = additionalInfoUri;
     }
 
-    /**
-     * Description of the bundle
-     * @return description
-     */
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    /**
-     * Name of the bundle
-     * @return name
-     */
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
     /**
      * Array of product IDs for products included in the bundle that are available via the product end points.  Note that this array is not intended to represent a comprehensive model of the products included in the bundle and some products available for the bundle may not be available via the product reference end points
      * @return productIds
@@ -91,30 +91,30 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductBundle bankingProductBundle = (BankingProductBundle) o;
-        return Objects.equals(this.additionalInfo, bankingProductBundle.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductBundle.additionalInfoUri) &&
+        return Objects.equals(this.name, bankingProductBundle.name) &&
             Objects.equals(this.description, bankingProductBundle.description) &&
-            Objects.equals(this.name, bankingProductBundle.name) &&
+            Objects.equals(this.additionalInfo, bankingProductBundle.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductBundle.additionalInfoUri) &&
             Objects.equals(this.productIds, bankingProductBundle.productIds);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            name,
+            description,
             additionalInfo,
             additionalInfoUri,
-            description,
-            name,
             productIds);
     }
 
     @Override
     public String toString() {
         return "class BankingProductBundle {\n" +
+            "   name: " + toIndentedString(name) + "\n" + 
+            "   description: " + toIndentedString(description) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   name: " + toIndentedString(name) + "\n" + 
             "   productIds: " + toIndentedString(productIds) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductCategory.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductCategory.java
index f003718..6414d29 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductCategory.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductCategory.java
@@ -13,27 +13,27 @@
  */
 public enum BankingProductCategory {
   
-    BUSINESS_LOANS,
+    TRANS_AND_SAVINGS_ACCOUNTS,
   
-    CRED_AND_CHRG_CARDS,
+    TERM_DEPOSITS,
   
-    LEASES,
+    TRAVEL_CARDS,
   
-    MARGIN_LOANS,
+    REGULATED_TRUST_ACCOUNTS,
   
-    OVERDRAFTS,
+    RESIDENTIAL_MORTGAGES,
   
-    PERS_LOANS,
+    CRED_AND_CHRG_CARDS,
   
-    REGULATED_TRUST_ACCOUNTS,
+    PERS_LOANS,
   
-    RESIDENTIAL_MORTGAGES,
+    MARGIN_LOANS,
   
-    TERM_DEPOSITS,
+    LEASES,
   
     TRADE_FINANCE,
   
-    TRANS_AND_SAVINGS_ACCOUNTS,
+    OVERDRAFTS,
   
-    TRAVEL_CARDS
+    BUSINESS_LOANS
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductConstraint.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductConstraint.java
index 6836dfa..21452fe 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductConstraint.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductConstraint.java
@@ -12,20 +12,44 @@
 public class BankingProductConstraint {
 
     public enum ConstraintType {
+        MIN_BALANCE,
         MAX_BALANCE,
+        OPENING_BALANCE,
         MAX_LIMIT,
-        MIN_BALANCE,
-        MIN_LIMIT,
-        OPENING_BALANCE
+        MIN_LIMIT
     }
 
+    private ConstraintType constraintType;
+
+    private String additionalValue;
+
     private String additionalInfo;
 
     private String additionalInfoUri;
 
-    private String additionalValue;
+    /**
+     * The type of constraint described.  See the next section for an overview of valid values and their meaning
+     * @return constraintType
+     */
+    public ConstraintType getConstraintType() {
+        return constraintType;
+    }
 
-    private ConstraintType constraintType;
+    public void setConstraintType(ConstraintType constraintType) {
+        this.constraintType = constraintType;
+    }
+
+    /**
+     * Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)
+     * @return additionalValue
+     */
+    public String getAdditionalValue() {
+        return additionalValue;
+    }
+
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
+    }
 
     /**
      * Display text providing more information the constraint
@@ -51,30 +75,6 @@ public void setAdditionalInfoUri(String additionalInfoUri) {
         this.additionalInfoUri = additionalInfoUri;
     }
 
-    /**
-     * Generic field containing additional information relevant to the [constraintType](#tocSproductconstrainttypedoc) specified.  Whether mandatory or not is dependent on the value of [constraintType](#tocSproductconstrainttypedoc)
-     * @return additionalValue
-     */
-    public String getAdditionalValue() {
-        return additionalValue;
-    }
-
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
-    }
-
-    /**
-     * Get constraintType
-     * @return constraintType
-     */
-    public ConstraintType getConstraintType() {
-        return constraintType;
-    }
-
-    public void setConstraintType(ConstraintType constraintType) {
-        this.constraintType = constraintType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -84,28 +84,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductConstraint bankingProductConstraint = (BankingProductConstraint) o;
-        return Objects.equals(this.additionalInfo, bankingProductConstraint.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductConstraint.additionalInfoUri) &&
+        return Objects.equals(this.constraintType, bankingProductConstraint.constraintType) &&
             Objects.equals(this.additionalValue, bankingProductConstraint.additionalValue) &&
-            Objects.equals(this.constraintType, bankingProductConstraint.constraintType);
+            Objects.equals(this.additionalInfo, bankingProductConstraint.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductConstraint.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
+            constraintType,
             additionalValue,
-            constraintType);
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductConstraint {\n" +
+            "   constraintType: " + toIndentedString(constraintType) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   constraintType: " + toIndentedString(constraintType) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDepositRate.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDepositRate.java
index e1a1b3c..8432114 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDepositRate.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDepositRate.java
@@ -13,69 +13,69 @@
 public class BankingProductDepositRate {
 
     public enum DepositRateType {
+        FIXED,
         BONUS,
         BUNDLE_BONUS,
-        FIXED,
-        FLOATING,
+        VARIABLE,
         INTRODUCTORY,
-        MARKET_LINKED,
-        VARIABLE
+        FLOATING,
+        MARKET_LINKED
     }
 
-    private String additionalInfo;
+    private DepositRateType depositRateType;
 
-    private String additionalInfoUri;
+    private String rate;
 
-    private String additionalValue;
+    private String calculationFrequency;
 
     private String applicationFrequency;
 
-    private String calculationFrequency;
+    private List<BankingProductRateTier> tiers;
 
-    private DepositRateType depositRateType;
+    private String additionalValue;
 
-    private String rate;
+    private String additionalInfo;
 
-    private List<BankingProductRateTier> tiers;
+    private String additionalInfoUri;
 
     /**
-     * Display text providing more information on the rate
-     * @return additionalInfo
+     * The type of rate (base, bonus, etc). See the next section for an overview of valid values and their meaning
+     * @return depositRateType
      */
-    public String getAdditionalInfo() {
-        return additionalInfo;
+    public DepositRateType getDepositRateType() {
+        return depositRateType;
     }
 
-    public void setAdditionalInfo(String additionalInfo) {
-        this.additionalInfo = additionalInfo;
+    public void setDepositRateType(DepositRateType depositRateType) {
+        this.depositRateType = depositRateType;
     }
 
     /**
-     * Link to a web page with more information on this rate
-     * @return additionalInfoUri
+     * The rate to be applied
+     * @return rate
      */
-    public String getAdditionalInfoUri() {
-        return additionalInfoUri;
+    public String getRate() {
+        return rate;
     }
 
-    public void setAdditionalInfoUri(String additionalInfoUri) {
-        this.additionalInfoUri = additionalInfoUri;
+    public void setRate(String rate) {
+        this.rate = rate;
     }
 
     /**
-     * Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)
-     * @return additionalValue
+     * The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
+     * @return calculationFrequency
      */
-    public String getAdditionalValue() {
-        return additionalValue;
+    public String getCalculationFrequency() {
+        return calculationFrequency;
     }
 
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
+    public void setCalculationFrequency(String calculationFrequency) {
+        this.calculationFrequency = calculationFrequency;
     }
 
     /**
-     * The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
+     * The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
      * @return applicationFrequency
      */
     public String getApplicationFrequency() {
@@ -87,51 +87,51 @@ public void setApplicationFrequency(String applicationFrequency) {
     }
 
     /**
-     * The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
-     * @return calculationFrequency
+     * Rate tiers applicable for this rate
+     * @return tiers
      */
-    public String getCalculationFrequency() {
-        return calculationFrequency;
+    public List<BankingProductRateTier> getTiers() {
+        return tiers;
     }
 
-    public void setCalculationFrequency(String calculationFrequency) {
-        this.calculationFrequency = calculationFrequency;
+    public void setTiers(List<BankingProductRateTier> tiers) {
+        this.tiers = tiers;
     }
 
     /**
-     * Get depositRateType
-     * @return depositRateType
+     * Generic field containing additional information relevant to the [depositRateType](#tocSproductdepositratetypedoc) specified. Whether mandatory or not is dependent on the value of [depositRateType](#tocSproductdepositratetypedoc)
+     * @return additionalValue
      */
-    public DepositRateType getDepositRateType() {
-        return depositRateType;
+    public String getAdditionalValue() {
+        return additionalValue;
     }
 
-    public void setDepositRateType(DepositRateType depositRateType) {
-        this.depositRateType = depositRateType;
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
     }
 
     /**
-     * The rate to be applied
-     * @return rate
+     * Display text providing more information on the rate
+     * @return additionalInfo
      */
-    public String getRate() {
-        return rate;
+    public String getAdditionalInfo() {
+        return additionalInfo;
     }
 
-    public void setRate(String rate) {
-        this.rate = rate;
+    public void setAdditionalInfo(String additionalInfo) {
+        this.additionalInfo = additionalInfo;
     }
 
     /**
-     * Rate tiers applicable for this rate
-     * @return tiers
+     * Link to a web page with more information on this rate
+     * @return additionalInfoUri
      */
-    public List<BankingProductRateTier> getTiers() {
-        return tiers;
+    public String getAdditionalInfoUri() {
+        return additionalInfoUri;
     }
 
-    public void setTiers(List<BankingProductRateTier> tiers) {
-        this.tiers = tiers;
+    public void setAdditionalInfoUri(String additionalInfoUri) {
+        this.additionalInfoUri = additionalInfoUri;
     }
 
     @Override
@@ -143,40 +143,40 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductDepositRate bankingProductDepositRate = (BankingProductDepositRate) o;
-        return Objects.equals(this.additionalInfo, bankingProductDepositRate.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductDepositRate.additionalInfoUri) &&
-            Objects.equals(this.additionalValue, bankingProductDepositRate.additionalValue) &&
-            Objects.equals(this.applicationFrequency, bankingProductDepositRate.applicationFrequency) &&
-            Objects.equals(this.calculationFrequency, bankingProductDepositRate.calculationFrequency) &&
-            Objects.equals(this.depositRateType, bankingProductDepositRate.depositRateType) &&
+        return Objects.equals(this.depositRateType, bankingProductDepositRate.depositRateType) &&
             Objects.equals(this.rate, bankingProductDepositRate.rate) &&
-            Objects.equals(this.tiers, bankingProductDepositRate.tiers);
+            Objects.equals(this.calculationFrequency, bankingProductDepositRate.calculationFrequency) &&
+            Objects.equals(this.applicationFrequency, bankingProductDepositRate.applicationFrequency) &&
+            Objects.equals(this.tiers, bankingProductDepositRate.tiers) &&
+            Objects.equals(this.additionalValue, bankingProductDepositRate.additionalValue) &&
+            Objects.equals(this.additionalInfo, bankingProductDepositRate.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductDepositRate.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
-            additionalValue,
-            applicationFrequency,
-            calculationFrequency,
             depositRateType,
             rate,
-            tiers);
+            calculationFrequency,
+            applicationFrequency,
+            tiers,
+            additionalValue,
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductDepositRate {\n" +
-            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
-            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   applicationFrequency: " + toIndentedString(applicationFrequency) + "\n" + 
-            "   calculationFrequency: " + toIndentedString(calculationFrequency) + "\n" + 
             "   depositRateType: " + toIndentedString(depositRateType) + "\n" + 
             "   rate: " + toIndentedString(rate) + "\n" + 
+            "   calculationFrequency: " + toIndentedString(calculationFrequency) + "\n" + 
+            "   applicationFrequency: " + toIndentedString(applicationFrequency) + "\n" + 
             "   tiers: " + toIndentedString(tiers) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
+            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
+            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDetail.java
index 21a875e..54957ed 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDetail.java
@@ -1,180 +1,33 @@
-/*
- * Consumer Data Standards
- * Sample client library to Demonstrate the Consumer Data Right APIs
- *
- * NOTE: This class is auto generated by the codegen artefact
- * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
- */
 package au.org.consumerdatastandards.client.model;
 
 import java.util.List;
-import java.util.Objects;
 
-public class BankingProductDetail extends BankingProduct {
+public interface BankingProductDetail extends BankingProduct {
+    List<BankingProductBundle> getBundles();
 
-    private List<BankingProductBundle> bundles;
+    void setBundles(List<BankingProductBundle> bundles);
 
-    private List<BankingProductConstraint> constraints;
+    List<BankingProductFeature> getFeatures();
 
-    private List<BankingProductDepositRate> depositRates;
+    void setFeatures(List<BankingProductFeature> features);
 
-    private List<BankingProductEligibility> eligibility;
+    List<BankingProductConstraint> getConstraints();
 
-    private List<BankingProductFeature> features;
+    void setConstraints(List<BankingProductConstraint> constraints);
 
-    private List<BankingProductFee> fees;
+    List<BankingProductEligibility> getEligibility();
 
-    private List<BankingProductLendingRate> lendingRates;
+    void setEligibility(List<BankingProductEligibility> eligibility);
 
-    /**
-     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
-     * @return bundles
-     */
-    public List<BankingProductBundle> getBundles() {
-        return bundles;
-    }
+    List<BankingProductFee> getFees();
 
-    public void setBundles(List<BankingProductBundle> bundles) {
-        this.bundles = bundles;
-    }
+    void setFees(List<BankingProductFee> fees);
 
-    /**
-     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
-     * @return constraints
-     */
-    public List<BankingProductConstraint> getConstraints() {
-        return constraints;
-    }
+    List<BankingProductDepositRate> getDepositRates();
 
-    public void setConstraints(List<BankingProductConstraint> constraints) {
-        this.constraints = constraints;
-    }
+    void setDepositRates(List<BankingProductDepositRate> depositRates);
 
-    /**
-     * Interest rates available for deposits
-     * @return depositRates
-     */
-    public List<BankingProductDepositRate> getDepositRates() {
-        return depositRates;
-    }
+    List<BankingProductLendingRate> getLendingRates();
 
-    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
-        this.depositRates = depositRates;
-    }
-
-    /**
-     * Eligibility criteria for the product
-     * @return eligibility
-     */
-    public List<BankingProductEligibility> getEligibility() {
-        return eligibility;
-    }
-
-    public void setEligibility(List<BankingProductEligibility> eligibility) {
-        this.eligibility = eligibility;
-    }
-
-    /**
-     * Array of features available for the product
-     * @return features
-     */
-    public List<BankingProductFeature> getFeatures() {
-        return features;
-    }
-
-    public void setFeatures(List<BankingProductFeature> features) {
-        this.features = features;
-    }
-
-    /**
-     * Fees applicable for the product
-     * @return fees
-     */
-    public List<BankingProductFee> getFees() {
-        return fees;
-    }
-
-    public void setFees(List<BankingProductFee> fees) {
-        this.fees = fees;
-    }
-
-    /**
-     * Interest rates charged against lending balances
-     * @return lendingRates
-     */
-    public List<BankingProductLendingRate> getLendingRates() {
-        return lendingRates;
-    }
-
-    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
-        this.lendingRates = lendingRates;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (o == null || getClass() != o.getClass()) {
-            return false;
-        }
-        BankingProductDetail bankingProductDetail = (BankingProductDetail) o;
-        return Objects.equals(this.bundles, bankingProductDetail.bundles) &&
-            Objects.equals(this.constraints, bankingProductDetail.constraints) &&
-            Objects.equals(this.depositRates, bankingProductDetail.depositRates) &&
-            Objects.equals(this.eligibility, bankingProductDetail.eligibility) &&
-            Objects.equals(this.features, bankingProductDetail.features) &&
-            Objects.equals(this.fees, bankingProductDetail.fees) &&
-            Objects.equals(this.lendingRates, bankingProductDetail.lendingRates) &&
-            super.equals(o);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(
-            bundles,
-            constraints,
-            depositRates,
-            eligibility,
-            features,
-            fees,
-            lendingRates,
-            super.hashCode());
-    }
-
-    @Override
-    public String toString() {
-        return "class BankingProductDetail {\n" +
-            "   additionalInformation: " + toIndentedString(getAdditionalInformation()) + "\n" + 
-            "   applicationUri: " + toIndentedString(getApplicationUri()) + "\n" + 
-            "   brand: " + toIndentedString(getBrand()) + "\n" + 
-            "   brandName: " + toIndentedString(getBrandName()) + "\n" + 
-            "   description: " + toIndentedString(getDescription()) + "\n" + 
-            "   effectiveFrom: " + toIndentedString(getEffectiveFrom()) + "\n" + 
-            "   effectiveTo: " + toIndentedString(getEffectiveTo()) + "\n" + 
-            "   isTailored: " + toIndentedString(getIsTailored()) + "\n" + 
-            "   lastUpdated: " + toIndentedString(getLastUpdated()) + "\n" + 
-            "   name: " + toIndentedString(getName()) + "\n" + 
-            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" + 
-            "   productId: " + toIndentedString(getProductId()) + "\n" + 
-            "   bundles: " + toIndentedString(bundles) + "\n" + 
-            "   constraints: " + toIndentedString(constraints) + "\n" + 
-            "   depositRates: " + toIndentedString(depositRates) + "\n" + 
-            "   eligibility: " + toIndentedString(eligibility) + "\n" + 
-            "   features: " + toIndentedString(features) + "\n" + 
-            "   fees: " + toIndentedString(fees) + "\n" + 
-            "   lendingRates: " + toIndentedString(lendingRates) + "\n" + 
-            "}";
-    }
-
-    /**
-     * Convert the given object to string with each line indented by 4 spaces
-     * (except the first line).
-     */
-    private String toIndentedString(Object o) {
-        if (o == null) {
-            return "null";
-        }
-        return o.toString().replace("\n", "\n    ");
-    }
+    void setLendingRates(List<BankingProductLendingRate> lendingRates);
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscount.java
index a61f583..e91b0b9 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscount.java
@@ -15,79 +15,55 @@
     public enum DiscountType {
         BALANCE,
         DEPOSITS,
-        ELIGIBILITY_ONLY,
+        PAYMENTS,
         FEE_CAP,
-        PAYMENTS
+        ELIGIBILITY_ONLY
     }
 
-    private String accruedRate;
-
-    private String additionalInfo;
-
-    private String additionalInfoUri;
+    private String description;
 
-    private String additionalValue;
+    private DiscountType discountType;
 
     private String amount;
 
     private String balanceRate;
 
-    private String description;
-
-    private DiscountType discountType;
+    private String transactionRate;
 
-    private List<BankingProductDiscountEligibility> eligibility;
+    private String accruedRate;
 
     private String feeRate;
 
-    private String transactionRate;
-
-    /**
-     * A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee
-     * @return accruedRate
-     */
-    public String getAccruedRate() {
-        return accruedRate;
-    }
+    private String additionalValue;
 
-    public void setAccruedRate(String accruedRate) {
-        this.accruedRate = accruedRate;
-    }
+    private String additionalInfo;
 
-    /**
-     * Display text providing more information on the discount
-     * @return additionalInfo
-     */
-    public String getAdditionalInfo() {
-        return additionalInfo;
-    }
+    private String additionalInfoUri;
 
-    public void setAdditionalInfo(String additionalInfo) {
-        this.additionalInfo = additionalInfo;
-    }
+    private List<BankingProductDiscountEligibility> eligibility;
 
     /**
-     * Link to a web page with more information on this discount
-     * @return additionalInfoUri
+     * Description of the discount
+     * @return description
      */
-    public String getAdditionalInfoUri() {
-        return additionalInfoUri;
+    public String getDescription() {
+        return description;
     }
 
-    public void setAdditionalInfoUri(String additionalInfoUri) {
-        this.additionalInfoUri = additionalInfoUri;
+    public void setDescription(String description) {
+        this.description = description;
     }
 
     /**
-     * Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)
-     * @return additionalValue
+     * The type of discount. See the next section for an overview of valid values and their meaning
+     * @return discountType
      */
-    public String getAdditionalValue() {
-        return additionalValue;
+    public DiscountType getDiscountType() {
+        return discountType;
     }
 
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
+    public void setDiscountType(DiscountType discountType) {
+        this.discountType = discountType;
     }
 
     /**
@@ -115,39 +91,27 @@ public void setBalanceRate(String balanceRate) {
     }
 
     /**
-     * Description of the discount
-     * @return description
-     */
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    /**
-     * Get discountType
-     * @return discountType
+     * A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory
+     * @return transactionRate
      */
-    public DiscountType getDiscountType() {
-        return discountType;
+    public String getTransactionRate() {
+        return transactionRate;
     }
 
-    public void setDiscountType(DiscountType discountType) {
-        this.discountType = discountType;
+    public void setTransactionRate(String transactionRate) {
+        this.transactionRate = transactionRate;
     }
 
     /**
-     * Eligibility constraints that apply to this discount
-     * @return eligibility
+     * A discount rate calculated based on a proportion of the calculated interest accrued on the account. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory. Unless noted in additionalInfo, assumes the application and calculation frequency are the same as the corresponding fee
+     * @return accruedRate
      */
-    public List<BankingProductDiscountEligibility> getEligibility() {
-        return eligibility;
+    public String getAccruedRate() {
+        return accruedRate;
     }
 
-    public void setEligibility(List<BankingProductDiscountEligibility> eligibility) {
-        this.eligibility = eligibility;
+    public void setAccruedRate(String accruedRate) {
+        this.accruedRate = accruedRate;
     }
 
     /**
@@ -163,15 +127,51 @@ public void setFeeRate(String feeRate) {
     }
 
     /**
-     * A discount rate calculated based on a proportion of a transaction. Note that the currency of the fee discount is expected to be the same as the currency of the fee itself. One of amount, balanceRate, transactionRate, accruedRate and feeRate is mandatory
-     * @return transactionRate
+     * Generic field containing additional information relevant to the [discountType](#tocSproductdiscounttypedoc) specified. Whether mandatory or not is dependent on the value of [discountType](#tocSproductdiscounttypedoc)
+     * @return additionalValue
      */
-    public String getTransactionRate() {
-        return transactionRate;
+    public String getAdditionalValue() {
+        return additionalValue;
     }
 
-    public void setTransactionRate(String transactionRate) {
-        this.transactionRate = transactionRate;
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
+    }
+
+    /**
+     * Display text providing more information on the discount
+     * @return additionalInfo
+     */
+    public String getAdditionalInfo() {
+        return additionalInfo;
+    }
+
+    public void setAdditionalInfo(String additionalInfo) {
+        this.additionalInfo = additionalInfo;
+    }
+
+    /**
+     * Link to a web page with more information on this discount
+     * @return additionalInfoUri
+     */
+    public String getAdditionalInfoUri() {
+        return additionalInfoUri;
+    }
+
+    public void setAdditionalInfoUri(String additionalInfoUri) {
+        this.additionalInfoUri = additionalInfoUri;
+    }
+
+    /**
+     * Eligibility constraints that apply to this discount
+     * @return eligibility
+     */
+    public List<BankingProductDiscountEligibility> getEligibility() {
+        return eligibility;
+    }
+
+    public void setEligibility(List<BankingProductDiscountEligibility> eligibility) {
+        this.eligibility = eligibility;
     }
 
     @Override
@@ -183,49 +183,49 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductDiscount bankingProductDiscount = (BankingProductDiscount) o;
-        return Objects.equals(this.accruedRate, bankingProductDiscount.accruedRate) &&
-            Objects.equals(this.additionalInfo, bankingProductDiscount.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductDiscount.additionalInfoUri) &&
-            Objects.equals(this.additionalValue, bankingProductDiscount.additionalValue) &&
+        return Objects.equals(this.description, bankingProductDiscount.description) &&
+            Objects.equals(this.discountType, bankingProductDiscount.discountType) &&
             Objects.equals(this.amount, bankingProductDiscount.amount) &&
             Objects.equals(this.balanceRate, bankingProductDiscount.balanceRate) &&
-            Objects.equals(this.description, bankingProductDiscount.description) &&
-            Objects.equals(this.discountType, bankingProductDiscount.discountType) &&
-            Objects.equals(this.eligibility, bankingProductDiscount.eligibility) &&
+            Objects.equals(this.transactionRate, bankingProductDiscount.transactionRate) &&
+            Objects.equals(this.accruedRate, bankingProductDiscount.accruedRate) &&
             Objects.equals(this.feeRate, bankingProductDiscount.feeRate) &&
-            Objects.equals(this.transactionRate, bankingProductDiscount.transactionRate);
+            Objects.equals(this.additionalValue, bankingProductDiscount.additionalValue) &&
+            Objects.equals(this.additionalInfo, bankingProductDiscount.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductDiscount.additionalInfoUri) &&
+            Objects.equals(this.eligibility, bankingProductDiscount.eligibility);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            accruedRate,
-            additionalInfo,
-            additionalInfoUri,
-            additionalValue,
-            amount,
-            balanceRate,
             description,
             discountType,
-            eligibility,
+            amount,
+            balanceRate,
+            transactionRate,
+            accruedRate,
             feeRate,
-            transactionRate);
+            additionalValue,
+            additionalInfo,
+            additionalInfoUri,
+            eligibility);
     }
 
     @Override
     public String toString() {
         return "class BankingProductDiscount {\n" +
+            "   description: " + toIndentedString(description) + "\n" + 
+            "   discountType: " + toIndentedString(discountType) + "\n" + 
+            "   amount: " + toIndentedString(amount) + "\n" + 
+            "   balanceRate: " + toIndentedString(balanceRate) + "\n" + 
+            "   transactionRate: " + toIndentedString(transactionRate) + "\n" + 
             "   accruedRate: " + toIndentedString(accruedRate) + "\n" + 
+            "   feeRate: " + toIndentedString(feeRate) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   amount: " + toIndentedString(amount) + "\n" + 
-            "   balanceRate: " + toIndentedString(balanceRate) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   discountType: " + toIndentedString(discountType) + "\n" + 
             "   eligibility: " + toIndentedString(eligibility) + "\n" + 
-            "   feeRate: " + toIndentedString(feeRate) + "\n" + 
-            "   transactionRate: " + toIndentedString(transactionRate) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscountEligibility.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscountEligibility.java
index cef432d..48e801e 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscountEligibility.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductDiscountEligibility.java
@@ -13,27 +13,51 @@
 
     public enum DiscountEligibilityType {
         BUSINESS,
-        EMPLOYMENT_STATUS,
-        INTRODUCTORY,
-        MAX_AGE,
+        PENSION_RECIPIENT,
         MIN_AGE,
+        MAX_AGE,
         MIN_INCOME,
         MIN_TURNOVER,
-        NATURAL_PERSON,
-        OTHER,
-        PENSION_RECIPIENT,
-        RESIDENCY_STATUS,
         STAFF,
-        STUDENT
+        STUDENT,
+        EMPLOYMENT_STATUS,
+        RESIDENCY_STATUS,
+        NATURAL_PERSON,
+        INTRODUCTORY,
+        OTHER
     }
 
+    private DiscountEligibilityType discountEligibilityType;
+
+    private String additionalValue;
+
     private String additionalInfo;
 
     private String additionalInfoUri;
 
-    private String additionalValue;
+    /**
+     * The type of the specific eligibility constraint for a discount
+     * @return discountEligibilityType
+     */
+    public DiscountEligibilityType getDiscountEligibilityType() {
+        return discountEligibilityType;
+    }
 
-    private DiscountEligibilityType discountEligibilityType;
+    public void setDiscountEligibilityType(DiscountEligibilityType discountEligibilityType) {
+        this.discountEligibilityType = discountEligibilityType;
+    }
+
+    /**
+     * Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)
+     * @return additionalValue
+     */
+    public String getAdditionalValue() {
+        return additionalValue;
+    }
+
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
+    }
 
     /**
      * Display text providing more information on this eligibility constraint
@@ -59,30 +83,6 @@ public void setAdditionalInfoUri(String additionalInfoUri) {
         this.additionalInfoUri = additionalInfoUri;
     }
 
-    /**
-     * Generic field containing additional information relevant to the [discountEligibilityType](#tocSproductdiscounteligibilitydoc) specified. Whether mandatory or not is dependent on the value of [discountEligibilityType](#tocSproductdiscounteligibilitydoc)
-     * @return additionalValue
-     */
-    public String getAdditionalValue() {
-        return additionalValue;
-    }
-
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
-    }
-
-    /**
-     * Get discountEligibilityType
-     * @return discountEligibilityType
-     */
-    public DiscountEligibilityType getDiscountEligibilityType() {
-        return discountEligibilityType;
-    }
-
-    public void setDiscountEligibilityType(DiscountEligibilityType discountEligibilityType) {
-        this.discountEligibilityType = discountEligibilityType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -92,28 +92,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductDiscountEligibility bankingProductDiscountEligibility = (BankingProductDiscountEligibility) o;
-        return Objects.equals(this.additionalInfo, bankingProductDiscountEligibility.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductDiscountEligibility.additionalInfoUri) &&
+        return Objects.equals(this.discountEligibilityType, bankingProductDiscountEligibility.discountEligibilityType) &&
             Objects.equals(this.additionalValue, bankingProductDiscountEligibility.additionalValue) &&
-            Objects.equals(this.discountEligibilityType, bankingProductDiscountEligibility.discountEligibilityType);
+            Objects.equals(this.additionalInfo, bankingProductDiscountEligibility.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductDiscountEligibility.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
+            discountEligibilityType,
             additionalValue,
-            discountEligibilityType);
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductDiscountEligibility {\n" +
+            "   discountEligibilityType: " + toIndentedString(discountEligibilityType) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   discountEligibilityType: " + toIndentedString(discountEligibilityType) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductEligibility.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductEligibility.java
index b6173ba..8ab1961 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductEligibility.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductEligibility.java
@@ -13,29 +13,53 @@
 
     public enum EligibilityType {
         BUSINESS,
-        EMPLOYMENT_STATUS,
-        MAX_AGE,
+        PENSION_RECIPIENT,
         MIN_AGE,
+        MAX_AGE,
         MIN_INCOME,
         MIN_TURNOVER,
-        NATURAL_PERSON,
-        OTHER,
-        PENSION_RECIPIENT,
-        RESIDENCY_STATUS,
         STAFF,
-        STUDENT
+        STUDENT,
+        EMPLOYMENT_STATUS,
+        RESIDENCY_STATUS,
+        NATURAL_PERSON,
+        OTHER
     }
 
+    private EligibilityType eligibilityType;
+
+    private String additionalValue;
+
     private String additionalInfo;
 
     private String additionalInfoUri;
 
-    private String additionalValue;
+    /**
+     * The type of eligibility criteria described.  See the next section for an overview of valid values and their meaning
+     * @return eligibilityType
+     */
+    public EligibilityType getEligibilityType() {
+        return eligibilityType;
+    }
 
-    private EligibilityType eligibilityType;
+    public void setEligibilityType(EligibilityType eligibilityType) {
+        this.eligibilityType = eligibilityType;
+    }
+
+    /**
+     * Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified. Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)
+     * @return additionalValue
+     */
+    public String getAdditionalValue() {
+        return additionalValue;
+    }
+
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
+    }
 
     /**
-     * Display text providing more information on the eligibility criteria. Mandatory if the [eligibilityType](#tocSproducteligibilitytypedoc) field is set to OTHER
+     * Display text providing more information on the [eligibility](#tocSproducteligibilitytypedoc) criteria. Mandatory if the field is set to OTHER
      * @return additionalInfo
      */
     public String getAdditionalInfo() {
@@ -58,30 +82,6 @@ public void setAdditionalInfoUri(String additionalInfoUri) {
         this.additionalInfoUri = additionalInfoUri;
     }
 
-    /**
-     * Generic field containing additional information relevant to the [eligibilityType](#tocSproducteligibilitytypedoc) specified.  Whether mandatory or not is dependent on the value of [eligibilityType](#tocSproducteligibilitytypedoc)
-     * @return additionalValue
-     */
-    public String getAdditionalValue() {
-        return additionalValue;
-    }
-
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
-    }
-
-    /**
-     * Get eligibilityType
-     * @return eligibilityType
-     */
-    public EligibilityType getEligibilityType() {
-        return eligibilityType;
-    }
-
-    public void setEligibilityType(EligibilityType eligibilityType) {
-        this.eligibilityType = eligibilityType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -91,28 +91,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductEligibility bankingProductEligibility = (BankingProductEligibility) o;
-        return Objects.equals(this.additionalInfo, bankingProductEligibility.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductEligibility.additionalInfoUri) &&
+        return Objects.equals(this.eligibilityType, bankingProductEligibility.eligibilityType) &&
             Objects.equals(this.additionalValue, bankingProductEligibility.additionalValue) &&
-            Objects.equals(this.eligibilityType, bankingProductEligibility.eligibilityType);
+            Objects.equals(this.additionalInfo, bankingProductEligibility.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductEligibility.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
+            eligibilityType,
             additionalValue,
-            eligibilityType);
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductEligibility {\n" +
+            "   eligibilityType: " + toIndentedString(eligibilityType) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   eligibilityType: " + toIndentedString(eligibilityType) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFeature.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFeature.java
index 1afa263..a97d2dd 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFeature.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFeature.java
@@ -12,38 +12,62 @@
 public class BankingProductFeature {
 
     public enum FeatureType {
-        ADDITIONAL_CARDS,
-        BALANCE_TRANSFERS,
-        BILL_PAYMENT,
-        BONUS_REWARDS,
         CARD_ACCESS,
-        COMPLEMENTARY_PRODUCT_DISCOUNTS,
-        DIGITAL_BANKING,
-        DIGITAL_WALLET,
-        DONATE_INTEREST,
+        ADDITIONAL_CARDS,
+        UNLIMITED_TXNS,
         FREE_TXNS,
         FREE_TXNS_ALLOWANCE,
-        INSURANCE,
-        INTEREST_FREE,
-        INTEREST_FREE_TRANSFERS,
         LOYALTY_PROGRAM,
-        NOTIFICATIONS,
-        NPP_ENABLED,
-        NPP_PAYID,
         OFFSET,
-        OTHER,
         OVERDRAFT,
         REDRAW,
-        UNLIMITED_TXNS
+        INSURANCE,
+        BALANCE_TRANSFERS,
+        INTEREST_FREE,
+        INTEREST_FREE_TRANSFERS,
+        DIGITAL_WALLET,
+        DIGITAL_BANKING,
+        NPP_PAYID,
+        NPP_ENABLED,
+        DONATE_INTEREST,
+        BILL_PAYMENT,
+        COMPLEMENTARY_PRODUCT_DISCOUNTS,
+        BONUS_REWARDS,
+        NOTIFICATIONS,
+        OTHER
     }
 
+    private FeatureType featureType;
+
+    private String additionalValue;
+
     private String additionalInfo;
 
     private String additionalInfoUri;
 
-    private String additionalValue;
+    /**
+     * The type of feature described
+     * @return featureType
+     */
+    public FeatureType getFeatureType() {
+        return featureType;
+    }
 
-    private FeatureType featureType;
+    public void setFeatureType(FeatureType featureType) {
+        this.featureType = featureType;
+    }
+
+    /**
+     * Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)
+     * @return additionalValue
+     */
+    public String getAdditionalValue() {
+        return additionalValue;
+    }
+
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
+    }
 
     /**
      * Display text providing more information on the feature. Mandatory if the [feature type](#tocSproductfeaturetypedoc) is set to OTHER
@@ -69,30 +93,6 @@ public void setAdditionalInfoUri(String additionalInfoUri) {
         this.additionalInfoUri = additionalInfoUri;
     }
 
-    /**
-     * Generic field containing additional information relevant to the [featureType](#tocSproductfeaturetypedoc) specified. Whether mandatory or not is dependent on the value of the [featureType.](#tocSproductfeaturetypedoc)
-     * @return additionalValue
-     */
-    public String getAdditionalValue() {
-        return additionalValue;
-    }
-
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
-    }
-
-    /**
-     * Get featureType
-     * @return featureType
-     */
-    public FeatureType getFeatureType() {
-        return featureType;
-    }
-
-    public void setFeatureType(FeatureType featureType) {
-        this.featureType = featureType;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -102,28 +102,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductFeature bankingProductFeature = (BankingProductFeature) o;
-        return Objects.equals(this.additionalInfo, bankingProductFeature.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductFeature.additionalInfoUri) &&
+        return Objects.equals(this.featureType, bankingProductFeature.featureType) &&
             Objects.equals(this.additionalValue, bankingProductFeature.additionalValue) &&
-            Objects.equals(this.featureType, bankingProductFeature.featureType);
+            Objects.equals(this.additionalInfo, bankingProductFeature.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductFeature.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
+            featureType,
             additionalValue,
-            featureType);
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductFeature {\n" +
+            "   featureType: " + toIndentedString(featureType) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
             "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
             "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   featureType: " + toIndentedString(featureType) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFee.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFee.java
index 6b57583..efa933d 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFee.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductFee.java
@@ -13,123 +13,123 @@
 public class BankingProductFee {
 
     public enum FeeType {
+        PERIODIC,
+        TRANSACTION,
+        WITHDRAWAL,
         DEPOSIT,
-        EVENT,
-        EXIT,
         PAYMENT,
-        PERIODIC,
         PURCHASE,
-        TRANSACTION,
+        EVENT,
         UPFRONT,
-        WITHDRAWAL
+        EXIT
     }
 
-    private String accrualFrequency;
+    private String name;
 
-    private String accruedRate;
+    private FeeType feeType;
 
-    private String additionalInfo;
+    private String amount;
 
-    private String additionalInfoUri;
+    private String balanceRate;
 
-    private String additionalValue;
+    private String transactionRate;
 
-    private String amount;
+    private String accruedRate;
 
-    private String balanceRate;
+    private String accrualFrequency;
 
     private String currency;
 
-    private List<BankingProductDiscount> discounts;
+    private String additionalValue;
 
-    private FeeType feeType;
+    private String additionalInfo;
 
-    private String name;
+    private String additionalInfoUri;
 
-    private String transactionRate;
+    private List<BankingProductDiscount> discounts;
 
     /**
-     * The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
-     * @return accrualFrequency
+     * Name of the fee
+     * @return name
      */
-    public String getAccrualFrequency() {
-        return accrualFrequency;
+    public String getName() {
+        return name;
     }
 
-    public void setAccrualFrequency(String accrualFrequency) {
-        this.accrualFrequency = accrualFrequency;
+    public void setName(String name) {
+        this.name = name;
     }
 
     /**
-     * A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory
-     * @return accruedRate
+     * The type of fee
+     * @return feeType
      */
-    public String getAccruedRate() {
-        return accruedRate;
+    public FeeType getFeeType() {
+        return feeType;
     }
 
-    public void setAccruedRate(String accruedRate) {
-        this.accruedRate = accruedRate;
+    public void setFeeType(FeeType feeType) {
+        this.feeType = feeType;
     }
 
     /**
-     * Display text providing more information on the fee
-     * @return additionalInfo
+     * The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory
+     * @return amount
      */
-    public String getAdditionalInfo() {
-        return additionalInfo;
+    public String getAmount() {
+        return amount;
     }
 
-    public void setAdditionalInfo(String additionalInfo) {
-        this.additionalInfo = additionalInfo;
+    public void setAmount(String amount) {
+        this.amount = amount;
     }
 
     /**
-     * Link to a web page with more information on this fee
-     * @return additionalInfoUri
+     * A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory
+     * @return balanceRate
      */
-    public String getAdditionalInfoUri() {
-        return additionalInfoUri;
+    public String getBalanceRate() {
+        return balanceRate;
     }
 
-    public void setAdditionalInfoUri(String additionalInfoUri) {
-        this.additionalInfoUri = additionalInfoUri;
+    public void setBalanceRate(String balanceRate) {
+        this.balanceRate = balanceRate;
     }
 
     /**
-     * Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)
-     * @return additionalValue
+     * A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory
+     * @return transactionRate
      */
-    public String getAdditionalValue() {
-        return additionalValue;
+    public String getTransactionRate() {
+        return transactionRate;
     }
 
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
+    public void setTransactionRate(String transactionRate) {
+        this.transactionRate = transactionRate;
     }
 
     /**
-     * The amount charged for the fee. One of amount, balanceRate, transactionRate and accruedRate is mandatory
-     * @return amount
+     * A fee rate calculated based on a proportion of the calculated interest accrued on the account. One of amount, balanceRate, transactionRate and accruedRate is mandatory
+     * @return accruedRate
      */
-    public String getAmount() {
-        return amount;
+    public String getAccruedRate() {
+        return accruedRate;
     }
 
-    public void setAmount(String amount) {
-        this.amount = amount;
+    public void setAccruedRate(String accruedRate) {
+        this.accruedRate = accruedRate;
     }
 
     /**
-     * A fee rate calculated based on a proportion of the balance. One of amount, balanceRate, transactionRate and accruedRate is mandatory
-     * @return balanceRate
+     * The indicative frequency with which the fee is calculated on the account. Only applies if balanceRate or accruedRate is also present. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
+     * @return accrualFrequency
      */
-    public String getBalanceRate() {
-        return balanceRate;
+    public String getAccrualFrequency() {
+        return accrualFrequency;
     }
 
-    public void setBalanceRate(String balanceRate) {
-        this.balanceRate = balanceRate;
+    public void setAccrualFrequency(String accrualFrequency) {
+        this.accrualFrequency = accrualFrequency;
     }
 
     /**
@@ -145,51 +145,51 @@ public void setCurrency(String currency) {
     }
 
     /**
-     * An optional list of discounts to this fee that may be available
-     * @return discounts
+     * Generic field containing additional information relevant to the [feeType](#tocSproductfeetypedoc) specified. Whether mandatory or not is dependent on the value of [feeType](#tocSproductfeetypedoc)
+     * @return additionalValue
      */
-    public List<BankingProductDiscount> getDiscounts() {
-        return discounts;
+    public String getAdditionalValue() {
+        return additionalValue;
     }
 
-    public void setDiscounts(List<BankingProductDiscount> discounts) {
-        this.discounts = discounts;
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
     }
 
     /**
-     * Get feeType
-     * @return feeType
+     * Display text providing more information on the fee
+     * @return additionalInfo
      */
-    public FeeType getFeeType() {
-        return feeType;
+    public String getAdditionalInfo() {
+        return additionalInfo;
     }
 
-    public void setFeeType(FeeType feeType) {
-        this.feeType = feeType;
+    public void setAdditionalInfo(String additionalInfo) {
+        this.additionalInfo = additionalInfo;
     }
 
     /**
-     * Name of the fee
-     * @return name
+     * Link to a web page with more information on this fee
+     * @return additionalInfoUri
      */
-    public String getName() {
-        return name;
+    public String getAdditionalInfoUri() {
+        return additionalInfoUri;
     }
 
-    public void setName(String name) {
-        this.name = name;
+    public void setAdditionalInfoUri(String additionalInfoUri) {
+        this.additionalInfoUri = additionalInfoUri;
     }
 
     /**
-     * A fee rate calculated based on a proportion of a transaction. One of amount, balanceRate, transactionRate and accruedRate is mandatory
-     * @return transactionRate
+     * An optional list of discounts to this fee that may be available
+     * @return discounts
      */
-    public String getTransactionRate() {
-        return transactionRate;
+    public List<BankingProductDiscount> getDiscounts() {
+        return discounts;
     }
 
-    public void setTransactionRate(String transactionRate) {
-        this.transactionRate = transactionRate;
+    public void setDiscounts(List<BankingProductDiscount> discounts) {
+        this.discounts = discounts;
     }
 
     @Override
@@ -201,52 +201,52 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductFee bankingProductFee = (BankingProductFee) o;
-        return Objects.equals(this.accrualFrequency, bankingProductFee.accrualFrequency) &&
-            Objects.equals(this.accruedRate, bankingProductFee.accruedRate) &&
-            Objects.equals(this.additionalInfo, bankingProductFee.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductFee.additionalInfoUri) &&
-            Objects.equals(this.additionalValue, bankingProductFee.additionalValue) &&
+        return Objects.equals(this.name, bankingProductFee.name) &&
+            Objects.equals(this.feeType, bankingProductFee.feeType) &&
             Objects.equals(this.amount, bankingProductFee.amount) &&
             Objects.equals(this.balanceRate, bankingProductFee.balanceRate) &&
+            Objects.equals(this.transactionRate, bankingProductFee.transactionRate) &&
+            Objects.equals(this.accruedRate, bankingProductFee.accruedRate) &&
+            Objects.equals(this.accrualFrequency, bankingProductFee.accrualFrequency) &&
             Objects.equals(this.currency, bankingProductFee.currency) &&
-            Objects.equals(this.discounts, bankingProductFee.discounts) &&
-            Objects.equals(this.feeType, bankingProductFee.feeType) &&
-            Objects.equals(this.name, bankingProductFee.name) &&
-            Objects.equals(this.transactionRate, bankingProductFee.transactionRate);
+            Objects.equals(this.additionalValue, bankingProductFee.additionalValue) &&
+            Objects.equals(this.additionalInfo, bankingProductFee.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductFee.additionalInfoUri) &&
+            Objects.equals(this.discounts, bankingProductFee.discounts);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            accrualFrequency,
-            accruedRate,
-            additionalInfo,
-            additionalInfoUri,
-            additionalValue,
+            name,
+            feeType,
             amount,
             balanceRate,
+            transactionRate,
+            accruedRate,
+            accrualFrequency,
             currency,
-            discounts,
-            feeType,
-            name,
-            transactionRate);
+            additionalValue,
+            additionalInfo,
+            additionalInfoUri,
+            discounts);
     }
 
     @Override
     public String toString() {
         return "class BankingProductFee {\n" +
-            "   accrualFrequency: " + toIndentedString(accrualFrequency) + "\n" + 
-            "   accruedRate: " + toIndentedString(accruedRate) + "\n" + 
-            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
-            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
+            "   name: " + toIndentedString(name) + "\n" + 
+            "   feeType: " + toIndentedString(feeType) + "\n" + 
             "   amount: " + toIndentedString(amount) + "\n" + 
             "   balanceRate: " + toIndentedString(balanceRate) + "\n" + 
+            "   transactionRate: " + toIndentedString(transactionRate) + "\n" + 
+            "   accruedRate: " + toIndentedString(accruedRate) + "\n" + 
+            "   accrualFrequency: " + toIndentedString(accrualFrequency) + "\n" + 
             "   currency: " + toIndentedString(currency) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
+            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
+            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
             "   discounts: " + toIndentedString(discounts) + "\n" + 
-            "   feeType: " + toIndentedString(feeType) + "\n" + 
-            "   name: " + toIndentedString(name) + "\n" + 
-            "   transactionRate: " + toIndentedString(transactionRate) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductLendingRate.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductLendingRate.java
index e0875c9..e13a7d3 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductLendingRate.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductLendingRate.java
@@ -12,95 +12,83 @@
 
 public class BankingProductLendingRate {
 
-    public enum InterestPaymentDue {
-        ADVANCE,
-        ARREARS
-    }
-
     public enum LendingRateType {
-        BUNDLE_DISCOUNT_FIXED,
-        BUNDLE_DISCOUNT_VARIABLE,
-        CASH_ADVANCE,
-        DISCOUNT,
         FIXED,
-        FLOATING,
+        VARIABLE,
         INTRODUCTORY,
-        MARKET_LINKED,
+        DISCOUNT,
         PENALTY,
+        FLOATING,
+        MARKET_LINKED,
+        CASH_ADVANCE,
         PURCHASE,
-        VARIABLE
+        BUNDLE_DISCOUNT_FIXED,
+        BUNDLE_DISCOUNT_VARIABLE
     }
 
-    private String additionalInfo;
+    public enum InterestPaymentDue {
+        ARREARS,
+        ADVANCE
+    }
 
-    private String additionalInfoUri;
+    private LendingRateType lendingRateType;
 
-    private String additionalValue;
+    private String rate;
 
-    private String applicationFrequency;
+    private String comparisonRate;
 
     private String calculationFrequency;
 
-    private String comparisonRate;
+    private String applicationFrequency;
 
     private InterestPaymentDue interestPaymentDue;
 
-    private LendingRateType lendingRateType;
-
-    private String rate;
-
     private List<BankingProductRateTier> tiers;
 
-    /**
-     * Display text providing more information on the rate.
-     * @return additionalInfo
-     */
-    public String getAdditionalInfo() {
-        return additionalInfo;
-    }
+    private String additionalValue;
 
-    public void setAdditionalInfo(String additionalInfo) {
-        this.additionalInfo = additionalInfo;
-    }
+    private String additionalInfo;
+
+    private String additionalInfoUri;
 
     /**
-     * Link to a web page with more information on this rate
-     * @return additionalInfoUri
+     * The type of rate (fixed, variable, etc). See the next section for an overview of valid values and their meaning
+     * @return lendingRateType
      */
-    public String getAdditionalInfoUri() {
-        return additionalInfoUri;
+    public LendingRateType getLendingRateType() {
+        return lendingRateType;
     }
 
-    public void setAdditionalInfoUri(String additionalInfoUri) {
-        this.additionalInfoUri = additionalInfoUri;
+    public void setLendingRateType(LendingRateType lendingRateType) {
+        this.lendingRateType = lendingRateType;
     }
 
     /**
-     * Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)
-     * @return additionalValue
+     * The rate to be applied
+     * @return rate
      */
-    public String getAdditionalValue() {
-        return additionalValue;
+    public String getRate() {
+        return rate;
     }
 
-    public void setAdditionalValue(String additionalValue) {
-        this.additionalValue = additionalValue;
+    public void setRate(String rate) {
+        this.rate = rate;
     }
 
     /**
-     * The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
-     * @return applicationFrequency
+     * A comparison rate equivalent for this rate
+     * @return comparisonRate
      */
-    public String getApplicationFrequency() {
-        return applicationFrequency;
+    public String getComparisonRate() {
+        return comparisonRate;
     }
 
-    public void setApplicationFrequency(String applicationFrequency) {
-        this.applicationFrequency = applicationFrequency;
+    public void setComparisonRate(String comparisonRate) {
+        this.comparisonRate = comparisonRate;
     }
 
     /**
-     * The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
+     * The period after which the rate is applied to the balance to calculate the amount due for the period. Calculation of the amount is often daily (as balances may change) but accumulated until the total amount is &#39;applied&#39; to the account (see applicationFrequency). Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
      * @return calculationFrequency
      */
     public String getCalculationFrequency() {
@@ -112,19 +100,19 @@ public void setCalculationFrequency(String calculationFrequency) {
     }
 
     /**
-     * A comparison rate equivalent for this rate
-     * @return comparisonRate
+     * The period after which the calculated amount(s) (see calculationFrequency) are &#39;applied&#39; (i.e. debited or credited) to the account. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
+     * @return applicationFrequency
      */
-    public String getComparisonRate() {
-        return comparisonRate;
+    public String getApplicationFrequency() {
+        return applicationFrequency;
     }
 
-    public void setComparisonRate(String comparisonRate) {
-        this.comparisonRate = comparisonRate;
+    public void setApplicationFrequency(String applicationFrequency) {
+        this.applicationFrequency = applicationFrequency;
     }
 
     /**
-     * Get interestPaymentDue
+     * When loan payments are due to be paid within each period. The investment benefit of earlier payments affect the rate that can be offered
      * @return interestPaymentDue
      */
     public InterestPaymentDue getInterestPaymentDue() {
@@ -136,39 +124,51 @@ public void setInterestPaymentDue(InterestPaymentDue interestPaymentDue) {
     }
 
     /**
-     * Get lendingRateType
-     * @return lendingRateType
+     * Rate tiers applicable for this rate
+     * @return tiers
      */
-    public LendingRateType getLendingRateType() {
-        return lendingRateType;
+    public List<BankingProductRateTier> getTiers() {
+        return tiers;
     }
 
-    public void setLendingRateType(LendingRateType lendingRateType) {
-        this.lendingRateType = lendingRateType;
+    public void setTiers(List<BankingProductRateTier> tiers) {
+        this.tiers = tiers;
     }
 
     /**
-     * The rate to be applied
-     * @return rate
+     * Generic field containing additional information relevant to the [lendingRateType](#tocSproductlendingratetypedoc) specified. Whether mandatory or not is dependent on the value of [lendingRateType](#tocSproductlendingratetypedoc)
+     * @return additionalValue
      */
-    public String getRate() {
-        return rate;
+    public String getAdditionalValue() {
+        return additionalValue;
     }
 
-    public void setRate(String rate) {
-        this.rate = rate;
+    public void setAdditionalValue(String additionalValue) {
+        this.additionalValue = additionalValue;
     }
 
     /**
-     * Rate tiers applicable for this rate
-     * @return tiers
+     * Display text providing more information on the rate.
+     * @return additionalInfo
      */
-    public List<BankingProductRateTier> getTiers() {
-        return tiers;
+    public String getAdditionalInfo() {
+        return additionalInfo;
     }
 
-    public void setTiers(List<BankingProductRateTier> tiers) {
-        this.tiers = tiers;
+    public void setAdditionalInfo(String additionalInfo) {
+        this.additionalInfo = additionalInfo;
+    }
+
+    /**
+     * Link to a web page with more information on this rate
+     * @return additionalInfoUri
+     */
+    public String getAdditionalInfoUri() {
+        return additionalInfoUri;
+    }
+
+    public void setAdditionalInfoUri(String additionalInfoUri) {
+        this.additionalInfoUri = additionalInfoUri;
     }
 
     @Override
@@ -180,46 +180,46 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductLendingRate bankingProductLendingRate = (BankingProductLendingRate) o;
-        return Objects.equals(this.additionalInfo, bankingProductLendingRate.additionalInfo) &&
-            Objects.equals(this.additionalInfoUri, bankingProductLendingRate.additionalInfoUri) &&
-            Objects.equals(this.additionalValue, bankingProductLendingRate.additionalValue) &&
-            Objects.equals(this.applicationFrequency, bankingProductLendingRate.applicationFrequency) &&
-            Objects.equals(this.calculationFrequency, bankingProductLendingRate.calculationFrequency) &&
+        return Objects.equals(this.lendingRateType, bankingProductLendingRate.lendingRateType) &&
+            Objects.equals(this.rate, bankingProductLendingRate.rate) &&
             Objects.equals(this.comparisonRate, bankingProductLendingRate.comparisonRate) &&
+            Objects.equals(this.calculationFrequency, bankingProductLendingRate.calculationFrequency) &&
+            Objects.equals(this.applicationFrequency, bankingProductLendingRate.applicationFrequency) &&
             Objects.equals(this.interestPaymentDue, bankingProductLendingRate.interestPaymentDue) &&
-            Objects.equals(this.lendingRateType, bankingProductLendingRate.lendingRateType) &&
-            Objects.equals(this.rate, bankingProductLendingRate.rate) &&
-            Objects.equals(this.tiers, bankingProductLendingRate.tiers);
+            Objects.equals(this.tiers, bankingProductLendingRate.tiers) &&
+            Objects.equals(this.additionalValue, bankingProductLendingRate.additionalValue) &&
+            Objects.equals(this.additionalInfo, bankingProductLendingRate.additionalInfo) &&
+            Objects.equals(this.additionalInfoUri, bankingProductLendingRate.additionalInfoUri);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            additionalInfo,
-            additionalInfoUri,
-            additionalValue,
-            applicationFrequency,
-            calculationFrequency,
-            comparisonRate,
-            interestPaymentDue,
             lendingRateType,
             rate,
-            tiers);
+            comparisonRate,
+            calculationFrequency,
+            applicationFrequency,
+            interestPaymentDue,
+            tiers,
+            additionalValue,
+            additionalInfo,
+            additionalInfoUri);
     }
 
     @Override
     public String toString() {
         return "class BankingProductLendingRate {\n" +
-            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
-            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
-            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
-            "   applicationFrequency: " + toIndentedString(applicationFrequency) + "\n" + 
-            "   calculationFrequency: " + toIndentedString(calculationFrequency) + "\n" + 
-            "   comparisonRate: " + toIndentedString(comparisonRate) + "\n" + 
-            "   interestPaymentDue: " + toIndentedString(interestPaymentDue) + "\n" + 
             "   lendingRateType: " + toIndentedString(lendingRateType) + "\n" + 
             "   rate: " + toIndentedString(rate) + "\n" + 
+            "   comparisonRate: " + toIndentedString(comparisonRate) + "\n" + 
+            "   calculationFrequency: " + toIndentedString(calculationFrequency) + "\n" + 
+            "   applicationFrequency: " + toIndentedString(applicationFrequency) + "\n" + 
+            "   interestPaymentDue: " + toIndentedString(interestPaymentDue) + "\n" + 
             "   tiers: " + toIndentedString(tiers) + "\n" + 
+            "   additionalValue: " + toIndentedString(additionalValue) + "\n" + 
+            "   additionalInfo: " + toIndentedString(additionalInfo) + "\n" + 
+            "   additionalInfoUri: " + toIndentedString(additionalInfoUri) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTier.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTier.java
index c0407af..298933a 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTier.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTier.java
@@ -14,54 +14,54 @@
  */
 public class BankingProductRateTier {
 
-    public enum RateApplicationMethod {
-        PER_TIER,
-        WHOLE_BALANCE
-    }
-
     public enum UnitOfMeasure {
-        DAY,
         DOLLAR,
+        PERCENT,
         MONTH,
-        PERCENT
+        DAY
     }
 
-    private BankingProductRateCondition applicabilityConditions;
+    public enum RateApplicationMethod {
+        WHOLE_BALANCE,
+        PER_TIER
+    }
 
-    private BigDecimal maximumValue;
+    private String name;
+
+    private UnitOfMeasure unitOfMeasure;
 
     private BigDecimal minimumValue;
 
-    private String name;
+    private BigDecimal maximumValue;
 
     private RateApplicationMethod rateApplicationMethod;
 
-    private BankingProductRateTierSubTier subTier;
+    private BankingProductRateCondition applicabilityConditions;
 
-    private UnitOfMeasure unitOfMeasure;
+    private BankingProductRateTierSubTier subTier;
 
     /**
-     * Get applicabilityConditions
-     * @return applicabilityConditions
+     * A display name for the tier
+     * @return name
      */
-    public BankingProductRateCondition getApplicabilityConditions() {
-        return applicabilityConditions;
+    public String getName() {
+        return name;
     }
 
-    public void setApplicabilityConditions(BankingProductRateCondition applicabilityConditions) {
-        this.applicabilityConditions = applicabilityConditions;
+    public void setName(String name) {
+        this.name = name;
     }
 
     /**
-     * The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier&#39;s range has no upper bound.
-     * @return maximumValue
+     * The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**&#39;s or **DAY**&#39;s (in the case of term deposit tiers)
+     * @return unitOfMeasure
      */
-    public BigDecimal getMaximumValue() {
-        return maximumValue;
+    public UnitOfMeasure getUnitOfMeasure() {
+        return unitOfMeasure;
     }
 
-    public void setMaximumValue(BigDecimal maximumValue) {
-        this.maximumValue = maximumValue;
+    public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
+        this.unitOfMeasure = unitOfMeasure;
     }
 
     /**
@@ -77,19 +77,19 @@ public void setMinimumValue(BigDecimal minimumValue) {
     }
 
     /**
-     * A display name for the tier
-     * @return name
+     * The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months). If absent the tier&#39;s range has no upper bound.
+     * @return maximumValue
      */
-    public String getName() {
-        return name;
+    public BigDecimal getMaximumValue() {
+        return maximumValue;
     }
 
-    public void setName(String name) {
-        this.name = name;
+    public void setMaximumValue(BigDecimal maximumValue) {
+        this.maximumValue = maximumValue;
     }
 
     /**
-     * Get rateApplicationMethod
+     * The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as &#39;bands&#39; or &#39;steps&#39;)
      * @return rateApplicationMethod
      */
     public RateApplicationMethod getRateApplicationMethod() {
@@ -101,27 +101,27 @@ public void setRateApplicationMethod(RateApplicationMethod rateApplicationMethod
     }
 
     /**
-     * Get subTier
-     * @return subTier
+     * Get applicabilityConditions
+     * @return applicabilityConditions
      */
-    public BankingProductRateTierSubTier getSubTier() {
-        return subTier;
+    public BankingProductRateCondition getApplicabilityConditions() {
+        return applicabilityConditions;
     }
 
-    public void setSubTier(BankingProductRateTierSubTier subTier) {
-        this.subTier = subTier;
+    public void setApplicabilityConditions(BankingProductRateCondition applicabilityConditions) {
+        this.applicabilityConditions = applicabilityConditions;
     }
 
     /**
-     * Get unitOfMeasure
-     * @return unitOfMeasure
+     * Get subTier
+     * @return subTier
      */
-    public UnitOfMeasure getUnitOfMeasure() {
-        return unitOfMeasure;
+    public BankingProductRateTierSubTier getSubTier() {
+        return subTier;
     }
 
-    public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
-        this.unitOfMeasure = unitOfMeasure;
+    public void setSubTier(BankingProductRateTierSubTier subTier) {
+        this.subTier = subTier;
     }
 
     @Override
@@ -133,37 +133,37 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductRateTier bankingProductRateTier = (BankingProductRateTier) o;
-        return Objects.equals(this.applicabilityConditions, bankingProductRateTier.applicabilityConditions) &&
-            Objects.equals(this.maximumValue, bankingProductRateTier.maximumValue) &&
+        return Objects.equals(this.name, bankingProductRateTier.name) &&
+            Objects.equals(this.unitOfMeasure, bankingProductRateTier.unitOfMeasure) &&
             Objects.equals(this.minimumValue, bankingProductRateTier.minimumValue) &&
-            Objects.equals(this.name, bankingProductRateTier.name) &&
+            Objects.equals(this.maximumValue, bankingProductRateTier.maximumValue) &&
             Objects.equals(this.rateApplicationMethod, bankingProductRateTier.rateApplicationMethod) &&
-            Objects.equals(this.subTier, bankingProductRateTier.subTier) &&
-            Objects.equals(this.unitOfMeasure, bankingProductRateTier.unitOfMeasure);
+            Objects.equals(this.applicabilityConditions, bankingProductRateTier.applicabilityConditions) &&
+            Objects.equals(this.subTier, bankingProductRateTier.subTier);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            applicabilityConditions,
-            maximumValue,
-            minimumValue,
             name,
+            unitOfMeasure,
+            minimumValue,
+            maximumValue,
             rateApplicationMethod,
-            subTier,
-            unitOfMeasure);
+            applicabilityConditions,
+            subTier);
     }
 
     @Override
     public String toString() {
         return "class BankingProductRateTier {\n" +
-            "   applicabilityConditions: " + toIndentedString(applicabilityConditions) + "\n" + 
-            "   maximumValue: " + toIndentedString(maximumValue) + "\n" + 
-            "   minimumValue: " + toIndentedString(minimumValue) + "\n" + 
             "   name: " + toIndentedString(name) + "\n" + 
+            "   unitOfMeasure: " + toIndentedString(unitOfMeasure) + "\n" + 
+            "   minimumValue: " + toIndentedString(minimumValue) + "\n" + 
+            "   maximumValue: " + toIndentedString(maximumValue) + "\n" + 
             "   rateApplicationMethod: " + toIndentedString(rateApplicationMethod) + "\n" + 
+            "   applicabilityConditions: " + toIndentedString(applicabilityConditions) + "\n" + 
             "   subTier: " + toIndentedString(subTier) + "\n" + 
-            "   unitOfMeasure: " + toIndentedString(unitOfMeasure) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTierSubTier.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTierSubTier.java
index 7f593f3..98f8216 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTierSubTier.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductRateTierSubTier.java
@@ -14,52 +14,52 @@
  */
 public class BankingProductRateTierSubTier {
 
-    public enum RateApplicationMethod {
-        PER_TIER,
-        WHOLE_BALANCE
-    }
-
     public enum UnitOfMeasure {
-        DAY,
         DOLLAR,
+        PERCENT,
         MONTH,
-        PERCENT
+        DAY
     }
 
-    private BankingProductRateCondition applicabilityConditions;
+    public enum RateApplicationMethod {
+        WHOLE_BALANCE,
+        PER_TIER
+    }
 
-    private BigDecimal maximumValue;
+    private String name;
+
+    private UnitOfMeasure unitOfMeasure;
 
     private BigDecimal minimumValue;
 
-    private String name;
+    private BigDecimal maximumValue;
 
     private RateApplicationMethod rateApplicationMethod;
 
-    private UnitOfMeasure unitOfMeasure;
+    private BankingProductRateCondition applicabilityConditions;
 
     /**
-     * Get applicabilityConditions
-     * @return applicabilityConditions
+     * A display name for the tier
+     * @return name
      */
-    public BankingProductRateCondition getApplicabilityConditions() {
-        return applicabilityConditions;
+    public String getName() {
+        return name;
     }
 
-    public void setApplicabilityConditions(BankingProductRateCondition applicabilityConditions) {
-        this.applicabilityConditions = applicabilityConditions;
+    public void setName(String name) {
+        this.name = name;
     }
 
     /**
-     * The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months)
-     * @return maximumValue
+     * The unit of measure that applies to the tierValueMinimum and tierValueMaximum values e.g. a **DOLLAR** amount. **PERCENT** (in the case of loan-to-value ratio or LVR). Tier term period representing a discrete number of **MONTH**&#39;s or **DAY**&#39;s (in the case of term deposit tiers)
+     * @return unitOfMeasure
      */
-    public BigDecimal getMaximumValue() {
-        return maximumValue;
+    public UnitOfMeasure getUnitOfMeasure() {
+        return unitOfMeasure;
     }
 
-    public void setMaximumValue(BigDecimal maximumValue) {
-        this.maximumValue = maximumValue;
+    public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
+        this.unitOfMeasure = unitOfMeasure;
     }
 
     /**
@@ -75,19 +75,19 @@ public void setMinimumValue(BigDecimal minimumValue) {
     }
 
     /**
-     * A display name for the tier
-     * @return name
+     * The number of tierUnitOfMeasure units that form the upper bound of the tier or band. For a tier with a discrete value (as opposed to a range of values e.g. 1 month) this must be the same as tierValueMinimum. Where this is the same as the tierValueMinimum value of the next-higher tier the referenced tier should be exclusive of this value. For example a term deposit of 2 months falls into the upper tier of the following tiers: (1 – 2 months, 2 – 3 months)
+     * @return maximumValue
      */
-    public String getName() {
-        return name;
+    public BigDecimal getMaximumValue() {
+        return maximumValue;
     }
 
-    public void setName(String name) {
-        this.name = name;
+    public void setMaximumValue(BigDecimal maximumValue) {
+        this.maximumValue = maximumValue;
     }
 
     /**
-     * Get rateApplicationMethod
+     * The method used to calculate the amount to be applied using one or more tiers. A single rate may be applied to the entire balance or each applicable tier rate is applied to the portion of the balance that falls into that tier (referred to as &#39;bands&#39; or &#39;steps&#39;)
      * @return rateApplicationMethod
      */
     public RateApplicationMethod getRateApplicationMethod() {
@@ -99,15 +99,15 @@ public void setRateApplicationMethod(RateApplicationMethod rateApplicationMethod
     }
 
     /**
-     * Get unitOfMeasure
-     * @return unitOfMeasure
+     * Get applicabilityConditions
+     * @return applicabilityConditions
      */
-    public UnitOfMeasure getUnitOfMeasure() {
-        return unitOfMeasure;
+    public BankingProductRateCondition getApplicabilityConditions() {
+        return applicabilityConditions;
     }
 
-    public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
-        this.unitOfMeasure = unitOfMeasure;
+    public void setApplicabilityConditions(BankingProductRateCondition applicabilityConditions) {
+        this.applicabilityConditions = applicabilityConditions;
     }
 
     @Override
@@ -119,34 +119,34 @@ public boolean equals(Object o) {
             return false;
         }
         BankingProductRateTierSubTier bankingProductRateTierSubTier = (BankingProductRateTierSubTier) o;
-        return Objects.equals(this.applicabilityConditions, bankingProductRateTierSubTier.applicabilityConditions) &&
-            Objects.equals(this.maximumValue, bankingProductRateTierSubTier.maximumValue) &&
+        return Objects.equals(this.name, bankingProductRateTierSubTier.name) &&
+            Objects.equals(this.unitOfMeasure, bankingProductRateTierSubTier.unitOfMeasure) &&
             Objects.equals(this.minimumValue, bankingProductRateTierSubTier.minimumValue) &&
-            Objects.equals(this.name, bankingProductRateTierSubTier.name) &&
+            Objects.equals(this.maximumValue, bankingProductRateTierSubTier.maximumValue) &&
             Objects.equals(this.rateApplicationMethod, bankingProductRateTierSubTier.rateApplicationMethod) &&
-            Objects.equals(this.unitOfMeasure, bankingProductRateTierSubTier.unitOfMeasure);
+            Objects.equals(this.applicabilityConditions, bankingProductRateTierSubTier.applicabilityConditions);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            applicabilityConditions,
-            maximumValue,
-            minimumValue,
             name,
+            unitOfMeasure,
+            minimumValue,
+            maximumValue,
             rateApplicationMethod,
-            unitOfMeasure);
+            applicabilityConditions);
     }
 
     @Override
     public String toString() {
         return "class BankingProductRateTierSubTier {\n" +
-            "   applicabilityConditions: " + toIndentedString(applicabilityConditions) + "\n" + 
-            "   maximumValue: " + toIndentedString(maximumValue) + "\n" + 
-            "   minimumValue: " + toIndentedString(minimumValue) + "\n" + 
             "   name: " + toIndentedString(name) + "\n" + 
-            "   rateApplicationMethod: " + toIndentedString(rateApplicationMethod) + "\n" + 
             "   unitOfMeasure: " + toIndentedString(unitOfMeasure) + "\n" + 
+            "   minimumValue: " + toIndentedString(minimumValue) + "\n" + 
+            "   maximumValue: " + toIndentedString(maximumValue) + "\n" + 
+            "   rateApplicationMethod: " + toIndentedString(rateApplicationMethod) + "\n" + 
+            "   applicabilityConditions: " + toIndentedString(applicabilityConditions) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1.java
new file mode 100644
index 0000000..b8436b5
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1.java
@@ -0,0 +1,275 @@
+/*
+ * Consumer Data Standards
+ * Sample client library to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ */
+package au.org.consumerdatastandards.client.model;
+
+import java.time.OffsetDateTime;
+import java.util.Objects;
+
+public class BankingProductV1 implements BankingProduct {
+
+    private BankingProductAdditionalInformation additionalInformation;
+
+    private String applicationUri;
+
+    private String brand;
+
+    private String brandName;
+
+    private String description;
+
+    private OffsetDateTime effectiveFrom;
+
+    private OffsetDateTime effectiveTo;
+
+    private Boolean isTailored;
+
+    private OffsetDateTime lastUpdated;
+
+    private String name;
+
+    private BankingProductCategory productCategory;
+
+    private String productId;
+
+    /**
+     * Get additionalInformation
+     * @return additionalInformation
+     */
+    @Override
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    @Override
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    /**
+     * A link to an application web page where this product can be applied for.
+     * @return applicationUri
+     */
+    @Override
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    @Override
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    /**
+     * A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required
+     * @return brand
+     */
+    @Override
+    public String getBrand() {
+        return brand;
+    }
+
+    @Override
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    /**
+     * An optional display name of the brand
+     * @return brandName
+     */
+    @Override
+    public String getBrandName() {
+        return brandName;
+    }
+
+    @Override
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    /**
+     * A description of the product
+     * @return description
+     */
+    @Override
+    public String getDescription() {
+        return description;
+    }
+
+    @Override
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    /**
+     * The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
+     * @return effectiveFrom
+     */
+    @Override
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    @Override
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    /**
+     * The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
+     * @return effectiveTo
+     */
+    @Override
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    @Override
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    /**
+     * Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
+     * @return isTailored
+     */
+    @Override
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    @Override
+    public void setIsTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+    }
+
+    /**
+     * The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
+     * @return lastUpdated
+     */
+    @Override
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    @Override
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    /**
+     * The display name of the product
+     * @return name
+     */
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /**
+     * Get productCategory
+     * @return productCategory
+     */
+    @Override
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    @Override
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    /**
+     * A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
+     * @return productId
+     */
+    @Override
+    public String getProductId() {
+        return productId;
+    }
+
+    @Override
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BankingProductV1 bankingProductV1 = (BankingProductV1) o;
+        return Objects.equals(this.additionalInformation, bankingProductV1.additionalInformation) &&
+            Objects.equals(this.applicationUri, bankingProductV1.applicationUri) &&
+            Objects.equals(this.brand, bankingProductV1.brand) &&
+            Objects.equals(this.brandName, bankingProductV1.brandName) &&
+            Objects.equals(this.description, bankingProductV1.description) &&
+            Objects.equals(this.effectiveFrom, bankingProductV1.effectiveFrom) &&
+            Objects.equals(this.effectiveTo, bankingProductV1.effectiveTo) &&
+            Objects.equals(this.isTailored, bankingProductV1.isTailored) &&
+            Objects.equals(this.lastUpdated, bankingProductV1.lastUpdated) &&
+            Objects.equals(this.name, bankingProductV1.name) &&
+            Objects.equals(this.productCategory, bankingProductV1.productCategory) &&
+            Objects.equals(this.productId, bankingProductV1.productId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+            additionalInformation,
+            applicationUri,
+            brand,
+            brandName,
+            description,
+            effectiveFrom,
+            effectiveTo,
+            isTailored,
+            lastUpdated,
+            name,
+            productCategory,
+            productId);
+    }
+
+    @Override
+    public String toString() {
+        return "class BankingProduct {\n" +
+            "   additionalInformation: " + toIndentedString(additionalInformation) + "\n" +
+            "   applicationUri: " + toIndentedString(applicationUri) + "\n" +
+            "   brand: " + toIndentedString(brand) + "\n" +
+            "   brandName: " + toIndentedString(brandName) + "\n" +
+            "   description: " + toIndentedString(description) + "\n" +
+            "   effectiveFrom: " + toIndentedString(effectiveFrom) + "\n" +
+            "   effectiveTo: " + toIndentedString(effectiveTo) + "\n" +
+            "   isTailored: " + toIndentedString(isTailored) + "\n" +
+            "   lastUpdated: " + toIndentedString(lastUpdated) + "\n" +
+            "   name: " + toIndentedString(name) + "\n" +
+            "   productCategory: " + toIndentedString(productCategory) + "\n" +
+            "   productId: " + toIndentedString(productId) + "\n" +
+            "}";
+    }
+
+    /**
+     * Convert the given object to string with each line indented by 4 spaces
+     * (except the first line).
+     */
+    private String toIndentedString(Object o) {
+        if (o == null) {
+            return "null";
+        }
+        return o.toString().replace("\n", "\n    ");
+    }
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1Detail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1Detail.java
new file mode 100644
index 0000000..8650985
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV1Detail.java
@@ -0,0 +1,194 @@
+/*
+ * Consumer Data Standards
+ * Sample client library to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ */
+package au.org.consumerdatastandards.client.model;
+
+import java.util.List;
+import java.util.Objects;
+
+public class BankingProductV1Detail extends BankingProductV1 implements BankingProductDetail {
+
+    private List<BankingProductBundle> bundles;
+
+    private List<BankingProductFeature> features;
+
+    private List<BankingProductConstraint> constraints;
+
+    private List<BankingProductEligibility> eligibility;
+
+    private List<BankingProductFee> fees;
+
+    private List<BankingProductDepositRate> depositRates;
+
+    private List<BankingProductLendingRate> lendingRates;
+
+    /**
+     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
+     * @return bundles
+     */
+    @Override
+    public List<BankingProductBundle> getBundles() {
+        return bundles;
+    }
+
+    @Override
+    public void setBundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+    }
+
+    /**
+     * Array of features available for the product
+     * @return features
+     */
+    @Override
+    public List<BankingProductFeature> getFeatures() {
+        return features;
+    }
+
+    @Override
+    public void setFeatures(List<BankingProductFeature> features) {
+        this.features = features;
+    }
+
+    /**
+     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
+     * @return constraints
+     */
+    @Override
+    public List<BankingProductConstraint> getConstraints() {
+        return constraints;
+    }
+
+    @Override
+    public void setConstraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+    }
+
+    /**
+     * Eligibility criteria for the product
+     * @return eligibility
+     */
+    @Override
+    public List<BankingProductEligibility> getEligibility() {
+        return eligibility;
+    }
+
+    @Override
+    public void setEligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+    }
+
+    /**
+     * Fees applicable for the product
+     * @return fees
+     */
+    @Override
+    public List<BankingProductFee> getFees() {
+        return fees;
+    }
+
+    @Override
+    public void setFees(List<BankingProductFee> fees) {
+        this.fees = fees;
+    }
+
+    /**
+     * Interest rates available for deposits
+     * @return depositRates
+     */
+    @Override
+    public List<BankingProductDepositRate> getDepositRates() {
+        return depositRates;
+    }
+
+    @Override
+    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+    }
+
+    /**
+     * Interest rates charged against lending balances
+     * @return lendingRates
+     */
+    @Override
+    public List<BankingProductLendingRate> getLendingRates() {
+        return lendingRates;
+    }
+
+    @Override
+    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BankingProductV1Detail bankingProductDetail = (BankingProductV1Detail) o;
+        return Objects.equals(this.bundles, bankingProductDetail.bundles) &&
+            Objects.equals(this.features, bankingProductDetail.features) &&
+            Objects.equals(this.constraints, bankingProductDetail.constraints) &&
+            Objects.equals(this.eligibility, bankingProductDetail.eligibility) &&
+            Objects.equals(this.fees, bankingProductDetail.fees) &&
+            Objects.equals(this.depositRates, bankingProductDetail.depositRates) &&
+            Objects.equals(this.lendingRates, bankingProductDetail.lendingRates) &&
+            super.equals(o);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+            bundles,
+            features,
+            constraints,
+            eligibility,
+            fees,
+            depositRates,
+            lendingRates,
+            super.hashCode());
+    }
+
+    @Override
+    public String toString() {
+        return "class BankingProductDetail {\n" +
+            "   productId: " + toIndentedString(getProductId()) + "\n" +
+            "   effectiveFrom: " + toIndentedString(getEffectiveFrom()) + "\n" +
+            "   effectiveTo: " + toIndentedString(getEffectiveTo()) + "\n" +
+            "   lastUpdated: " + toIndentedString(getLastUpdated()) + "\n" +
+            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" +
+            "   name: " + toIndentedString(getName()) + "\n" +
+            "   description: " + toIndentedString(getDescription()) + "\n" +
+            "   brand: " + toIndentedString(getBrand()) + "\n" +
+            "   brandName: " + toIndentedString(getBrandName()) + "\n" +
+            "   applicationUri: " + toIndentedString(getApplicationUri()) + "\n" +
+            "   isTailored: " + toIndentedString(getIsTailored()) + "\n" +
+            "   additionalInformation: " + toIndentedString(getAdditionalInformation()) + "\n" +
+            "   bundles: " + toIndentedString(bundles) + "\n" +
+            "   features: " + toIndentedString(features) + "\n" +
+            "   constraints: " + toIndentedString(constraints) + "\n" +
+            "   eligibility: " + toIndentedString(eligibility) + "\n" +
+            "   fees: " + toIndentedString(fees) + "\n" +
+            "   depositRates: " + toIndentedString(depositRates) + "\n" +
+            "   lendingRates: " + toIndentedString(lendingRates) + "\n" +
+            "}";
+    }
+
+    /**
+     * Convert the given object to string with each line indented by 4 spaces
+     * (except the first line).
+     */
+    private String toIndentedString(Object o) {
+        if (o == null) {
+            return "null";
+        }
+        return o.toString().replace("\n", "\n    ");
+    }
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2.java
new file mode 100644
index 0000000..888fe61
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2.java
@@ -0,0 +1,269 @@
+/*
+ * Consumer Data Standards
+ * Sample client library to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ */
+package au.org.consumerdatastandards.client.model;
+
+import java.time.OffsetDateTime;
+import java.util.List;
+import java.util.Objects;
+
+public class BankingProductV2 implements BankingProduct {
+
+    private String productId;
+
+    private OffsetDateTime effectiveFrom;
+
+    private OffsetDateTime effectiveTo;
+
+    private OffsetDateTime lastUpdated;
+
+    private BankingProductCategory productCategory;
+
+    private String name;
+
+    private String description;
+
+    private String brand;
+
+    private String brandName;
+
+    private String applicationUri;
+
+    private Boolean isTailored;
+
+    private BankingProductAdditionalInformation additionalInformation;
+
+    private List<BankingProductV2CardArt> cardArt;
+
+    /**
+     * A data holder specific unique identifier for this product. This identifier must be unique to a product but does not otherwise need to adhere to ID permanence guidelines.
+     * @return productId
+     */
+    public String getProductId() {
+        return productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    /**
+     * The date and time from which this product is effective (ie. is available for origination).  Used to enable the articulation of products to the regime before they are available for customers to originate
+     * @return effectiveFrom
+     */
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    /**
+     * The date and time at which this product will be retired and will no longer be offered.  Used to enable the managed deprecation of products
+     * @return effectiveTo
+     */
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    /**
+     * The last date and time that the information for this product was changed (or the creation date for the product if it has never been altered)
+     * @return lastUpdated
+     */
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    /**
+     * Get productCategory
+     * @return productCategory
+     */
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    /**
+     * The display name of the product
+     * @return name
+     */
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /**
+     * A description of the product
+     * @return description
+     */
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    /**
+     * A label of the brand for the product. Able to be used for filtering. For data holders with single brands this value is still required
+     * @return brand
+     */
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    /**
+     * An optional display name of the brand
+     * @return brandName
+     */
+    public String getBrandName() {
+        return brandName;
+    }
+
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    /**
+     * A link to an application web page where this product can be applied for.
+     * @return applicationUri
+     */
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    /**
+     * Indicates whether the product is specifically tailored to a circumstance.  In this case fees and prices are significantly negotiated depending on context. While all products are open to a degree of tailoring this flag indicates that tailoring is expected and thus that the provision of specific fees and rates is not applicable
+     * @return isTailored
+     */
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    public void setIsTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+    }
+
+    /**
+     * Get additionalInformation
+     * @return additionalInformation
+     */
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    /**
+     * An array of card art images
+     * @return cardArt
+     */
+    public List<BankingProductV2CardArt> getCardArt() {
+        return cardArt;
+    }
+
+    public void setCardArt(List<BankingProductV2CardArt> cardArt) {
+        this.cardArt = cardArt;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BankingProductV2 bankingProductV2 = (BankingProductV2) o;
+        return Objects.equals(this.productId, bankingProductV2.productId) &&
+            Objects.equals(this.effectiveFrom, bankingProductV2.effectiveFrom) &&
+            Objects.equals(this.effectiveTo, bankingProductV2.effectiveTo) &&
+            Objects.equals(this.lastUpdated, bankingProductV2.lastUpdated) &&
+            Objects.equals(this.productCategory, bankingProductV2.productCategory) &&
+            Objects.equals(this.name, bankingProductV2.name) &&
+            Objects.equals(this.description, bankingProductV2.description) &&
+            Objects.equals(this.brand, bankingProductV2.brand) &&
+            Objects.equals(this.brandName, bankingProductV2.brandName) &&
+            Objects.equals(this.applicationUri, bankingProductV2.applicationUri) &&
+            Objects.equals(this.isTailored, bankingProductV2.isTailored) &&
+            Objects.equals(this.additionalInformation, bankingProductV2.additionalInformation) &&
+            Objects.equals(this.cardArt, bankingProductV2.cardArt);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+            productId,
+            effectiveFrom,
+            effectiveTo,
+            lastUpdated,
+            productCategory,
+            name,
+            description,
+            brand,
+            brandName,
+            applicationUri,
+            isTailored,
+            additionalInformation,
+            cardArt);
+    }
+
+    @Override
+    public String toString() {
+        return "class BankingProductV2 {\n" +
+            "   productId: " + toIndentedString(productId) + "\n" +
+            "   effectiveFrom: " + toIndentedString(effectiveFrom) + "\n" +
+            "   effectiveTo: " + toIndentedString(effectiveTo) + "\n" +
+            "   lastUpdated: " + toIndentedString(lastUpdated) + "\n" +
+            "   productCategory: " + toIndentedString(productCategory) + "\n" +
+            "   name: " + toIndentedString(name) + "\n" +
+            "   description: " + toIndentedString(description) + "\n" +
+            "   brand: " + toIndentedString(brand) + "\n" +
+            "   brandName: " + toIndentedString(brandName) + "\n" +
+            "   applicationUri: " + toIndentedString(applicationUri) + "\n" +
+            "   isTailored: " + toIndentedString(isTailored) + "\n" +
+            "   additionalInformation: " + toIndentedString(additionalInformation) + "\n" +
+            "   cardArt: " + toIndentedString(cardArt) + "\n" +
+            "}";
+    }
+
+    /**
+     * Convert the given object to string with each line indented by 4 spaces
+     * (except the first line).
+     */
+    private String toIndentedString(Object o) {
+        if (o == null) {
+            return "null";
+        }
+        return o.toString().replace("\n", "\n    ");
+    }
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2CardArt.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2CardArt.java
new file mode 100644
index 0000000..f790cab
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2CardArt.java
@@ -0,0 +1,80 @@
+/*
+ * Consumer Data Standards
+ * Sample client library to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ */
+package au.org.consumerdatastandards.client.model;
+
+import java.util.Objects;
+
+public class BankingProductV2CardArt {
+
+    private String title;
+
+    private String imageUri;
+
+    /**
+     * Display label for the specific image
+     * @return title
+     */
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    /**
+     * Link to a PNG, JPG or GIF image with proportions defined by ISO 7810 ID-1 and width no greater than 512 pixels
+     * @return imageUri
+     */
+    public String getImageUri() {
+        return imageUri;
+    }
+
+    public void setImageUri(String imageUri) {
+        this.imageUri = imageUri;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BankingProductV2CardArt bankingProductV2CardArt = (BankingProductV2CardArt) o;
+        return Objects.equals(this.title, bankingProductV2CardArt.title) &&
+            Objects.equals(this.imageUri, bankingProductV2CardArt.imageUri);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+            title,
+            imageUri);
+    }
+
+    @Override
+    public String toString() {
+        return "class BankingProductV2CardArt {\n" +
+            "   title: " + toIndentedString(title) + "\n" + 
+            "   imageUri: " + toIndentedString(imageUri) + "\n" + 
+            "}";
+    }
+
+    /**
+     * Convert the given object to string with each line indented by 4 spaces
+     * (except the first line).
+     */
+    private String toIndentedString(Object o) {
+        if (o == null) {
+            return "null";
+        }
+        return o.toString().replace("\n", "\n    ");
+    }
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2Detail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2Detail.java
new file mode 100644
index 0000000..4170bfd
--- /dev/null
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingProductV2Detail.java
@@ -0,0 +1,181 @@
+/*
+ * Consumer Data Standards
+ * Sample client library to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https://github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ */
+package au.org.consumerdatastandards.client.model;
+
+import java.util.List;
+import java.util.Objects;
+
+public class BankingProductV2Detail extends BankingProductV2 implements BankingProductDetail {
+
+    private List<BankingProductBundle> bundles;
+
+    private List<BankingProductFeature> features;
+
+    private List<BankingProductConstraint> constraints;
+
+    private List<BankingProductEligibility> eligibility;
+
+    private List<BankingProductFee> fees;
+
+    private List<BankingProductDepositRate> depositRates;
+
+    private List<BankingProductLendingRate> lendingRates;
+
+    /**
+     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
+     * @return bundles
+     */
+    public List<BankingProductBundle> getBundles() {
+        return bundles;
+    }
+
+    public void setBundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+    }
+
+    /**
+     * Array of features available for the product
+     * @return features
+     */
+    public List<BankingProductFeature> getFeatures() {
+        return features;
+    }
+
+    public void setFeatures(List<BankingProductFeature> features) {
+        this.features = features;
+    }
+
+    /**
+     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
+     * @return constraints
+     */
+    public List<BankingProductConstraint> getConstraints() {
+        return constraints;
+    }
+
+    public void setConstraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+    }
+
+    /**
+     * Eligibility criteria for the product
+     * @return eligibility
+     */
+    public List<BankingProductEligibility> getEligibility() {
+        return eligibility;
+    }
+
+    public void setEligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+    }
+
+    /**
+     * Fees applicable for the product
+     * @return fees
+     */
+    public List<BankingProductFee> getFees() {
+        return fees;
+    }
+
+    public void setFees(List<BankingProductFee> fees) {
+        this.fees = fees;
+    }
+
+    /**
+     * Interest rates available for deposits
+     * @return depositRates
+     */
+    public List<BankingProductDepositRate> getDepositRates() {
+        return depositRates;
+    }
+
+    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+    }
+
+    /**
+     * Interest rates charged against lending balances
+     * @return lendingRates
+     */
+    public List<BankingProductLendingRate> getLendingRates() {
+        return lendingRates;
+    }
+
+    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (o == null || getClass() != o.getClass()) {
+            return false;
+        }
+        BankingProductV2Detail bankingProductDetail = (BankingProductV2Detail) o;
+        return Objects.equals(this.bundles, bankingProductDetail.bundles) &&
+            Objects.equals(this.features, bankingProductDetail.features) &&
+            Objects.equals(this.constraints, bankingProductDetail.constraints) &&
+            Objects.equals(this.eligibility, bankingProductDetail.eligibility) &&
+            Objects.equals(this.fees, bankingProductDetail.fees) &&
+            Objects.equals(this.depositRates, bankingProductDetail.depositRates) &&
+            Objects.equals(this.lendingRates, bankingProductDetail.lendingRates) &&
+            super.equals(o);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(
+            bundles,
+            features,
+            constraints,
+            eligibility,
+            fees,
+            depositRates,
+            lendingRates,
+            super.hashCode());
+    }
+
+    @Override
+    public String toString() {
+        return "class BankingProductDetail {\n" +
+            "   productId: " + toIndentedString(getProductId()) + "\n" +
+            "   effectiveFrom: " + toIndentedString(getEffectiveFrom()) + "\n" +
+            "   effectiveTo: " + toIndentedString(getEffectiveTo()) + "\n" +
+            "   lastUpdated: " + toIndentedString(getLastUpdated()) + "\n" +
+            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" +
+            "   name: " + toIndentedString(getName()) + "\n" +
+            "   description: " + toIndentedString(getDescription()) + "\n" +
+            "   brand: " + toIndentedString(getBrand()) + "\n" +
+            "   brandName: " + toIndentedString(getBrandName()) + "\n" +
+            "   applicationUri: " + toIndentedString(getApplicationUri()) + "\n" +
+            "   isTailored: " + toIndentedString(getIsTailored()) + "\n" +
+            "   additionalInformation: " + toIndentedString(getAdditionalInformation()) + "\n" +
+            "   cardArt: " + toIndentedString(getCardArt()) + "\n" +
+            "   bundles: " + toIndentedString(bundles) + "\n" +
+            "   features: " + toIndentedString(features) + "\n" +
+            "   constraints: " + toIndentedString(constraints) + "\n" +
+            "   eligibility: " + toIndentedString(eligibility) + "\n" +
+            "   fees: " + toIndentedString(fees) + "\n" +
+            "   depositRates: " + toIndentedString(depositRates) + "\n" +
+            "   lendingRates: " + toIndentedString(lendingRates) + "\n" +
+            "}";
+    }
+
+    /**
+     * Convert the given object to string with each line indented by 4 spaces
+     * (except the first line).
+     */
+    private String toIndentedString(Object o) {
+        if (o == null) {
+            return "null";
+        }
+        return o.toString().replace("\n", "\n    ");
+    }
+}
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPayment.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPayment.java
index e146dc6..036877e 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPayment.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPayment.java
@@ -14,36 +14,36 @@
 
     public enum Status {
         ACTIVE,
-        INACTIVE,
-        SKIP
+        SKIP,
+        INACTIVE
     }
 
-    private BankingScheduledPaymentFrom from;
+    private String scheduledPaymentId;
 
     private String nickname;
 
+    private String payerReference;
+
     private String payeeReference;
 
-    private String payerReference;
+    private Status status;
+
+    private BankingScheduledPaymentFrom from;
 
     private List<BankingScheduledPaymentSet> paymentSet;
 
     private BankingScheduledPaymentRecurrence recurrence;
 
-    private String scheduledPaymentId;
-
-    private Status status;
-
     /**
-     * Get from
-     * @return from
+     * A unique ID of the scheduled payment adhering to the standards for ID permanence
+     * @return scheduledPaymentId
      */
-    public BankingScheduledPaymentFrom getFrom() {
-        return from;
+    public String getScheduledPaymentId() {
+        return scheduledPaymentId;
     }
 
-    public void setFrom(BankingScheduledPaymentFrom from) {
-        this.from = from;
+    public void setScheduledPaymentId(String scheduledPaymentId) {
+        this.scheduledPaymentId = scheduledPaymentId;
     }
 
     /**
@@ -58,6 +58,18 @@ public void setNickname(String nickname) {
         this.nickname = nickname;
     }
 
+    /**
+     * The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payer’s account. Empty string if no data provided
+     * @return payerReference
+     */
+    public String getPayerReference() {
+        return payerReference;
+    }
+
+    public void setPayerReference(String payerReference) {
+        this.payerReference = payerReference;
+    }
+
     /**
      * The reference for the transaction that will be provided by the originating institution. Empty string if no data provided
      * @return payeeReference
@@ -71,15 +83,27 @@ public void setPayeeReference(String payeeReference) {
     }
 
     /**
-     * The reference for the transaction that will be used by the originating institution for the purposes of constructing a statement narrative on the payer’s account. Empty string if no data provided
-     * @return payerReference
+     * Indicates whether the schedule is currently active. The value SKIP is equivalent to ACTIVE except that the customer has requested the next normal occurrence to be skipped.
+     * @return status
      */
-    public String getPayerReference() {
-        return payerReference;
+    public Status getStatus() {
+        return status;
     }
 
-    public void setPayerReference(String payerReference) {
-        this.payerReference = payerReference;
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    /**
+     * Get from
+     * @return from
+     */
+    public BankingScheduledPaymentFrom getFrom() {
+        return from;
+    }
+
+    public void setFrom(BankingScheduledPaymentFrom from) {
+        this.from = from;
     }
 
     /**
@@ -106,30 +130,6 @@ public void setRecurrence(BankingScheduledPaymentRecurrence recurrence) {
         this.recurrence = recurrence;
     }
 
-    /**
-     * A unique ID of the scheduled payment adhering to the standards for ID permanence
-     * @return scheduledPaymentId
-     */
-    public String getScheduledPaymentId() {
-        return scheduledPaymentId;
-    }
-
-    public void setScheduledPaymentId(String scheduledPaymentId) {
-        this.scheduledPaymentId = scheduledPaymentId;
-    }
-
-    /**
-     * Get status
-     * @return status
-     */
-    public Status getStatus() {
-        return status;
-    }
-
-    public void setStatus(Status status) {
-        this.status = status;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -139,40 +139,40 @@ public boolean equals(Object o) {
             return false;
         }
         BankingScheduledPayment bankingScheduledPayment = (BankingScheduledPayment) o;
-        return Objects.equals(this.from, bankingScheduledPayment.from) &&
+        return Objects.equals(this.scheduledPaymentId, bankingScheduledPayment.scheduledPaymentId) &&
             Objects.equals(this.nickname, bankingScheduledPayment.nickname) &&
-            Objects.equals(this.payeeReference, bankingScheduledPayment.payeeReference) &&
             Objects.equals(this.payerReference, bankingScheduledPayment.payerReference) &&
+            Objects.equals(this.payeeReference, bankingScheduledPayment.payeeReference) &&
+            Objects.equals(this.status, bankingScheduledPayment.status) &&
+            Objects.equals(this.from, bankingScheduledPayment.from) &&
             Objects.equals(this.paymentSet, bankingScheduledPayment.paymentSet) &&
-            Objects.equals(this.recurrence, bankingScheduledPayment.recurrence) &&
-            Objects.equals(this.scheduledPaymentId, bankingScheduledPayment.scheduledPaymentId) &&
-            Objects.equals(this.status, bankingScheduledPayment.status);
+            Objects.equals(this.recurrence, bankingScheduledPayment.recurrence);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            from,
+            scheduledPaymentId,
             nickname,
-            payeeReference,
             payerReference,
+            payeeReference,
+            status,
+            from,
             paymentSet,
-            recurrence,
-            scheduledPaymentId,
-            status);
+            recurrence);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPayment {\n" +
-            "   from: " + toIndentedString(from) + "\n" + 
+            "   scheduledPaymentId: " + toIndentedString(scheduledPaymentId) + "\n" + 
             "   nickname: " + toIndentedString(nickname) + "\n" + 
-            "   payeeReference: " + toIndentedString(payeeReference) + "\n" + 
             "   payerReference: " + toIndentedString(payerReference) + "\n" + 
+            "   payeeReference: " + toIndentedString(payeeReference) + "\n" + 
+            "   status: " + toIndentedString(status) + "\n" + 
+            "   from: " + toIndentedString(from) + "\n" + 
             "   paymentSet: " + toIndentedString(paymentSet) + "\n" + 
             "   recurrence: " + toIndentedString(recurrence) + "\n" + 
-            "   scheduledPaymentId: " + toIndentedString(scheduledPaymentId) + "\n" + 
-            "   status: " + toIndentedString(status) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentInterval.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentInterval.java
index c1b31f7..436c89a 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentInterval.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentInterval.java
@@ -11,24 +11,12 @@
 
 public class BankingScheduledPaymentInterval {
 
-    private String dayInInterval;
-
     private String interval;
 
-    /**
-     * Uses an interval to define the ordinal day within the interval defined by the interval field on which the payment occurs. If the resulting duration is 0 days in length or larger than the number of days in the interval then the payment will occur on the last day of the interval. A duration of 1 day indicates the first day of the interval. If absent the assumed value is P1D. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) with components less than a day in length ignored. The first day of a week is considered to be Monday.
-     * @return dayInInterval
-     */
-    public String getDayInInterval() {
-        return dayInInterval;
-    }
-
-    public void setDayInInterval(String dayInInterval) {
-        this.dayInInterval = dayInInterval;
-    }
+    private String dayInInterval;
 
     /**
-     * An interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate
+     * An interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)  (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate
      * @return interval
      */
     public String getInterval() {
@@ -39,6 +27,18 @@ public void setInterval(String interval) {
         this.interval = interval;
     }
 
+    /**
+     * Uses an interval to define the ordinal day within the interval defined by the interval field on which the payment occurs. If the resulting duration is 0 days in length or larger than the number of days in the interval then the payment will occur on the last day of the interval. A duration of 1 day indicates the first day of the interval. If absent the assumed value is P1D. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. The first day of a week is considered to be Monday.
+     * @return dayInInterval
+     */
+    public String getDayInInterval() {
+        return dayInInterval;
+    }
+
+    public void setDayInInterval(String dayInInterval) {
+        this.dayInInterval = dayInInterval;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -48,22 +48,22 @@ public boolean equals(Object o) {
             return false;
         }
         BankingScheduledPaymentInterval bankingScheduledPaymentInterval = (BankingScheduledPaymentInterval) o;
-        return Objects.equals(this.dayInInterval, bankingScheduledPaymentInterval.dayInInterval) &&
-            Objects.equals(this.interval, bankingScheduledPaymentInterval.interval);
+        return Objects.equals(this.interval, bankingScheduledPaymentInterval.interval) &&
+            Objects.equals(this.dayInInterval, bankingScheduledPaymentInterval.dayInInterval);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            dayInInterval,
-            interval);
+            interval,
+            dayInInterval);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentInterval {\n" +
-            "   dayInInterval: " + toIndentedString(dayInInterval) + "\n" + 
             "   interval: " + toIndentedString(interval) + "\n" + 
+            "   dayInInterval: " + toIndentedString(dayInInterval) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrence.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrence.java
index 56d5b5c..a3cb829 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrence.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrence.java
@@ -15,34 +15,58 @@
 public class BankingScheduledPaymentRecurrence {
 
     public enum RecurrenceUType {
-        eventBased,
+        onceOff,
         intervalSchedule,
         lastWeekDay,
-        onceOff
+        eventBased
     }
 
-    private BankingScheduledPaymentRecurrenceEventBased eventBased;
+    private LocalDate nextPaymentDate;
+
+    private RecurrenceUType recurrenceUType;
+
+    private BankingScheduledPaymentRecurrenceOnceOff onceOff;
 
     private BankingScheduledPaymentRecurrenceIntervalSchedule intervalSchedule;
 
     private BankingScheduledPaymentRecurrenceLastWeekday lastWeekDay;
 
-    private LocalDate nextPaymentDate;
+    private BankingScheduledPaymentRecurrenceEventBased eventBased;
 
-    private BankingScheduledPaymentRecurrenceOnceOff onceOff;
+    /**
+     * The date of the next payment under the recurrence schedule
+     * @return nextPaymentDate
+     */
+    public LocalDate getNextPaymentDate() {
+        return nextPaymentDate;
+    }
 
-    private RecurrenceUType recurrenceUType;
+    public void setNextPaymentDate(LocalDate nextPaymentDate) {
+        this.nextPaymentDate = nextPaymentDate;
+    }
 
     /**
-     * Get eventBased
-     * @return eventBased
+     * The type of recurrence used to define the schedule
+     * @return recurrenceUType
      */
-    public BankingScheduledPaymentRecurrenceEventBased getEventBased() {
-        return eventBased;
+    public RecurrenceUType getRecurrenceUType() {
+        return recurrenceUType;
     }
 
-    public void setEventBased(BankingScheduledPaymentRecurrenceEventBased eventBased) {
-        this.eventBased = eventBased;
+    public void setRecurrenceUType(RecurrenceUType recurrenceUType) {
+        this.recurrenceUType = recurrenceUType;
+    }
+
+    /**
+     * Get onceOff
+     * @return onceOff
+     */
+    public BankingScheduledPaymentRecurrenceOnceOff getOnceOff() {
+        return onceOff;
+    }
+
+    public void setOnceOff(BankingScheduledPaymentRecurrenceOnceOff onceOff) {
+        this.onceOff = onceOff;
     }
 
     /**
@@ -70,39 +94,15 @@ public void setLastWeekDay(BankingScheduledPaymentRecurrenceLastWeekday lastWeek
     }
 
     /**
-     * The date of the next payment under the recurrence schedule
-     * @return nextPaymentDate
-     */
-    public LocalDate getNextPaymentDate() {
-        return nextPaymentDate;
-    }
-
-    public void setNextPaymentDate(LocalDate nextPaymentDate) {
-        this.nextPaymentDate = nextPaymentDate;
-    }
-
-    /**
-     * Get onceOff
-     * @return onceOff
-     */
-    public BankingScheduledPaymentRecurrenceOnceOff getOnceOff() {
-        return onceOff;
-    }
-
-    public void setOnceOff(BankingScheduledPaymentRecurrenceOnceOff onceOff) {
-        this.onceOff = onceOff;
-    }
-
-    /**
-     * Get recurrenceUType
-     * @return recurrenceUType
+     * Get eventBased
+     * @return eventBased
      */
-    public RecurrenceUType getRecurrenceUType() {
-        return recurrenceUType;
+    public BankingScheduledPaymentRecurrenceEventBased getEventBased() {
+        return eventBased;
     }
 
-    public void setRecurrenceUType(RecurrenceUType recurrenceUType) {
-        this.recurrenceUType = recurrenceUType;
+    public void setEventBased(BankingScheduledPaymentRecurrenceEventBased eventBased) {
+        this.eventBased = eventBased;
     }
 
     @Override
@@ -114,34 +114,34 @@ public boolean equals(Object o) {
             return false;
         }
         BankingScheduledPaymentRecurrence bankingScheduledPaymentRecurrence = (BankingScheduledPaymentRecurrence) o;
-        return Objects.equals(this.eventBased, bankingScheduledPaymentRecurrence.eventBased) &&
+        return Objects.equals(this.nextPaymentDate, bankingScheduledPaymentRecurrence.nextPaymentDate) &&
+            Objects.equals(this.recurrenceUType, bankingScheduledPaymentRecurrence.recurrenceUType) &&
+            Objects.equals(this.onceOff, bankingScheduledPaymentRecurrence.onceOff) &&
             Objects.equals(this.intervalSchedule, bankingScheduledPaymentRecurrence.intervalSchedule) &&
             Objects.equals(this.lastWeekDay, bankingScheduledPaymentRecurrence.lastWeekDay) &&
-            Objects.equals(this.nextPaymentDate, bankingScheduledPaymentRecurrence.nextPaymentDate) &&
-            Objects.equals(this.onceOff, bankingScheduledPaymentRecurrence.onceOff) &&
-            Objects.equals(this.recurrenceUType, bankingScheduledPaymentRecurrence.recurrenceUType);
+            Objects.equals(this.eventBased, bankingScheduledPaymentRecurrence.eventBased);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            eventBased,
-            intervalSchedule,
-            lastWeekDay,
             nextPaymentDate,
+            recurrenceUType,
             onceOff,
-            recurrenceUType);
+            intervalSchedule,
+            lastWeekDay,
+            eventBased);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentRecurrence {\n" +
-            "   eventBased: " + toIndentedString(eventBased) + "\n" + 
-            "   intervalSchedule: " + toIndentedString(intervalSchedule) + "\n" + 
-            "   lastWeekDay: " + toIndentedString(lastWeekDay) + "\n" + 
-            "   nextPaymentDate: " + toIndentedString(nextPaymentDate) + "\n" + 
-            "   onceOff: " + toIndentedString(onceOff) + "\n" + 
-            "   recurrenceUType: " + toIndentedString(recurrenceUType) + "\n" + 
+            "   nextPaymentDate: " + toIndentedString(nextPaymentDate) + "\n" +
+            "   recurrenceUType: " + toIndentedString(recurrenceUType) + "\n" +
+            "   onceOff: " + toIndentedString(onceOff) + "\n" +
+            "   intervalSchedule: " + toIndentedString(intervalSchedule) + "\n" +
+            "   lastWeekDay: " + toIndentedString(lastWeekDay) + "\n" +
+            "   eventBased: " + toIndentedString(eventBased) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceIntervalSchedule.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceIntervalSchedule.java
index c02e799..c219f8c 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceIntervalSchedule.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceIntervalSchedule.java
@@ -24,11 +24,11 @@
 
     private LocalDate finalPaymentDate;
 
-    private List<BankingScheduledPaymentInterval> intervals;
+    private Integer paymentsRemaining;
 
-    private NonBusinessDayTreatment nonBusinessDayTreatment;
+    private NonBusinessDayTreatment nonBusinessDayTreatment = NonBusinessDayTreatment.ON;
 
-    private Integer paymentsRemaining;
+    private List<BankingScheduledPaymentInterval> intervals;
 
     /**
      * The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
@@ -43,19 +43,19 @@ public void setFinalPaymentDate(LocalDate finalPaymentDate) {
     }
 
     /**
-     * An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry
-     * @return intervals
+     * Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely
+     * @return paymentsRemaining
      */
-    public List<BankingScheduledPaymentInterval> getIntervals() {
-        return intervals;
+    public Integer getPaymentsRemaining() {
+        return paymentsRemaining;
     }
 
-    public void setIntervals(List<BankingScheduledPaymentInterval> intervals) {
-        this.intervals = intervals;
+    public void setPaymentsRemaining(Integer paymentsRemaining) {
+        this.paymentsRemaining = paymentsRemaining;
     }
 
     /**
-     * Get nonBusinessDayTreatment
+     * Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.&lt;br/&gt;**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.&lt;br/&gt;**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.&lt;br/&gt;**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.&lt;br/&gt;**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored
      * @return nonBusinessDayTreatment
      */
     public NonBusinessDayTreatment getNonBusinessDayTreatment() {
@@ -67,15 +67,15 @@ public void setNonBusinessDayTreatment(NonBusinessDayTreatment nonBusinessDayTre
     }
 
     /**
-     * Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value, If neither field is present the payments will continue indefinitely
-     * @return paymentsRemaining
+     * An array of interval objects defining the payment schedule.  Each entry in the array is additive, in that it adds payments to the overall payment schedule.  If multiple intervals result in a payment on the same day then only one payment will be made. Must have at least one entry
+     * @return intervals
      */
-    public Integer getPaymentsRemaining() {
-        return paymentsRemaining;
+    public List<BankingScheduledPaymentInterval> getIntervals() {
+        return intervals;
     }
 
-    public void setPaymentsRemaining(Integer paymentsRemaining) {
-        this.paymentsRemaining = paymentsRemaining;
+    public void setIntervals(List<BankingScheduledPaymentInterval> intervals) {
+        this.intervals = intervals;
     }
 
     @Override
@@ -88,27 +88,27 @@ public boolean equals(Object o) {
         }
         BankingScheduledPaymentRecurrenceIntervalSchedule bankingScheduledPaymentRecurrenceIntervalSchedule = (BankingScheduledPaymentRecurrenceIntervalSchedule) o;
         return Objects.equals(this.finalPaymentDate, bankingScheduledPaymentRecurrenceIntervalSchedule.finalPaymentDate) &&
-            Objects.equals(this.intervals, bankingScheduledPaymentRecurrenceIntervalSchedule.intervals) &&
+            Objects.equals(this.paymentsRemaining, bankingScheduledPaymentRecurrenceIntervalSchedule.paymentsRemaining) &&
             Objects.equals(this.nonBusinessDayTreatment, bankingScheduledPaymentRecurrenceIntervalSchedule.nonBusinessDayTreatment) &&
-            Objects.equals(this.paymentsRemaining, bankingScheduledPaymentRecurrenceIntervalSchedule.paymentsRemaining);
+            Objects.equals(this.intervals, bankingScheduledPaymentRecurrenceIntervalSchedule.intervals);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             finalPaymentDate,
-            intervals,
+            paymentsRemaining,
             nonBusinessDayTreatment,
-            paymentsRemaining);
+            intervals);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentRecurrenceIntervalSchedule {\n" +
             "   finalPaymentDate: " + toIndentedString(finalPaymentDate) + "\n" + 
-            "   intervals: " + toIndentedString(intervals) + "\n" + 
-            "   nonBusinessDayTreatment: " + toIndentedString(nonBusinessDayTreatment) + "\n" + 
             "   paymentsRemaining: " + toIndentedString(paymentsRemaining) + "\n" + 
+            "   nonBusinessDayTreatment: " + toIndentedString(nonBusinessDayTreatment) + "\n" + 
+            "   intervals: " + toIndentedString(intervals) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceLastWeekday.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceLastWeekday.java
index 6edacce..38caa94 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceLastWeekday.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentRecurrenceLastWeekday.java
@@ -14,13 +14,32 @@
  */
 public class BankingScheduledPaymentRecurrenceLastWeekday {
 
+    public enum LastWeekDay {
+        MON,
+        TUE,
+        WED,
+        THU,
+        FRI,
+        SAT,
+        SUN
+    }
+
+    public enum NonBusinessDayTreatment {
+        AFTER,
+        BEFORE,
+        ON,
+        ONLY
+    }
+
     private LocalDate finalPaymentDate;
 
+    private Integer paymentsRemaining;
+
     private String interval;
 
-    private Integer lastWeekDay;
+    private LastWeekDay lastWeekDay;
 
-    private Integer paymentsRemaining;
+    private NonBusinessDayTreatment nonBusinessDayTreatment = NonBusinessDayTreatment.ON;
 
     /**
      * The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
@@ -35,7 +54,19 @@ public void setFinalPaymentDate(LocalDate finalPaymentDate) {
     }
 
     /**
-     * The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate
+     * Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
+     * @return paymentsRemaining
+     */
+    public Integer getPaymentsRemaining() {
+        return paymentsRemaining;
+    }
+
+    public void setPaymentsRemaining(Integer paymentsRemaining) {
+        this.paymentsRemaining = paymentsRemaining;
+    }
+
+    /**
+     * The interval for the payment. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax) with components less than a day in length ignored. This duration defines the period between payments starting with nextPaymentDate
      * @return interval
      */
     public String getInterval() {
@@ -47,27 +78,27 @@ public void setInterval(String interval) {
     }
 
     /**
-     * The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval. Value is constrained to 1 to 7 with 1 indicating Monday.
+     * The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval.
      * @return lastWeekDay
      */
-    public Integer getLastWeekDay() {
+    public LastWeekDay getLastWeekDay() {
         return lastWeekDay;
     }
 
-    public void setLastWeekDay(Integer lastWeekDay) {
+    public void setLastWeekDay(LastWeekDay lastWeekDay) {
         this.lastWeekDay = lastWeekDay;
     }
 
     /**
-     * Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
-     * @return paymentsRemaining
+     * Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.&lt;br/&gt;**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.&lt;br/&gt;**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.&lt;br/&gt;**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.&lt;br/&gt;**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored
+     * @return nonBusinessDayTreatment
      */
-    public Integer getPaymentsRemaining() {
-        return paymentsRemaining;
+    public NonBusinessDayTreatment getNonBusinessDayTreatment() {
+        return nonBusinessDayTreatment;
     }
 
-    public void setPaymentsRemaining(Integer paymentsRemaining) {
-        this.paymentsRemaining = paymentsRemaining;
+    public void setNonBusinessDayTreatment(NonBusinessDayTreatment nonBusinessDayTreatment) {
+        this.nonBusinessDayTreatment = nonBusinessDayTreatment;
     }
 
     @Override
@@ -80,27 +111,30 @@ public boolean equals(Object o) {
         }
         BankingScheduledPaymentRecurrenceLastWeekday bankingScheduledPaymentRecurrenceLastWeekday = (BankingScheduledPaymentRecurrenceLastWeekday) o;
         return Objects.equals(this.finalPaymentDate, bankingScheduledPaymentRecurrenceLastWeekday.finalPaymentDate) &&
+            Objects.equals(this.paymentsRemaining, bankingScheduledPaymentRecurrenceLastWeekday.paymentsRemaining) &&
             Objects.equals(this.interval, bankingScheduledPaymentRecurrenceLastWeekday.interval) &&
             Objects.equals(this.lastWeekDay, bankingScheduledPaymentRecurrenceLastWeekday.lastWeekDay) &&
-            Objects.equals(this.paymentsRemaining, bankingScheduledPaymentRecurrenceLastWeekday.paymentsRemaining);
+            Objects.equals(this.nonBusinessDayTreatment, bankingScheduledPaymentRecurrenceLastWeekday.nonBusinessDayTreatment);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             finalPaymentDate,
+            paymentsRemaining,
             interval,
             lastWeekDay,
-            paymentsRemaining);
+            nonBusinessDayTreatment);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentRecurrenceLastWeekday {\n" +
             "   finalPaymentDate: " + toIndentedString(finalPaymentDate) + "\n" + 
+            "   paymentsRemaining: " + toIndentedString(paymentsRemaining) + "\n" + 
             "   interval: " + toIndentedString(interval) + "\n" + 
             "   lastWeekDay: " + toIndentedString(lastWeekDay) + "\n" + 
-            "   paymentsRemaining: " + toIndentedString(paymentsRemaining) + "\n" + 
+            "   nonBusinessDayTreatment: " + toIndentedString(nonBusinessDayTreatment) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentSet.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentSet.java
index 5a683fb..56244f0 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentSet.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentSet.java
@@ -13,16 +13,40 @@
  */
 public class BankingScheduledPaymentSet {
 
+    private BankingScheduledPaymentTo to;
+
+    private Boolean isAmountCalculated;
+
     private String amount;
 
     private String currency;
 
-    private Boolean isAmountCalculated;
+    /**
+     * Get to
+     * @return to
+     */
+    public BankingScheduledPaymentTo getTo() {
+        return to;
+    }
 
-    private BankingScheduledPaymentTo to;
+    public void setTo(BankingScheduledPaymentTo to) {
+        this.to = to;
+    }
 
     /**
      * Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed
+     * @return isAmountCalculated
+     */
+    public Boolean getIsAmountCalculated() {
+        return isAmountCalculated;
+    }
+
+    public void setIsAmountCalculated(Boolean isAmountCalculated) {
+        this.isAmountCalculated = isAmountCalculated;
+    }
+
+    /**
+     * The amount of the next payment if known. Mandatory unless the isAmountCalculated field is set to true. Must be zero or positive if present
      * @return amount
      */
     public String getAmount() {
@@ -45,30 +69,6 @@ public void setCurrency(String currency) {
         this.currency = currency;
     }
 
-    /**
-     * Flag indicating whether the amount of the payment is calculated based on the context of the event. For instance a payment to reduce the balance of a credit card to zero. If absent then false is assumed
-     * @return isAmountCalculated
-     */
-    public Boolean getIsAmountCalculated() {
-        return isAmountCalculated;
-    }
-
-    public void setIsAmountCalculated(Boolean isAmountCalculated) {
-        this.isAmountCalculated = isAmountCalculated;
-    }
-
-    /**
-     * Get to
-     * @return to
-     */
-    public BankingScheduledPaymentTo getTo() {
-        return to;
-    }
-
-    public void setTo(BankingScheduledPaymentTo to) {
-        this.to = to;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -78,28 +78,28 @@ public boolean equals(Object o) {
             return false;
         }
         BankingScheduledPaymentSet bankingScheduledPaymentSet = (BankingScheduledPaymentSet) o;
-        return Objects.equals(this.amount, bankingScheduledPaymentSet.amount) &&
-            Objects.equals(this.currency, bankingScheduledPaymentSet.currency) &&
+        return Objects.equals(this.to, bankingScheduledPaymentSet.to) &&
             Objects.equals(this.isAmountCalculated, bankingScheduledPaymentSet.isAmountCalculated) &&
-            Objects.equals(this.to, bankingScheduledPaymentSet.to);
+            Objects.equals(this.amount, bankingScheduledPaymentSet.amount) &&
+            Objects.equals(this.currency, bankingScheduledPaymentSet.currency);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            amount,
-            currency,
+            to,
             isAmountCalculated,
-            to);
+            amount,
+            currency);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentSet {\n" +
+            "   to: " + toIndentedString(to) + "\n" + 
+            "   isAmountCalculated: " + toIndentedString(isAmountCalculated) + "\n" + 
             "   amount: " + toIndentedString(amount) + "\n" + 
             "   currency: " + toIndentedString(currency) + "\n" + 
-            "   isAmountCalculated: " + toIndentedString(isAmountCalculated) + "\n" + 
-            "   to: " + toIndentedString(to) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentTo.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentTo.java
index 609cc40..e34dd50 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentTo.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingScheduledPaymentTo.java
@@ -15,23 +15,35 @@
 
     public enum ToUType {
         accountId,
-        biller,
+        payeeId,
         domestic,
-        international,
-        payeeId
+        biller,
+        international
     }
 
+    private ToUType toUType;
+
     private String accountId;
 
-    private BankingBillerPayee biller;
+    private String payeeId;
 
     private BankingDomesticPayee domestic;
 
+    private BankingBillerPayee biller;
+
     private BankingInternationalPayee international;
 
-    private String payeeId;
+    /**
+     * The type of object provided that specifies the destination of the funds for the payment.
+     * @return toUType
+     */
+    public ToUType getToUType() {
+        return toUType;
+    }
 
-    private ToUType toUType;
+    public void setToUType(ToUType toUType) {
+        this.toUType = toUType;
+    }
 
     /**
      * Present if toUType is set to accountId. Indicates that the payment is to another account that is accessible under the current consent
@@ -46,15 +58,15 @@ public void setAccountId(String accountId) {
     }
 
     /**
-     * Get biller
-     * @return biller
+     * Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead
+     * @return payeeId
      */
-    public BankingBillerPayee getBiller() {
-        return biller;
+    public String getPayeeId() {
+        return payeeId;
     }
 
-    public void setBiller(BankingBillerPayee biller) {
-        this.biller = biller;
+    public void setPayeeId(String payeeId) {
+        this.payeeId = payeeId;
     }
 
     /**
@@ -70,39 +82,27 @@ public void setDomestic(BankingDomesticPayee domestic) {
     }
 
     /**
-     * Get international
-     * @return international
-     */
-    public BankingInternationalPayee getInternational() {
-        return international;
-    }
-
-    public void setInternational(BankingInternationalPayee international) {
-        this.international = international;
-    }
-
-    /**
-     * Present if toUType is set to payeeId. Indicates that the payment is to registered payee that can be accessed using the payee end point. If the Bank Payees scope has not been consented to then a payeeId should not be provided and the full payee details should be provided instead
-     * @return payeeId
+     * Get biller
+     * @return biller
      */
-    public String getPayeeId() {
-        return payeeId;
+    public BankingBillerPayee getBiller() {
+        return biller;
     }
 
-    public void setPayeeId(String payeeId) {
-        this.payeeId = payeeId;
+    public void setBiller(BankingBillerPayee biller) {
+        this.biller = biller;
     }
 
     /**
-     * Get toUType
-     * @return toUType
+     * Get international
+     * @return international
      */
-    public ToUType getToUType() {
-        return toUType;
+    public BankingInternationalPayee getInternational() {
+        return international;
     }
 
-    public void setToUType(ToUType toUType) {
-        this.toUType = toUType;
+    public void setInternational(BankingInternationalPayee international) {
+        this.international = international;
     }
 
     @Override
@@ -114,34 +114,34 @@ public boolean equals(Object o) {
             return false;
         }
         BankingScheduledPaymentTo bankingScheduledPaymentTo = (BankingScheduledPaymentTo) o;
-        return Objects.equals(this.accountId, bankingScheduledPaymentTo.accountId) &&
-            Objects.equals(this.biller, bankingScheduledPaymentTo.biller) &&
-            Objects.equals(this.domestic, bankingScheduledPaymentTo.domestic) &&
-            Objects.equals(this.international, bankingScheduledPaymentTo.international) &&
+        return Objects.equals(this.toUType, bankingScheduledPaymentTo.toUType) &&
+            Objects.equals(this.accountId, bankingScheduledPaymentTo.accountId) &&
             Objects.equals(this.payeeId, bankingScheduledPaymentTo.payeeId) &&
-            Objects.equals(this.toUType, bankingScheduledPaymentTo.toUType);
+            Objects.equals(this.domestic, bankingScheduledPaymentTo.domestic) &&
+            Objects.equals(this.biller, bankingScheduledPaymentTo.biller) &&
+            Objects.equals(this.international, bankingScheduledPaymentTo.international);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            toUType,
             accountId,
-            biller,
-            domestic,
-            international,
             payeeId,
-            toUType);
+            domestic,
+            biller,
+            international);
     }
 
     @Override
     public String toString() {
         return "class BankingScheduledPaymentTo {\n" +
-            "   accountId: " + toIndentedString(accountId) + "\n" + 
-            "   biller: " + toIndentedString(biller) + "\n" + 
-            "   domestic: " + toIndentedString(domestic) + "\n" + 
-            "   international: " + toIndentedString(international) + "\n" + 
-            "   payeeId: " + toIndentedString(payeeId) + "\n" + 
-            "   toUType: " + toIndentedString(toUType) + "\n" + 
+            "   toUType: " + toIndentedString(toUType) + "\n" +
+            "   accountId: " + toIndentedString(accountId) + "\n" +
+            "   payeeId: " + toIndentedString(payeeId) + "\n" +
+            "   domestic: " + toIndentedString(domestic) + "\n" +
+            "   biller: " + toIndentedString(biller) + "\n" +
+            "   international: " + toIndentedString(international) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTermDepositAccount.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTermDepositAccount.java
index 9429adb..37648f2 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTermDepositAccount.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTermDepositAccount.java
@@ -13,18 +13,18 @@
 public class BankingTermDepositAccount {
 
     public enum MaturityInstructions {
-        PAID_OUT_AT_MATURITY,
-        ROLLED_OVER
+        ROLLED_OVER,
+        PAID_OUT_AT_MATURITY
     }
 
     private LocalDate lodgementDate;
 
+    private LocalDate maturityDate;
+
     private String maturityAmount;
 
     private String maturityCurrency;
 
-    private LocalDate maturityDate;
-
     private MaturityInstructions maturityInstructions;
 
     /**
@@ -39,6 +39,18 @@ public void setLodgementDate(LocalDate lodgementDate) {
         this.lodgementDate = lodgementDate;
     }
 
+    /**
+     * Maturity date for the term deposit
+     * @return maturityDate
+     */
+    public LocalDate getMaturityDate() {
+        return maturityDate;
+    }
+
+    public void setMaturityDate(LocalDate maturityDate) {
+        this.maturityDate = maturityDate;
+    }
+
     /**
      * Amount to be paid upon maturity. If absent it implies the amount to paid is variable and cannot currently be calculated
      * @return maturityAmount
@@ -64,19 +76,7 @@ public void setMaturityCurrency(String maturityCurrency) {
     }
 
     /**
-     * Maturity date for the term deposit
-     * @return maturityDate
-     */
-    public LocalDate getMaturityDate() {
-        return maturityDate;
-    }
-
-    public void setMaturityDate(LocalDate maturityDate) {
-        this.maturityDate = maturityDate;
-    }
-
-    /**
-     * Get maturityInstructions
+     * Current instructions on action to be taken at maturity
      * @return maturityInstructions
      */
     public MaturityInstructions getMaturityInstructions() {
@@ -97,9 +97,9 @@ public boolean equals(Object o) {
         }
         BankingTermDepositAccount bankingTermDepositAccount = (BankingTermDepositAccount) o;
         return Objects.equals(this.lodgementDate, bankingTermDepositAccount.lodgementDate) &&
+            Objects.equals(this.maturityDate, bankingTermDepositAccount.maturityDate) &&
             Objects.equals(this.maturityAmount, bankingTermDepositAccount.maturityAmount) &&
             Objects.equals(this.maturityCurrency, bankingTermDepositAccount.maturityCurrency) &&
-            Objects.equals(this.maturityDate, bankingTermDepositAccount.maturityDate) &&
             Objects.equals(this.maturityInstructions, bankingTermDepositAccount.maturityInstructions);
     }
 
@@ -107,9 +107,9 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Objects.hash(
             lodgementDate,
+            maturityDate,
             maturityAmount,
             maturityCurrency,
-            maturityDate,
             maturityInstructions);
     }
 
@@ -117,9 +117,9 @@ public int hashCode() {
     public String toString() {
         return "class BankingTermDepositAccount {\n" +
             "   lodgementDate: " + toIndentedString(lodgementDate) + "\n" + 
+            "   maturityDate: " + toIndentedString(maturityDate) + "\n" + 
             "   maturityAmount: " + toIndentedString(maturityAmount) + "\n" + 
             "   maturityCurrency: " + toIndentedString(maturityCurrency) + "\n" + 
-            "   maturityDate: " + toIndentedString(maturityDate) + "\n" + 
             "   maturityInstructions: " + toIndentedString(maturityInstructions) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransaction.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransaction.java
index 25dd307..3133bbf 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransaction.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransaction.java
@@ -12,57 +12,57 @@
 
 public class BankingTransaction {
 
-    public enum Status {
-        PENDING,
-        POSTED
-    }
-
     public enum Type {
-        DIRECT_DEBIT,
         FEE,
         INTEREST_CHARGED,
         INTEREST_PAID,
-        OTHER,
-        PAYMENT,
+        TRANSFER_OUTGOING,
         TRANSFER_INCOMING,
-        TRANSFER_OUTGOING
+        PAYMENT,
+        DIRECT_DEBIT,
+        OTHER
+    }
+
+    public enum Status {
+        PENDING,
+        POSTED
     }
 
     private String accountId;
 
-    private String amount;
+    private String transactionId;
 
-    private String apcaNumber;
+    private Boolean isDetailAvailable;
 
-    private String billerCode;
+    private Type type;
 
-    private String billerName;
+    private Status status;
 
-    private String crn;
+    private String description;
 
-    private String currency;
+    private OffsetDateTime postingDateTime;
 
-    private String description;
+    private OffsetDateTime valueDateTime;
 
     private OffsetDateTime executionDateTime;
 
-    private Boolean isDetailAvailable;
+    private String amount;
 
-    private String merchantCategoryCode;
+    private String currency;
 
-    private String merchantName;
+    private String reference;
 
-    private OffsetDateTime postingDateTime;
+    private String merchantName;
 
-    private String reference;
+    private String merchantCategoryCode;
 
-    private Status status;
+    private String billerCode;
 
-    private String transactionId;
+    private String billerName;
 
-    private Type type;
+    private String crn;
 
-    private OffsetDateTime valueDateTime;
+    private String apcaNumber;
 
     /**
      * ID of the account for which transactions are provided
@@ -77,87 +77,87 @@ public void setAccountId(String accountId) {
     }
 
     /**
-     * The value of the transaction. Negative values mean money was outgoing from the account
-     * @return amount
+     * A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
+     * @return transactionId
      */
-    public String getAmount() {
-        return amount;
+    public String getTransactionId() {
+        return transactionId;
     }
 
-    public void setAmount(String amount) {
-        this.amount = amount;
+    public void setTransactionId(String transactionId) {
+        this.transactionId = transactionId;
     }
 
     /**
-     * 6 Digit APCA number for the initiating institution
-     * @return apcaNumber
+     * True if extended information is available using the transaction detail end point. False if extended data is not available
+     * @return isDetailAvailable
      */
-    public String getApcaNumber() {
-        return apcaNumber;
+    public Boolean getIsDetailAvailable() {
+        return isDetailAvailable;
     }
 
-    public void setApcaNumber(String apcaNumber) {
-        this.apcaNumber = apcaNumber;
+    public void setIsDetailAvailable(Boolean isDetailAvailable) {
+        this.isDetailAvailable = isDetailAvailable;
     }
 
     /**
-     * BPAY Biller Code for the transaction (if available)
-     * @return billerCode
+     * The type of the transaction
+     * @return type
      */
-    public String getBillerCode() {
-        return billerCode;
+    public Type getType() {
+        return type;
     }
 
-    public void setBillerCode(String billerCode) {
-        this.billerCode = billerCode;
+    public void setType(Type type) {
+        this.type = type;
     }
 
     /**
-     * Name of the BPAY biller for the transaction (if available)
-     * @return billerName
+     * Status of the transaction whether pending or posted. Note that there is currently no provision in the standards to guarantee the ability to correlate a pending transaction with an associated posted transaction
+     * @return status
      */
-    public String getBillerName() {
-        return billerName;
+    public Status getStatus() {
+        return status;
     }
 
-    public void setBillerName(String billerName) {
-        this.billerName = billerName;
+    public void setStatus(Status status) {
+        this.status = status;
     }
 
     /**
-     * BPAY CRN for the transaction (if available)
-     * @return crn
+     * The transaction description as applied by the financial institution
+     * @return description
      */
-    public String getCrn() {
-        return crn;
+    public String getDescription() {
+        return description;
     }
 
-    public void setCrn(String crn) {
-        this.crn = crn;
+    public void setDescription(String description) {
+        this.description = description;
     }
 
     /**
-     * The currency for the transaction amount. AUD assumed if not present
-     * @return currency
+     * The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement
+     * @return postingDateTime
      */
-    public String getCurrency() {
-        return currency;
+    public OffsetDateTime getPostingDateTime() {
+        return postingDateTime;
     }
 
-    public void setCurrency(String currency) {
-        this.currency = currency;
+    public void setPostingDateTime(OffsetDateTime postingDateTime) {
+        this.postingDateTime = postingDateTime;
     }
 
     /**
-     * The transaction description as applied by the financial institution
-     * @return description
+     * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
+     * @return valueDateTime
      */
-    public String getDescription() {
-        return description;
+    public OffsetDateTime getValueDateTime() {
+        return valueDateTime;
     }
 
-    public void setDescription(String description) {
-        this.description = description;
+    public void setValueDateTime(OffsetDateTime valueDateTime) {
+        this.valueDateTime = valueDateTime;
     }
 
     /**
@@ -173,111 +173,111 @@ public void setExecutionDateTime(OffsetDateTime executionDateTime) {
     }
 
     /**
-     * True if extended information is available using the transaction detail end point. False if extended data is not available
-     * @return isDetailAvailable
+     * The value of the transaction. Negative values mean money was outgoing from the account
+     * @return amount
      */
-    public Boolean getIsDetailAvailable() {
-        return isDetailAvailable;
+    public String getAmount() {
+        return amount;
     }
 
-    public void setIsDetailAvailable(Boolean isDetailAvailable) {
-        this.isDetailAvailable = isDetailAvailable;
+    public void setAmount(String amount) {
+        this.amount = amount;
     }
 
     /**
-     * The merchant category code (or MCC) for an outgoing payment to a merchant
-     * @return merchantCategoryCode
+     * The currency for the transaction amount. AUD assumed if not present
+     * @return currency
      */
-    public String getMerchantCategoryCode() {
-        return merchantCategoryCode;
+    public String getCurrency() {
+        return currency;
     }
 
-    public void setMerchantCategoryCode(String merchantCategoryCode) {
-        this.merchantCategoryCode = merchantCategoryCode;
+    public void setCurrency(String currency) {
+        this.currency = currency;
     }
 
     /**
-     * Name of the merchant for an outgoing payment to a merchant
-     * @return merchantName
+     * The reference for the transaction provided by the originating institution. Empty string if no data provided
+     * @return reference
      */
-    public String getMerchantName() {
-        return merchantName;
+    public String getReference() {
+        return reference;
     }
 
-    public void setMerchantName(String merchantName) {
-        this.merchantName = merchantName;
+    public void setReference(String reference) {
+        this.reference = reference;
     }
 
     /**
-     * The time the transaction was posted. This field is Mandatory if the transaction has status POSTED.  This is the time that appears on a standard statement
-     * @return postingDateTime
+     * Name of the merchant for an outgoing payment to a merchant
+     * @return merchantName
      */
-    public OffsetDateTime getPostingDateTime() {
-        return postingDateTime;
+    public String getMerchantName() {
+        return merchantName;
     }
 
-    public void setPostingDateTime(OffsetDateTime postingDateTime) {
-        this.postingDateTime = postingDateTime;
+    public void setMerchantName(String merchantName) {
+        this.merchantName = merchantName;
     }
 
     /**
-     * The reference for the transaction provided by the originating institution. Empty string if no data provided
-     * @return reference
+     * The merchant category code (or MCC) for an outgoing payment to a merchant
+     * @return merchantCategoryCode
      */
-    public String getReference() {
-        return reference;
+    public String getMerchantCategoryCode() {
+        return merchantCategoryCode;
     }
 
-    public void setReference(String reference) {
-        this.reference = reference;
+    public void setMerchantCategoryCode(String merchantCategoryCode) {
+        this.merchantCategoryCode = merchantCategoryCode;
     }
 
     /**
-     * Get status
-     * @return status
+     * BPAY Biller Code for the transaction (if available)
+     * @return billerCode
      */
-    public Status getStatus() {
-        return status;
+    public String getBillerCode() {
+        return billerCode;
     }
 
-    public void setStatus(Status status) {
-        this.status = status;
+    public void setBillerCode(String billerCode) {
+        this.billerCode = billerCode;
     }
 
     /**
-     * A unique ID of the transaction adhering to the standards for ID permanence.  This is mandatory (through hashing if necessary) unless there are specific and justifiable technical reasons why a transaction cannot be uniquely identified for a particular account type
-     * @return transactionId
+     * Name of the BPAY biller for the transaction (if available)
+     * @return billerName
      */
-    public String getTransactionId() {
-        return transactionId;
+    public String getBillerName() {
+        return billerName;
     }
 
-    public void setTransactionId(String transactionId) {
-        this.transactionId = transactionId;
+    public void setBillerName(String billerName) {
+        this.billerName = billerName;
     }
 
     /**
-     * Get type
-     * @return type
+     * BPAY CRN for the transaction (if available)
+     * @return crn
      */
-    public Type getType() {
-        return type;
+    public String getCrn() {
+        return crn;
     }
 
-    public void setType(Type type) {
-        this.type = type;
+    public void setCrn(String crn) {
+        this.crn = crn;
     }
 
     /**
-     * Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit transaction entry
-     * @return valueDateTime
+     * 6 Digit APCA number for the initiating institution
+     * @return apcaNumber
      */
-    public OffsetDateTime getValueDateTime() {
-        return valueDateTime;
+    public String getApcaNumber() {
+        return apcaNumber;
     }
 
-    public void setValueDateTime(OffsetDateTime valueDateTime) {
-        this.valueDateTime = valueDateTime;
+    public void setApcaNumber(String apcaNumber) {
+        this.apcaNumber = apcaNumber;
     }
 
     @Override
@@ -290,69 +290,69 @@ public boolean equals(Object o) {
         }
         BankingTransaction bankingTransaction = (BankingTransaction) o;
         return Objects.equals(this.accountId, bankingTransaction.accountId) &&
+            Objects.equals(this.transactionId, bankingTransaction.transactionId) &&
+            Objects.equals(this.isDetailAvailable, bankingTransaction.isDetailAvailable) &&
+            Objects.equals(this.type, bankingTransaction.type) &&
+            Objects.equals(this.status, bankingTransaction.status) &&
+            Objects.equals(this.description, bankingTransaction.description) &&
+            Objects.equals(this.postingDateTime, bankingTransaction.postingDateTime) &&
+            Objects.equals(this.valueDateTime, bankingTransaction.valueDateTime) &&
+            Objects.equals(this.executionDateTime, bankingTransaction.executionDateTime) &&
             Objects.equals(this.amount, bankingTransaction.amount) &&
-            Objects.equals(this.apcaNumber, bankingTransaction.apcaNumber) &&
+            Objects.equals(this.currency, bankingTransaction.currency) &&
+            Objects.equals(this.reference, bankingTransaction.reference) &&
+            Objects.equals(this.merchantName, bankingTransaction.merchantName) &&
+            Objects.equals(this.merchantCategoryCode, bankingTransaction.merchantCategoryCode) &&
             Objects.equals(this.billerCode, bankingTransaction.billerCode) &&
             Objects.equals(this.billerName, bankingTransaction.billerName) &&
             Objects.equals(this.crn, bankingTransaction.crn) &&
-            Objects.equals(this.currency, bankingTransaction.currency) &&
-            Objects.equals(this.description, bankingTransaction.description) &&
-            Objects.equals(this.executionDateTime, bankingTransaction.executionDateTime) &&
-            Objects.equals(this.isDetailAvailable, bankingTransaction.isDetailAvailable) &&
-            Objects.equals(this.merchantCategoryCode, bankingTransaction.merchantCategoryCode) &&
-            Objects.equals(this.merchantName, bankingTransaction.merchantName) &&
-            Objects.equals(this.postingDateTime, bankingTransaction.postingDateTime) &&
-            Objects.equals(this.reference, bankingTransaction.reference) &&
-            Objects.equals(this.status, bankingTransaction.status) &&
-            Objects.equals(this.transactionId, bankingTransaction.transactionId) &&
-            Objects.equals(this.type, bankingTransaction.type) &&
-            Objects.equals(this.valueDateTime, bankingTransaction.valueDateTime);
+            Objects.equals(this.apcaNumber, bankingTransaction.apcaNumber);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             accountId,
+            transactionId,
+            isDetailAvailable,
+            type,
+            status,
+            description,
+            postingDateTime,
+            valueDateTime,
+            executionDateTime,
             amount,
-            apcaNumber,
+            currency,
+            reference,
+            merchantName,
+            merchantCategoryCode,
             billerCode,
             billerName,
             crn,
-            currency,
-            description,
-            executionDateTime,
-            isDetailAvailable,
-            merchantCategoryCode,
-            merchantName,
-            postingDateTime,
-            reference,
-            status,
-            transactionId,
-            type,
-            valueDateTime);
+            apcaNumber);
     }
 
     @Override
     public String toString() {
         return "class BankingTransaction {\n" +
             "   accountId: " + toIndentedString(accountId) + "\n" + 
+            "   transactionId: " + toIndentedString(transactionId) + "\n" + 
+            "   isDetailAvailable: " + toIndentedString(isDetailAvailable) + "\n" + 
+            "   type: " + toIndentedString(type) + "\n" + 
+            "   status: " + toIndentedString(status) + "\n" + 
+            "   description: " + toIndentedString(description) + "\n" + 
+            "   postingDateTime: " + toIndentedString(postingDateTime) + "\n" + 
+            "   valueDateTime: " + toIndentedString(valueDateTime) + "\n" + 
+            "   executionDateTime: " + toIndentedString(executionDateTime) + "\n" + 
             "   amount: " + toIndentedString(amount) + "\n" + 
-            "   apcaNumber: " + toIndentedString(apcaNumber) + "\n" + 
+            "   currency: " + toIndentedString(currency) + "\n" + 
+            "   reference: " + toIndentedString(reference) + "\n" + 
+            "   merchantName: " + toIndentedString(merchantName) + "\n" + 
+            "   merchantCategoryCode: " + toIndentedString(merchantCategoryCode) + "\n" + 
             "   billerCode: " + toIndentedString(billerCode) + "\n" + 
             "   billerName: " + toIndentedString(billerName) + "\n" + 
             "   crn: " + toIndentedString(crn) + "\n" + 
-            "   currency: " + toIndentedString(currency) + "\n" + 
-            "   description: " + toIndentedString(description) + "\n" + 
-            "   executionDateTime: " + toIndentedString(executionDateTime) + "\n" + 
-            "   isDetailAvailable: " + toIndentedString(isDetailAvailable) + "\n" + 
-            "   merchantCategoryCode: " + toIndentedString(merchantCategoryCode) + "\n" + 
-            "   merchantName: " + toIndentedString(merchantName) + "\n" + 
-            "   postingDateTime: " + toIndentedString(postingDateTime) + "\n" + 
-            "   reference: " + toIndentedString(reference) + "\n" + 
-            "   status: " + toIndentedString(status) + "\n" + 
-            "   transactionId: " + toIndentedString(transactionId) + "\n" + 
-            "   type: " + toIndentedString(type) + "\n" + 
-            "   valueDateTime: " + toIndentedString(valueDateTime) + "\n" + 
+            "   apcaNumber: " + toIndentedString(apcaNumber) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetail.java
index d9da055..1941f84 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetail.java
@@ -49,23 +49,23 @@ public int hashCode() {
     public String toString() {
         return "class BankingTransactionDetail {\n" +
             "   accountId: " + toIndentedString(getAccountId()) + "\n" + 
+            "   transactionId: " + toIndentedString(getTransactionId()) + "\n" + 
+            "   isDetailAvailable: " + toIndentedString(getIsDetailAvailable()) + "\n" + 
+            "   type: " + toIndentedString(getType()) + "\n" + 
+            "   status: " + toIndentedString(getStatus()) + "\n" + 
+            "   description: " + toIndentedString(getDescription()) + "\n" + 
+            "   postingDateTime: " + toIndentedString(getPostingDateTime()) + "\n" + 
+            "   valueDateTime: " + toIndentedString(getValueDateTime()) + "\n" + 
+            "   executionDateTime: " + toIndentedString(getExecutionDateTime()) + "\n" + 
             "   amount: " + toIndentedString(getAmount()) + "\n" + 
-            "   apcaNumber: " + toIndentedString(getApcaNumber()) + "\n" + 
+            "   currency: " + toIndentedString(getCurrency()) + "\n" + 
+            "   reference: " + toIndentedString(getReference()) + "\n" + 
+            "   merchantName: " + toIndentedString(getMerchantName()) + "\n" + 
+            "   merchantCategoryCode: " + toIndentedString(getMerchantCategoryCode()) + "\n" + 
             "   billerCode: " + toIndentedString(getBillerCode()) + "\n" + 
             "   billerName: " + toIndentedString(getBillerName()) + "\n" + 
             "   crn: " + toIndentedString(getCrn()) + "\n" + 
-            "   currency: " + toIndentedString(getCurrency()) + "\n" + 
-            "   description: " + toIndentedString(getDescription()) + "\n" + 
-            "   executionDateTime: " + toIndentedString(getExecutionDateTime()) + "\n" + 
-            "   isDetailAvailable: " + toIndentedString(getIsDetailAvailable()) + "\n" + 
-            "   merchantCategoryCode: " + toIndentedString(getMerchantCategoryCode()) + "\n" + 
-            "   merchantName: " + toIndentedString(getMerchantName()) + "\n" + 
-            "   postingDateTime: " + toIndentedString(getPostingDateTime()) + "\n" + 
-            "   reference: " + toIndentedString(getReference()) + "\n" + 
-            "   status: " + toIndentedString(getStatus()) + "\n" + 
-            "   transactionId: " + toIndentedString(getTransactionId()) + "\n" + 
-            "   type: " + toIndentedString(getType()) + "\n" + 
-            "   valueDateTime: " + toIndentedString(getValueDateTime()) + "\n" + 
+            "   apcaNumber: " + toIndentedString(getApcaNumber()) + "\n" + 
             "   extendedData: " + toIndentedString(extendedData) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedData.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedData.java
index 95dd8eb..9529049 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedData.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedData.java
@@ -12,7 +12,7 @@
 public class BankingTransactionDetailExtendedData {
 
     public enum ExtensionUType {
-        x2p101Payload
+        X2P101PAYLOAD
     }
 
     public enum Service {
@@ -36,20 +36,20 @@ public String toString() {
 
     private String payer;
 
-    private Service service;
-
     private BankingTransactionDetailExtendedDataX2p101Payload x2p101Payload;
 
+    private Service service;
+
     /**
-     * Get extensionUType
-     * @return extensionUType
+     * Label of the originating payer. Mandatory for inbound payment
+     * @return payer
      */
-    public ExtensionUType getExtensionUType() {
-        return extensionUType;
+    public String getPayer() {
+        return payer;
     }
 
-    public void setExtensionUType(ExtensionUType extensionUType) {
-        this.extensionUType = extensionUType;
+    public void setPayer(String payer) {
+        this.payer = payer;
     }
 
     /**
@@ -65,27 +65,15 @@ public void setPayee(String payee) {
     }
 
     /**
-     * Label of the originating payer. Mandatory for inbound payment
-     * @return payer
-     */
-    public String getPayer() {
-        return payer;
-    }
-
-    public void setPayer(String payer) {
-        this.payer = payer;
-    }
-
-    /**
-     * Get service
-     * @return service
+     * Optional extended data provided specific to transaction originated via NPP
+     * @return extensionUType
      */
-    public Service getService() {
-        return service;
+    public ExtensionUType getExtensionUType() {
+        return extensionUType;
     }
 
-    public void setService(Service service) {
-        this.service = service;
+    public void setExtensionUType(ExtensionUType extensionUType) {
+        this.extensionUType = extensionUType;
     }
 
     /**
@@ -100,6 +88,18 @@ public void setX2p101Payload(BankingTransactionDetailExtendedDataX2p101Payload x
         this.x2p101Payload = x2p101Payload;
     }
 
+    /**
+     * Identifier of the applicable overlay service. Valid values are: X2P1.01
+     * @return service
+     */
+    public Service getService() {
+        return service;
+    }
+
+    public void setService(Service service) {
+        this.service = service;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -109,31 +109,31 @@ public boolean equals(Object o) {
             return false;
         }
         BankingTransactionDetailExtendedData bankingTransactionDetailExtendedData = (BankingTransactionDetailExtendedData) o;
-        return Objects.equals(this.extensionUType, bankingTransactionDetailExtendedData.extensionUType) &&
+        return Objects.equals(this.payer, bankingTransactionDetailExtendedData.payer) &&
             Objects.equals(this.payee, bankingTransactionDetailExtendedData.payee) &&
-            Objects.equals(this.payer, bankingTransactionDetailExtendedData.payer) &&
-            Objects.equals(this.service, bankingTransactionDetailExtendedData.service) &&
-            Objects.equals(this.x2p101Payload, bankingTransactionDetailExtendedData.x2p101Payload);
+            Objects.equals(this.extensionUType, bankingTransactionDetailExtendedData.extensionUType) &&
+            Objects.equals(this.x2p101Payload, bankingTransactionDetailExtendedData.x2p101Payload) &&
+            Objects.equals(this.service, bankingTransactionDetailExtendedData.service);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            extensionUType,
-            payee,
             payer,
-            service,
-            x2p101Payload);
+            payee,
+            extensionUType,
+            x2p101Payload,
+            service);
     }
 
     @Override
     public String toString() {
         return "class BankingTransactionDetailExtendedData {\n" +
-            "   extensionUType: " + toIndentedString(extensionUType) + "\n" + 
-            "   payee: " + toIndentedString(payee) + "\n" + 
-            "   payer: " + toIndentedString(payer) + "\n" + 
-            "   service: " + toIndentedString(service) + "\n" + 
-            "   x2p101Payload: " + toIndentedString(x2p101Payload) + "\n" + 
+            "   payer: " + toIndentedString(payer) + "\n" +
+            "   payee: " + toIndentedString(payee) + "\n" +
+            "   extensionUType: " + toIndentedString(extensionUType) + "\n" +
+            "   x2p101Payload: " + toIndentedString(x2p101Payload) + "\n" +
+            "   service: " + toIndentedString(service) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedDataX2p101Payload.java b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedDataX2p101Payload.java
index 94e96b9..ac228d8 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedDataX2p101Payload.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/BankingTransactionDetailExtendedDataX2p101Payload.java
@@ -11,23 +11,11 @@
 
 public class BankingTransactionDetailExtendedDataX2p101Payload {
 
-    private String endToEndId;
-
     private String extendedDescription;
 
-    private String purposeCode;
-
-    /**
-     * An end to end ID for the payment created at initiation
-     * @return endToEndId
-     */
-    public String getEndToEndId() {
-        return endToEndId;
-    }
+    private String endToEndId;
 
-    public void setEndToEndId(String endToEndId) {
-        this.endToEndId = endToEndId;
-    }
+    private String purposeCode;
 
     /**
      * An extended string description. Only present if specified by the extensionUType field
@@ -41,6 +29,18 @@ public void setExtendedDescription(String extendedDescription) {
         this.extendedDescription = extendedDescription;
     }
 
+    /**
+     * An end to end ID for the payment created at initiation
+     * @return endToEndId
+     */
+    public String getEndToEndId() {
+        return endToEndId;
+    }
+
+    public void setEndToEndId(String endToEndId) {
+        this.endToEndId = endToEndId;
+    }
+
     /**
      * Purpose of the payment.  Format is defined by NPP standards for the x2p1.01 overlay service
      * @return purposeCode
@@ -62,24 +62,24 @@ public boolean equals(Object o) {
             return false;
         }
         BankingTransactionDetailExtendedDataX2p101Payload bankingTransactionDetailExtendedDataX2p101Payload = (BankingTransactionDetailExtendedDataX2p101Payload) o;
-        return Objects.equals(this.endToEndId, bankingTransactionDetailExtendedDataX2p101Payload.endToEndId) &&
-            Objects.equals(this.extendedDescription, bankingTransactionDetailExtendedDataX2p101Payload.extendedDescription) &&
+        return Objects.equals(this.extendedDescription, bankingTransactionDetailExtendedDataX2p101Payload.extendedDescription) &&
+            Objects.equals(this.endToEndId, bankingTransactionDetailExtendedDataX2p101Payload.endToEndId) &&
             Objects.equals(this.purposeCode, bankingTransactionDetailExtendedDataX2p101Payload.purposeCode);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            endToEndId,
             extendedDescription,
+            endToEndId,
             purposeCode);
     }
 
     @Override
     public String toString() {
         return "class BankingTransactionDetailExtendedDataX2p101Payload {\n" +
-            "   endToEndId: " + toIndentedString(endToEndId) + "\n" + 
             "   extendedDescription: " + toIndentedString(extendedDescription) + "\n" + 
+            "   endToEndId: " + toIndentedString(endToEndId) + "\n" + 
             "   purposeCode: " + toIndentedString(purposeCode) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonEmailAddress.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonEmailAddress.java
index beaf05b..48002f2 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonEmailAddress.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonEmailAddress.java
@@ -12,29 +12,17 @@
 public class CommonEmailAddress {
 
     public enum Purpose {
+        WORK,
         HOME,
         OTHER,
-        UNSPECIFIED,
-        WORK
+        UNSPECIFIED
     }
 
-    private String address;
-
     private Boolean isPreferred;
 
     private Purpose purpose;
 
-    /**
-     * A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)
-     * @return address
-     */
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
+    private String address;
 
     /**
      * May be true for one and only one email record in the collection. Denotes the default email address
@@ -49,7 +37,7 @@ public void setIsPreferred(Boolean isPreferred) {
     }
 
     /**
-     * Get purpose
+     * The purpose for the email, as specified by the customer (Enumeration)
      * @return purpose
      */
     public Purpose getPurpose() {
@@ -60,6 +48,18 @@ public void setPurpose(Purpose purpose) {
         this.purpose = purpose;
     }
 
+    /**
+     * A correctly formatted email address, as defined by the addr_spec format in [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt)
+     * @return address
+     */
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -69,25 +69,25 @@ public boolean equals(Object o) {
             return false;
         }
         CommonEmailAddress commonEmailAddress = (CommonEmailAddress) o;
-        return Objects.equals(this.address, commonEmailAddress.address) &&
-            Objects.equals(this.isPreferred, commonEmailAddress.isPreferred) &&
-            Objects.equals(this.purpose, commonEmailAddress.purpose);
+        return Objects.equals(this.isPreferred, commonEmailAddress.isPreferred) &&
+            Objects.equals(this.purpose, commonEmailAddress.purpose) &&
+            Objects.equals(this.address, commonEmailAddress.address);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            address,
             isPreferred,
-            purpose);
+            purpose,
+            address);
     }
 
     @Override
     public String toString() {
         return "class CommonEmailAddress {\n" +
-            "   address: " + toIndentedString(address) + "\n" + 
             "   isPreferred: " + toIndentedString(isPreferred) + "\n" + 
             "   purpose: " + toIndentedString(purpose) + "\n" + 
+            "   address: " + toIndentedString(address) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisation.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisation.java
index 443df42..8965b33 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisation.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisation.java
@@ -14,17 +14,15 @@
 public class CommonOrganisation {
 
     public enum OrganisationType {
+        SOLE_TRADER,
         COMPANY,
-        GOVERNMENT_ENTITY,
-        OTHER,
         PARTNERSHIP,
-        SOLE_TRADER,
-        TRUST
+        TRUST,
+        GOVERNMENT_ENTITY,
+        OTHER
     }
 
-    private String abn;
-
-    private String acn;
+    private OffsetDateTime lastUpdateTime;
 
     private String agentFirstName;
 
@@ -34,44 +32,34 @@
 
     private String businessName;
 
-    private LocalDate establishmentDate;
+    private String legalName;
 
-    private String industryCode;
+    private String shortName;
 
-    private Boolean isACNCRegistered;
+    private String abn;
 
-    private OffsetDateTime lastUpdateTime;
+    private String acn;
 
-    private String legalName;
+    private Boolean isACNCRegistered;
+
+    private String industryCode;
 
     private OrganisationType organisationType;
 
     private String registeredCountry;
 
-    private String shortName;
-
-    /**
-     * Australian Business Number for the organisation
-     * @return abn
-     */
-    public String getAbn() {
-        return abn;
-    }
-
-    public void setAbn(String abn) {
-        this.abn = abn;
-    }
+    private LocalDate establishmentDate;
 
     /**
-     * Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type
-     * @return acn
+     * The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data
+     * @return lastUpdateTime
      */
-    public String getAcn() {
-        return acn;
+    public OffsetDateTime getLastUpdateTime() {
+        return lastUpdateTime;
     }
 
-    public void setAcn(String acn) {
-        this.acn = acn;
+    public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
+        this.lastUpdateTime = lastUpdateTime;
     }
 
     /**
@@ -99,7 +87,7 @@ public void setAgentLastName(String agentLastName) {
     }
 
     /**
-     * The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display.  Default to “Unspecified” if the role is not known
+     * The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known
      * @return agentRole
      */
     public String getAgentRole() {
@@ -123,67 +111,79 @@ public void setBusinessName(String businessName) {
     }
 
     /**
-     * The date the organisation described was established
-     * @return establishmentDate
+     * Legal name, if different to the business name
+     * @return legalName
      */
-    public LocalDate getEstablishmentDate() {
-        return establishmentDate;
+    public String getLegalName() {
+        return legalName;
     }
 
-    public void setEstablishmentDate(LocalDate establishmentDate) {
-        this.establishmentDate = establishmentDate;
+    public void setLegalName(String legalName) {
+        this.legalName = legalName;
     }
 
     /**
-     * [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.
-     * @return industryCode
+     * Short name used for communication, if different to the business name
+     * @return shortName
      */
-    public String getIndustryCode() {
-        return industryCode;
+    public String getShortName() {
+        return shortName;
     }
 
-    public void setIndustryCode(String industryCode) {
-        this.industryCode = industryCode;
+    public void setShortName(String shortName) {
+        this.shortName = shortName;
     }
 
     /**
-     * True if registered with the ACNC.  False if not. Absent or null if not confirmed.
-     * @return isACNCRegistered
+     * Australian Business Number for the organisation
+     * @return abn
      */
-    public Boolean getIsACNCRegistered() {
-        return isACNCRegistered;
+    public String getAbn() {
+        return abn;
     }
 
-    public void setIsACNCRegistered(Boolean isACNCRegistered) {
-        this.isACNCRegistered = isACNCRegistered;
+    public void setAbn(String abn) {
+        this.abn = abn;
     }
 
     /**
-     * The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data
-     * @return lastUpdateTime
+     * Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type
+     * @return acn
      */
-    public OffsetDateTime getLastUpdateTime() {
-        return lastUpdateTime;
+    public String getAcn() {
+        return acn;
     }
 
-    public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
-        this.lastUpdateTime = lastUpdateTime;
+    public void setAcn(String acn) {
+        this.acn = acn;
     }
 
     /**
-     * Legal name, if different to the business name
-     * @return legalName
+     * True if registered with the ACNC.  False if not. Absent or null if not confirmed.
+     * @return isACNCRegistered
      */
-    public String getLegalName() {
-        return legalName;
+    public Boolean getIsACNCRegistered() {
+        return isACNCRegistered;
     }
 
-    public void setLegalName(String legalName) {
-        this.legalName = legalName;
+    public void setIsACNCRegistered(Boolean isACNCRegistered) {
+        this.isACNCRegistered = isACNCRegistered;
+    }
+
+    /**
+     * [ANZSIC (2006)](http://www.abs.gov.au/anzsic) code for the organisation.
+     * @return industryCode
+     */
+    public String getIndustryCode() {
+        return industryCode;
+    }
+
+    public void setIndustryCode(String industryCode) {
+        this.industryCode = industryCode;
     }
 
     /**
-     * Get organisationType
+     * Legal organisation type
      * @return organisationType
      */
     public OrganisationType getOrganisationType() {
@@ -207,15 +207,15 @@ public void setRegisteredCountry(String registeredCountry) {
     }
 
     /**
-     * Short name used for communication, if  different to the business name
-     * @return shortName
+     * The date the organisation described was established
+     * @return establishmentDate
      */
-    public String getShortName() {
-        return shortName;
+    public LocalDate getEstablishmentDate() {
+        return establishmentDate;
     }
 
-    public void setShortName(String shortName) {
-        this.shortName = shortName;
+    public void setEstablishmentDate(LocalDate establishmentDate) {
+        this.establishmentDate = establishmentDate;
     }
 
     @Override
@@ -227,58 +227,58 @@ public boolean equals(Object o) {
             return false;
         }
         CommonOrganisation commonOrganisation = (CommonOrganisation) o;
-        return Objects.equals(this.abn, commonOrganisation.abn) &&
-            Objects.equals(this.acn, commonOrganisation.acn) &&
+        return Objects.equals(this.lastUpdateTime, commonOrganisation.lastUpdateTime) &&
             Objects.equals(this.agentFirstName, commonOrganisation.agentFirstName) &&
             Objects.equals(this.agentLastName, commonOrganisation.agentLastName) &&
             Objects.equals(this.agentRole, commonOrganisation.agentRole) &&
             Objects.equals(this.businessName, commonOrganisation.businessName) &&
-            Objects.equals(this.establishmentDate, commonOrganisation.establishmentDate) &&
-            Objects.equals(this.industryCode, commonOrganisation.industryCode) &&
-            Objects.equals(this.isACNCRegistered, commonOrganisation.isACNCRegistered) &&
-            Objects.equals(this.lastUpdateTime, commonOrganisation.lastUpdateTime) &&
             Objects.equals(this.legalName, commonOrganisation.legalName) &&
+            Objects.equals(this.shortName, commonOrganisation.shortName) &&
+            Objects.equals(this.abn, commonOrganisation.abn) &&
+            Objects.equals(this.acn, commonOrganisation.acn) &&
+            Objects.equals(this.isACNCRegistered, commonOrganisation.isACNCRegistered) &&
+            Objects.equals(this.industryCode, commonOrganisation.industryCode) &&
             Objects.equals(this.organisationType, commonOrganisation.organisationType) &&
             Objects.equals(this.registeredCountry, commonOrganisation.registeredCountry) &&
-            Objects.equals(this.shortName, commonOrganisation.shortName);
+            Objects.equals(this.establishmentDate, commonOrganisation.establishmentDate);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            abn,
-            acn,
+            lastUpdateTime,
             agentFirstName,
             agentLastName,
             agentRole,
             businessName,
-            establishmentDate,
-            industryCode,
-            isACNCRegistered,
-            lastUpdateTime,
             legalName,
+            shortName,
+            abn,
+            acn,
+            isACNCRegistered,
+            industryCode,
             organisationType,
             registeredCountry,
-            shortName);
+            establishmentDate);
     }
 
     @Override
     public String toString() {
         return "class CommonOrganisation {\n" +
-            "   abn: " + toIndentedString(abn) + "\n" + 
-            "   acn: " + toIndentedString(acn) + "\n" + 
+            "   lastUpdateTime: " + toIndentedString(lastUpdateTime) + "\n" + 
             "   agentFirstName: " + toIndentedString(agentFirstName) + "\n" + 
             "   agentLastName: " + toIndentedString(agentLastName) + "\n" + 
             "   agentRole: " + toIndentedString(agentRole) + "\n" + 
             "   businessName: " + toIndentedString(businessName) + "\n" + 
-            "   establishmentDate: " + toIndentedString(establishmentDate) + "\n" + 
-            "   industryCode: " + toIndentedString(industryCode) + "\n" + 
-            "   isACNCRegistered: " + toIndentedString(isACNCRegistered) + "\n" + 
-            "   lastUpdateTime: " + toIndentedString(lastUpdateTime) + "\n" + 
             "   legalName: " + toIndentedString(legalName) + "\n" + 
+            "   shortName: " + toIndentedString(shortName) + "\n" + 
+            "   abn: " + toIndentedString(abn) + "\n" + 
+            "   acn: " + toIndentedString(acn) + "\n" + 
+            "   isACNCRegistered: " + toIndentedString(isACNCRegistered) + "\n" + 
+            "   industryCode: " + toIndentedString(industryCode) + "\n" + 
             "   organisationType: " + toIndentedString(organisationType) + "\n" + 
             "   registeredCountry: " + toIndentedString(registeredCountry) + "\n" + 
-            "   shortName: " + toIndentedString(shortName) + "\n" + 
+            "   establishmentDate: " + toIndentedString(establishmentDate) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisationDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisationDetail.java
index 81f0956..1b7bbf8 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisationDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonOrganisationDetail.java
@@ -49,20 +49,20 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class CommonOrganisationDetail {\n" +
-            "   abn: " + toIndentedString(getAbn()) + "\n" + 
-            "   acn: " + toIndentedString(getAcn()) + "\n" + 
+            "   lastUpdateTime: " + toIndentedString(getLastUpdateTime()) + "\n" + 
             "   agentFirstName: " + toIndentedString(getAgentFirstName()) + "\n" + 
             "   agentLastName: " + toIndentedString(getAgentLastName()) + "\n" + 
             "   agentRole: " + toIndentedString(getAgentRole()) + "\n" + 
             "   businessName: " + toIndentedString(getBusinessName()) + "\n" + 
-            "   establishmentDate: " + toIndentedString(getEstablishmentDate()) + "\n" + 
-            "   industryCode: " + toIndentedString(getIndustryCode()) + "\n" + 
-            "   isACNCRegistered: " + toIndentedString(getIsACNCRegistered()) + "\n" + 
-            "   lastUpdateTime: " + toIndentedString(getLastUpdateTime()) + "\n" + 
             "   legalName: " + toIndentedString(getLegalName()) + "\n" + 
+            "   shortName: " + toIndentedString(getShortName()) + "\n" + 
+            "   abn: " + toIndentedString(getAbn()) + "\n" + 
+            "   acn: " + toIndentedString(getAcn()) + "\n" + 
+            "   isACNCRegistered: " + toIndentedString(getIsACNCRegistered()) + "\n" + 
+            "   industryCode: " + toIndentedString(getIndustryCode()) + "\n" + 
             "   organisationType: " + toIndentedString(getOrganisationType()) + "\n" + 
             "   registeredCountry: " + toIndentedString(getRegisteredCountry()) + "\n" + 
-            "   shortName: " + toIndentedString(getShortName()) + "\n" + 
+            "   establishmentDate: " + toIndentedString(getEstablishmentDate()) + "\n" + 
             "   physicalAddresses: " + toIndentedString(physicalAddresses) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPAFAddress.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPAFAddress.java
index 21b83c5..daf7f06 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPAFAddress.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPAFAddress.java
@@ -13,96 +13,108 @@
  */
 public class CommonPAFAddress {
 
-    private String buildingName1;
+    private String dpid;
 
-    private String buildingName2;
+    private Integer thoroughfareNumber1;
 
-    private String dpid;
+    private String thoroughfareNumber1Suffix;
 
-    private String flatUnitNumber;
+    private Integer thoroughfareNumber2;
+
+    private String thoroughfareNumber2Suffix;
 
     private String flatUnitType;
 
-    private String floorLevelNumber;
+    private String flatUnitNumber;
 
     private String floorLevelType;
 
-    private String localityName;
+    private String floorLevelNumber;
 
     private String lotNumber;
 
-    private Integer postalDeliveryNumber;
+    private String buildingName1;
 
-    private String postalDeliveryNumberPrefix;
+    private String buildingName2;
 
-    private String postalDeliveryNumberSuffix;
+    private String streetName;
 
-    private String postalDeliveryType;
+    private String streetType;
 
-    private String postcode;
+    private String streetSuffix;
 
-    private String state;
+    private String postalDeliveryType;
 
-    private String streetName;
+    private Integer postalDeliveryNumber;
 
-    private String streetSuffix;
+    private String postalDeliveryNumberPrefix;
 
-    private String streetType;
+    private String postalDeliveryNumberSuffix;
 
-    private Integer thoroughfareNumber1;
+    private String localityName;
 
-    private String thoroughfareNumber1Suffix;
+    private String postcode;
 
-    private Integer thoroughfareNumber2;
+    private String state;
 
-    private String thoroughfareNumber2Suffix;
+    /**
+     * Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
+     * @return dpid
+     */
+    public String getDpid() {
+        return dpid;
+    }
+
+    public void setDpid(String dpid) {
+        this.dpid = dpid;
+    }
 
     /**
-     * Building/Property name 1
-     * @return buildingName1
+     * Thoroughfare number for a property (first number in a property ranged address)
+     * @return thoroughfareNumber1
      */
-    public String getBuildingName1() {
-        return buildingName1;
+    public Integer getThoroughfareNumber1() {
+        return thoroughfareNumber1;
     }
 
-    public void setBuildingName1(String buildingName1) {
-        this.buildingName1 = buildingName1;
+    public void setThoroughfareNumber1(Integer thoroughfareNumber1) {
+        this.thoroughfareNumber1 = thoroughfareNumber1;
     }
 
     /**
-     * Building/Property name 2
-     * @return buildingName2
+     * Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
+     * @return thoroughfareNumber1Suffix
      */
-    public String getBuildingName2() {
-        return buildingName2;
+    public String getThoroughfareNumber1Suffix() {
+        return thoroughfareNumber1Suffix;
     }
 
-    public void setBuildingName2(String buildingName2) {
-        this.buildingName2 = buildingName2;
+    public void setThoroughfareNumber1Suffix(String thoroughfareNumber1Suffix) {
+        this.thoroughfareNumber1Suffix = thoroughfareNumber1Suffix;
     }
 
     /**
-     * Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
-     * @return dpid
+     * Second thoroughfare number (only used if the property has a ranged address eg 23-25)
+     * @return thoroughfareNumber2
      */
-    public String getDpid() {
-        return dpid;
+    public Integer getThoroughfareNumber2() {
+        return thoroughfareNumber2;
     }
 
-    public void setDpid(String dpid) {
-        this.dpid = dpid;
+    public void setThoroughfareNumber2(Integer thoroughfareNumber2) {
+        this.thoroughfareNumber2 = thoroughfareNumber2;
     }
 
     /**
-     * Unit number (including suffix, if applicable)
-     * @return flatUnitNumber
+     * Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
+     * @return thoroughfareNumber2Suffix
      */
-    public String getFlatUnitNumber() {
-        return flatUnitNumber;
+    public String getThoroughfareNumber2Suffix() {
+        return thoroughfareNumber2Suffix;
     }
 
-    public void setFlatUnitNumber(String flatUnitNumber) {
-        this.flatUnitNumber = flatUnitNumber;
+    public void setThoroughfareNumber2Suffix(String thoroughfareNumber2Suffix) {
+        this.thoroughfareNumber2Suffix = thoroughfareNumber2Suffix;
     }
 
     /**
@@ -118,15 +130,15 @@ public void setFlatUnitType(String flatUnitType) {
     }
 
     /**
-     * Floor or level number (including alpha characters)
-     * @return floorLevelNumber
+     * Unit number (including suffix, if applicable)
+     * @return flatUnitNumber
      */
-    public String getFloorLevelNumber() {
-        return floorLevelNumber;
+    public String getFlatUnitNumber() {
+        return flatUnitNumber;
     }
 
-    public void setFloorLevelNumber(String floorLevelNumber) {
-        this.floorLevelNumber = floorLevelNumber;
+    public void setFlatUnitNumber(String flatUnitNumber) {
+        this.flatUnitNumber = flatUnitNumber;
     }
 
     /**
@@ -142,15 +154,15 @@ public void setFloorLevelType(String floorLevelType) {
     }
 
     /**
-     * Full name of locality
-     * @return localityName
+     * Floor or level number (including alpha characters)
+     * @return floorLevelNumber
      */
-    public String getLocalityName() {
-        return localityName;
+    public String getFloorLevelNumber() {
+        return floorLevelNumber;
     }
 
-    public void setLocalityName(String localityName) {
-        this.localityName = localityName;
+    public void setFloorLevelNumber(String floorLevelNumber) {
+        this.floorLevelNumber = floorLevelNumber;
     }
 
     /**
@@ -166,159 +178,147 @@ public void setLotNumber(String lotNumber) {
     }
 
     /**
-     * Postal delivery number if the address is a postal delivery type
-     * @return postalDeliveryNumber
-     */
-    public Integer getPostalDeliveryNumber() {
-        return postalDeliveryNumber;
-    }
-
-    public void setPostalDeliveryNumber(Integer postalDeliveryNumber) {
-        this.postalDeliveryNumber = postalDeliveryNumber;
-    }
-
-    /**
-     * Postal delivery number prefix related to the postal delivery number
-     * @return postalDeliveryNumberPrefix
+     * Building/Property name 1
+     * @return buildingName1
      */
-    public String getPostalDeliveryNumberPrefix() {
-        return postalDeliveryNumberPrefix;
+    public String getBuildingName1() {
+        return buildingName1;
     }
 
-    public void setPostalDeliveryNumberPrefix(String postalDeliveryNumberPrefix) {
-        this.postalDeliveryNumberPrefix = postalDeliveryNumberPrefix;
+    public void setBuildingName1(String buildingName1) {
+        this.buildingName1 = buildingName1;
     }
 
     /**
-     * Postal delivery number suffix related to the postal delivery number
-     * @return postalDeliveryNumberSuffix
+     * Building/Property name 2
+     * @return buildingName2
      */
-    public String getPostalDeliveryNumberSuffix() {
-        return postalDeliveryNumberSuffix;
+    public String getBuildingName2() {
+        return buildingName2;
     }
 
-    public void setPostalDeliveryNumberSuffix(String postalDeliveryNumberSuffix) {
-        this.postalDeliveryNumberSuffix = postalDeliveryNumberSuffix;
+    public void setBuildingName2(String buildingName2) {
+        this.buildingName2 = buildingName2;
     }
 
     /**
-     * Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
-     * @return postalDeliveryType
+     * The name of the street
+     * @return streetName
      */
-    public String getPostalDeliveryType() {
-        return postalDeliveryType;
+    public String getStreetName() {
+        return streetName;
     }
 
-    public void setPostalDeliveryType(String postalDeliveryType) {
-        this.postalDeliveryType = postalDeliveryType;
+    public void setStreetName(String streetName) {
+        this.streetName = streetName;
     }
 
     /**
-     * Postcode for the locality
-     * @return postcode
+     * The street type. Valid enumeration defined by Australia Post PAF code file
+     * @return streetType
      */
-    public String getPostcode() {
-        return postcode;
+    public String getStreetType() {
+        return streetType;
     }
 
-    public void setPostcode(String postcode) {
-        this.postcode = postcode;
+    public void setStreetType(String streetType) {
+        this.streetType = streetType;
     }
 
     /**
-     * State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
-     * @return state
+     * The street type suffix. Valid enumeration defined by Australia Post PAF code file
+     * @return streetSuffix
      */
-    public String getState() {
-        return state;
+    public String getStreetSuffix() {
+        return streetSuffix;
     }
 
-    public void setState(String state) {
-        this.state = state;
+    public void setStreetSuffix(String streetSuffix) {
+        this.streetSuffix = streetSuffix;
     }
 
     /**
-     * The name of the street
-     * @return streetName
+     * Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
+     * @return postalDeliveryType
      */
-    public String getStreetName() {
-        return streetName;
+    public String getPostalDeliveryType() {
+        return postalDeliveryType;
     }
 
-    public void setStreetName(String streetName) {
-        this.streetName = streetName;
+    public void setPostalDeliveryType(String postalDeliveryType) {
+        this.postalDeliveryType = postalDeliveryType;
     }
 
     /**
-     * The street type suffix. Valid enumeration defined by Australia Post PAF code file
-     * @return streetSuffix
+     * Postal delivery number if the address is a postal delivery type
+     * @return postalDeliveryNumber
      */
-    public String getStreetSuffix() {
-        return streetSuffix;
+    public Integer getPostalDeliveryNumber() {
+        return postalDeliveryNumber;
     }
 
-    public void setStreetSuffix(String streetSuffix) {
-        this.streetSuffix = streetSuffix;
+    public void setPostalDeliveryNumber(Integer postalDeliveryNumber) {
+        this.postalDeliveryNumber = postalDeliveryNumber;
     }
 
     /**
-     * The street type. Valid enumeration defined by Australia Post PAF code file
-     * @return streetType
+     * Postal delivery number prefix related to the postal delivery number
+     * @return postalDeliveryNumberPrefix
      */
-    public String getStreetType() {
-        return streetType;
+    public String getPostalDeliveryNumberPrefix() {
+        return postalDeliveryNumberPrefix;
     }
 
-    public void setStreetType(String streetType) {
-        this.streetType = streetType;
+    public void setPostalDeliveryNumberPrefix(String postalDeliveryNumberPrefix) {
+        this.postalDeliveryNumberPrefix = postalDeliveryNumberPrefix;
     }
 
     /**
-     * Thoroughfare number for a property (first number in a property ranged address)
-     * @return thoroughfareNumber1
+     * Postal delivery number suffix related to the postal delivery number
+     * @return postalDeliveryNumberSuffix
      */
-    public Integer getThoroughfareNumber1() {
-        return thoroughfareNumber1;
+    public String getPostalDeliveryNumberSuffix() {
+        return postalDeliveryNumberSuffix;
     }
 
-    public void setThoroughfareNumber1(Integer thoroughfareNumber1) {
-        this.thoroughfareNumber1 = thoroughfareNumber1;
+    public void setPostalDeliveryNumberSuffix(String postalDeliveryNumberSuffix) {
+        this.postalDeliveryNumberSuffix = postalDeliveryNumberSuffix;
     }
 
     /**
-     * Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
-     * @return thoroughfareNumber1Suffix
+     * Full name of locality
+     * @return localityName
      */
-    public String getThoroughfareNumber1Suffix() {
-        return thoroughfareNumber1Suffix;
+    public String getLocalityName() {
+        return localityName;
     }
 
-    public void setThoroughfareNumber1Suffix(String thoroughfareNumber1Suffix) {
-        this.thoroughfareNumber1Suffix = thoroughfareNumber1Suffix;
+    public void setLocalityName(String localityName) {
+        this.localityName = localityName;
     }
 
     /**
-     * Second thoroughfare number (only used if the property has a ranged address eg 23-25)
-     * @return thoroughfareNumber2
+     * Postcode for the locality
+     * @return postcode
      */
-    public Integer getThoroughfareNumber2() {
-        return thoroughfareNumber2;
+    public String getPostcode() {
+        return postcode;
     }
 
-    public void setThoroughfareNumber2(Integer thoroughfareNumber2) {
-        this.thoroughfareNumber2 = thoroughfareNumber2;
+    public void setPostcode(String postcode) {
+        this.postcode = postcode;
     }
 
     /**
-     * Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
-     * @return thoroughfareNumber2Suffix
+     * State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
+     * @return state
      */
-    public String getThoroughfareNumber2Suffix() {
-        return thoroughfareNumber2Suffix;
+    public String getState() {
+        return state;
     }
 
-    public void setThoroughfareNumber2Suffix(String thoroughfareNumber2Suffix) {
-        this.thoroughfareNumber2Suffix = thoroughfareNumber2Suffix;
+    public void setState(String state) {
+        this.state = state;
     }
 
     @Override
@@ -330,82 +330,82 @@ public boolean equals(Object o) {
             return false;
         }
         CommonPAFAddress commonPAFAddress = (CommonPAFAddress) o;
-        return Objects.equals(this.buildingName1, commonPAFAddress.buildingName1) &&
-            Objects.equals(this.buildingName2, commonPAFAddress.buildingName2) &&
-            Objects.equals(this.dpid, commonPAFAddress.dpid) &&
-            Objects.equals(this.flatUnitNumber, commonPAFAddress.flatUnitNumber) &&
+        return Objects.equals(this.dpid, commonPAFAddress.dpid) &&
+            Objects.equals(this.thoroughfareNumber1, commonPAFAddress.thoroughfareNumber1) &&
+            Objects.equals(this.thoroughfareNumber1Suffix, commonPAFAddress.thoroughfareNumber1Suffix) &&
+            Objects.equals(this.thoroughfareNumber2, commonPAFAddress.thoroughfareNumber2) &&
+            Objects.equals(this.thoroughfareNumber2Suffix, commonPAFAddress.thoroughfareNumber2Suffix) &&
             Objects.equals(this.flatUnitType, commonPAFAddress.flatUnitType) &&
-            Objects.equals(this.floorLevelNumber, commonPAFAddress.floorLevelNumber) &&
+            Objects.equals(this.flatUnitNumber, commonPAFAddress.flatUnitNumber) &&
             Objects.equals(this.floorLevelType, commonPAFAddress.floorLevelType) &&
-            Objects.equals(this.localityName, commonPAFAddress.localityName) &&
+            Objects.equals(this.floorLevelNumber, commonPAFAddress.floorLevelNumber) &&
             Objects.equals(this.lotNumber, commonPAFAddress.lotNumber) &&
+            Objects.equals(this.buildingName1, commonPAFAddress.buildingName1) &&
+            Objects.equals(this.buildingName2, commonPAFAddress.buildingName2) &&
+            Objects.equals(this.streetName, commonPAFAddress.streetName) &&
+            Objects.equals(this.streetType, commonPAFAddress.streetType) &&
+            Objects.equals(this.streetSuffix, commonPAFAddress.streetSuffix) &&
+            Objects.equals(this.postalDeliveryType, commonPAFAddress.postalDeliveryType) &&
             Objects.equals(this.postalDeliveryNumber, commonPAFAddress.postalDeliveryNumber) &&
             Objects.equals(this.postalDeliveryNumberPrefix, commonPAFAddress.postalDeliveryNumberPrefix) &&
             Objects.equals(this.postalDeliveryNumberSuffix, commonPAFAddress.postalDeliveryNumberSuffix) &&
-            Objects.equals(this.postalDeliveryType, commonPAFAddress.postalDeliveryType) &&
+            Objects.equals(this.localityName, commonPAFAddress.localityName) &&
             Objects.equals(this.postcode, commonPAFAddress.postcode) &&
-            Objects.equals(this.state, commonPAFAddress.state) &&
-            Objects.equals(this.streetName, commonPAFAddress.streetName) &&
-            Objects.equals(this.streetSuffix, commonPAFAddress.streetSuffix) &&
-            Objects.equals(this.streetType, commonPAFAddress.streetType) &&
-            Objects.equals(this.thoroughfareNumber1, commonPAFAddress.thoroughfareNumber1) &&
-            Objects.equals(this.thoroughfareNumber1Suffix, commonPAFAddress.thoroughfareNumber1Suffix) &&
-            Objects.equals(this.thoroughfareNumber2, commonPAFAddress.thoroughfareNumber2) &&
-            Objects.equals(this.thoroughfareNumber2Suffix, commonPAFAddress.thoroughfareNumber2Suffix);
+            Objects.equals(this.state, commonPAFAddress.state);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            buildingName1,
-            buildingName2,
             dpid,
-            flatUnitNumber,
+            thoroughfareNumber1,
+            thoroughfareNumber1Suffix,
+            thoroughfareNumber2,
+            thoroughfareNumber2Suffix,
             flatUnitType,
-            floorLevelNumber,
+            flatUnitNumber,
             floorLevelType,
-            localityName,
+            floorLevelNumber,
             lotNumber,
+            buildingName1,
+            buildingName2,
+            streetName,
+            streetType,
+            streetSuffix,
+            postalDeliveryType,
             postalDeliveryNumber,
             postalDeliveryNumberPrefix,
             postalDeliveryNumberSuffix,
-            postalDeliveryType,
+            localityName,
             postcode,
-            state,
-            streetName,
-            streetSuffix,
-            streetType,
-            thoroughfareNumber1,
-            thoroughfareNumber1Suffix,
-            thoroughfareNumber2,
-            thoroughfareNumber2Suffix);
+            state);
     }
 
     @Override
     public String toString() {
         return "class CommonPAFAddress {\n" +
-            "   buildingName1: " + toIndentedString(buildingName1) + "\n" + 
-            "   buildingName2: " + toIndentedString(buildingName2) + "\n" + 
             "   dpid: " + toIndentedString(dpid) + "\n" + 
-            "   flatUnitNumber: " + toIndentedString(flatUnitNumber) + "\n" + 
+            "   thoroughfareNumber1: " + toIndentedString(thoroughfareNumber1) + "\n" + 
+            "   thoroughfareNumber1Suffix: " + toIndentedString(thoroughfareNumber1Suffix) + "\n" + 
+            "   thoroughfareNumber2: " + toIndentedString(thoroughfareNumber2) + "\n" + 
+            "   thoroughfareNumber2Suffix: " + toIndentedString(thoroughfareNumber2Suffix) + "\n" + 
             "   flatUnitType: " + toIndentedString(flatUnitType) + "\n" + 
-            "   floorLevelNumber: " + toIndentedString(floorLevelNumber) + "\n" + 
+            "   flatUnitNumber: " + toIndentedString(flatUnitNumber) + "\n" + 
             "   floorLevelType: " + toIndentedString(floorLevelType) + "\n" + 
-            "   localityName: " + toIndentedString(localityName) + "\n" + 
+            "   floorLevelNumber: " + toIndentedString(floorLevelNumber) + "\n" + 
             "   lotNumber: " + toIndentedString(lotNumber) + "\n" + 
+            "   buildingName1: " + toIndentedString(buildingName1) + "\n" + 
+            "   buildingName2: " + toIndentedString(buildingName2) + "\n" + 
+            "   streetName: " + toIndentedString(streetName) + "\n" + 
+            "   streetType: " + toIndentedString(streetType) + "\n" + 
+            "   streetSuffix: " + toIndentedString(streetSuffix) + "\n" + 
+            "   postalDeliveryType: " + toIndentedString(postalDeliveryType) + "\n" + 
             "   postalDeliveryNumber: " + toIndentedString(postalDeliveryNumber) + "\n" + 
             "   postalDeliveryNumberPrefix: " + toIndentedString(postalDeliveryNumberPrefix) + "\n" + 
             "   postalDeliveryNumberSuffix: " + toIndentedString(postalDeliveryNumberSuffix) + "\n" + 
-            "   postalDeliveryType: " + toIndentedString(postalDeliveryType) + "\n" + 
+            "   localityName: " + toIndentedString(localityName) + "\n" + 
             "   postcode: " + toIndentedString(postcode) + "\n" + 
             "   state: " + toIndentedString(state) + "\n" + 
-            "   streetName: " + toIndentedString(streetName) + "\n" + 
-            "   streetSuffix: " + toIndentedString(streetSuffix) + "\n" + 
-            "   streetType: " + toIndentedString(streetType) + "\n" + 
-            "   thoroughfareNumber1: " + toIndentedString(thoroughfareNumber1) + "\n" + 
-            "   thoroughfareNumber1Suffix: " + toIndentedString(thoroughfareNumber1Suffix) + "\n" + 
-            "   thoroughfareNumber2: " + toIndentedString(thoroughfareNumber2) + "\n" + 
-            "   thoroughfareNumber2Suffix: " + toIndentedString(thoroughfareNumber2Suffix) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPerson.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPerson.java
index b216877..079d3e3 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPerson.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPerson.java
@@ -13,20 +13,32 @@
 
 public class CommonPerson {
 
+    private OffsetDateTime lastUpdateTime;
+
     private String firstName;
 
     private String lastName;
 
-    private OffsetDateTime lastUpdateTime;
-
     private List<String> middleNames;
 
-    private String occupationCode;
-
     private String prefix;
 
     private String suffix;
 
+    private String occupationCode;
+
+    /**
+     * The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data
+     * @return lastUpdateTime
+     */
+    public OffsetDateTime getLastUpdateTime() {
+        return lastUpdateTime;
+    }
+
+    public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
+        this.lastUpdateTime = lastUpdateTime;
+    }
+
     /**
      * For people with single names this field need not be present.  The single name should be in the lastName field
      * @return firstName
@@ -51,18 +63,6 @@ public void setLastName(String lastName) {
         this.lastName = lastName;
     }
 
-    /**
-     * The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data
-     * @return lastUpdateTime
-     */
-    public OffsetDateTime getLastUpdateTime() {
-        return lastUpdateTime;
-    }
-
-    public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
-        this.lastUpdateTime = lastUpdateTime;
-    }
-
     /**
      * Field is mandatory but array may be empty
      * @return middleNames
@@ -75,18 +75,6 @@ public void setMiddleNames(List<String> middleNames) {
         this.middleNames = middleNames;
     }
 
-    /**
-     * Value is a valid [ANZCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.
-     * @return occupationCode
-     */
-    public String getOccupationCode() {
-        return occupationCode;
-    }
-
-    public void setOccupationCode(String occupationCode) {
-        this.occupationCode = occupationCode;
-    }
-
     /**
      * Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)
      * @return prefix
@@ -111,6 +99,18 @@ public void setSuffix(String suffix) {
         this.suffix = suffix;
     }
 
+    /**
+     * Value is a valid [ANZSCO v1.2](http://www.abs.gov.au/ANZSCO) Standard Occupation classification.
+     * @return occupationCode
+     */
+    public String getOccupationCode() {
+        return occupationCode;
+    }
+
+    public void setOccupationCode(String occupationCode) {
+        this.occupationCode = occupationCode;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -120,37 +120,37 @@ public boolean equals(Object o) {
             return false;
         }
         CommonPerson commonPerson = (CommonPerson) o;
-        return Objects.equals(this.firstName, commonPerson.firstName) &&
+        return Objects.equals(this.lastUpdateTime, commonPerson.lastUpdateTime) &&
+            Objects.equals(this.firstName, commonPerson.firstName) &&
             Objects.equals(this.lastName, commonPerson.lastName) &&
-            Objects.equals(this.lastUpdateTime, commonPerson.lastUpdateTime) &&
             Objects.equals(this.middleNames, commonPerson.middleNames) &&
-            Objects.equals(this.occupationCode, commonPerson.occupationCode) &&
             Objects.equals(this.prefix, commonPerson.prefix) &&
-            Objects.equals(this.suffix, commonPerson.suffix);
+            Objects.equals(this.suffix, commonPerson.suffix) &&
+            Objects.equals(this.occupationCode, commonPerson.occupationCode);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            lastUpdateTime,
             firstName,
             lastName,
-            lastUpdateTime,
             middleNames,
-            occupationCode,
             prefix,
-            suffix);
+            suffix,
+            occupationCode);
     }
 
     @Override
     public String toString() {
         return "class CommonPerson {\n" +
+            "   lastUpdateTime: " + toIndentedString(lastUpdateTime) + "\n" + 
             "   firstName: " + toIndentedString(firstName) + "\n" + 
             "   lastName: " + toIndentedString(lastName) + "\n" + 
-            "   lastUpdateTime: " + toIndentedString(lastUpdateTime) + "\n" + 
             "   middleNames: " + toIndentedString(middleNames) + "\n" + 
-            "   occupationCode: " + toIndentedString(occupationCode) + "\n" + 
             "   prefix: " + toIndentedString(prefix) + "\n" + 
             "   suffix: " + toIndentedString(suffix) + "\n" + 
+            "   occupationCode: " + toIndentedString(occupationCode) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPersonDetail.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPersonDetail.java
index e172448..e91aa47 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPersonDetail.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPersonDetail.java
@@ -12,23 +12,11 @@
 
 public class CommonPersonDetail extends CommonPerson {
 
-    private List<CommonEmailAddress> emailAddresses;
-
     private List<CommonPhoneNumber> phoneNumbers;
 
-    private List<CommonPhysicalAddressWithPurpose> physicalAddresses;
-
-    /**
-     * May be empty
-     * @return emailAddresses
-     */
-    public List<CommonEmailAddress> getEmailAddresses() {
-        return emailAddresses;
-    }
+    private List<CommonEmailAddress> emailAddresses;
 
-    public void setEmailAddresses(List<CommonEmailAddress> emailAddresses) {
-        this.emailAddresses = emailAddresses;
-    }
+    private List<CommonPhysicalAddressWithPurpose> physicalAddresses;
 
     /**
      * Array is mandatory but may be empty if no phone numbers are held
@@ -42,6 +30,18 @@ public void setPhoneNumbers(List<CommonPhoneNumber> phoneNumbers) {
         this.phoneNumbers = phoneNumbers;
     }
 
+    /**
+     * May be empty
+     * @return emailAddresses
+     */
+    public List<CommonEmailAddress> getEmailAddresses() {
+        return emailAddresses;
+    }
+
+    public void setEmailAddresses(List<CommonEmailAddress> emailAddresses) {
+        this.emailAddresses = emailAddresses;
+    }
+
     /**
      * Must contain at least one address. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail
      * @return physicalAddresses
@@ -63,8 +63,8 @@ public boolean equals(Object o) {
             return false;
         }
         CommonPersonDetail commonPersonDetail = (CommonPersonDetail) o;
-        return Objects.equals(this.emailAddresses, commonPersonDetail.emailAddresses) &&
-            Objects.equals(this.phoneNumbers, commonPersonDetail.phoneNumbers) &&
+        return Objects.equals(this.phoneNumbers, commonPersonDetail.phoneNumbers) &&
+            Objects.equals(this.emailAddresses, commonPersonDetail.emailAddresses) &&
             Objects.equals(this.physicalAddresses, commonPersonDetail.physicalAddresses) &&
             super.equals(o);
     }
@@ -72,8 +72,8 @@ public boolean equals(Object o) {
     @Override
     public int hashCode() {
         return Objects.hash(
-            emailAddresses,
             phoneNumbers,
+            emailAddresses,
             physicalAddresses,
             super.hashCode());
     }
@@ -81,15 +81,15 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class CommonPersonDetail {\n" +
+            "   lastUpdateTime: " + toIndentedString(getLastUpdateTime()) + "\n" + 
             "   firstName: " + toIndentedString(getFirstName()) + "\n" + 
             "   lastName: " + toIndentedString(getLastName()) + "\n" + 
-            "   lastUpdateTime: " + toIndentedString(getLastUpdateTime()) + "\n" + 
             "   middleNames: " + toIndentedString(getMiddleNames()) + "\n" + 
-            "   occupationCode: " + toIndentedString(getOccupationCode()) + "\n" + 
             "   prefix: " + toIndentedString(getPrefix()) + "\n" + 
             "   suffix: " + toIndentedString(getSuffix()) + "\n" + 
-            "   emailAddresses: " + toIndentedString(emailAddresses) + "\n" + 
+            "   occupationCode: " + toIndentedString(getOccupationCode()) + "\n" + 
             "   phoneNumbers: " + toIndentedString(phoneNumbers) + "\n" + 
+            "   emailAddresses: " + toIndentedString(emailAddresses) + "\n" + 
             "   physicalAddresses: " + toIndentedString(physicalAddresses) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhoneNumber.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhoneNumber.java
index f585554..e4fac54 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhoneNumber.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhoneNumber.java
@@ -12,27 +12,63 @@
 public class CommonPhoneNumber {
 
     public enum Purpose {
-        HOME,
-        INTERNATIONAL,
         MOBILE,
+        HOME,
+        WORK,
         OTHER,
-        UNSPECIFIED,
-        WORK
+        INTERNATIONAL,
+        UNSPECIFIED
     }
 
-    private String areaCode;
+    private Boolean isPreferred;
+
+    private Purpose purpose;
 
     private String countryCode;
 
+    private String areaCode;
+
+    private String number;
+
     private String extension;
 
     private String fullNumber;
 
-    private Boolean isPreferred;
+    /**
+     * May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present
+     * @return isPreferred
+     */
+    public Boolean getIsPreferred() {
+        return isPreferred;
+    }
 
-    private String number;
+    public void setIsPreferred(Boolean isPreferred) {
+        this.isPreferred = isPreferred;
+    }
 
-    private Purpose purpose;
+    /**
+     * The purpose of the number as specified by the customer
+     * @return purpose
+     */
+    public Purpose getPurpose() {
+        return purpose;
+    }
+
+    public void setPurpose(Purpose purpose) {
+        this.purpose = purpose;
+    }
+
+    /**
+     * If absent, assumed to be Australia (+61). The + should be included
+     * @return countryCode
+     */
+    public String getCountryCode() {
+        return countryCode;
+    }
+
+    public void setCountryCode(String countryCode) {
+        this.countryCode = countryCode;
+    }
 
     /**
      * Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.
@@ -47,15 +83,15 @@ public void setAreaCode(String areaCode) {
     }
 
     /**
-     * If absent, assumed to be Australia (+61). The + should be included
-     * @return countryCode
+     * The actual phone number, with leading zeros as appropriate
+     * @return number
      */
-    public String getCountryCode() {
-        return countryCode;
+    public String getNumber() {
+        return number;
     }
 
-    public void setCountryCode(String countryCode) {
-        this.countryCode = countryCode;
+    public void setNumber(String number) {
+        this.number = number;
     }
 
     /**
@@ -82,42 +118,6 @@ public void setFullNumber(String fullNumber) {
         this.fullNumber = fullNumber;
     }
 
-    /**
-     * May be true for one and only one entry to indicate the preferred phone number. Assumed to be &#39;false&#39; if not present
-     * @return isPreferred
-     */
-    public Boolean getIsPreferred() {
-        return isPreferred;
-    }
-
-    public void setIsPreferred(Boolean isPreferred) {
-        this.isPreferred = isPreferred;
-    }
-
-    /**
-     * The actual phone number, with leading zeros as appropriate
-     * @return number
-     */
-    public String getNumber() {
-        return number;
-    }
-
-    public void setNumber(String number) {
-        this.number = number;
-    }
-
-    /**
-     * Get purpose
-     * @return purpose
-     */
-    public Purpose getPurpose() {
-        return purpose;
-    }
-
-    public void setPurpose(Purpose purpose) {
-        this.purpose = purpose;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -127,37 +127,37 @@ public boolean equals(Object o) {
             return false;
         }
         CommonPhoneNumber commonPhoneNumber = (CommonPhoneNumber) o;
-        return Objects.equals(this.areaCode, commonPhoneNumber.areaCode) &&
+        return Objects.equals(this.isPreferred, commonPhoneNumber.isPreferred) &&
+            Objects.equals(this.purpose, commonPhoneNumber.purpose) &&
             Objects.equals(this.countryCode, commonPhoneNumber.countryCode) &&
-            Objects.equals(this.extension, commonPhoneNumber.extension) &&
-            Objects.equals(this.fullNumber, commonPhoneNumber.fullNumber) &&
-            Objects.equals(this.isPreferred, commonPhoneNumber.isPreferred) &&
+            Objects.equals(this.areaCode, commonPhoneNumber.areaCode) &&
             Objects.equals(this.number, commonPhoneNumber.number) &&
-            Objects.equals(this.purpose, commonPhoneNumber.purpose);
+            Objects.equals(this.extension, commonPhoneNumber.extension) &&
+            Objects.equals(this.fullNumber, commonPhoneNumber.fullNumber);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            areaCode,
-            countryCode,
-            extension,
-            fullNumber,
             isPreferred,
+            purpose,
+            countryCode,
+            areaCode,
             number,
-            purpose);
+            extension,
+            fullNumber);
     }
 
     @Override
     public String toString() {
         return "class CommonPhoneNumber {\n" +
-            "   areaCode: " + toIndentedString(areaCode) + "\n" + 
+            "   isPreferred: " + toIndentedString(isPreferred) + "\n" + 
+            "   purpose: " + toIndentedString(purpose) + "\n" + 
             "   countryCode: " + toIndentedString(countryCode) + "\n" + 
+            "   areaCode: " + toIndentedString(areaCode) + "\n" + 
+            "   number: " + toIndentedString(number) + "\n" + 
             "   extension: " + toIndentedString(extension) + "\n" + 
             "   fullNumber: " + toIndentedString(fullNumber) + "\n" + 
-            "   isPreferred: " + toIndentedString(isPreferred) + "\n" + 
-            "   number: " + toIndentedString(number) + "\n" + 
-            "   purpose: " + toIndentedString(purpose) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddress.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddress.java
index bb9220c..7c8b4fd 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddress.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddress.java
@@ -12,18 +12,18 @@
 public class CommonPhysicalAddress {
 
     public enum AddressUType {
-        paf,
-        simple
+        SIMPLE,
+        PAF
     }
 
     private AddressUType addressUType;
 
-    private CommonPAFAddress paf;
-
     private CommonSimpleAddress simple;
 
+    private CommonPAFAddress paf;
+
     /**
-     * Get addressUType
+     * The type of address object present
      * @return addressUType
      */
     public AddressUType getAddressUType() {
@@ -34,18 +34,6 @@ public void setAddressUType(AddressUType addressUType) {
         this.addressUType = addressUType;
     }
 
-    /**
-     * Get paf
-     * @return paf
-     */
-    public CommonPAFAddress getPaf() {
-        return paf;
-    }
-
-    public void setPaf(CommonPAFAddress paf) {
-        this.paf = paf;
-    }
-
     /**
      * Get simple
      * @return simple
@@ -58,6 +46,18 @@ public void setSimple(CommonSimpleAddress simple) {
         this.simple = simple;
     }
 
+    /**
+     * Get paf
+     * @return paf
+     */
+    public CommonPAFAddress getPaf() {
+        return paf;
+    }
+
+    public void setPaf(CommonPAFAddress paf) {
+        this.paf = paf;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -68,24 +68,24 @@ public boolean equals(Object o) {
         }
         CommonPhysicalAddress commonPhysicalAddress = (CommonPhysicalAddress) o;
         return Objects.equals(this.addressUType, commonPhysicalAddress.addressUType) &&
-            Objects.equals(this.paf, commonPhysicalAddress.paf) &&
-            Objects.equals(this.simple, commonPhysicalAddress.simple);
+            Objects.equals(this.simple, commonPhysicalAddress.simple) &&
+            Objects.equals(this.paf, commonPhysicalAddress.paf);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             addressUType,
-            paf,
-            simple);
+            simple,
+            paf);
     }
 
     @Override
     public String toString() {
         return "class CommonPhysicalAddress {\n" +
             "   addressUType: " + toIndentedString(addressUType) + "\n" + 
-            "   paf: " + toIndentedString(paf) + "\n" + 
             "   simple: " + toIndentedString(simple) + "\n" + 
+            "   paf: " + toIndentedString(paf) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddressWithPurpose.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddressWithPurpose.java
index 3071e45..55a2d06 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddressWithPurpose.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonPhysicalAddressWithPurpose.java
@@ -12,17 +12,17 @@
 public class CommonPhysicalAddressWithPurpose extends CommonPhysicalAddress {
 
     public enum Purpose {
+        REGISTERED,
         MAIL,
-        OTHER,
         PHYSICAL,
-        REGISTERED,
-        WORK
+        WORK,
+        OTHER
     }
 
     private Purpose purpose;
 
     /**
-     * Get purpose
+     * Enumeration of values indicating the purpose of the physical address
      * @return purpose
      */
     public Purpose getPurpose() {
@@ -57,8 +57,8 @@ public int hashCode() {
     public String toString() {
         return "class CommonPhysicalAddressWithPurpose {\n" +
             "   addressUType: " + toIndentedString(getAddressUType()) + "\n" + 
-            "   paf: " + toIndentedString(getPaf()) + "\n" + 
             "   simple: " + toIndentedString(getSimple()) + "\n" + 
+            "   paf: " + toIndentedString(getPaf()) + "\n" + 
             "   purpose: " + toIndentedString(purpose) + "\n" + 
             "}";
     }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonSimpleAddress.java b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonSimpleAddress.java
index 272710a..915782e 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonSimpleAddress.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/CommonSimpleAddress.java
@@ -11,21 +11,33 @@
 
 public class CommonSimpleAddress {
 
+    private String mailingName;
+
     private String addressLine1;
 
     private String addressLine2;
 
     private String addressLine3;
 
+    private String postcode;
+
     private String city;
 
-    private String country = "AUS";
+    private String state;
 
-    private String mailingName;
+    private String country = "AUS";
 
-    private String postcode;
+    /**
+     * Name of the individual or business formatted for inclusion in an address used for physical mail
+     * @return mailingName
+     */
+    public String getMailingName() {
+        return mailingName;
+    }
 
-    private String state;
+    public void setMailingName(String mailingName) {
+        this.mailingName = mailingName;
+    }
 
     /**
      * First line of the standard address object
@@ -63,42 +75,6 @@ public void setAddressLine3(String addressLine3) {
         this.addressLine3 = addressLine3;
     }
 
-    /**
-     * Name of the city or locality
-     * @return city
-     */
-    public String getCity() {
-        return city;
-    }
-
-    public void setCity(String city) {
-        this.city = city;
-    }
-
-    /**
-     * A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.
-     * @return country
-     */
-    public String getCountry() {
-        return country;
-    }
-
-    public void setCountry(String country) {
-        this.country = country;
-    }
-
-    /**
-     * Name of the individual or business formatted for inclusion in an address used for physical mail
-     * @return mailingName
-     */
-    public String getMailingName() {
-        return mailingName;
-    }
-
-    public void setMailingName(String mailingName) {
-        this.mailingName = mailingName;
-    }
-
     /**
      * Mandatory for Australian addresses
      * @return postcode
@@ -111,6 +87,18 @@ public void setPostcode(String postcode) {
         this.postcode = postcode;
     }
 
+    /**
+     * Name of the city or locality
+     * @return city
+     */
+    public String getCity() {
+        return city;
+    }
+
+    public void setCity(String city) {
+        this.city = city;
+    }
+
     /**
      * Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
      * @return state
@@ -123,6 +111,18 @@ public void setState(String state) {
         this.state = state;
     }
 
+    /**
+     * A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.
+     * @return country
+     */
+    public String getCountry() {
+        return country;
+    }
+
+    public void setCountry(String country) {
+        this.country = country;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -132,40 +132,40 @@ public boolean equals(Object o) {
             return false;
         }
         CommonSimpleAddress commonSimpleAddress = (CommonSimpleAddress) o;
-        return Objects.equals(this.addressLine1, commonSimpleAddress.addressLine1) &&
+        return Objects.equals(this.mailingName, commonSimpleAddress.mailingName) &&
+            Objects.equals(this.addressLine1, commonSimpleAddress.addressLine1) &&
             Objects.equals(this.addressLine2, commonSimpleAddress.addressLine2) &&
             Objects.equals(this.addressLine3, commonSimpleAddress.addressLine3) &&
-            Objects.equals(this.city, commonSimpleAddress.city) &&
-            Objects.equals(this.country, commonSimpleAddress.country) &&
-            Objects.equals(this.mailingName, commonSimpleAddress.mailingName) &&
             Objects.equals(this.postcode, commonSimpleAddress.postcode) &&
-            Objects.equals(this.state, commonSimpleAddress.state);
+            Objects.equals(this.city, commonSimpleAddress.city) &&
+            Objects.equals(this.state, commonSimpleAddress.state) &&
+            Objects.equals(this.country, commonSimpleAddress.country);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            mailingName,
             addressLine1,
             addressLine2,
             addressLine3,
-            city,
-            country,
-            mailingName,
             postcode,
-            state);
+            city,
+            state,
+            country);
     }
 
     @Override
     public String toString() {
         return "class CommonSimpleAddress {\n" +
+            "   mailingName: " + toIndentedString(mailingName) + "\n" + 
             "   addressLine1: " + toIndentedString(addressLine1) + "\n" + 
             "   addressLine2: " + toIndentedString(addressLine2) + "\n" + 
             "   addressLine3: " + toIndentedString(addressLine3) + "\n" + 
-            "   city: " + toIndentedString(city) + "\n" + 
-            "   country: " + toIndentedString(country) + "\n" + 
-            "   mailingName: " + toIndentedString(mailingName) + "\n" + 
             "   postcode: " + toIndentedString(postcode) + "\n" + 
+            "   city: " + toIndentedString(city) + "\n" + 
             "   state: " + toIndentedString(state) + "\n" + 
+            "   country: " + toIndentedString(country) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/DiscoveryOutage.java b/client/src/main/java/au/org/consumerdatastandards/client/model/DiscoveryOutage.java
index 68ae30d..76e14aa 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/DiscoveryOutage.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/DiscoveryOutage.java
@@ -12,36 +12,36 @@
 
 public class DiscoveryOutage {
 
-    private String duration;
+    private OffsetDateTime outageTime;
 
-    private String explanation;
+    private String duration;
 
     private Boolean isPartial;
 
-    private OffsetDateTime outageTime;
+    private String explanation;
 
     /**
-     * Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations)
-     * @return duration
+     * Date and time that the outage is scheduled to begin
+     * @return outageTime
      */
-    public String getDuration() {
-        return duration;
+    public OffsetDateTime getOutageTime() {
+        return outageTime;
     }
 
-    public void setDuration(String duration) {
-        this.duration = duration;
+    public void setOutageTime(OffsetDateTime outageTime) {
+        this.outageTime = outageTime;
     }
 
     /**
-     * Provides an explanation of the current outage that can be displayed to an end customer
-     * @return explanation
+     * Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
+     * @return duration
      */
-    public String getExplanation() {
-        return explanation;
+    public String getDuration() {
+        return duration;
     }
 
-    public void setExplanation(String explanation) {
-        this.explanation = explanation;
+    public void setDuration(String duration) {
+        this.duration = duration;
     }
 
     /**
@@ -57,15 +57,15 @@ public void setIsPartial(Boolean isPartial) {
     }
 
     /**
-     * Date and time that the outage is scheduled to begin
-     * @return outageTime
+     * Provides an explanation of the current outage that can be displayed to an end customer
+     * @return explanation
      */
-    public OffsetDateTime getOutageTime() {
-        return outageTime;
+    public String getExplanation() {
+        return explanation;
     }
 
-    public void setOutageTime(OffsetDateTime outageTime) {
-        this.outageTime = outageTime;
+    public void setExplanation(String explanation) {
+        this.explanation = explanation;
     }
 
     @Override
@@ -77,28 +77,28 @@ public boolean equals(Object o) {
             return false;
         }
         DiscoveryOutage discoveryOutage = (DiscoveryOutage) o;
-        return Objects.equals(this.duration, discoveryOutage.duration) &&
-            Objects.equals(this.explanation, discoveryOutage.explanation) &&
+        return Objects.equals(this.outageTime, discoveryOutage.outageTime) &&
+            Objects.equals(this.duration, discoveryOutage.duration) &&
             Objects.equals(this.isPartial, discoveryOutage.isPartial) &&
-            Objects.equals(this.outageTime, discoveryOutage.outageTime);
+            Objects.equals(this.explanation, discoveryOutage.explanation);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            outageTime,
             duration,
-            explanation,
             isPartial,
-            outageTime);
+            explanation);
     }
 
     @Override
     public String toString() {
         return "class DiscoveryOutage {\n" +
+            "   outageTime: " + toIndentedString(outageTime) + "\n" + 
             "   duration: " + toIndentedString(duration) + "\n" + 
-            "   explanation: " + toIndentedString(explanation) + "\n" + 
             "   isPartial: " + toIndentedString(isPartial) + "\n" + 
-            "   outageTime: " + toIndentedString(outageTime) + "\n" + 
+            "   explanation: " + toIndentedString(explanation) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/Error.java b/client/src/main/java/au/org/consumerdatastandards/client/model/Error.java
index 9f3c9bc..f52f530 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/Error.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/Error.java
@@ -13,12 +13,12 @@
 
     private String code;
 
+    private String title;
+
     private String detail;
 
     private Object meta;
 
-    private String title;
-
     /**
      * Must be one of the following: 0001 – Account not able to be found
      * @return code
@@ -31,6 +31,18 @@ public void setCode(String code) {
         this.code = code;
     }
 
+    /**
+     * Must be one of the following: Invalid account
+     * @return title
+     */
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
     /**
      * ID of the account not found
      * @return detail
@@ -44,7 +56,7 @@ public void setDetail(String detail) {
     }
 
     /**
-     * Get meta
+     * Optional additional data for specific error types
      * @return meta
      */
     public Object getMeta() {
@@ -55,18 +67,6 @@ public void setMeta(Object meta) {
         this.meta = meta;
     }
 
-    /**
-     * Must be one of the following: Invalid account
-     * @return title
-     */
-    public String getTitle() {
-        return title;
-    }
-
-    public void setTitle(String title) {
-        this.title = title;
-    }
-
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -77,27 +77,27 @@ public boolean equals(Object o) {
         }
         Error responseErrorListErrors = (Error) o;
         return Objects.equals(this.code, responseErrorListErrors.code) &&
+            Objects.equals(this.title, responseErrorListErrors.title) &&
             Objects.equals(this.detail, responseErrorListErrors.detail) &&
-            Objects.equals(this.meta, responseErrorListErrors.meta) &&
-            Objects.equals(this.title, responseErrorListErrors.title);
+            Objects.equals(this.meta, responseErrorListErrors.meta);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             code,
+            title,
             detail,
-            meta,
-            title);
+            meta);
     }
 
     @Override
     public String toString() {
         return "class Error {\n" +
             "   code: " + toIndentedString(code) + "\n" + 
+            "   title: " + toIndentedString(title) + "\n" + 
             "   detail: " + toIndentedString(detail) + "\n" + 
             "   meta: " + toIndentedString(meta) + "\n" + 
-            "   title: " + toIndentedString(title) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/LinksPaginated.java b/client/src/main/java/au/org/consumerdatastandards/client/model/LinksPaginated.java
index 9f603ba..24970a5 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/LinksPaginated.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/LinksPaginated.java
@@ -11,15 +11,27 @@
 
 public class LinksPaginated {
 
+    private String self;
+
     private String first;
 
-    private String last;
+    private String prev;
 
     private String next;
 
-    private String prev;
+    private String last;
 
-    private String self;
+    /**
+     * Fully qualified link that generated the current response document
+     * @return self
+     */
+    public String getSelf() {
+        return self;
+    }
+
+    public void setSelf(String self) {
+        this.self = self;
+    }
 
     /**
      * URI to the first page of this set. Mandatory if this response is not the first page
@@ -34,15 +46,15 @@ public void setFirst(String first) {
     }
 
     /**
-     * URI to the last page of this set. Mandatory if this response is not the last page
-     * @return last
+     * URI to the previous page of this set. Mandatory if this response is not the first page
+     * @return prev
      */
-    public String getLast() {
-        return last;
+    public String getPrev() {
+        return prev;
     }
 
-    public void setLast(String last) {
-        this.last = last;
+    public void setPrev(String prev) {
+        this.prev = prev;
     }
 
     /**
@@ -58,27 +70,15 @@ public void setNext(String next) {
     }
 
     /**
-     * URI to the previous page of this set. Mandatory if this response is not the first page
-     * @return prev
-     */
-    public String getPrev() {
-        return prev;
-    }
-
-    public void setPrev(String prev) {
-        this.prev = prev;
-    }
-
-    /**
-     * Fully qualified link that generated the current response document
-     * @return self
+     * URI to the last page of this set. Mandatory if this response is not the last page
+     * @return last
      */
-    public String getSelf() {
-        return self;
+    public String getLast() {
+        return last;
     }
 
-    public void setSelf(String self) {
-        this.self = self;
+    public void setLast(String last) {
+        this.last = last;
     }
 
     @Override
@@ -90,31 +90,31 @@ public boolean equals(Object o) {
             return false;
         }
         LinksPaginated linksPaginated = (LinksPaginated) o;
-        return Objects.equals(this.first, linksPaginated.first) &&
-            Objects.equals(this.last, linksPaginated.last) &&
-            Objects.equals(this.next, linksPaginated.next) &&
+        return Objects.equals(this.self, linksPaginated.self) &&
+            Objects.equals(this.first, linksPaginated.first) &&
             Objects.equals(this.prev, linksPaginated.prev) &&
-            Objects.equals(this.self, linksPaginated.self);
+            Objects.equals(this.next, linksPaginated.next) &&
+            Objects.equals(this.last, linksPaginated.last);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            self,
             first,
-            last,
-            next,
             prev,
-            self);
+            next,
+            last);
     }
 
     @Override
     public String toString() {
         return "class LinksPaginated {\n" +
+            "   self: " + toIndentedString(self) + "\n" + 
             "   first: " + toIndentedString(first) + "\n" + 
-            "   last: " + toIndentedString(last) + "\n" + 
-            "   next: " + toIndentedString(next) + "\n" + 
             "   prev: " + toIndentedString(prev) + "\n" + 
-            "   self: " + toIndentedString(self) + "\n" + 
+            "   next: " + toIndentedString(next) + "\n" + 
+            "   last: " + toIndentedString(last) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/MetaPaginated.java b/client/src/main/java/au/org/consumerdatastandards/client/model/MetaPaginated.java
index d7909f3..67d300b 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/MetaPaginated.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/MetaPaginated.java
@@ -11,21 +11,9 @@
 
 public class MetaPaginated {
 
-    protected Integer totalPages;
+    private Integer totalRecords;
 
-    protected Integer totalRecords;
-
-    /**
-     * The total number of pages in the full set. See [pagination](#pagination).
-     * @return totalPages
-     */
-    public Integer getTotalPages() {
-        return totalPages;
-    }
-
-    public void setTotalPages(Integer totalPages) {
-        this.totalPages = totalPages;
-    }
+    private Integer totalPages;
 
     /**
      * The total number of records in the full set. See [pagination](#pagination).
@@ -39,6 +27,18 @@ public void setTotalRecords(Integer totalRecords) {
         this.totalRecords = totalRecords;
     }
 
+    /**
+     * The total number of pages in the full set. See [pagination](#pagination).
+     * @return totalPages
+     */
+    public Integer getTotalPages() {
+        return totalPages;
+    }
+
+    public void setTotalPages(Integer totalPages) {
+        this.totalPages = totalPages;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -48,30 +48,28 @@ public boolean equals(Object o) {
             return false;
         }
         MetaPaginated metaPaginated = (MetaPaginated) o;
-        return Objects.equals(this.totalPages, metaPaginated.totalPages) &&
-            Objects.equals(this.totalRecords, metaPaginated.totalRecords);
+        return Objects.equals(this.totalRecords, metaPaginated.totalRecords) &&
+            Objects.equals(this.totalPages, metaPaginated.totalPages);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
-            totalPages,
-            totalRecords);
+            totalRecords,
+            totalPages);
     }
 
     @Override
     public String toString() {
         return "class MetaPaginated {\n" +
-            "   totalPages: " + toIndentedString(totalPages) + "\n" + 
-            "   totalRecords: " + toIndentedString(totalRecords) + "\n" + 
+            "   totalRecords: " + toIndentedString(totalRecords) + "\n" +
+            "   totalPages: " + toIndentedString(totalPages) + "\n" +
             "}";
     }
 
     /**
      * Convert the given object to string with each line indented by 4 spaces
      * (except the first line).
-     * @param o any object
-     * @return null if o is null or o.toString()
      */
     protected String toIndentedString(Object o) {
         if (o == null) {
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ParamAccountOpenStatus.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ParamAccountOpenStatus.java
index f77598b..d0371ad 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ParamAccountOpenStatus.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ParamAccountOpenStatus.java
@@ -13,9 +13,9 @@
  */
 public enum ParamAccountOpenStatus {
   
-    ALL,
+    OPEN,
   
     CLOSED,
   
-    OPEN
+    ALL
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ParamProductCategory.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ParamProductCategory.java
index ffc1abb..7efba78 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ParamProductCategory.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ParamProductCategory.java
@@ -13,27 +13,27 @@
  */
 public enum ParamProductCategory {
   
-    BUSINESS_LOANS,
+    TRANS_AND_SAVINGS_ACCOUNTS,
   
-    CRED_AND_CHRG_CARDS,
+    TERM_DEPOSITS,
   
-    LEASES,
+    TRAVEL_CARDS,
   
-    MARGIN_LOANS,
+    REGULATED_TRUST_ACCOUNTS,
   
-    OVERDRAFTS,
+    RESIDENTIAL_MORTGAGES,
   
-    PERS_LOANS,
+    CRED_AND_CHRG_CARDS,
   
-    REGULATED_TRUST_ACCOUNTS,
+    PERS_LOANS,
   
-    RESIDENTIAL_MORTGAGES,
+    MARGIN_LOANS,
   
-    TERM_DEPOSITS,
+    LEASES,
   
     TRADE_FINANCE,
   
-    TRANS_AND_SAVINGS_ACCOUNTS,
+    OVERDRAFTS,
   
-    TRAVEL_CARDS
+    BUSINESS_LOANS
 }
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductById.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductById.java
index 39358a6..7ba7c6d 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductById.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductById.java
@@ -9,19 +9,19 @@
 
 import java.util.Objects;
 
-public class ResponseBankingProductById extends BaseResponse {
+public class ResponseBankingProductById<T extends BankingProductDetail> extends BaseResponse {
 
-    private BankingProductDetail data;
+    private T data;
 
     /**
      * Get data
      * @return data
      */
-    public BankingProductDetail getData() {
+    public T getData() {
         return data;
     }
 
-    public void setData(BankingProductDetail data) {
+    public void setData(T data) {
         this.data = data;
     }
 
@@ -48,9 +48,9 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class ResponseBankingProductById {\n" +
-            "   data: " + toIndentedString(data) + "\n" + 
-            "   links: " + toIndentedString(getLinks()) + "\n" + 
-            "   meta: " + toIndentedString(getMeta()) + "\n" + 
+            "   data: " + toIndentedString(data) + "\n" +
+            "   links: " + toIndentedString(getLinks()) + "\n" +
+            "   meta: " + toIndentedString(getMeta()) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductList.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductList.java
index b7762fc..b07549c 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductList.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductList.java
@@ -9,19 +9,19 @@
 
 import java.util.Objects;
 
-public class ResponseBankingProductList extends PaginatedResponse {
+public class ResponseBankingProductList<T extends BankingProduct> extends PaginatedResponse {
 
-    private ResponseBankingProductListData data;
+    private ResponseBankingProductListData<T> data;
 
     /**
      * Get data
      * @return data
      */
-    public ResponseBankingProductListData getData() {
+    public ResponseBankingProductListData<T> getData() {
         return data;
     }
 
-    public void setData(ResponseBankingProductListData data) {
+    public void setData(ResponseBankingProductListData<T> data) {
         this.data = data;
     }
 
@@ -48,9 +48,9 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class ResponseBankingProductList {\n" +
-            "   data: " + toIndentedString(data) + "\n" + 
-            "   links: " + toIndentedString(getLinks()) + "\n" + 
-            "   meta: " + toIndentedString(getMeta()) + "\n" + 
+            "   data: " + toIndentedString(data) + "\n" +
+            "   links: " + toIndentedString(getLinks()) + "\n" +
+            "   meta: " + toIndentedString(getMeta()) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductListData.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductListData.java
index 9b9026c..01ee3ba 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductListData.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseBankingProductListData.java
@@ -10,19 +10,19 @@
 import java.util.List;
 import java.util.Objects;
 
-public class ResponseBankingProductListData {
+public class ResponseBankingProductListData<T extends BankingProduct> {
 
-    private List<BankingProduct> products;
+    private List<T> products;
 
     /**
      * The list of products returned.  If the filter results in an empty set then this array may have no records
      * @return products
      */
-    public List<BankingProduct> getProducts() {
+    public List<T> getProducts() {
         return products;
     }
 
-    public void setProducts(List<BankingProduct> products) {
+    public void setProducts(List<T> products) {
         this.products = products;
     }
 
@@ -47,7 +47,7 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class ResponseBankingProductListData {\n" +
-            "   products: " + toIndentedString(products) + "\n" + 
+            "   products: " + toIndentedString(products) + "\n" +
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerData.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerData.java
index ac6e56f..7ed15ef 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerData.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerData.java
@@ -12,18 +12,18 @@
 public class ResponseCommonCustomerData {
 
     public enum CustomerUType {
-        organisation,
-        person
+        PERSON,
+        ORGANISATION
     }
 
     private CustomerUType customerUType;
 
-    private CommonOrganisation organisation;
-
     private CommonPerson person;
 
+    private CommonOrganisation organisation;
+
     /**
-     * Get customerUType
+     * The type of customer object that is present
      * @return customerUType
      */
     public CustomerUType getCustomerUType() {
@@ -34,18 +34,6 @@ public void setCustomerUType(CustomerUType customerUType) {
         this.customerUType = customerUType;
     }
 
-    /**
-     * Get organisation
-     * @return organisation
-     */
-    public CommonOrganisation getOrganisation() {
-        return organisation;
-    }
-
-    public void setOrganisation(CommonOrganisation organisation) {
-        this.organisation = organisation;
-    }
-
     /**
      * Get person
      * @return person
@@ -58,6 +46,18 @@ public void setPerson(CommonPerson person) {
         this.person = person;
     }
 
+    /**
+     * Get organisation
+     * @return organisation
+     */
+    public CommonOrganisation getOrganisation() {
+        return organisation;
+    }
+
+    public void setOrganisation(CommonOrganisation organisation) {
+        this.organisation = organisation;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -68,24 +68,24 @@ public boolean equals(Object o) {
         }
         ResponseCommonCustomerData responseCommonCustomerData = (ResponseCommonCustomerData) o;
         return Objects.equals(this.customerUType, responseCommonCustomerData.customerUType) &&
-            Objects.equals(this.organisation, responseCommonCustomerData.organisation) &&
-            Objects.equals(this.person, responseCommonCustomerData.person);
+            Objects.equals(this.person, responseCommonCustomerData.person) &&
+            Objects.equals(this.organisation, responseCommonCustomerData.organisation);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             customerUType,
-            organisation,
-            person);
+            person,
+            organisation);
     }
 
     @Override
     public String toString() {
         return "class ResponseCommonCustomerData {\n" +
             "   customerUType: " + toIndentedString(customerUType) + "\n" + 
-            "   organisation: " + toIndentedString(organisation) + "\n" + 
             "   person: " + toIndentedString(person) + "\n" + 
+            "   organisation: " + toIndentedString(organisation) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerDetailData.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerDetailData.java
index 24d3d10..93bd359 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerDetailData.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonCustomerDetailData.java
@@ -12,18 +12,18 @@
 public class ResponseCommonCustomerDetailData {
 
     public enum CustomerUType {
-        organisation,
-        person
+        PERSON,
+        ORGANISATION
     }
 
     private CustomerUType customerUType;
 
-    private CommonOrganisationDetail organisation;
-
     private CommonPersonDetail person;
 
+    private CommonOrganisationDetail organisation;
+
     /**
-     * Get customerUType
+     * The type of customer object that is present
      * @return customerUType
      */
     public CustomerUType getCustomerUType() {
@@ -34,18 +34,6 @@ public void setCustomerUType(CustomerUType customerUType) {
         this.customerUType = customerUType;
     }
 
-    /**
-     * Get organisation
-     * @return organisation
-     */
-    public CommonOrganisationDetail getOrganisation() {
-        return organisation;
-    }
-
-    public void setOrganisation(CommonOrganisationDetail organisation) {
-        this.organisation = organisation;
-    }
-
     /**
      * Get person
      * @return person
@@ -58,6 +46,18 @@ public void setPerson(CommonPersonDetail person) {
         this.person = person;
     }
 
+    /**
+     * Get organisation
+     * @return organisation
+     */
+    public CommonOrganisationDetail getOrganisation() {
+        return organisation;
+    }
+
+    public void setOrganisation(CommonOrganisationDetail organisation) {
+        this.organisation = organisation;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) {
@@ -68,24 +68,24 @@ public boolean equals(Object o) {
         }
         ResponseCommonCustomerDetailData responseCommonCustomerDetailData = (ResponseCommonCustomerDetailData) o;
         return Objects.equals(this.customerUType, responseCommonCustomerDetailData.customerUType) &&
-            Objects.equals(this.organisation, responseCommonCustomerDetailData.organisation) &&
-            Objects.equals(this.person, responseCommonCustomerDetailData.person);
+            Objects.equals(this.person, responseCommonCustomerDetailData.person) &&
+            Objects.equals(this.organisation, responseCommonCustomerDetailData.organisation);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
             customerUType,
-            organisation,
-            person);
+            person,
+            organisation);
     }
 
     @Override
     public String toString() {
         return "class ResponseCommonCustomerDetailData {\n" +
             "   customerUType: " + toIndentedString(customerUType) + "\n" + 
-            "   organisation: " + toIndentedString(organisation) + "\n" + 
             "   person: " + toIndentedString(person) + "\n" + 
+            "   organisation: " + toIndentedString(organisation) + "\n" + 
             "}";
     }
 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatus.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatus.java
similarity index 73%
rename from client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatus.java
rename to client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatus.java
index 0d8d410..ba8ec0c 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatus.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatus.java
@@ -9,19 +9,19 @@
 
 import java.util.Objects;
 
-public class CommonDiscoveryStatus extends BaseResponse {
+public class ResponseCommonDiscoveryStatus extends BaseResponse {
 
-    private CommonDiscoveryStatusData data;
+    private ResponseCommonDiscoveryStatusData data;
 
     /**
      * Get data
      * @return data
      */
-    public CommonDiscoveryStatusData getData() {
+    public ResponseCommonDiscoveryStatusData getData() {
         return data;
     }
 
-    public void setData(CommonDiscoveryStatusData data) {
+    public void setData(ResponseCommonDiscoveryStatusData data) {
         this.data = data;
     }
 
@@ -33,8 +33,8 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        CommonDiscoveryStatus commonDiscoveryStatus = (CommonDiscoveryStatus) o;
-        return Objects.equals(this.data, commonDiscoveryStatus.data) &&
+        ResponseCommonDiscoveryStatus responseCommonDiscoveryStatus = (ResponseCommonDiscoveryStatus) o;
+        return Objects.equals(this.data, responseCommonDiscoveryStatus.data) &&
             super.equals(o);
     }
 
@@ -47,7 +47,7 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "class CommonDiscoveryStatus {\n" +
+        return "class ResponseCommonDiscoveryStatus {\n" +
             "   data: " + toIndentedString(data) + "\n" + 
             "   links: " + toIndentedString(getLinks()) + "\n" + 
             "   meta: " + toIndentedString(getMeta()) + "\n" + 
diff --git a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatusData.java b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatusData.java
similarity index 77%
rename from client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatusData.java
rename to client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatusData.java
index d0c4721..646e901 100644
--- a/client/src/main/java/au/org/consumerdatastandards/client/model/CommonDiscoveryStatusData.java
+++ b/client/src/main/java/au/org/consumerdatastandards/client/model/ResponseCommonDiscoveryStatusData.java
@@ -10,24 +10,48 @@
 import java.time.OffsetDateTime;
 import java.util.Objects;
 
-public class CommonDiscoveryStatusData {
+public class ResponseCommonDiscoveryStatusData {
 
     public enum Status {
         OK,
         PARTIAL_FAILURE,
-        SCHEDULED_OUTAGE,
-        UNAVAILABLE
+        UNAVAILABLE,
+        SCHEDULED_OUTAGE
     }
 
+    private Status status;
+
+    private String explanation;
+
     private OffsetDateTime detectionTime;
 
     private OffsetDateTime expectedResolutionTime;
 
-    private String explanation;
+    private OffsetDateTime updateTime;
 
-    private Status status;
+    /**
+     * Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)
+     * @return status
+     */
+    public Status getStatus() {
+        return status;
+    }
 
-    private OffsetDateTime updateTime;
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    /**
+     * Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK
+     * @return explanation
+     */
+    public String getExplanation() {
+        return explanation;
+    }
+
+    public void setExplanation(String explanation) {
+        this.explanation = explanation;
+    }
 
     /**
      * The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE
@@ -53,30 +77,6 @@ public void setExpectedResolutionTime(OffsetDateTime expectedResolutionTime) {
         this.expectedResolutionTime = expectedResolutionTime;
     }
 
-    /**
-     * Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK
-     * @return explanation
-     */
-    public String getExplanation() {
-        return explanation;
-    }
-
-    public void setExplanation(String explanation) {
-        this.explanation = explanation;
-    }
-
-    /**
-     * Get status
-     * @return status
-     */
-    public Status getStatus() {
-        return status;
-    }
-
-    public void setStatus(Status status) {
-        this.status = status;
-    }
-
     /**
      * The date and time that this status was last updated by the Data Holder.
      * @return updateTime
@@ -97,31 +97,31 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        CommonDiscoveryStatusData commonDiscoveryStatusData = (CommonDiscoveryStatusData) o;
-        return Objects.equals(this.detectionTime, commonDiscoveryStatusData.detectionTime) &&
-            Objects.equals(this.expectedResolutionTime, commonDiscoveryStatusData.expectedResolutionTime) &&
-            Objects.equals(this.explanation, commonDiscoveryStatusData.explanation) &&
-            Objects.equals(this.status, commonDiscoveryStatusData.status) &&
-            Objects.equals(this.updateTime, commonDiscoveryStatusData.updateTime);
+        ResponseCommonDiscoveryStatusData responseCommonDiscoveryStatusData = (ResponseCommonDiscoveryStatusData) o;
+        return Objects.equals(this.status, responseCommonDiscoveryStatusData.status) &&
+            Objects.equals(this.explanation, responseCommonDiscoveryStatusData.explanation) &&
+            Objects.equals(this.detectionTime, responseCommonDiscoveryStatusData.detectionTime) &&
+            Objects.equals(this.expectedResolutionTime, responseCommonDiscoveryStatusData.expectedResolutionTime) &&
+            Objects.equals(this.updateTime, responseCommonDiscoveryStatusData.updateTime);
     }
 
     @Override
     public int hashCode() {
         return Objects.hash(
+            status,
+            explanation,
             detectionTime,
             expectedResolutionTime,
-            explanation,
-            status,
             updateTime);
     }
 
     @Override
     public String toString() {
-        return "class CommonDiscoveryStatusData {\n" +
+        return "class ResponseCommonDiscoveryStatusData {\n" +
+            "   status: " + toIndentedString(status) + "\n" + 
+            "   explanation: " + toIndentedString(explanation) + "\n" + 
             "   detectionTime: " + toIndentedString(detectionTime) + "\n" + 
             "   expectedResolutionTime: " + toIndentedString(expectedResolutionTime) + "\n" + 
-            "   explanation: " + toIndentedString(explanation) + "\n" + 
-            "   status: " + toIndentedString(status) + "\n" + 
             "   updateTime: " + toIndentedString(updateTime) + "\n" + 
             "}";
     }
diff --git a/codegen/dependency-reduced-pom.xml b/codegen/dependency-reduced-pom.xml
deleted file mode 100644
index dc351bd..0000000
--- a/codegen/dependency-reduced-pom.xml
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <parent>
-    <artifactId>cds-java-artefacts</artifactId>
-    <groupId>au.org.consumerdatastandards</groupId>
-    <version>1.0.0-SNAPSHOT</version>
-  </parent>
-  <modelVersion>4.0.0</modelVersion>
-  <artifactId>codegen</artifactId>
-  <name>Code Generator</name>
-  <description>This artefact generates other artefacts such as API client, API server out of API Model</description>
-  <build>
-    <resources>
-      <resource>
-        <directory>src/main/resources</directory>
-      </resource>
-    </resources>
-    <plugins>
-      <plugin>
-        <artifactId>maven-shade-plugin</artifactId>
-        <executions>
-          <execution>
-            <phase>package</phase>
-            <goals>
-              <goal>shade</goal>
-            </goals>
-            <configuration>
-              <transformers>
-                <transformer>
-                  <mainClass>au.org.consumerdatastandards.codegen.CodegenCLI</mainClass>
-                </transformer>
-              </transformers>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-      <plugin>
-        <groupId>com.spotify</groupId>
-        <artifactId>dockerfile-maven-plugin</artifactId>
-        <executions>
-          <execution>
-            <goals>
-              <goal>build</goal>
-              <goal>push</goal>
-            </goals>
-          </execution>
-        </executions>
-        <configuration>
-          <repository>consumerdatastandardsaustralia/codegen</repository>
-          <tag>${project.version}</tag>
-          <buildArgs>
-            <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
-          </buildArgs>
-          <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
-        </configuration>
-      </plugin>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>build-helper-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <artifactId>maven-surefire-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <groupId>org.jacoco</groupId>
-        <artifactId>jacoco-maven-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-      </plugin>
-    </plugins>
-  </build>
-  <properties>
-    <google-java-format.version>1.7</google-java-format.version>
-    <commons-text.version>1.6</commons-text.version>
-    <jcommander.version>1.72</jcommander.version>
-    <swagger-codegen.version>2.4.8</swagger-codegen.version>
-    <guava.version>27.1-jre</guava.version>
-    <commons-cli.version>1.4</commons-cli.version>
-  </properties>
-</project>
diff --git a/codegen/pom.xml b/codegen/pom.xml
index a104f16..4e59608 100644
--- a/codegen/pom.xml
+++ b/codegen/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>codegen</artifactId>
     <name>Code Generator</name>
diff --git a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/JavaCodegenBase.java b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/JavaCodegenBase.java
index 6a8552b..d693453 100644
--- a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/JavaCodegenBase.java
+++ b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/JavaCodegenBase.java
@@ -30,7 +30,7 @@
     };
 
 
-    private Swagger swagger;
+    protected Swagger swagger;
     private Map<String, String> refParameters = new HashMap<>();
     private Set<String> refModels = new HashSet<>();
     private Map<String, Set<String>> modelPackages = new HashMap<String, Set<String>>() {
@@ -862,4 +862,5 @@ public boolean isMeta() {
         }
     }
 
+
 }
diff --git a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/apimodel/ApiModelGen.java b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/apimodel/ApiModelGen.java
index dc8f0f5..f3a0e9b 100644
--- a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/apimodel/ApiModelGen.java
+++ b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/apimodel/ApiModelGen.java
@@ -1,10 +1,11 @@
 package au.org.consumerdatastandards.codegen.code.java.apimodel;
 
 import au.org.consumerdatastandards.codegen.code.java.JavaCodegenBase;
-import io.swagger.codegen.CodegenOperation;
 import io.swagger.codegen.CodegenResponse;
 import io.swagger.codegen.CodegenType;
+import io.swagger.codegen.SupportingFile;
 import io.swagger.codegen.mustache.UppercaseLambda;
+import io.swagger.models.Swagger;
 
 import java.io.File;
 import java.util.List;
@@ -44,14 +45,26 @@ public ApiModelGen() {
         sourceFolder = "src/gen/java";
         embeddedTemplateDir = templateDir = "ApiModel";
         artifactId = "api-model";
-        apiPackage = "au.org.consumerdatastandards.api";
-        modelPackage = "au.org.consumerdatastandards.api.models";
         modelDocTemplateFiles.clear();
         apiDocTemplateFiles.clear();
         apiTestTemplateFiles.clear();
         additionalProperties.put("uppercase", new UppercaseLambda());
     }
 
+    @Override
+    public void preprocessSwagger(Swagger swagger) {
+        super.preprocessSwagger(swagger);
+        String version = "v" + swagger.getInfo().getVersion().replace('.', '_');
+        apiPackage = "au.org.consumerdatastandards.api." + version;
+        modelPackage = String.format("au.org.consumerdatastandards.api.%s.models", version);
+        String commonModelPackage = String.format("au.org.consumerdatastandards.api.%s.common.models", version);
+        additionalProperties.put("commonModelPackage", commonModelPackage);
+        final String commonModelFolder = (sourceFolder + '/' + commonModelPackage).replace(".", "/");
+        supportingFiles.add(new SupportingFile("BaseResponse.mustache", commonModelFolder, "BaseResponse.java"));
+        supportingFiles.add(new SupportingFile("PaginatedResponse.mustache", commonModelFolder, "PaginatedResponse.java"));
+        supportingFiles.add(new SupportingFile("Meta.mustache", commonModelFolder, "Meta.java"));
+    }
+
     @Override
     public CodegenType getTag() {
         return CodegenType.OTHER;
diff --git a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/server/JavaServerGen.java b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/server/JavaServerGen.java
index aedbf1b..255f69a 100644
--- a/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/server/JavaServerGen.java
+++ b/codegen/src/main/java/au/org/consumerdatastandards/codegen/code/java/server/JavaServerGen.java
@@ -4,6 +4,7 @@
 import io.swagger.codegen.CodegenType;
 import io.swagger.codegen.SupportingFile;
 import io.swagger.codegen.languages.SpringCodegen;
+import io.swagger.models.Swagger;
 
 import java.io.File;
 
@@ -20,8 +21,6 @@ public JavaServerGen() {
         outputFolder = "generated-code" + File.separator + "holder";
         embeddedTemplateDir = templateDir = "JavaServer";
         invokerPackage = DEFAULT_BASE_PACKAGE;
-        apiPackage = DEFAULT_BASE_PACKAGE + ".api";
-        modelPackage = DEFAULT_BASE_PACKAGE + ".model";
         artifactId = "data-holder";
 
         additionalProperties.put(SpringCodegen.CONFIG_PACKAGE, configPackage);
@@ -29,6 +28,14 @@ public JavaServerGen() {
         additionalProperties.put("jackson", "true");
     }
 
+    @Override
+    public void preprocessSwagger(Swagger swagger) {
+        super.preprocessSwagger(swagger);
+        String versionSubPackage = ".v" + swagger.getInfo().getVersion().replace('.', '_');
+        apiPackage = DEFAULT_BASE_PACKAGE + versionSubPackage  + ".api";
+        modelPackage = DEFAULT_BASE_PACKAGE + versionSubPackage + ".model";
+    }
+
     @Override
     public String toApiName(String name) {
         return name + "Api";
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/BaseResponse.java b/codegen/src/main/resources/ApiModel/BaseResponse.mustache
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/BaseResponse.java
rename to codegen/src/main/resources/ApiModel/BaseResponse.mustache
index c3719c6..b87ea9c 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/BaseResponse.java
+++ b/codegen/src/main/resources/ApiModel/BaseResponse.mustache
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package {{commonModelPackage}};
 
 import au.org.consumerdatastandards.support.data.DataDefinition;
 import au.org.consumerdatastandards.support.data.Property;
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Meta.java b/codegen/src/main/resources/ApiModel/Meta.mustache
similarity index 62%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Meta.java
rename to codegen/src/main/resources/ApiModel/Meta.mustache
index 6cead3c..04a68dc 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/Meta.java
+++ b/codegen/src/main/resources/ApiModel/Meta.mustache
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package {{commonModelPackage}};
 
 import au.org.consumerdatastandards.support.data.*;
 
diff --git a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/PaginatedResponse.java b/codegen/src/main/resources/ApiModel/PaginatedResponse.mustache
similarity index 92%
rename from api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/PaginatedResponse.java
rename to codegen/src/main/resources/ApiModel/PaginatedResponse.mustache
index 28ebf6d..1497318 100644
--- a/api-model/src/gen/java/au/org/consumerdatastandards/api/common/models/PaginatedResponse.java
+++ b/codegen/src/main/resources/ApiModel/PaginatedResponse.mustache
@@ -1,4 +1,4 @@
-package au.org.consumerdatastandards.api.common.models;
+package {{commonModelPackage}};
 
 import au.org.consumerdatastandards.support.data.DataDefinition;
 import au.org.consumerdatastandards.support.data.Property;
diff --git a/codegen/src/main/resources/ApiModel/api.mustache b/codegen/src/main/resources/ApiModel/api.mustache
index 2923361..89880ad 100644
--- a/codegen/src/main/resources/ApiModel/api.mustache
+++ b/codegen/src/main/resources/ApiModel/api.mustache
@@ -35,14 +35,14 @@ public interface {{classname}}  {
     {{returnType}} {{operationId}}({{^hasParams}});{{/hasParams}}{{#hasParams}}{{#allParams}}
         @Param(
             name = "{{baseName}}",
-            description = "{{description}}",
+            description = "{{{description}}}",
             in = {{#isHeaderParam}}ParamLocation.HEADER{{/isHeaderParam}}{{#isPathParam}}ParamLocation.PATH{{/isPathParam}}{{#isQueryParam}}ParamLocation.QUERY{{/isQueryParam}}{{#isBodyParam}}ParamLocation.BODY{{/isBodyParam}}{{#defaultValue}},
             defaultValue = "{{{defaultValue}}}"{{/defaultValue}}{{#isRequired}},
             required = true{{/isRequired}}{{#isReference}},
             reference = "{{referenceName}}"{{/isReference}}
         ){{#isCdsType}}
         {{cdsTypeAnnotation}}{{/isCdsType}}
-        {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}
+        {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}} {{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}
     );{{/hasParams}}
 {{/operation}}
 {{/operations}}
diff --git a/codegen/src/main/resources/ApiModel/enumOuterClass.mustache b/codegen/src/main/resources/ApiModel/enumOuterClass.mustache
index 6598f14..c5800b2 100644
--- a/codegen/src/main/resources/ApiModel/enumOuterClass.mustache
+++ b/codegen/src/main/resources/ApiModel/enumOuterClass.mustache
@@ -5,4 +5,4 @@ import au.org.consumerdatastandards.support.data.*;
 )
 public enum {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} {{openBracket}}{{#allowableValues}}{{#values}}
     {{{.}}}{{^-last}},{{/-last}}{{/values}}{{/allowableValues}}
-}
+}
\ No newline at end of file
diff --git a/codegen/src/main/resources/ApiModel/model.mustache b/codegen/src/main/resources/ApiModel/model.mustache
index e347293..f3d683b 100644
--- a/codegen/src/main/resources/ApiModel/model.mustache
+++ b/codegen/src/main/resources/ApiModel/model.mustache
@@ -1,8 +1,8 @@
 package {{package}};
 
 {{#imports}}import {{import}};
-{{/imports}}{{#models}}{{#model}}{{#importingBaseResponse}}import au.org.consumerdatastandards.api.common.models.BaseResponse;
-{{/importingBaseResponse}}{{#importingPaginatedResponse}}import au.org.consumerdatastandards.api.common.models.PaginatedResponse;
+{{/imports}}{{#models}}{{#model}}{{#importingBaseResponse}}import {{commonModelPackage}}.BaseResponse;
+{{/importingBaseResponse}}{{#importingPaginatedResponse}}import {{commonModelPackage}}.PaginatedResponse;
 {{/importingPaginatedResponse}}{{#isEnum}}{{>enumOuterClass}}{{/isEnum}}{{^isEnum}}import au.org.consumerdatastandards.support.data.*;
 
 {{>pojo}}{{/isEnum}}
diff --git a/codegen/src/main/resources/ApiModel/pojo.mustache b/codegen/src/main/resources/ApiModel/pojo.mustache
index 6079082..38a3327 100644
--- a/codegen/src/main/resources/ApiModel/pojo.mustache
+++ b/codegen/src/main/resources/ApiModel/pojo.mustache
@@ -21,7 +21,7 @@ public class {{classname}}{{#isPaginatedResponse}} extends PaginatedResponse{{/i
         required = true{{/required}}
     ){{/isSimple}}{{#isCdsType}}
     {{cdsTypeAnnotation}}{{/isCdsType}}
-    {{{datatypeWithEnum}}} {{baseName}}{{#isDefaultValueVisible}} = {{defaultValue}}{{/isDefaultValueVisible}};
+    {{{datatypeWithEnum}}} {{baseName}}{{#isDefaultValueVisible}} = {{{defaultValue}}}{{/isDefaultValueVisible}};
     {{/isInherited}}
 {{/vars}}
 }{{/model}}{{/models}}
\ No newline at end of file
diff --git a/codegen/src/main/resources/JavaClient/ApiClient.mustache b/codegen/src/main/resources/JavaClient/ApiClient.mustache
index 2e5091a..3ec42ec 100644
--- a/codegen/src/main/resources/JavaClient/ApiClient.mustache
+++ b/codegen/src/main/resources/JavaClient/ApiClient.mustache
@@ -62,29 +62,15 @@ public class ApiClient {
         json = new JSON();
 
         // Set default User-Agent.
-        setUserAgent("CDS Client/1.0.0/java");
+        setUserAgent("CDS Client/1.1.1/java");
 
         addDefaultHeader("Accept", "application/json");
         addDefaultHeader("Content-Type", "application/json");
         addDefaultHeader("x-v", "1");
         addDefaultHeader("x-min-v", "1");
-        addDefaultHeader("x-fapi-customer-ip-address", getIpAddress());
         addDefaultHeader("x-fapi-interaction-id", UUID.randomUUID().toString());
     }
 
-    private String getIpAddress() {
-      String ipAddress = "unknown";
-      try {
-        final DatagramSocket socket = new DatagramSocket();
-        socket.connect(InetAddress.getByName("203.98.87.18"), 53); // ns1.internet.net.au.
-        ipAddress = socket.getLocalAddress().getHostAddress();
-        socket.disconnect();
-      } catch (SocketException | UnknownHostException e) {
-        // ignored
-      }
-      return ipAddress;
-    }
-
     /**
      * Get base path
      *
diff --git a/codegen/src/main/resources/JavaClient/api.mustache b/codegen/src/main/resources/JavaClient/api.mustache
index a1ec987..eef201a 100644
--- a/codegen/src/main/resources/JavaClient/api.mustache
+++ b/codegen/src/main/resources/JavaClient/api.mustache
@@ -10,7 +10,7 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import ch.qos.logback.classic.Logger;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 {{#operations}}
@@ -20,7 +20,7 @@ public class {{classname}} {
 {{>modelInnerEnum}}
 {{/_enums}}
 
-    private static final Logger LOGGER = (Logger) LoggerFactory.getLogger({{classname}}.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger({{classname}}.class);
 
     private ApiClient apiClient;
 
@@ -49,12 +49,12 @@ public class {{classname}} {
      * @throws ApiException If fail to serialize the request body object
      {{#responses.0}}
      * http.response.details
-     <table summary="Response Details" border="1">
-        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
         {{#responses}}
-        <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
+     *   <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
         {{/responses}}
-     </table>
+     * </table>
      {{/responses.0}}
      {{#isDeprecated}}
      * @deprecated
@@ -112,12 +112,12 @@ public class {{classname}} {
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      {{#responses.0}}
      * http.response.details
-     <table summary="Response Details" border="1">
-        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
         {{#responses}}
-        <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
+     *   <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
         {{/responses}}
-     </table>
+     * </table>
      {{/responses.0}}
      {{#isDeprecated}}
      * @deprecated
@@ -147,12 +147,12 @@ public class {{classname}} {
      * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
      {{#responses.0}}
      * http.response.details
-     <table summary="Response Details" border="1">
-        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     * <table summary="Response Details" border="1">
+     *   <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
         {{#responses}}
-        <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
+     *   <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
         {{/responses}}
-     </table>
+     * </table>
      {{/responses.0}}
      {{#isDeprecated}}
      * @deprecated
@@ -180,12 +180,12 @@ public class {{classname}} {
      * @throws ApiException If fail to process the API call, e.g. serializing the request body object
      {{#responses.0}}
      * http.response.details
-     <table summary="Response Details" border="1">
-        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
+     * <table summary="Response Details" border="1">
+     *    <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
         {{#responses}}
-        <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
+     *    <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
         {{/responses}}
-     </table>
+     * </table>
      {{/responses.0}}
      {{#isDeprecated}}
      * @deprecated
@@ -217,4 +217,4 @@ public class {{classname}} {
         }
     }
 }
-{{/operations}}
\ No newline at end of file
+{{/operations}}
diff --git a/codegen/src/main/resources/JavaClient/pojo.mustache b/codegen/src/main/resources/JavaClient/pojo.mustache
index 4950067..583c239 100644
--- a/codegen/src/main/resources/JavaClient/pojo.mustache
+++ b/codegen/src/main/resources/JavaClient/pojo.mustache
@@ -71,7 +71,7 @@ public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
     @Override
     public String toString() {
         return "class {{classname}} {\n" +{{#vars}}
-            "   {{name}}: " + toIndentedString({{^isInherited}}{{name}}{{/isInherited}}{{#isInherited}}{{getter}}(){{/isInherited}}) + "\n" + {{/vars}}
+            "   {{name}}: " + toIndentedString({{^isInherited}}{{name}}{{/isInherited}}{{#isInherited}}{{getter}}(){{/isInherited}}) + "\n" +{{/vars}}
             "}";
     }{{#hasVars}}
 
@@ -85,4 +85,4 @@ public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
         }
         return o.toString().replace("\n", "\n    ");
     }{{/hasVars}}
-}
\ No newline at end of file
+}
diff --git a/codegen/src/main/resources/JavaServer/WebUtil.mustache b/codegen/src/main/resources/JavaServer/WebUtil.mustache
index fe025fd..37e25f7 100644
--- a/codegen/src/main/resources/JavaServer/WebUtil.mustache
+++ b/codegen/src/main/resources/JavaServer/WebUtil.mustache
@@ -1,20 +1,12 @@
 package {{basePackage}}.util;
 
-import org.springframework.http.HttpHeaders;
 import org.springframework.util.StringUtils;
 import org.springframework.web.context.request.NativeWebRequest;
 
 import javax.servlet.http.HttpServletRequest;
-import java.util.UUID;
 
 public class WebUtil {
 
-    final static String V = "x-v";
-    final static String MIN_V = "x-min-v";
-    final static Integer CURRENT_VERSION = 1;
-    final static String CORRELATION_ID = "x-Correlation-Id";
-    final static String FAPI_INTERACTION_ID = "x-fapi-interaction-id";
-
     public static String getPaginatedLink(NativeWebRequest request, Integer page, Integer pageSize) {
         HttpServletRequest servletRequest = request.getNativeRequest(HttpServletRequest.class);
         String paginatedLink = getOriginalUrl(servletRequest);
@@ -38,23 +30,6 @@ public class WebUtil {
         return getOriginalUrl(request.getNativeRequest(HttpServletRequest.class));
     }
 
-    public static HttpHeaders processHeaders(NativeWebRequest request) {
-        HttpHeaders responseHeaders = new HttpHeaders();
-        responseHeaders.set("content-type", "application/json");
-        responseHeaders.set(V, getCurrentVersion().toString());
-        String correlationId = request.getHeader(CORRELATION_ID);
-        if (!StringUtils.isEmpty(correlationId)) {
-            responseHeaders.set(CORRELATION_ID, correlationId);
-        }
-        String fapiInteractionId = request.getHeader(FAPI_INTERACTION_ID);
-        if (!StringUtils.isEmpty(fapiInteractionId)) {
-            responseHeaders.set(FAPI_INTERACTION_ID, fapiInteractionId);
-        } else {
-            responseHeaders.set(FAPI_INTERACTION_ID, UUID.randomUUID().toString());
-        }
-        return responseHeaders;
-    }
-
     private static String getOriginalUrl(HttpServletRequest request) {
         StringBuffer requestURL = request.getRequestURL();
         String queryString = request.getQueryString();
@@ -65,37 +40,4 @@ public class WebUtil {
             return requestURL.append("?").append(queryString).toString();
         }
     }
-
-    public static Integer getVersionHeader(NativeWebRequest request, String header) {
-        Integer versionValue = null;
-        String headerValue = request.getHeader(header);
-        if (!StringUtils.isEmpty(headerValue)) {
-            try {
-                versionValue = Integer.parseInt(headerValue);
-            } catch (NumberFormatException e) {
-                // ignore it
-            }
-        }
-
-        return versionValue;
-    }
-
-    public static Integer getMaximumVersion(NativeWebRequest request) {
-        return getVersionHeader(request, V);
-    }
-
-    public static Integer getMinimumVersion(NativeWebRequest request) {
-        return getVersionHeader(request, MIN_V);
-    }
-
-    public static Integer getCurrentVersion() {
-        return CURRENT_VERSION;
-    }
-
-    public static boolean hasSupportedVersion(NativeWebRequest request) {
-        if (getMaximumVersion(request) != null && getCurrentVersion() > getMaximumVersion(request)) {
-            return false;
-        }
-        return getMinimumVersion(request) == null || getCurrentVersion() >= getMinimumVersion(request);
-    }
-}
+}
\ No newline at end of file
diff --git a/codegen/src/main/resources/JavaServer/pom.mustache b/codegen/src/main/resources/JavaServer/pom.mustache
index 5bb889f..f157007 100644
--- a/codegen/src/main/resources/JavaServer/pom.mustache
+++ b/codegen/src/main/resources/JavaServer/pom.mustache
@@ -4,14 +4,14 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.0.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>data-holder</artifactId>
     <name>Data Holder</name>
     <description>CDS sample data holder</description>
     <properties>
         <springfox.version>2.9.2</springfox.version>
-        <jackson-databind-nullable.version>0.1.0</jackson-databind-nullable.version>
+        <jackson-databind-nullable.version>0.2.0</jackson-databind-nullable.version>
         <h2.version>1.4.199</h2.version>
     </properties>
     <build>
diff --git a/data-holder/pom.xml b/data-holder/pom.xml
index 906acd2..66552a7 100644
--- a/data-holder/pom.xml
+++ b/data-holder/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>data-holder</artifactId>
     <name>Data Holder</name>
@@ -171,4 +171,4 @@
             <artifactId>commons-codec</artifactId>
         </dependency>
     </dependencies>
-</project>
+</project>
\ No newline at end of file
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/ApiControllerBase.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/ApiControllerBase.java
index 6c87e5a..65663a6 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/ApiControllerBase.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/ApiControllerBase.java
@@ -18,6 +18,7 @@
 public class ApiControllerBase {
 
     private final static String V = "x-v";
+    private final static String MIN_V = "x-min-v";
     private final static String CORRELATION_ID = "x-Correlation-Id";
     private final static String FAPI_INTERACTION_ID = "x-fapi-interaction-id";
     private final static String BASE64_PATTERN = "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$";
@@ -34,21 +35,31 @@ protected void validatePageInputs(Integer page, Integer pageSize) {
         }
     }
 
-    private boolean hasSupportedVersion(Integer xMinV, Integer xV) {
-        if (xV != null && getCurrentVersion() > xV) {
-            return false;
-        }
-        return xMinV == null || getCurrentVersion() >= xMinV;
+    protected boolean hasSupportedVersion(Integer xMinV, Integer xV) {
+        if (xV == null) return false;
+        return (xMinV == null || getCurrentVersion() >= xMinV) && (xMinV != null || getCurrentVersion() >= xV);
     }
 
-    private Integer getCurrentVersion() {
+    protected Integer getSupportedVersion(Integer xMinV, Integer xV) {
+        validateHeaders(xMinV, xV);
+        if (xMinV == null) return xV;
+        return Math.min(xV, getCurrentVersion());
+    }
+
+    protected Integer getCurrentVersion() {
         return 1;
     }
 
     protected HttpHeaders generateResponseHeaders(NativeWebRequest request) {
         HttpHeaders responseHeaders = new HttpHeaders();
         responseHeaders.set("content-type", "application/json");
-        responseHeaders.set(V, getCurrentVersion().toString());
+        Integer xMinV = null;
+        String minV = request.getHeader(MIN_V);
+        if (StringUtils.hasText(minV)) {
+            xMinV = Integer.parseInt(minV);
+        }
+        Integer xV = Integer.parseInt(request.getHeader(V));
+        responseHeaders.set(V, "" + getSupportedVersion(xMinV, xV));
         String correlationId = request.getHeader(CORRELATION_ID);
         if (!StringUtils.isEmpty(correlationId)) {
             responseHeaders.set(CORRELATION_ID, correlationId);
@@ -72,8 +83,7 @@ protected void validateHeaders(Integer xMinV, Integer xV) {
         }
     }
 
-    protected void validateHeaders(String xCdsUserAgent,
-                                   String xCdsSubject,
+    protected void validateHeaders(String xCdsClientHeaders,
                                    String xFapiCustomerIpAddress,
                                    Integer xMinV, Integer xV) {
         validateHeaders(xMinV, xV);
@@ -82,13 +92,13 @@ protected void validateHeaders(String xCdsUserAgent,
             if (!inetAddressValidator.isValid(xFapiCustomerIpAddress)) {
                 throw new ValidationException("request header x-fapi-customer-ip-address is not valid IP address");
             }
-            if (StringUtils.isEmpty(xCdsUserAgent)) {
-                throw new ValidationException("request header x-cds-user-agent is not present");
-            } else if (!xCdsUserAgent.matches(BASE64_PATTERN)) {
-                throw new ValidationException("request header x-cds-user-agent is not Base64 encoded");
+            if (StringUtils.isEmpty(xCdsClientHeaders)) {
+                throw new ValidationException("request header x-cds-client-headers is not present");
+            } else if (!xCdsClientHeaders.matches(BASE64_PATTERN)) {
+                throw new ValidationException("request header x-cds-client-headers is not Base64 encoded");
             }
-            if (StringUtils.isEmpty(xCdsSubject)) {
-                throw new ValidationException("request header x-cds-subject is not present");
+            if (StringUtils.isEmpty(xCdsClientHeaders)) {
+                throw new ValidationException("request header x-cds-client-headers is not present");
             }
         }
     }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApi.java
index 4503558..1f23983 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApi.java
@@ -51,13 +51,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -111,13 +107,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -189,13 +181,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -259,13 +247,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -288,7 +272,7 @@
 
     @ApiOperation(
         value = "Get Account Balance",
-        nickname = "listBalance",
+        nickname = "getBalance",
         notes = "Obtain the balance for a single specified account",
         response = ResponseBankingAccountsBalanceById.class,
         tags = {"Accounts", "Banking"}
@@ -305,7 +289,7 @@
         method = RequestMethod.GET
     )
     @PreAuthorize("hasAuthority('SCOPE_bank:accounts.basic:read')")
-    ResponseEntity<ResponseBankingAccountsBalanceById> listBalance(
+    ResponseEntity<ResponseBankingAccountsBalanceById> getBalance(
         @ApiParam(
             value = "ID of the specific account requested",
             required = true
@@ -314,13 +298,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -384,13 +364,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -450,13 +426,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApiController.java
index 617efc9..979c75a 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingAccountsApiController.java
@@ -44,14 +44,13 @@ public BankingAccountsApiController(NativeWebRequest request,
     }
 
     public ResponseEntity<ResponseBankingAccountById> getAccountDetail(String accountId,
-                                                                       String xCdsUserAgent,
-                                                                       String xCdsSubject,
+                                                                       String xCdsClientHeaders,
                                                                        OffsetDateTime xFapiAuthDate,
                                                                        String xFapiCustomerIpAddress,
                                                                        UUID xFapiInteractionId,
                                                                        Integer xMinV,
                                                                        Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         BankingAccountDetail bankingAccountDetail = accountService.getBankingAccountDetail(accountId);
         if (bankingAccountDetail == null) {
@@ -66,14 +65,13 @@ public BankingAccountsApiController(NativeWebRequest request,
 
     public ResponseEntity<ResponseBankingTransactionById> getTransactionDetail(String accountId,
                                                                                String transactionId,
-                                                                               String xCdsUserAgent,
-                                                                               String xCdsSubject,
+                                                                               String xCdsClientHeaders,
                                                                                OffsetDateTime xFapiAuthDate,
                                                                                String xFapiCustomerIpAddress,
                                                                                UUID xFapiInteractionId,
                                                                                Integer xMinV,
                                                                                Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         BankingTransactionDetail transactionDetail = transactionService.getBankingTransactionDetail(transactionId);
         if (transactionDetail == null) {
@@ -93,14 +91,13 @@ public BankingAccountsApiController(NativeWebRequest request,
                                                                           Integer page,
                                                                           Integer pageSize,
                                                                           String text,
-                                                                          String xCdsUserAgent,
-                                                                          String xCdsSubject,
+                                                                          String xCdsClientHeaders,
                                                                           OffsetDateTime xFapiAuthDate,
                                                                           String xFapiCustomerIpAddress,
                                                                           UUID xFapiInteractionId,
                                                                           Integer xMinV,
                                                                           Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -121,14 +118,13 @@ public BankingAccountsApiController(NativeWebRequest request,
                                                                    Integer page,
                                                                    Integer pageSize,
                                                                    ParamProductCategory productCategory,
-                                                                   String xCdsUserAgent,
-                                                                   String xCdsSubject,
+                                                                   String xCdsClientHeaders,
                                                                    OffsetDateTime xFapiAuthDate,
                                                                    String xFapiCustomerIpAddress,
                                                                    UUID xFapiInteractionId,
                                                                    Integer xMinV,
                                                                    Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -150,15 +146,14 @@ public BankingAccountsApiController(NativeWebRequest request,
         return new ResponseEntity<>(responseBankingAccountList, headers, HttpStatus.OK);
     }
 
-    public ResponseEntity<ResponseBankingAccountsBalanceById> listBalance(String accountId,
-                                                                          String xCdsUserAgent,
-                                                                          String xCdsSubject,
-                                                                          OffsetDateTime xFapiAuthDate,
-                                                                          String xFapiCustomerIpAddress,
-                                                                          UUID xFapiInteractionId,
-                                                                          Integer xMinV,
-                                                                          Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+    public ResponseEntity<ResponseBankingAccountsBalanceById> getBalance(String accountId,
+                                                                         String xCdsClientHeaders,
+                                                                         OffsetDateTime xFapiAuthDate,
+                                                                         String xFapiCustomerIpAddress,
+                                                                         UUID xFapiInteractionId,
+                                                                         Integer xMinV,
+                                                                         Integer xV) {
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         BankingBalance balance = accountService.getBankingBalance(accountId);
         if (balance == null) {
@@ -176,13 +171,11 @@ public BankingAccountsApiController(NativeWebRequest request,
                                                                                ParamProductCategory paramProductCategory,
                                                                                Integer page,
                                                                                Integer pageSize,
-                                                                               String xCdsUserAgent,
-                                                                               String xCdsSubject,
-                                                                               OffsetDateTime xFapiAuthDate,
+String xCdsClientHeaders,OffsetDateTime xFapiAuthDate,
                                                                                String xFapiCustomerIpAddress,
                                                                                UUID xFapiInteractionId,
                                                                                Integer xMinV, Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -203,14 +196,12 @@ public BankingAccountsApiController(NativeWebRequest request,
     public ResponseEntity<ResponseBankingAccountsBalanceList> listBalancesSpecificAccounts(RequestAccountIds accountIds,
                                                                                            Integer page,
                                                                                            Integer pageSize,
-                                                                                           String xCdsUserAgent,
-                                                                                           String xCdsSubject,
-                                                                                           OffsetDateTime xFapiAuthDate,
+            String xCdsClientHeaders,OffsetDateTime xFapiAuthDate,
                                                                                            String xFapiCustomerIpAddress,
                                                                                            UUID xFapiInteractionId,
                                                                                            Integer xMinV,
                                                                                            Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApi.java
index 83791c8..dc03733 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApi.java
@@ -71,13 +71,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -141,13 +137,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -207,13 +199,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApiController.java
index e91d3b8..d35aeb6 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingDirectDebitsApiController.java
@@ -49,14 +49,13 @@ public BankingDirectDebitsApiController(NativeWebRequest request,
     public ResponseEntity<ResponseBankingDirectDebitAuthorisationList> listDirectDebits(String accountId,
                                                                                         Integer page,
                                                                                         Integer pageSize,
-                                                                                        String xCdsUserAgent,
-                                                                                        String xCdsSubject,
+                                                                                        String xCdsClientHeaders,
                                                                                         OffsetDateTime xFapiAuthDate,
                                                                                         String xFapiCustomerIpAddress,
                                                                                         UUID xFapiInteractionId,
                                                                                         Integer xMinV,
                                                                                         Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -73,14 +72,13 @@ public BankingDirectDebitsApiController(NativeWebRequest request,
                                                                                             ParamProductCategory paramProductCategory,
                                                                                             Integer page,
                                                                                             Integer pageSize,
-                                                                                            String xCdsUserAgent,
-                                                                                            String xCdsSubject,
+                                                                                            String xCdsClientHeaders,
                                                                                             OffsetDateTime xFapiAuthDate,
                                                                                             String xFapiCustomerIpAddress,
                                                                                             UUID xFapiInteractionId,
                                                                                             Integer xMinV,
                                                                                             Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -102,14 +100,13 @@ public BankingDirectDebitsApiController(NativeWebRequest request,
     public ResponseEntity<ResponseBankingDirectDebitAuthorisationList> listDirectDebitsSpecificAccounts(RequestAccountIds accountIds,
                                                                                                         Integer page,
                                                                                                         Integer pageSize,
-                                                                                                        String xCdsUserAgent,
-                                                                                                        String xCdsSubject,
+                                                                                                        String xCdsClientHeaders,
                                                                                                         OffsetDateTime xFapiAuthDate,
                                                                                                         String xFapiCustomerIpAddress,
                                                                                                         UUID xFapiInteractionId,
                                                                                                         Integer xMinV,
                                                                                                         Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApi.java
index c63c057..dea5eeb 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApi.java
@@ -58,13 +58,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -121,13 +117,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApiController.java
index 99c7e9d..1286414 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingPayeesApiController.java
@@ -38,14 +38,13 @@ public BankingPayeesApiController(NativeWebRequest request, BankingPayeeService
     }
 
     public ResponseEntity<ResponseBankingPayeeById> getPayeeDetail(String payeeId,
-                                                                   String xCdsUserAgent,
-                                                                   String xCdsSubject,
+                                                                   String xCdsClientHeaders,
                                                                    OffsetDateTime xFapiAuthDate,
                                                                    String xFapiCustomerIpAddress,
                                                                    UUID xFapiInteractionId,
                                                                    Integer xMinV,
                                                                    Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         BankingPayeeDetail payeeDetail = payeeService.getBankingPayeeDetail(payeeId);
         if (payeeDetail == null) {
@@ -60,14 +59,13 @@ public BankingPayeesApiController(NativeWebRequest request, BankingPayeeService
     public ResponseEntity<ResponseBankingPayeeList> listPayees(Integer page,
                                                                Integer pageSize,
                                                                ParamPayeeType type,
-                                                               String xCdsUserAgent,
-                                                               String xCdsSubject,
+                                                               String xCdsClientHeaders,
                                                                OffsetDateTime xFapiAuthDate,
                                                                String xFapiCustomerIpAddress,
                                                                UUID xFapiInteractionId,
                                                                Integer xMinV,
                                                                Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingProductsApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingProductsApiController.java
index c05aef6..ea7d4e1 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingProductsApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingProductsApiController.java
@@ -1,6 +1,15 @@
 package au.org.consumerdatastandards.holder.api;
 
-import au.org.consumerdatastandards.holder.model.*;
+import au.org.consumerdatastandards.holder.model.BankingProduct;
+import au.org.consumerdatastandards.holder.model.BankingProductCategory;
+import au.org.consumerdatastandards.holder.model.BankingProductDetail;
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV1;
+import au.org.consumerdatastandards.holder.model.BankingProductV1;
+import au.org.consumerdatastandards.holder.model.Links;
+import au.org.consumerdatastandards.holder.model.ParamEffective;
+import au.org.consumerdatastandards.holder.model.ResponseBankingProductById;
+import au.org.consumerdatastandards.holder.model.ResponseBankingProductList;
+import au.org.consumerdatastandards.holder.model.ResponseBankingProductListData;
 import au.org.consumerdatastandards.holder.service.BankingProductService;
 import au.org.consumerdatastandards.holder.util.WebUtil;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -14,8 +23,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.context.request.NativeWebRequest;
 
-import javax.validation.constraints.Min;
-import javax.validation.constraints.NotBlank;
 import java.time.OffsetDateTime;
 import java.util.Optional;
 
@@ -44,7 +51,7 @@ public BankingProductsApiController(NativeWebRequest request, BankingProductServ
                                                                        Integer xV) {
         validateHeaders(xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
-        BankingProductDetail productDetail = service.getProductDetail(productId);
+        BankingProductDetail productDetail = service.getProductDetail(productId, getSupportedVersion(xMinV, xV));
         if (productDetail == null) {
             return new ResponseEntity<>(null, headers, HttpStatus.NOT_FOUND);
         }
@@ -74,7 +81,7 @@ public BankingProductsApiController(NativeWebRequest request, BankingProductServ
         validateHeaders(xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
-        BankingProduct bankingProduct = new BankingProduct();
+        BankingProduct bankingProduct = new BankingProductV1();
         bankingProduct.setLastUpdated(updatedSince);
         bankingProduct.setBrand(brand);
         if (productCategory != null) {
@@ -84,7 +91,7 @@ public BankingProductsApiController(NativeWebRequest request, BankingProductServ
         Integer actualPage = getPagingValue(page, 1);
         Integer actualPageSize = getPagingValue(pageSize, 25);
         Page<BankingProduct> productsPage = service.findProductsLike(effective, bankingProduct,
-            PageRequest.of(actualPage - 1, actualPageSize));
+            PageRequest.of(actualPage - 1, actualPageSize), getSupportedVersion(xMinV, xV));
 
         logger.info(
             "Returning basic product listing page {} of {} (page size of {}) using filters of effective {}, updated since {}, brand {}, product category of {}",
@@ -104,4 +111,9 @@ public BankingProductsApiController(NativeWebRequest request, BankingProductServ
         logger.debug("Product listing raw response payload is: {}", responseProductList);
         return new ResponseEntity<>(responseProductList, headers, HttpStatus.OK);
     }
+
+    @Override
+    protected Integer getCurrentVersion() {
+        return 2;
+    }
 }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApi.java
index 262ecc6..7b44d3f 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApi.java
@@ -58,13 +58,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -127,13 +123,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -195,13 +187,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApiController.java
index ceaee75..9a4b137 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/BankingScheduledPaymentsApiController.java
@@ -39,14 +39,13 @@ public BankingScheduledPaymentsApiController(NativeWebRequest request, BankingSc
     public ResponseEntity<ResponseBankingScheduledPaymentsList> listScheduledPayments(String accountId,
                                                                                       Integer page,
                                                                                       Integer pageSize,
-                                                                                      String xCdsUserAgent,
-                                                                                      String xCdsSubject,
+                                                                                      String xCdsClientHeaders,
                                                                                       OffsetDateTime xFapiAuthDate,
                                                                                       String xFapiCustomerIpAddress,
                                                                                       UUID xFapiInteractionId,
                                                                                       Integer xMinV,
                                                                                       Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -63,14 +62,13 @@ public BankingScheduledPaymentsApiController(NativeWebRequest request, BankingSc
                                                                                           Boolean isOwned,
                                                                                           Integer page,
                                                                                           Integer pageSize,
-                                                                                          String xCdsUserAgent,
-                                                                                          String xCdsSubject,
+                                                                                          String xCdsClientHeaders,
                                                                                           OffsetDateTime xFapiAuthDate,
                                                                                           String xFapiCustomerIpAddress,
                                                                                           UUID xFapiInteractionId,
                                                                                           Integer xMinV,
                                                                                           Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
@@ -85,14 +83,13 @@ public BankingScheduledPaymentsApiController(NativeWebRequest request, BankingSc
     public ResponseEntity<ResponseBankingScheduledPaymentsList> listScheduledPaymentsSpecificAccounts(RequestAccountIds accountIds,
                                                                                                       Integer page,
                                                                                                       Integer pageSize,
-                                                                                                      String xCdsUserAgent,
-                                                                                                      String xCdsSubject,
+                                                                                                      String xCdsClientHeaders,
                                                                                                       OffsetDateTime xFapiAuthDate,
                                                                                                       String xFapiCustomerIpAddress,
                                                                                                       UUID xFapiInteractionId,
                                                                                                       Integer xMinV,
                                                                                                       Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         validatePageInputs(page, pageSize);
         HttpHeaders headers = generateResponseHeaders(request);
         Integer actualPage = getPagingValue(page, 1);
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApi.java
index c1e0d36..e25d39c 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApi.java
@@ -50,13 +50,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
-        @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
@@ -101,13 +97,9 @@
         @ApiParam(
             value = "The customers original User Agent header if the customer is currently logged in to the data recipient. Mandatory for customer present calls. Not required for unattended or unauthenticated calls. Base64 encoded contents which may included additional parameters."
         )
-        @RequestHeader(value = "x-cds-User-Agent", required = false) String xCdsUserAgent,
-        @ApiParam(
-            value = "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
-        )
-        @RequestHeader(value = "x-cds-subject", required = false) String xCdsSubject,
+        @RequestHeader(value = "x-cds-client-headers", required = false) String xCdsClientHeaders,
         @ApiParam(
-            value = "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
+            value = "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
         )
         @RequestHeader(value = "x-fapi-auth-date", required = false) @NotNull @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime xFapiAuthDate,
         @ApiParam(
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApiController.java
index 6c855e4..c7b7ff1 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonCustomerApiController.java
@@ -42,14 +42,13 @@ public CommonCustomerApiController(NativeWebRequest request) {
     }
 
     public ResponseEntity<ResponseCommonCustomer> getCustomer(Jwt jwt,
-                                                              String xCdsUserAgent,
-                                                              String xCdsSubject,
+                                                              String xCdsClientHeaders,
                                                               OffsetDateTime xFapiAuthDate,
                                                               String xFapiCustomerIpAddress,
                                                               UUID xFapiInteractionId,
                                                               Integer xMinV,
                                                               Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         String sub = jwt.getClaim("sub");
         ResponseCommonCustomer responseCommonCustomer = new ResponseCommonCustomer();
@@ -70,14 +69,13 @@ public CommonCustomerApiController(NativeWebRequest request) {
     }
 
     public ResponseEntity<ResponseCommonCustomerDetail> getCustomerDetail(Jwt jwt,
-                                                                          String xCdsUserAgent,
-                                                                          String xCdsSubject,
+                                                                          String xCdsClientHeaders,
                                                                           OffsetDateTime xFapiAuthDate,
                                                                           String xFapiCustomerIpAddress,
                                                                           UUID xFapiInteractionId,
                                                                           Integer xMinV,
                                                                           Integer xV) {
-        validateHeaders(xCdsUserAgent, xCdsSubject, xFapiCustomerIpAddress, xMinV, xV);
+        validateHeaders(xCdsClientHeaders, xFapiCustomerIpAddress, xMinV, xV);
         HttpHeaders headers = generateResponseHeaders(request);
         String sub = jwt.getClaim("sub");
         ResponseCommonCustomerDetail responseCommonCustomerDetail = new ResponseCommonCustomerDetail();
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApi.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApi.java
index 9b3832b..ac0fb2c 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApi.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApi.java
@@ -1,6 +1,6 @@
 package au.org.consumerdatastandards.holder.api;
 
-import au.org.consumerdatastandards.holder.model.CommonDiscoveryStatus;
+import au.org.consumerdatastandards.holder.model.ResponseCommonDiscoveryStatus;
 import au.org.consumerdatastandards.holder.model.ResponseDiscoveryOutagesList;
 import io.swagger.annotations.*;
 import org.springframework.http.ResponseEntity;
@@ -52,21 +52,21 @@
         value = "Get Status",
         nickname = "getStatus",
         notes = "Obtain a health check status for the implementation",
-        response = CommonDiscoveryStatus.class,
+        response = ResponseCommonDiscoveryStatus.class,
         tags = {"Discovery", "Common"}
     )
     @ApiResponses(value = {
         @ApiResponse(
             code = 200,
             message = "Success",
-            response = CommonDiscoveryStatus.class
+            response = ResponseCommonDiscoveryStatus.class
         )
     })
     @RequestMapping(
         value = "/discovery/status",
         method = RequestMethod.GET
     )
-    ResponseEntity<CommonDiscoveryStatus> getStatus(
+    ResponseEntity<ResponseCommonDiscoveryStatus> getStatus(
         @ApiParam(
             value = "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
         )
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApiController.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApiController.java
index 4024686..2d72036 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApiController.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/api/CommonDiscoveryApiController.java
@@ -47,13 +47,13 @@ public CommonDiscoveryApiController(NativeWebRequest request, DiscoveryOutageSer
         return new ResponseEntity<>(responseDiscoveryOutagesList, generateResponseHeaders(request), HttpStatus.OK);
     }
 
-      public ResponseEntity<CommonDiscoveryStatus> getStatus(Integer xMinV, Integer xV) {
+      public ResponseEntity<ResponseCommonDiscoveryStatus> getStatus(Integer xMinV, Integer xV) {
         validateHeaders(xMinV, xV);
-        CommonDiscoveryStatusData data = new CommonDiscoveryStatusData();
-        data.setStatus(CommonDiscoveryStatusData.Status.OK);
-        CommonDiscoveryStatus commonDiscoveryStatus = new CommonDiscoveryStatus();
-        commonDiscoveryStatus.setData(data);
-        commonDiscoveryStatus.setLinks(new Links().self(WebUtil.getOriginalUrl(request)));
-        return new ResponseEntity<>(commonDiscoveryStatus, generateResponseHeaders(request), HttpStatus.OK);
+        ResponseCommonDiscoveryStatusData data = new ResponseCommonDiscoveryStatusData();
+        data.setStatus(ResponseCommonDiscoveryStatusData.Status.OK);
+        ResponseCommonDiscoveryStatus responseCommonDiscoveryStatus = new ResponseCommonDiscoveryStatus();
+        responseCommonDiscoveryStatus.setData(data);
+        responseCommonDiscoveryStatus.setLinks(new Links().self(WebUtil.getOriginalUrl(request)));
+        return new ResponseEntity<>(responseCommonDiscoveryStatus, generateResponseHeaders(request), HttpStatus.OK);
     }
 }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingAccountDetail.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingAccountDetail.java
index 2e891b6..7a3fc01 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingAccountDetail.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingAccountDetail.java
@@ -145,8 +145,8 @@
 
     private SpecificAccountUType specificAccountUType;
 
-    @ManyToOne
-    private BankingTermDepositAccount termDeposit;
+    @OneToMany(mappedBy = "bankingAccountDetail")
+    private List<BankingTermDepositAccount> termDeposit;
 
     public String getAccountId() {
         return accountId;
@@ -495,17 +495,17 @@ public void setSpecificAccountUType(SpecificAccountUType specificAccountUType) {
         this.specificAccountUType = specificAccountUType;
     }
 
-    public BankingAccountDetail termDeposit(BankingTermDepositAccount termDeposit) {
+    public BankingAccountDetail termDeposit(List<BankingTermDepositAccount> termDeposit) {
         this.termDeposit = termDeposit;
         return this;
     }
 
     @ApiModelProperty
-    public BankingTermDepositAccount getTermDeposit() {
+    public List<BankingTermDepositAccount> getTermDeposit() {
         return termDeposit;
     }
 
-    public void setTermDeposit(BankingTermDepositAccount termDeposit) {
+    public void setTermDeposit(List<BankingTermDepositAccount> termDeposit) {
         this.termDeposit = termDeposit;
     }
 
@@ -558,29 +558,29 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class BankingAccountDetail {\n" +
-            "   accountId: " + toIndentedString(getAccountId()) + "\n" + 
-            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" + 
-            "   displayName: " + toIndentedString(getDisplayName()) + "\n" + 
-            "   isOwned: " + toIndentedString(getIsOwned()) + "\n" + 
-            "   maskedNumber: " + toIndentedString(getMaskedNumber()) + "\n" + 
-            "   nickname: " + toIndentedString(getNickname()) + "\n" + 
-            "   openStatus: " + toIndentedString(getOpenStatus()) + "\n" + 
-            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" + 
-            "   productName: " + toIndentedString(getProductName()) + "\n" + 
-            "   accountNumber: " + toIndentedString(accountNumber) + "\n" + 
-            "   addresses: " + toIndentedString(addresses) + "\n" + 
-            "   bsb: " + toIndentedString(bsb) + "\n" + 
-            "   bundleName: " + toIndentedString(bundleName) + "\n" + 
-            "   creditCard: " + toIndentedString(creditCard) + "\n" + 
-            "   depositRate: " + toIndentedString(depositRate) + "\n" + 
-            "   depositRates: " + toIndentedString(depositRates) + "\n" + 
-            "   features: " + toIndentedString(features) + "\n" + 
-            "   fees: " + toIndentedString(fees) + "\n" + 
-            "   lendingRate: " + toIndentedString(lendingRate) + "\n" + 
-            "   lendingRates: " + toIndentedString(lendingRates) + "\n" + 
-            "   loan: " + toIndentedString(loan) + "\n" + 
-            "   specificAccountUType: " + toIndentedString(specificAccountUType) + "\n" + 
-            "   termDeposit: " + toIndentedString(termDeposit) + "\n" + 
+            "   accountId: " + toIndentedString(getAccountId()) + "\n" +
+            "   creationDate: " + toIndentedString(getCreationDate()) + "\n" +
+            "   displayName: " + toIndentedString(getDisplayName()) + "\n" +
+            "   isOwned: " + toIndentedString(getIsOwned()) + "\n" +
+            "   maskedNumber: " + toIndentedString(getMaskedNumber()) + "\n" +
+            "   nickname: " + toIndentedString(getNickname()) + "\n" +
+            "   openStatus: " + toIndentedString(getOpenStatus()) + "\n" +
+            "   productCategory: " + toIndentedString(getProductCategory()) + "\n" +
+            "   productName: " + toIndentedString(getProductName()) + "\n" +
+            "   accountNumber: " + toIndentedString(accountNumber) + "\n" +
+            "   addresses: " + toIndentedString(addresses) + "\n" +
+            "   bsb: " + toIndentedString(bsb) + "\n" +
+            "   bundleName: " + toIndentedString(bundleName) + "\n" +
+            "   creditCard: " + toIndentedString(creditCard) + "\n" +
+            "   depositRate: " + toIndentedString(depositRate) + "\n" +
+            "   depositRates: " + toIndentedString(depositRates) + "\n" +
+            "   features: " + toIndentedString(features) + "\n" +
+            "   fees: " + toIndentedString(fees) + "\n" +
+            "   lendingRate: " + toIndentedString(lendingRate) + "\n" +
+            "   lendingRates: " + toIndentedString(lendingRates) + "\n" +
+            "   loan: " + toIndentedString(loan) + "\n" +
+            "   specificAccountUType: " + toIndentedString(specificAccountUType) + "\n" +
+            "   termDeposit: " + toIndentedString(termDeposit) + "\n" +
             "}";
     }
 
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProduct.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProduct.java
index c9bcb22..44e3211 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProduct.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProduct.java
@@ -1,219 +1,53 @@
-/*
- * Consumer Data Standards
- * Sample Data Holder to Demonstrate the Consumer Data Right APIs
- *
- * NOTE: This class is auto generated by the codegen artefact
- * https:*github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
- * Do not edit the class manually.
- */
 package au.org.consumerdatastandards.holder.model;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
-import org.springframework.format.annotation.DateTimeFormat;
-
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
 import java.time.OffsetDateTime;
-import java.util.Objects;
-
-@Entity
-@Table(name = "BankingProduct")
-public class BankingProduct {
-
-    /**
-     * A provider specific unique identifier for this product. This
-     * identifier must be unique to a product but does not
-     * otherwise need to adhere to ID permanence guidelines.
-     */
-    @Id
-    private String productId;
-
-    /**
-     * The date and time from which this product is effective (ie.
-     * is available for origination).  Used to enable the
-     * articulation of products to the regime before they are
-     * available for customers to originate
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime effectiveFrom;
-
-    /**
-     * The date and time at which this product will be retired and
-     * will no longer be offered.  Used to enable the managed
-     * deprecation of products
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime effectiveTo;
-
-    /**
-     * The last date and time that the information for this product
-     * was changed (or the creation date for the product if it has
-     * never been altered)
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime lastUpdated;
-
-    private BankingProductCategory productCategory;
-
-    /**
-     * The display name of the product
-     */
-    private String name;
-
-    /**
-     * A description of the product
-     */
-    @Column(length = 2048)
-    private String description;
-
-    /**
-     * A label of the brand for the product. Able to be used for
-     * filtering. For data providers with single brands this value
-     * is still required
-     */
-    private String brand;
-
-    /**
-     * An optional display name of the brand
-     */
-    private String brandName;
-
-    /**
-     * A link to an application web page where this product can be
-     * applied for.
-     */
-    private String applicationUri;
-
-    /**
-     * Indicates whether the product is specifically tailored to a
-     * circumstance.  In this case fees and prices are
-     * significantly negotiated depending on context. While all
-     * products are open to a degree of tailoring this flag
-     * indicates that tailoring is expected and thus that the
-     * provision of specific fees and rates is not applicable
-     */
-    private Boolean isTailored;
-
-    public String getProductId() {
-        return productId;
-    }
-
-    public void setProductId(String productId) {
-        this.productId = productId;
-    }
-
-    public OffsetDateTime getEffectiveFrom() {
-        return effectiveFrom;
-    }
-
-    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
-        this.effectiveFrom = effectiveFrom;
-    }
-
-    public OffsetDateTime getEffectiveTo() {
-        return effectiveTo;
-    }
-
-    public void setEffectiveTo(OffsetDateTime effectiveTo) {
-        this.effectiveTo = effectiveTo;
-    }
-
-    public OffsetDateTime getLastUpdated() {
-        return lastUpdated;
-    }
-
-    public void setLastUpdated(OffsetDateTime lastUpdated) {
-        this.lastUpdated = lastUpdated;
-    }
-
-    public BankingProductCategory getProductCategory() {
-        return productCategory;
-    }
-
-    public void setProductCategory(BankingProductCategory productCategory) {
-        this.productCategory = productCategory;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public String getBrand() {
-        return brand;
-    }
-
-    public void setBrand(String brand) {
-        this.brand = brand;
-    }
-
-    public String getBrandName() {
-        return brandName;
-    }
-
-    public void setBrandName(String brandName) {
-        this.brandName = brandName;
-    }
-
-    public String getApplicationUri() {
-        return applicationUri;
-    }
-
-    public void setApplicationUri(String applicationUri) {
-        this.applicationUri = applicationUri;
-    }
-
-    public Boolean getIsTailored() {
-        return isTailored;
-    }
-
-    public void setIsTailored(Boolean isTailored) {
-        this.isTailored = isTailored;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-        BankingProduct that = (BankingProduct) o;
-        return productId.equals(that.productId);
-    }
-
-    @Override
-    public int hashCode() {
-        return Objects.hash(productId);
-    }
-
-    @Override
-    public String toString() {
-        return "BankingProduct{" +
-            "productId='" + productId + '\'' +
-            ", effectiveFrom=" + effectiveFrom +
-            ", effectiveTo=" + effectiveTo +
-            ", lastUpdated=" + lastUpdated +
-            ", productCategory=" + productCategory +
-            ", name='" + name + '\'' +
-            ", description='" + description + '\'' +
-            ", brand='" + brand + '\'' +
-            ", brandName='" + brandName + '\'' +
-            ", applicationUri='" + applicationUri + '\'' +
-            ", isTailored=" + isTailored +
-            '}';
-    }
+
+public interface BankingProduct {
+    String getProductId();
+
+    void setProductId(String productId);
+
+    OffsetDateTime getEffectiveFrom();
+
+    void setEffectiveFrom(OffsetDateTime effectiveFrom);
+
+    OffsetDateTime getEffectiveTo();
+
+    void setEffectiveTo(OffsetDateTime effectiveTo);
+
+    OffsetDateTime getLastUpdated();
+
+    void setLastUpdated(OffsetDateTime lastUpdated);
+
+    BankingProductCategory getProductCategory();
+
+    void setProductCategory(BankingProductCategory productCategory);
+
+    String getName();
+
+    void setName(String name);
+
+    String getDescription();
+
+    void setDescription(String description);
+
+    String getBrand();
+
+    void setBrand(String brand);
+
+    String getBrandName();
+
+    void setBrandName(String brandName);
+
+    String getApplicationUri();
+
+    void setApplicationUri(String applicationUri);
+
+    Boolean getIsTailored();
+
+    void setIsTailored(Boolean isTailored);
+
+    BankingProductAdditionalInformation getAdditionalInformation();
+
+    void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation);
 }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetail.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetail.java
index d94df8a..bb72e59 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetail.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetail.java
@@ -1,528 +1,4 @@
 package au.org.consumerdatastandards.holder.model;
 
-import com.fasterxml.jackson.annotation.JsonFormat;
-import org.springframework.format.annotation.DateTimeFormat;
-
-import javax.persistence.*;
-import javax.validation.Valid;
-import java.time.OffsetDateTime;
-import java.util.ArrayList;
-import java.util.List;
-
-@Entity
-@Table(name = "BankingProduct")
-public class BankingProductDetail {
-
-    /**
-     * A provider specific unique identifier for this product. This
-     * identifier must be unique to a product but does not
-     * otherwise need to adhere to ID permanence guidelines.
-     */
-    @Id
-    private String productId;
-
-    /**
-     * The date and time from which this product is effective (ie.
-     * is available for origination).  Used to enable the
-     * articulation of products to the regime before they are
-     * available for customers to originate
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime effectiveFrom;
-
-    /**
-     * The date and time at which this product will be retired and
-     * will no longer be offered.  Used to enable the managed
-     * deprecation of products
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime effectiveTo;
-
-    /**
-     * The last date and time that the information for this product
-     * was changed (or the creation date for the product if it has
-     * never been altered)
-     */
-    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
-    @JsonFormat(shape = JsonFormat.Shape.STRING)
-    private OffsetDateTime lastUpdated;
-
-    private BankingProductCategory productCategory;
-
-    /**
-     * The display name of the product
-     */
-    private String name;
-
-    /**
-     * A description of the product
-     */
-    @Column(length = 2048)
-    private String description;
-
-    /**
-     * A label of the brand for the product. Able to be used for
-     * filtering. For data providers with single brands this value
-     * is still required
-     */
-    private String brand;
-
-    /**
-     * An optional display name of the brand
-     */
-    private String brandName;
-
-    /**
-     * A link to an application web page where this product can be
-     * applied for.
-     */
-    private String applicationUri;
-
-    /**
-     * Indicates whether the product is specifically tailored to a
-     * circumstance.  In this case fees and prices are
-     * significantly negotiated depending on context. While all
-     * products are open to a degree of tailoring this flag
-     * indicates that tailoring is expected and thus that the
-     * provision of specific fees and rates is not applicable
-     */
-    private Boolean isTailored;
-
-    @OneToOne(cascade = CascadeType.ALL)
-    private BankingProductAdditionalInformation additionalInformation;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_bundles",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "bundle_id"))
-    @Valid
-    private List<BankingProductBundle> bundles = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_constraints",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "constraint_id"))
-    @Valid
-    private List<BankingProductConstraint> constraints = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_deposit_rates",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "deposit_rate_id"))
-    @Valid
-    private List<BankingProductDepositRate> depositRates = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_eligibility",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "eligibility_id"))
-    @Valid
-    private List<BankingProductEligibility> eligibility = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_features",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "feature_id"))
-    @Valid
-    private List<BankingProductFeature> features = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_fees",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "fee_id"))
-    @Valid
-    private List<BankingProductFee> fees = null;
-
-    @ManyToMany(cascade = CascadeType.ALL)
-    @JoinTable(
-        name = "product_lending_rates",
-        joinColumns = @JoinColumn(name = "product_id"),
-        inverseJoinColumns = @JoinColumn(name = "lending_rate_id"))
-    @Valid
-    private List<BankingProductLendingRate> lendingRates = null;
-
-    public String getProductId() {
-        return productId;
-    }
-
-    public void setProductId(String productId) {
-        this.productId = productId;
-    }
-
-    public OffsetDateTime getEffectiveFrom() {
-        return effectiveFrom;
-    }
-
-    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
-        this.effectiveFrom = effectiveFrom;
-    }
-
-    public OffsetDateTime getEffectiveTo() {
-        return effectiveTo;
-    }
-
-    public void setEffectiveTo(OffsetDateTime effectiveTo) {
-        this.effectiveTo = effectiveTo;
-    }
-
-    public OffsetDateTime getLastUpdated() {
-        return lastUpdated;
-    }
-
-    public void setLastUpdated(OffsetDateTime lastUpdated) {
-        this.lastUpdated = lastUpdated;
-    }
-
-    public BankingProductCategory getProductCategory() {
-        return productCategory;
-    }
-
-    public void setProductCategory(BankingProductCategory productCategory) {
-        this.productCategory = productCategory;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public String getBrand() {
-        return brand;
-    }
-
-    public void setBrand(String brand) {
-        this.brand = brand;
-    }
-
-    public String getBrandName() {
-        return brandName;
-    }
-
-    public void setBrandName(String brandName) {
-        this.brandName = brandName;
-    }
-
-    public String getApplicationUri() {
-        return applicationUri;
-    }
-
-    public void setApplicationUri(String applicationUri) {
-        this.applicationUri = applicationUri;
-    }
-
-    public Boolean getIsTailored() {
-        return isTailored;
-    }
-
-    public void setIsTailored(Boolean tailored) {
-        isTailored = tailored;
-    }
-
-    public BankingProductDetail additionalInformation(BankingProductAdditionalInformation additionalInformation) {
-        this.additionalInformation = additionalInformation;
-        return this;
-    }
-
-    /**
-     * Get additionalInformation
-     *
-     * @return additionalInformation
-     */
-    @Valid
-    public BankingProductAdditionalInformation getAdditionalInformation() {
-        return additionalInformation;
-    }
-
-    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
-        this.additionalInformation = additionalInformation;
-    }
-
-    public BankingProductDetail applicationUri(String applicationUri) {
-        this.applicationUri = applicationUri;
-        return this;
-    }
-
-    public BankingProductDetail brand(String brand) {
-        this.brand = brand;
-        return this;
-    }
-
-    public BankingProductDetail brandName(String brandName) {
-        this.brandName = brandName;
-        return this;
-    }
-
-    public BankingProductDetail description(String description) {
-        this.description = description;
-        return this;
-    }
-
-    public BankingProductDetail effectiveFrom(OffsetDateTime effectiveFrom) {
-        this.effectiveFrom = effectiveFrom;
-        return this;
-    }
-
-    public BankingProductDetail effectiveTo(OffsetDateTime effectiveTo) {
-        this.effectiveTo = effectiveTo;
-        return this;
-    }
-
-    public BankingProductDetail isTailored(Boolean isTailored) {
-        this.isTailored = isTailored;
-        return this;
-    }
-
-    public BankingProductDetail lastUpdated(OffsetDateTime lastUpdated) {
-        this.lastUpdated = lastUpdated;
-        return this;
-    }
-
-    public BankingProductDetail name(String name) {
-        this.name = name;
-        return this;
-    }
-
-    public BankingProductDetail productCategory(BankingProductCategory productCategory) {
-        this.productCategory = productCategory;
-        return this;
-    }
-
-    public BankingProductDetail productId(String productId) {
-        this.productId = productId;
-        return this;
-    }
-
-    public BankingProductDetail bundles(List<BankingProductBundle> bundles) {
-        this.bundles = bundles;
-        return this;
-    }
-
-    public BankingProductDetail addBundlesItem(BankingProductBundle bundlesItem) {
-        if (this.bundles == null) {
-            this.bundles = new ArrayList<>();
-        }
-        this.bundles.add(bundlesItem);
-        return this;
-    }
-
-    /**
-     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
-     *
-     * @return bundles
-     */
-    @Valid
-    public List<BankingProductBundle> getBundles() {
-        return bundles;
-    }
-
-    public void setBundles(List<BankingProductBundle> bundles) {
-        this.bundles = bundles;
-    }
-
-    public BankingProductDetail constraints(List<BankingProductConstraint> constraints) {
-        this.constraints = constraints;
-        return this;
-    }
-
-    public BankingProductDetail addConstraintsItem(BankingProductConstraint constraintsItem) {
-        if (this.constraints == null) {
-            this.constraints = new ArrayList<>();
-        }
-        this.constraints.add(constraintsItem);
-        return this;
-    }
-
-    /**
-     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
-     *
-     * @return constraints
-     */
-    @Valid
-    public List<BankingProductConstraint> getConstraints() {
-        return constraints;
-    }
-
-    public void setConstraints(List<BankingProductConstraint> constraints) {
-        this.constraints = constraints;
-    }
-
-    public BankingProductDetail depositRates(List<BankingProductDepositRate> depositRates) {
-        this.depositRates = depositRates;
-        return this;
-    }
-
-    public BankingProductDetail addDepositRatesItem(BankingProductDepositRate depositRatesItem) {
-        if (this.depositRates == null) {
-            this.depositRates = new ArrayList<>();
-        }
-        this.depositRates.add(depositRatesItem);
-        return this;
-    }
-
-    /**
-     * Interest rates available for deposits
-     *
-     * @return depositRates
-     */
-    @Valid
-    public List<BankingProductDepositRate> getDepositRates() {
-        return depositRates;
-    }
-
-    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
-        this.depositRates = depositRates;
-    }
-
-    public BankingProductDetail eligibility(List<BankingProductEligibility> eligibility) {
-        this.eligibility = eligibility;
-        return this;
-    }
-
-    public BankingProductDetail addEligibilityItem(BankingProductEligibility eligibilityItem) {
-        if (this.eligibility == null) {
-            this.eligibility = new ArrayList<>();
-        }
-        this.eligibility.add(eligibilityItem);
-        return this;
-    }
-
-    /**
-     * Eligibility criteria for the product
-     *
-     * @return eligibility
-     */
-    @Valid
-    public List<BankingProductEligibility> getEligibility() {
-        return eligibility;
-    }
-
-    public void setEligibility(List<BankingProductEligibility> eligibility) {
-        this.eligibility = eligibility;
-    }
-
-    public BankingProductDetail features(List<BankingProductFeature> features) {
-        this.features = features;
-        return this;
-    }
-
-    public BankingProductDetail addFeaturesItem(BankingProductFeature featuresItem) {
-        if (this.features == null) {
-            this.features = new ArrayList<>();
-        }
-        this.features.add(featuresItem);
-        return this;
-    }
-
-    /**
-     * Array of features available for the product
-     *
-     * @return features
-     */
-    @Valid
-    public List<BankingProductFeature> getFeatures() {
-        return features;
-    }
-
-    public void setFeatures(List<BankingProductFeature> features) {
-        this.features = features;
-    }
-
-    public BankingProductDetail fees(List<BankingProductFee> fees) {
-        this.fees = fees;
-        return this;
-    }
-
-    public BankingProductDetail addFeesItem(BankingProductFee feesItem) {
-        if (this.fees == null) {
-            this.fees = new ArrayList<>();
-        }
-        this.fees.add(feesItem);
-        return this;
-    }
-
-    /**
-     * Fees applicable for the product
-     *
-     * @return fees
-     */
-    @Valid
-    public List<BankingProductFee> getFees() {
-        return fees;
-    }
-
-    public void setFees(List<BankingProductFee> fees) {
-        this.fees = fees;
-    }
-
-    public BankingProductDetail lendingRates(List<BankingProductLendingRate> lendingRates) {
-        this.lendingRates = lendingRates;
-        return this;
-    }
-
-    public BankingProductDetail addLendingRatesItem(BankingProductLendingRate lendingRatesItem) {
-        if (this.lendingRates == null) {
-            this.lendingRates = new ArrayList<>();
-        }
-        this.lendingRates.add(lendingRatesItem);
-        return this;
-    }
-
-    /**
-     * Interest rates charged against lending balances
-     *
-     * @return lendingRates
-     */
-    @Valid
-    public List<BankingProductLendingRate> getLendingRates() {
-        return lendingRates;
-    }
-
-    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
-        this.lendingRates = lendingRates;
-    }
-
-    @Override
-    public String toString() {
-        return "BankingProductDetail{" +
-            "productId='" + productId + '\'' +
-            ", additionalInformation=" + additionalInformation +
-            ", applicationUri='" + applicationUri + '\'' +
-            ", brand='" + brand + '\'' +
-            ", brandName='" + brandName + '\'' +
-            ", description='" + description + '\'' +
-            ", effectiveFrom=" + effectiveFrom +
-            ", effectiveTo=" + effectiveTo +
-            ", isTailored=" + isTailored +
-            ", lastUpdated=" + lastUpdated +
-            ", name='" + name + '\'' +
-            ", productCategory=" + productCategory +
-            ", bundles=" + bundles +
-            ", constraints=" + constraints +
-            ", depositRates=" + depositRates +
-            ", eligibility=" + eligibility +
-            ", features=" + features +
-            ", fees=" + fees +
-            ", lendingRates=" + lendingRates +
-            '}';
-    }
+public interface BankingProductDetail extends BankingProduct {
 }
-
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV1.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV1.java
new file mode 100644
index 0000000..19fd720
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV1.java
@@ -0,0 +1,528 @@
+package au.org.consumerdatastandards.holder.model;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import org.springframework.format.annotation.DateTimeFormat;
+
+import javax.persistence.*;
+import javax.validation.Valid;
+import java.time.OffsetDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+@Entity
+@Table(name = "BankingProduct")
+public class BankingProductDetailV1 implements BankingProductDetail {
+
+    /**
+     * A provider specific unique identifier for this product. This
+     * identifier must be unique to a product but does not
+     * otherwise need to adhere to ID permanence guidelines.
+     */
+    @Id
+    private String productId;
+
+    /**
+     * The date and time from which this product is effective (ie.
+     * is available for origination).  Used to enable the
+     * articulation of products to the regime before they are
+     * available for customers to originate
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveFrom;
+
+    /**
+     * The date and time at which this product will be retired and
+     * will no longer be offered.  Used to enable the managed
+     * deprecation of products
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveTo;
+
+    /**
+     * The last date and time that the information for this product
+     * was changed (or the creation date for the product if it has
+     * never been altered)
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime lastUpdated;
+
+    private BankingProductCategory productCategory;
+
+    /**
+     * The display name of the product
+     */
+    private String name;
+
+    /**
+     * A description of the product
+     */
+    @Column(length = 2048)
+    private String description;
+
+    /**
+     * A label of the brand for the product. Able to be used for
+     * filtering. For data providers with single brands this value
+     * is still required
+     */
+    private String brand;
+
+    /**
+     * An optional display name of the brand
+     */
+    private String brandName;
+
+    /**
+     * A link to an application web page where this product can be
+     * applied for.
+     */
+    private String applicationUri;
+
+    /**
+     * Indicates whether the product is specifically tailored to a
+     * circumstance.  In this case fees and prices are
+     * significantly negotiated depending on context. While all
+     * products are open to a degree of tailoring this flag
+     * indicates that tailoring is expected and thus that the
+     * provision of specific fees and rates is not applicable
+     */
+    private Boolean isTailored;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    private BankingProductAdditionalInformation additionalInformation;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_bundles",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "bundle_id"))
+    @Valid
+    private List<BankingProductBundle> bundles = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_constraints",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "constraint_id"))
+    @Valid
+    private List<BankingProductConstraint> constraints = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_deposit_rates",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "deposit_rate_id"))
+    @Valid
+    private List<BankingProductDepositRate> depositRates = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_eligibility",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "eligibility_id"))
+    @Valid
+    private List<BankingProductEligibility> eligibility = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_features",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "feature_id"))
+    @Valid
+    private List<BankingProductFeature> features = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_fees",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "fee_id"))
+    @Valid
+    private List<BankingProductFee> fees = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_lending_rates",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "lending_rate_id"))
+    @Valid
+    private List<BankingProductLendingRate> lendingRates = null;
+
+    public String getProductId() {
+        return productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public String getBrandName() {
+        return brandName;
+    }
+
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    public void setIsTailored(Boolean tailored) {
+        isTailored = tailored;
+    }
+
+    public BankingProductDetailV1 additionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+        return this;
+    }
+
+    /**
+     * Get additionalInformation
+     *
+     * @return additionalInformation
+     */
+    @Valid
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    public BankingProductDetailV1 applicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+        return this;
+    }
+
+    public BankingProductDetailV1 brand(String brand) {
+        this.brand = brand;
+        return this;
+    }
+
+    public BankingProductDetailV1 brandName(String brandName) {
+        this.brandName = brandName;
+        return this;
+    }
+
+    public BankingProductDetailV1 description(String description) {
+        this.description = description;
+        return this;
+    }
+
+    public BankingProductDetailV1 effectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+        return this;
+    }
+
+    public BankingProductDetailV1 effectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+        return this;
+    }
+
+    public BankingProductDetailV1 isTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+        return this;
+    }
+
+    public BankingProductDetailV1 lastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+        return this;
+    }
+
+    public BankingProductDetailV1 name(String name) {
+        this.name = name;
+        return this;
+    }
+
+    public BankingProductDetailV1 productCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+        return this;
+    }
+
+    public BankingProductDetailV1 productId(String productId) {
+        this.productId = productId;
+        return this;
+    }
+
+    public BankingProductDetailV1 bundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+        return this;
+    }
+
+    public BankingProductDetailV1 addBundlesItem(BankingProductBundle bundlesItem) {
+        if (this.bundles == null) {
+            this.bundles = new ArrayList<>();
+        }
+        this.bundles.add(bundlesItem);
+        return this;
+    }
+
+    /**
+     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
+     *
+     * @return bundles
+     */
+    @Valid
+    public List<BankingProductBundle> getBundles() {
+        return bundles;
+    }
+
+    public void setBundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+    }
+
+    public BankingProductDetailV1 constraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+        return this;
+    }
+
+    public BankingProductDetailV1 addConstraintsItem(BankingProductConstraint constraintsItem) {
+        if (this.constraints == null) {
+            this.constraints = new ArrayList<>();
+        }
+        this.constraints.add(constraintsItem);
+        return this;
+    }
+
+    /**
+     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
+     *
+     * @return constraints
+     */
+    @Valid
+    public List<BankingProductConstraint> getConstraints() {
+        return constraints;
+    }
+
+    public void setConstraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+    }
+
+    public BankingProductDetailV1 depositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+        return this;
+    }
+
+    public BankingProductDetailV1 addDepositRatesItem(BankingProductDepositRate depositRatesItem) {
+        if (this.depositRates == null) {
+            this.depositRates = new ArrayList<>();
+        }
+        this.depositRates.add(depositRatesItem);
+        return this;
+    }
+
+    /**
+     * Interest rates available for deposits
+     *
+     * @return depositRates
+     */
+    @Valid
+    public List<BankingProductDepositRate> getDepositRates() {
+        return depositRates;
+    }
+
+    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+    }
+
+    public BankingProductDetailV1 eligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+        return this;
+    }
+
+    public BankingProductDetailV1 addEligibilityItem(BankingProductEligibility eligibilityItem) {
+        if (this.eligibility == null) {
+            this.eligibility = new ArrayList<>();
+        }
+        this.eligibility.add(eligibilityItem);
+        return this;
+    }
+
+    /**
+     * Eligibility criteria for the product
+     *
+     * @return eligibility
+     */
+    @Valid
+    public List<BankingProductEligibility> getEligibility() {
+        return eligibility;
+    }
+
+    public void setEligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+    }
+
+    public BankingProductDetailV1 features(List<BankingProductFeature> features) {
+        this.features = features;
+        return this;
+    }
+
+    public BankingProductDetailV1 addFeaturesItem(BankingProductFeature featuresItem) {
+        if (this.features == null) {
+            this.features = new ArrayList<>();
+        }
+        this.features.add(featuresItem);
+        return this;
+    }
+
+    /**
+     * Array of features available for the product
+     *
+     * @return features
+     */
+    @Valid
+    public List<BankingProductFeature> getFeatures() {
+        return features;
+    }
+
+    public void setFeatures(List<BankingProductFeature> features) {
+        this.features = features;
+    }
+
+    public BankingProductDetailV1 fees(List<BankingProductFee> fees) {
+        this.fees = fees;
+        return this;
+    }
+
+    public BankingProductDetailV1 addFeesItem(BankingProductFee feesItem) {
+        if (this.fees == null) {
+            this.fees = new ArrayList<>();
+        }
+        this.fees.add(feesItem);
+        return this;
+    }
+
+    /**
+     * Fees applicable for the product
+     *
+     * @return fees
+     */
+    @Valid
+    public List<BankingProductFee> getFees() {
+        return fees;
+    }
+
+    public void setFees(List<BankingProductFee> fees) {
+        this.fees = fees;
+    }
+
+    public BankingProductDetailV1 lendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+        return this;
+    }
+
+    public BankingProductDetailV1 addLendingRatesItem(BankingProductLendingRate lendingRatesItem) {
+        if (this.lendingRates == null) {
+            this.lendingRates = new ArrayList<>();
+        }
+        this.lendingRates.add(lendingRatesItem);
+        return this;
+    }
+
+    /**
+     * Interest rates charged against lending balances
+     *
+     * @return lendingRates
+     */
+    @Valid
+    public List<BankingProductLendingRate> getLendingRates() {
+        return lendingRates;
+    }
+
+    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+    }
+
+    @Override
+    public String toString() {
+        return "BankingProductDetail{" +
+            "productId='" + productId + '\'' +
+            ", additionalInformation=" + additionalInformation +
+            ", applicationUri='" + applicationUri + '\'' +
+            ", brand='" + brand + '\'' +
+            ", brandName='" + brandName + '\'' +
+            ", description='" + description + '\'' +
+            ", effectiveFrom=" + effectiveFrom +
+            ", effectiveTo=" + effectiveTo +
+            ", isTailored=" + isTailored +
+            ", lastUpdated=" + lastUpdated +
+            ", name='" + name + '\'' +
+            ", productCategory=" + productCategory +
+            ", bundles=" + bundles +
+            ", constraints=" + constraints +
+            ", depositRates=" + depositRates +
+            ", eligibility=" + eligibility +
+            ", features=" + features +
+            ", fees=" + fees +
+            ", lendingRates=" + lendingRates +
+            '}';
+    }
+}
+
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV2.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV2.java
new file mode 100644
index 0000000..fa305c9
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductDetailV2.java
@@ -0,0 +1,552 @@
+package au.org.consumerdatastandards.holder.model;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import org.springframework.format.annotation.DateTimeFormat;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.validation.Valid;
+import java.time.OffsetDateTime;
+import java.util.ArrayList;
+import java.util.List;
+
+@Entity
+@Table(name = "BankingProduct")
+public class BankingProductDetailV2 implements BankingProductDetail {
+
+    /**
+     * A provider specific unique identifier for this product. This
+     * identifier must be unique to a product but does not
+     * otherwise need to adhere to ID permanence guidelines.
+     */
+    @Id
+    private String productId;
+
+    /**
+     * The date and time from which this product is effective (ie.
+     * is available for origination).  Used to enable the
+     * articulation of products to the regime before they are
+     * available for customers to originate
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveFrom;
+
+    /**
+     * The date and time at which this product will be retired and
+     * will no longer be offered.  Used to enable the managed
+     * deprecation of products
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveTo;
+
+    /**
+     * The last date and time that the information for this product
+     * was changed (or the creation date for the product if it has
+     * never been altered)
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime lastUpdated;
+
+    private BankingProductCategory productCategory;
+
+    /**
+     * The display name of the product
+     */
+    private String name;
+
+    /**
+     * A description of the product
+     */
+    @Column(length = 2048)
+    private String description;
+
+    /**
+     * A label of the brand for the product. Able to be used for
+     * filtering. For data providers with single brands this value
+     * is still required
+     */
+    private String brand;
+
+    /**
+     * An optional display name of the brand
+     */
+    private String brandName;
+
+    /**
+     * A link to an application web page where this product can be
+     * applied for.
+     */
+    private String applicationUri;
+
+    /**
+     * Indicates whether the product is specifically tailored to a
+     * circumstance.  In this case fees and prices are
+     * significantly negotiated depending on context. While all
+     * products are open to a degree of tailoring this flag
+     * indicates that tailoring is expected and thus that the
+     * provision of specific fees and rates is not applicable
+     */
+    private Boolean isTailored;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    private BankingProductAdditionalInformation additionalInformation;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_cardarts",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "cardart_id"))
+    private List<BankingProductV2CardArt> cardArt;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_bundles",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "bundle_id"))
+    @Valid
+    private List<BankingProductBundle> bundles = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_constraints",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "constraint_id"))
+    @Valid
+    private List<BankingProductConstraint> constraints = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_deposit_rates",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "deposit_rate_id"))
+    @Valid
+    private List<BankingProductDepositRate> depositRates = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_eligibility",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "eligibility_id"))
+    @Valid
+    private List<BankingProductEligibility> eligibility = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_features",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "feature_id"))
+    @Valid
+    private List<BankingProductFeature> features = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_fees",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "fee_id"))
+    @Valid
+    private List<BankingProductFee> fees = null;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_lending_rates",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "lending_rate_id"))
+    @Valid
+    private List<BankingProductLendingRate> lendingRates = null;
+
+    public String getProductId() {
+        return productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public String getBrandName() {
+        return brandName;
+    }
+
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    public void setIsTailored(Boolean tailored) {
+        isTailored = tailored;
+    }
+
+    public BankingProductDetailV2 additionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+        return this;
+    }
+
+    /**
+     * Get additionalInformation
+     *
+     * @return additionalInformation
+     */
+    @Valid
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    public List<BankingProductV2CardArt> getCardArt() {
+        return cardArt;
+    }
+
+    public void setCardArt(List<BankingProductV2CardArt> cardArt) {
+        this.cardArt = cardArt;
+    }
+
+    public BankingProductDetailV2 applicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+        return this;
+    }
+
+    public BankingProductDetailV2 brand(String brand) {
+        this.brand = brand;
+        return this;
+    }
+
+    public BankingProductDetailV2 brandName(String brandName) {
+        this.brandName = brandName;
+        return this;
+    }
+
+    public BankingProductDetailV2 description(String description) {
+        this.description = description;
+        return this;
+    }
+
+    public BankingProductDetailV2 effectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+        return this;
+    }
+
+    public BankingProductDetailV2 effectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+        return this;
+    }
+
+    public BankingProductDetailV2 isTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+        return this;
+    }
+
+    public BankingProductDetailV2 lastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+        return this;
+    }
+
+    public BankingProductDetailV2 name(String name) {
+        this.name = name;
+        return this;
+    }
+
+    public BankingProductDetailV2 productCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+        return this;
+    }
+
+    public BankingProductDetailV2 productId(String productId) {
+        this.productId = productId;
+        return this;
+    }
+
+    public BankingProductDetailV2 bundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+        return this;
+    }
+
+    public BankingProductDetailV2 addBundlesItem(BankingProductBundle bundlesItem) {
+        if (this.bundles == null) {
+            this.bundles = new ArrayList<>();
+        }
+        this.bundles.add(bundlesItem);
+        return this;
+    }
+
+    /**
+     * An array of bundles that this product participates in.  Each bundle is described by free form information but also by a list of product IDs of the other products that are included in the bundle.  It is assumed that the current product is included in the bundle also
+     *
+     * @return bundles
+     */
+    @Valid
+    public List<BankingProductBundle> getBundles() {
+        return bundles;
+    }
+
+    public void setBundles(List<BankingProductBundle> bundles) {
+        this.bundles = bundles;
+    }
+
+    public BankingProductDetailV2 constraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+        return this;
+    }
+
+    public BankingProductDetailV2 addConstraintsItem(BankingProductConstraint constraintsItem) {
+        if (this.constraints == null) {
+            this.constraints = new ArrayList<>();
+        }
+        this.constraints.add(constraintsItem);
+        return this;
+    }
+
+    /**
+     * Constraints on the application for or operation of the product such as minimum balances or limit thresholds
+     *
+     * @return constraints
+     */
+    @Valid
+    public List<BankingProductConstraint> getConstraints() {
+        return constraints;
+    }
+
+    public void setConstraints(List<BankingProductConstraint> constraints) {
+        this.constraints = constraints;
+    }
+
+    public BankingProductDetailV2 depositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+        return this;
+    }
+
+    public BankingProductDetailV2 addDepositRatesItem(BankingProductDepositRate depositRatesItem) {
+        if (this.depositRates == null) {
+            this.depositRates = new ArrayList<>();
+        }
+        this.depositRates.add(depositRatesItem);
+        return this;
+    }
+
+    /**
+     * Interest rates available for deposits
+     *
+     * @return depositRates
+     */
+    @Valid
+    public List<BankingProductDepositRate> getDepositRates() {
+        return depositRates;
+    }
+
+    public void setDepositRates(List<BankingProductDepositRate> depositRates) {
+        this.depositRates = depositRates;
+    }
+
+    public BankingProductDetailV2 eligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+        return this;
+    }
+
+    public BankingProductDetailV2 addEligibilityItem(BankingProductEligibility eligibilityItem) {
+        if (this.eligibility == null) {
+            this.eligibility = new ArrayList<>();
+        }
+        this.eligibility.add(eligibilityItem);
+        return this;
+    }
+
+    /**
+     * Eligibility criteria for the product
+     *
+     * @return eligibility
+     */
+    @Valid
+    public List<BankingProductEligibility> getEligibility() {
+        return eligibility;
+    }
+
+    public void setEligibility(List<BankingProductEligibility> eligibility) {
+        this.eligibility = eligibility;
+    }
+
+    public BankingProductDetailV2 features(List<BankingProductFeature> features) {
+        this.features = features;
+        return this;
+    }
+
+    public BankingProductDetailV2 addFeaturesItem(BankingProductFeature featuresItem) {
+        if (this.features == null) {
+            this.features = new ArrayList<>();
+        }
+        this.features.add(featuresItem);
+        return this;
+    }
+
+    /**
+     * Array of features available for the product
+     *
+     * @return features
+     */
+    @Valid
+    public List<BankingProductFeature> getFeatures() {
+        return features;
+    }
+
+    public void setFeatures(List<BankingProductFeature> features) {
+        this.features = features;
+    }
+
+    public BankingProductDetailV2 fees(List<BankingProductFee> fees) {
+        this.fees = fees;
+        return this;
+    }
+
+    public BankingProductDetailV2 addFeesItem(BankingProductFee feesItem) {
+        if (this.fees == null) {
+            this.fees = new ArrayList<>();
+        }
+        this.fees.add(feesItem);
+        return this;
+    }
+
+    /**
+     * Fees applicable for the product
+     *
+     * @return fees
+     */
+    @Valid
+    public List<BankingProductFee> getFees() {
+        return fees;
+    }
+
+    public void setFees(List<BankingProductFee> fees) {
+        this.fees = fees;
+    }
+
+    public BankingProductDetailV2 lendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+        return this;
+    }
+
+    public BankingProductDetailV2 addLendingRatesItem(BankingProductLendingRate lendingRatesItem) {
+        if (this.lendingRates == null) {
+            this.lendingRates = new ArrayList<>();
+        }
+        this.lendingRates.add(lendingRatesItem);
+        return this;
+    }
+
+    /**
+     * Interest rates charged against lending balances
+     *
+     * @return lendingRates
+     */
+    @Valid
+    public List<BankingProductLendingRate> getLendingRates() {
+        return lendingRates;
+    }
+
+    public void setLendingRates(List<BankingProductLendingRate> lendingRates) {
+        this.lendingRates = lendingRates;
+    }
+
+    @Override
+    public String toString() {
+        return "BankingProductDetail{" +
+            "productId='" + productId + '\'' +
+            ", additionalInformation=" + additionalInformation +
+            ", applicationUri='" + applicationUri + '\'' +
+            ", brand='" + brand + '\'' +
+            ", brandName='" + brandName + '\'' +
+            ", description='" + description + '\'' +
+            ", effectiveFrom=" + effectiveFrom +
+            ", effectiveTo=" + effectiveTo +
+            ", isTailored=" + isTailored +
+            ", lastUpdated=" + lastUpdated +
+            ", cardArt=" + cardArt +
+            ", name='" + name + '\'' +
+            ", productCategory=" + productCategory +
+            ", bundles=" + bundles +
+            ", constraints=" + constraints +
+            ", depositRates=" + depositRates +
+            ", eligibility=" + eligibility +
+            ", features=" + features +
+            ", fees=" + fees +
+            ", lendingRates=" + lendingRates +
+            '}';
+    }
+}
+
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV1.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV1.java
new file mode 100644
index 0000000..8410bd2
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV1.java
@@ -0,0 +1,233 @@
+/*
+ * Consumer Data Standards
+ * Sample Data Holder to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https:*github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ * Do not edit the class manually.
+ */
+package au.org.consumerdatastandards.holder.model;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import org.springframework.format.annotation.DateTimeFormat;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import java.time.OffsetDateTime;
+import java.util.Objects;
+
+@Entity
+@Table(name = "BankingProduct")
+public class BankingProductV1 implements BankingProduct {
+
+    /**
+     * A provider specific unique identifier for this product. This
+     * identifier must be unique to a product but does not
+     * otherwise need to adhere to ID permanence guidelines.
+     */
+    @Id
+    private String productId;
+
+    /**
+     * The date and time from which this product is effective (ie.
+     * is available for origination).  Used to enable the
+     * articulation of products to the regime before they are
+     * available for customers to originate
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveFrom;
+
+    /**
+     * The date and time at which this product will be retired and
+     * will no longer be offered.  Used to enable the managed
+     * deprecation of products
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveTo;
+
+    /**
+     * The last date and time that the information for this product
+     * was changed (or the creation date for the product if it has
+     * never been altered)
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime lastUpdated;
+
+    private BankingProductCategory productCategory;
+
+    /**
+     * The display name of the product
+     */
+    private String name;
+
+    /**
+     * A description of the product
+     */
+    @Column(length = 2048)
+    private String description;
+
+    /**
+     * A label of the brand for the product. Able to be used for
+     * filtering. For data providers with single brands this value
+     * is still required
+     */
+    private String brand;
+
+    /**
+     * An optional display name of the brand
+     */
+    private String brandName;
+
+    /**
+     * A link to an application web page where this product can be
+     * applied for.
+     */
+    private String applicationUri;
+
+    /**
+     * Indicates whether the product is specifically tailored to a
+     * circumstance.  In this case fees and prices are
+     * significantly negotiated depending on context. While all
+     * products are open to a degree of tailoring this flag
+     * indicates that tailoring is expected and thus that the
+     * provision of specific fees and rates is not applicable
+     */
+    private Boolean isTailored;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    private BankingProductAdditionalInformation additionalInformation;
+
+    public String getProductId() {
+        return productId;
+    }
+
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getBrand() {
+        return brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    public String getBrandName() {
+        return brandName;
+    }
+
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    public void setIsTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+    }
+
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        BankingProductV1 that = (BankingProductV1) o;
+        return productId.equals(that.productId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(productId);
+    }
+
+    @Override
+    public String toString() {
+        return "BankingProduct{" +
+            "productId='" + productId + '\'' +
+            ", effectiveFrom=" + effectiveFrom +
+            ", effectiveTo=" + effectiveTo +
+            ", lastUpdated=" + lastUpdated +
+            ", productCategory=" + productCategory +
+            ", name='" + name + '\'' +
+            ", description='" + description + '\'' +
+            ", brand='" + brand + '\'' +
+            ", brandName='" + brandName + '\'' +
+            ", applicationUri='" + applicationUri + '\'' +
+            ", isTailored=" + isTailored +
+            ", additionalInformation=" + additionalInformation +
+            '}';
+    }
+}
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2.java
new file mode 100644
index 0000000..1dcd44d
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2.java
@@ -0,0 +1,278 @@
+/*
+ * Consumer Data Standards
+ * Sample Data Holder to Demonstrate the Consumer Data Right APIs
+ *
+ * NOTE: This class is auto generated by the codegen artefact
+ * https:*github.com/ConsumerDataStandardsAustralia/java-artefacts/codegen
+ * Do not edit the class manually.
+ */
+package au.org.consumerdatastandards.holder.model;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import org.springframework.format.annotation.DateTimeFormat;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import java.time.OffsetDateTime;
+import java.util.List;
+import java.util.Objects;
+
+@Entity
+@Table(name = "BankingProduct")
+public class BankingProductV2 implements BankingProduct {
+
+    /**
+     * A provider specific unique identifier for this product. This
+     * identifier must be unique to a product but does not
+     * otherwise need to adhere to ID permanence guidelines.
+     */
+    @Id
+    private String productId;
+
+    /**
+     * The date and time from which this product is effective (ie.
+     * is available for origination).  Used to enable the
+     * articulation of products to the regime before they are
+     * available for customers to originate
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveFrom;
+
+    /**
+     * The date and time at which this product will be retired and
+     * will no longer be offered.  Used to enable the managed
+     * deprecation of products
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime effectiveTo;
+
+    /**
+     * The last date and time that the information for this product
+     * was changed (or the creation date for the product if it has
+     * never been altered)
+     */
+    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
+    @JsonFormat(shape = JsonFormat.Shape.STRING)
+    private OffsetDateTime lastUpdated;
+
+    private BankingProductCategory productCategory;
+
+    /**
+     * The display name of the product
+     */
+    private String name;
+
+    /**
+     * A description of the product
+     */
+    @Column(length = 2048)
+    private String description;
+
+    /**
+     * A label of the brand for the product. Able to be used for
+     * filtering. For data providers with single brands this value
+     * is still required
+     */
+    private String brand;
+
+    /**
+     * An optional display name of the brand
+     */
+    private String brandName;
+
+    /**
+     * A link to an application web page where this product can be
+     * applied for.
+     */
+    private String applicationUri;
+
+    /**
+     * Indicates whether the product is specifically tailored to a
+     * circumstance.  In this case fees and prices are
+     * significantly negotiated depending on context. While all
+     * products are open to a degree of tailoring this flag
+     * indicates that tailoring is expected and thus that the
+     * provision of specific fees and rates is not applicable
+     */
+    private Boolean isTailored;
+
+    @OneToOne(cascade = CascadeType.ALL)
+    private BankingProductAdditionalInformation additionalInformation;
+
+    @ManyToMany(cascade = CascadeType.ALL)
+    @JoinTable(
+        name = "product_cardarts",
+        joinColumns = @JoinColumn(name = "product_id"),
+        inverseJoinColumns = @JoinColumn(name = "cardart_id"))
+    private List<BankingProductV2CardArt> cardArt;
+
+    @Override
+    public String getProductId() {
+        return productId;
+    }
+
+    @Override
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
+
+    @Override
+    public OffsetDateTime getEffectiveFrom() {
+        return effectiveFrom;
+    }
+
+    @Override
+    public void setEffectiveFrom(OffsetDateTime effectiveFrom) {
+        this.effectiveFrom = effectiveFrom;
+    }
+
+    @Override
+    public OffsetDateTime getEffectiveTo() {
+        return effectiveTo;
+    }
+
+    @Override
+    public void setEffectiveTo(OffsetDateTime effectiveTo) {
+        this.effectiveTo = effectiveTo;
+    }
+
+    @Override
+    public OffsetDateTime getLastUpdated() {
+        return lastUpdated;
+    }
+
+    @Override
+    public void setLastUpdated(OffsetDateTime lastUpdated) {
+        this.lastUpdated = lastUpdated;
+    }
+
+    @Override
+    public BankingProductCategory getProductCategory() {
+        return productCategory;
+    }
+
+    @Override
+    public void setProductCategory(BankingProductCategory productCategory) {
+        this.productCategory = productCategory;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public String getDescription() {
+        return description;
+    }
+
+    @Override
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    @Override
+    public String getBrand() {
+        return brand;
+    }
+
+    @Override
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    @Override
+    public String getBrandName() {
+        return brandName;
+    }
+
+    @Override
+    public void setBrandName(String brandName) {
+        this.brandName = brandName;
+    }
+
+    @Override
+    public String getApplicationUri() {
+        return applicationUri;
+    }
+
+    @Override
+    public void setApplicationUri(String applicationUri) {
+        this.applicationUri = applicationUri;
+    }
+
+    @Override
+    public Boolean getIsTailored() {
+        return isTailored;
+    }
+
+    @Override
+    public void setIsTailored(Boolean isTailored) {
+        this.isTailored = isTailored;
+    }
+
+    @Override
+    public BankingProductAdditionalInformation getAdditionalInformation() {
+        return additionalInformation;
+    }
+
+    @Override
+    public void setAdditionalInformation(BankingProductAdditionalInformation additionalInformation) {
+        this.additionalInformation = additionalInformation;
+    }
+
+    public List<BankingProductV2CardArt> getCardArt() {
+        return cardArt;
+    }
+
+    public void setCardArt(List<BankingProductV2CardArt> cardArt) {
+        this.cardArt = cardArt;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        BankingProductV2 that = (BankingProductV2) o;
+        return productId.equals(that.productId);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(productId);
+    }
+
+    @Override
+    public String toString() {
+        return "BankingProduct{" +
+            "productId='" + productId + '\'' +
+            ", effectiveFrom=" + effectiveFrom +
+            ", effectiveTo=" + effectiveTo +
+            ", lastUpdated=" + lastUpdated +
+            ", productCategory=" + productCategory +
+            ", name='" + name + '\'' +
+            ", description='" + description + '\'' +
+            ", brand='" + brand + '\'' +
+            ", brandName='" + brandName + '\'' +
+            ", applicationUri='" + applicationUri + '\'' +
+            ", isTailored=" + isTailored +
+            ", additionalInformation=" + additionalInformation +
+            ", cardArt=" + cardArt +
+            '}';
+    }
+}
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2CardArt.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2CardArt.java
new file mode 100644
index 0000000..737103e
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingProductV2CardArt.java
@@ -0,0 +1,71 @@
+package au.org.consumerdatastandards.holder.model;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import org.hibernate.annotations.GenericGenerator;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import java.util.Objects;
+
+@Entity
+public class BankingProductV2CardArt {
+
+    @Id
+    @GeneratedValue(generator = "system-uuid")
+    @GenericGenerator(name = "system-uuid", strategy = "uuid2")
+    @JsonIgnore
+    private String id;
+
+    private String title;
+
+    private String imageUri;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public String getImageUri() {
+        return imageUri;
+    }
+
+    public void setImageUri(String imageUri) {
+        this.imageUri = imageUri;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BankingProductV2CardArt)) return false;
+        BankingProductV2CardArt that = (BankingProductV2CardArt) o;
+        return id.equals(that.id) &&
+            Objects.equals(title, that.title) &&
+            imageUri.equals(that.imageUri);
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(id, title, imageUri);
+    }
+
+    @Override
+    public String toString() {
+        return "BankingProductV2CardArt{" +
+            "id='" + id + '\'' +
+            ", title='" + title + '\'' +
+            ", imageUri='" + imageUri + '\'' +
+            '}';
+    }
+}
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingScheduledPaymentRecurrenceLastWeekday.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingScheduledPaymentRecurrenceLastWeekday.java
index 8420d67..f84aabd 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingScheduledPaymentRecurrenceLastWeekday.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingScheduledPaymentRecurrenceLastWeekday.java
@@ -12,6 +12,23 @@
 @Embeddable
 public class BankingScheduledPaymentRecurrenceLastWeekday  {
 
+    public enum LastWeekDay {
+        MON,
+        TUE,
+        WED,
+        THU,
+        FRI,
+        SAT,
+        SUN
+    }
+
+    public enum NonBusinessDayTreatment {
+        AFTER,
+        BEFORE,
+        ON,
+        ONLY
+    }
+
     /**
      * The limit date after which no more payments should be made using this schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
      */
@@ -26,13 +43,18 @@
     /**
      * The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval. Value is constrained to 1 to 7 with 1 indicating Monday.
      */
-    private Integer lastWeekDay;
+    private LastWeekDay lastWeekDay;
 
     /**
      * Indicates the number of payments remaining in the schedule. If both finalPaymentDate and paymentsRemaining are present then payments will stop according to the most constraining value. If neither field is present the payments will continue indefinitely
      */
     private Integer paymentsRemaining;
 
+    /**
+     * Enumerated field giving the treatment where a scheduled payment date is not a business day. If absent assumed to be ON.<br/>**AFTER** - If a scheduled payment date is a non-business day the payment will be made on the first business day after the scheduled payment date.<br/>**BEFORE** - If a scheduled payment date is a non-business day the payment will be made on the first business day before the scheduled payment date.<br/>**ON** - If a scheduled payment date is a non-business day the payment will be made on that day regardless.<br/>**ONLY** - Payments only occur on business days. If a scheduled payment date is a non-business day the payment will be ignored
+     */
+    private NonBusinessDayTreatment nonBusinessDayTreatment = NonBusinessDayTreatment.ON;
+
     public BankingScheduledPaymentRecurrenceLastWeekday finalPaymentDate(LocalDate finalPaymentDate) {
         this.finalPaymentDate = finalPaymentDate;
         return this;
@@ -59,19 +81,21 @@ public String getInterval() {
     public void setInterval(String interval) {
         this.interval = interval;
     }
-    public BankingScheduledPaymentRecurrenceLastWeekday lastWeekDay(Integer lastWeekDay) {
+
+    public BankingScheduledPaymentRecurrenceLastWeekday lastWeekDay(LastWeekDay lastWeekDay) {
         this.lastWeekDay = lastWeekDay;
         return this;
     }
 
     @ApiModelProperty(required = true, value = "The weekDay specified. The payment will occur on the last occurrence of this weekday in the interval. Value is constrained to 1 to 7 with 1 indicating Monday.")
-    public Integer getLastWeekDay() {
+    public LastWeekDay getLastWeekDay() {
         return lastWeekDay;
     }
 
-    public void setLastWeekDay(Integer lastWeekDay) {
+    public void setLastWeekDay(LastWeekDay lastWeekDay) {
         this.lastWeekDay = lastWeekDay;
     }
+
     public BankingScheduledPaymentRecurrenceLastWeekday paymentsRemaining(Integer paymentsRemaining) {
         this.paymentsRemaining = paymentsRemaining;
         return this;
@@ -113,10 +137,10 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class BankingScheduledPaymentRecurrenceLastWeekday {\n" +
-            "   finalPaymentDate: " + toIndentedString(finalPaymentDate) + "\n" + 
-            "   interval: " + toIndentedString(interval) + "\n" + 
-            "   lastWeekDay: " + toIndentedString(lastWeekDay) + "\n" + 
-            "   paymentsRemaining: " + toIndentedString(paymentsRemaining) + "\n" + 
+            "   finalPaymentDate: " + toIndentedString(finalPaymentDate) + "\n" +
+            "   interval: " + toIndentedString(interval) + "\n" +
+            "   lastWeekDay: " + toIndentedString(lastWeekDay) + "\n" +
+            "   paymentsRemaining: " + toIndentedString(paymentsRemaining) + "\n" +
             "}";
     }
 
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingTermDepositAccount.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingTermDepositAccount.java
index ef677ff..c8444e8 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingTermDepositAccount.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/BankingTermDepositAccount.java
@@ -10,6 +10,7 @@
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.Id;
+import javax.persistence.ManyToOne;
 import java.util.Objects;
 import java.time.LocalDate;
 
@@ -23,6 +24,10 @@
     @JsonIgnore
     private String id;
 
+    @JsonIgnore
+    @ManyToOne
+    private BankingAccountDetail bankingAccountDetail;
+
     /**
      * The lodgement date of the original deposit
      */
@@ -49,6 +54,14 @@
 
     private MaturityInstructions maturityInstructions;
 
+    public BankingAccountDetail getBankingAccountDetail() {
+        return bankingAccountDetail;
+    }
+
+    public void setBankingAccountDetail(BankingAccountDetail bankingAccountDetail) {
+        this.bankingAccountDetail = bankingAccountDetail;
+    }
+
     public BankingTermDepositAccount lodgementDate(LocalDate lodgementDate) {
         this.lodgementDate = lodgementDate;
         return this;
@@ -62,6 +75,7 @@ public LocalDate getLodgementDate() {
     public void setLodgementDate(LocalDate lodgementDate) {
         this.lodgementDate = lodgementDate;
     }
+
     public BankingTermDepositAccount maturityAmount(String maturityAmount) {
         this.maturityAmount = maturityAmount;
         return this;
@@ -125,6 +139,7 @@ public boolean equals(Object o) {
         }
         BankingTermDepositAccount bankingTermDepositAccount = (BankingTermDepositAccount) o;
         return Objects.equals(this.id, bankingTermDepositAccount.id) &&
+            Objects.equals(this.bankingAccountDetail, bankingTermDepositAccount.bankingAccountDetail) &&
             Objects.equals(this.lodgementDate, bankingTermDepositAccount.lodgementDate) &&
             Objects.equals(this.maturityAmount, bankingTermDepositAccount.maturityAmount) &&
             Objects.equals(this.maturityCurrency, bankingTermDepositAccount.maturityCurrency) &&
@@ -136,6 +151,7 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Objects.hash(
             id,
+            bankingAccountDetail,
             lodgementDate,
             maturityAmount,
             maturityCurrency,
@@ -147,11 +163,12 @@ public int hashCode() {
     public String toString() {
         return "class BankingTermDepositAccount {\n" +
             "   id: " + toIndentedString(id) + "\n" +
+            "   bankingAccountDetail: " + toIndentedString(bankingAccountDetail) + "\n" +
             "   lodgementDate: " + toIndentedString(lodgementDate) + "\n" +
             "   maturityAmount: " + toIndentedString(maturityAmount) + "\n" +
-            "   maturityCurrency: " + toIndentedString(maturityCurrency) + "\n" + 
-            "   maturityDate: " + toIndentedString(maturityDate) + "\n" + 
-            "   maturityInstructions: " + toIndentedString(maturityInstructions) + "\n" + 
+            "   maturityCurrency: " + toIndentedString(maturityCurrency) + "\n" +
+            "   maturityDate: " + toIndentedString(maturityDate) + "\n" +
+            "   maturityInstructions: " + toIndentedString(maturityInstructions) + "\n" +
             "}";
     }
 
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatus.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatus.java
similarity index 61%
rename from data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatus.java
rename to data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatus.java
index 35af93f..b4151ec 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatus.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatus.java
@@ -5,21 +5,21 @@
 import java.util.Objects;
 
 @ApiModel
-public class CommonDiscoveryStatus extends BaseResponse {
+public class ResponseCommonDiscoveryStatus extends BaseResponse {
 
-    private CommonDiscoveryStatusData data;
+    private ResponseCommonDiscoveryStatusData data;
 
-    public CommonDiscoveryStatus data(CommonDiscoveryStatusData data) {
+    public ResponseCommonDiscoveryStatus data(ResponseCommonDiscoveryStatusData data) {
         this.data = data;
         return this;
     }
 
     @ApiModelProperty(required = true)
-    public CommonDiscoveryStatusData getData() {
+    public ResponseCommonDiscoveryStatusData getData() {
         return data;
     }
 
-    public void setData(CommonDiscoveryStatusData data) {
+    public void setData(ResponseCommonDiscoveryStatusData data) {
         this.data = data;
     }
 
@@ -31,8 +31,8 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        CommonDiscoveryStatus commonDiscoveryStatus = (CommonDiscoveryStatus) o;
-        return Objects.equals(this.data, commonDiscoveryStatus.data) &&
+        ResponseCommonDiscoveryStatus responseCommonDiscoveryStatus = (ResponseCommonDiscoveryStatus) o;
+        return Objects.equals(this.data, responseCommonDiscoveryStatus.data) &&
             super.equals(o);
     }
 
@@ -45,10 +45,10 @@ public int hashCode() {
 
     @Override
     public String toString() {
-        return "class CommonDiscoveryStatus {\n" +
-            "   data: " + toIndentedString(data) + "\n" + 
-            "   links: " + toIndentedString(getLinks()) + "\n" + 
-            "   meta: " + toIndentedString(getMeta()) + "\n" + 
+        return "class ResponseCommonDiscoveryStatus {\n" +
+            "   data: " + toIndentedString(data) + "\n" +
+            "   links: " + toIndentedString(getLinks()) + "\n" +
+            "   meta: " + toIndentedString(getMeta()) + "\n" +
             "}";
     }
 
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatusData.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatusData.java
similarity index 77%
rename from data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatusData.java
rename to data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatusData.java
index 14a24d3..dfb7a85 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/CommonDiscoveryStatusData.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/model/ResponseCommonDiscoveryStatusData.java
@@ -6,7 +6,7 @@
 import java.time.OffsetDateTime;
 
 @ApiModel
-public class CommonDiscoveryStatusData  {
+public class ResponseCommonDiscoveryStatusData {
 
     /**
      * The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE
@@ -30,7 +30,7 @@
      */
     private OffsetDateTime updateTime;
 
-    public CommonDiscoveryStatusData detectionTime(OffsetDateTime detectionTime) {
+    public ResponseCommonDiscoveryStatusData detectionTime(OffsetDateTime detectionTime) {
         this.detectionTime = detectionTime;
         return this;
     }
@@ -43,7 +43,7 @@ public OffsetDateTime getDetectionTime() {
     public void setDetectionTime(OffsetDateTime detectionTime) {
         this.detectionTime = detectionTime;
     }
-    public CommonDiscoveryStatusData expectedResolutionTime(OffsetDateTime expectedResolutionTime) {
+    public ResponseCommonDiscoveryStatusData expectedResolutionTime(OffsetDateTime expectedResolutionTime) {
         this.expectedResolutionTime = expectedResolutionTime;
         return this;
     }
@@ -56,7 +56,7 @@ public OffsetDateTime getExpectedResolutionTime() {
     public void setExpectedResolutionTime(OffsetDateTime expectedResolutionTime) {
         this.expectedResolutionTime = expectedResolutionTime;
     }
-    public CommonDiscoveryStatusData explanation(String explanation) {
+    public ResponseCommonDiscoveryStatusData explanation(String explanation) {
         this.explanation = explanation;
         return this;
     }
@@ -69,7 +69,7 @@ public String getExplanation() {
     public void setExplanation(String explanation) {
         this.explanation = explanation;
     }
-    public CommonDiscoveryStatusData status(Status status) {
+    public ResponseCommonDiscoveryStatusData status(Status status) {
         this.status = status;
         return this;
     }
@@ -82,7 +82,7 @@ public Status getStatus() {
     public void setStatus(Status status) {
         this.status = status;
     }
-    public CommonDiscoveryStatusData updateTime(OffsetDateTime updateTime) {
+    public ResponseCommonDiscoveryStatusData updateTime(OffsetDateTime updateTime) {
         this.updateTime = updateTime;
         return this;
     }
@@ -104,12 +104,12 @@ public boolean equals(Object o) {
         if (o == null || getClass() != o.getClass()) {
             return false;
         }
-        CommonDiscoveryStatusData commonDiscoveryStatusData = (CommonDiscoveryStatusData) o;
-        return Objects.equals(this.detectionTime, commonDiscoveryStatusData.detectionTime) &&
-            Objects.equals(this.expectedResolutionTime, commonDiscoveryStatusData.expectedResolutionTime) &&
-            Objects.equals(this.explanation, commonDiscoveryStatusData.explanation) &&
-            Objects.equals(this.status, commonDiscoveryStatusData.status) &&
-            Objects.equals(this.updateTime, commonDiscoveryStatusData.updateTime);
+        ResponseCommonDiscoveryStatusData responseCommonDiscoveryStatusData = (ResponseCommonDiscoveryStatusData) o;
+        return Objects.equals(this.detectionTime, responseCommonDiscoveryStatusData.detectionTime) &&
+            Objects.equals(this.expectedResolutionTime, responseCommonDiscoveryStatusData.expectedResolutionTime) &&
+            Objects.equals(this.explanation, responseCommonDiscoveryStatusData.explanation) &&
+            Objects.equals(this.status, responseCommonDiscoveryStatusData.status) &&
+            Objects.equals(this.updateTime, responseCommonDiscoveryStatusData.updateTime);
     }
 
     @Override
@@ -125,11 +125,11 @@ public int hashCode() {
     @Override
     public String toString() {
         return "class CommonDiscoveryStatusData {\n" +
-            "   detectionTime: " + toIndentedString(detectionTime) + "\n" + 
-            "   expectedResolutionTime: " + toIndentedString(expectedResolutionTime) + "\n" + 
-            "   explanation: " + toIndentedString(explanation) + "\n" + 
-            "   status: " + toIndentedString(status) + "\n" + 
-            "   updateTime: " + toIndentedString(updateTime) + "\n" + 
+            "   detectionTime: " + toIndentedString(detectionTime) + "\n" +
+            "   expectedResolutionTime: " + toIndentedString(expectedResolutionTime) + "\n" +
+            "   explanation: " + toIndentedString(explanation) + "\n" +
+            "   status: " + toIndentedString(status) + "\n" +
+            "   updateTime: " + toIndentedString(updateTime) + "\n" +
             "}";
     }
 
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailRepository.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV1Repository.java
similarity index 67%
rename from data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailRepository.java
rename to data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV1Repository.java
index e56bb00..66b427f 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailRepository.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV1Repository.java
@@ -1,8 +1,8 @@
 package au.org.consumerdatastandards.holder.repository;
 
-import au.org.consumerdatastandards.holder.model.BankingProductDetail;
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV1;
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.stereotype.Repository;
 
 @Repository
-public interface BankingProductDetailRepository extends CrudRepository<BankingProductDetail, String> { }
+public interface BankingProductDetailV1Repository extends CrudRepository<BankingProductDetailV1, String> { }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV2Repository.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV2Repository.java
new file mode 100644
index 0000000..eab0329
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductDetailV2Repository.java
@@ -0,0 +1,8 @@
+package au.org.consumerdatastandards.holder.repository;
+
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV2;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface BankingProductDetailV2Repository extends CrudRepository<BankingProductDetailV2, String> { }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductRepository.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV1Repository.java
similarity index 54%
rename from data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductRepository.java
rename to data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV1Repository.java
index ace50cf..948056d 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductRepository.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV1Repository.java
@@ -4,9 +4,9 @@
 import org.springframework.data.repository.PagingAndSortingRepository;
 import org.springframework.stereotype.Repository;
 
-import au.org.consumerdatastandards.holder.model.BankingProduct;
+import au.org.consumerdatastandards.holder.model.BankingProductV1;
 
 
 @Repository
-public interface BankingProductRepository
-    extends PagingAndSortingRepository<BankingProduct, String>, JpaSpecificationExecutor<BankingProduct> { }
+public interface BankingProductV1Repository
+    extends PagingAndSortingRepository<BankingProductV1, String>, JpaSpecificationExecutor<BankingProductV1> { }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV2Repository.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV2Repository.java
new file mode 100644
index 0000000..a1190ae
--- /dev/null
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/repository/BankingProductV2Repository.java
@@ -0,0 +1,11 @@
+package au.org.consumerdatastandards.holder.repository;
+
+import au.org.consumerdatastandards.holder.model.BankingProductV2;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+import org.springframework.data.repository.PagingAndSortingRepository;
+import org.springframework.stereotype.Repository;
+
+
+@Repository
+public interface BankingProductV2Repository
+    extends PagingAndSortingRepository<BankingProductV2, String>, JpaSpecificationExecutor<BankingProductV2> { }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/service/BankingProductService.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/service/BankingProductService.java
index 46824de..655af4e 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/service/BankingProductService.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/service/BankingProductService.java
@@ -1,11 +1,17 @@
 package au.org.consumerdatastandards.holder.service;
 
+import au.org.consumerdatastandards.holder.api.VersionNotSupportedException;
 import au.org.consumerdatastandards.holder.model.BankingProduct;
 import au.org.consumerdatastandards.holder.model.BankingProductDetail;
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV1;
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV2;
+import au.org.consumerdatastandards.holder.model.BankingProductV1;
+import au.org.consumerdatastandards.holder.model.BankingProductV2;
 import au.org.consumerdatastandards.holder.model.ParamEffective;
-import au.org.consumerdatastandards.holder.repository.BankingProductDetailRepository;
-import au.org.consumerdatastandards.holder.repository.BankingProductRepository;
-
+import au.org.consumerdatastandards.holder.repository.BankingProductDetailV1Repository;
+import au.org.consumerdatastandards.holder.repository.BankingProductDetailV2Repository;
+import au.org.consumerdatastandards.holder.repository.BankingProductV1Repository;
+import au.org.consumerdatastandards.holder.repository.BankingProductV2Repository;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -15,7 +21,10 @@
 import org.springframework.stereotype.Service;
 import org.springframework.util.StringUtils;
 
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.CriteriaQuery;
 import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
 import java.time.OffsetDateTime;
 import java.util.ArrayList;
 import java.util.List;
@@ -26,28 +35,42 @@
 
     private static final Logger LOGGER = LogManager.getLogger(BankingProductService.class);
 
-    private final BankingProductRepository productsRepository;
-    private final BankingProductDetailRepository productDetailsRepository;
+    private final BankingProductV1Repository productsV1Repository;
+    private final BankingProductV2Repository productsV2Repository;
+    private final BankingProductDetailV1Repository productDetailV1Repository;
+    private final BankingProductDetailV2Repository productDetailV2Repository;
 
     @Autowired
-    public BankingProductService(BankingProductRepository productsRepository, BankingProductDetailRepository productDetailsRepository) {
-        this.productsRepository = productsRepository;
-        this.productDetailsRepository = productDetailsRepository;
+    public BankingProductService(BankingProductV1Repository productsV1Repository,
+                                 BankingProductV2Repository productsV2Repository,
+                                 BankingProductDetailV1Repository productDetailV1Repository,
+                                 BankingProductDetailV2Repository productDetailV2Repository) {
+        this.productsV1Repository = productsV1Repository;
+        this.productsV2Repository = productsV2Repository;
+        this.productDetailV1Repository = productDetailV1Repository;
+        this.productDetailV2Repository = productDetailV2Repository;
     }
 
-    public Page<BankingProduct> findProductsLike(ParamEffective effective, BankingProduct bankingProduct, Pageable pageable) {
-        
-        LOGGER.debug("Retrieve products matching inputs of effective {}, BankingProduct specified as {} with Paging content specified as {}" ,  effective,  bankingProduct,  pageable);
-        
-        return productsRepository.findAll((Specification<BankingProduct>) (root, criteriaQuery, criteriaBuilder) -> {
+    private class BankingProductSpecification implements Specification {
+
+        private ParamEffective effective;
+        private BankingProduct bankingProduct;
+
+        public BankingProductSpecification(ParamEffective effective, BankingProduct bankingProduct) {
+            this.effective = effective;
+            this.bankingProduct = bankingProduct;
+        }
+
+        @Override
+        public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder) {
             List<Predicate> predicates = new ArrayList<>();
-            if(ParamEffective.CURRENT.equals(effective) || effective == null) {
+            if (ParamEffective.CURRENT.equals(effective) || effective == null) {
                 // If Effective is not supplied, assume CURRENT as per Standard
                 // https://consumerdatastandardsaustralia.github.io/standards/#get-products
                 OffsetDateTime now = OffsetDateTime.now();
                 predicates.add(criteriaBuilder.lessThanOrEqualTo(root.get("effectiveFrom"), now));
                 predicates.add(criteriaBuilder.greaterThanOrEqualTo(root.get("effectiveTo"), now));
-            } else if(ParamEffective.FUTURE.equals(effective)) {
+            } else if (ParamEffective.FUTURE.equals(effective)) {
                 OffsetDateTime now = OffsetDateTime.now();
                 predicates.add(criteriaBuilder.greaterThan(root.get("effectiveFrom"), now));
             }
@@ -61,12 +84,48 @@ public BankingProductService(BankingProductRepository productsRepository, Bankin
                 predicates.add(criteriaBuilder.like(root.get("brand"), "%" + bankingProduct.getBrand() + "%"));
             }
             return criteriaBuilder.and(predicates.toArray(new Predicate[0]));
-        }, pageable);
+        }
     }
 
-    public BankingProductDetail getProductDetail(String productId) {
-        LOGGER.debug("Retrieving product detail by id {}",  productId);
-        Optional<BankingProductDetail> byId = productDetailsRepository.findById(productId);
+    private Page<BankingProductV1> findProductsV1Like(ParamEffective effective, BankingProduct bankingProduct, Pageable pageable) {
+        return productsV1Repository.findAll(new BankingProductSpecification(effective, bankingProduct), pageable);
+    }
+
+    private Page<BankingProductV2> findProductsV2Like(ParamEffective effective, BankingProduct bankingProduct, Pageable pageable) {
+        return productsV2Repository.findAll(new BankingProductSpecification(effective, bankingProduct), pageable);
+    }
+
+    public Page<BankingProduct> findProductsLike(ParamEffective effective, BankingProduct bankingProduct, Pageable pageable, Integer version) {
+        LOGGER.debug("Retrieve products matching inputs of effective {}, BankingProduct specified as {} with Paging content specified as {}" ,  effective,  bankingProduct,  pageable);
+        switch (version) {
+            case 1:
+                return findProductsV1Like(effective, bankingProduct, pageable).map(productV1 -> productV1);
+            case 2:
+                return findProductsV2Like(effective, bankingProduct, pageable).map(productV2 -> productV2);
+            default:
+                throw new VersionNotSupportedException("Unsupported version " + version);
+        }
+    }
+
+    private BankingProductDetailV1 getProductDetailV1(String productId) {
+        Optional<BankingProductDetailV1> byId = productDetailV1Repository.findById(productId);
         return byId.orElse(null);
     }
+
+    private BankingProductDetailV2 getProductDetailV2(String productId) {
+        Optional<BankingProductDetailV2> byId = productDetailV2Repository.findById(productId);
+        return byId.orElse(null);
+    }
+
+    public BankingProductDetail getProductDetail(String productId, Integer version) {
+        LOGGER.debug("Retrieving product detail by id {}",  productId);
+        switch (version) {
+            case 1:
+                return getProductDetailV1(productId);
+            case 2:
+                return getProductDetailV2(productId);
+            default:
+                throw new VersionNotSupportedException("Unsupported version " + version);
+        }
+    }
 }
diff --git a/data-holder/src/main/java/au/org/consumerdatastandards/holder/util/CdsDataLoader.java b/data-holder/src/main/java/au/org/consumerdatastandards/holder/util/CdsDataLoader.java
index e60eabc..7fecd01 100644
--- a/data-holder/src/main/java/au/org/consumerdatastandards/holder/util/CdsDataLoader.java
+++ b/data-holder/src/main/java/au/org/consumerdatastandards/holder/util/CdsDataLoader.java
@@ -2,7 +2,7 @@
 
 import au.org.consumerdatastandards.holder.model.BankingAccountDetail;
 import au.org.consumerdatastandards.holder.model.BankingBalance;
-import au.org.consumerdatastandards.holder.model.BankingProductDetail;
+import au.org.consumerdatastandards.holder.model.BankingProductDetailV2;
 import au.org.consumerdatastandards.holder.model.BankingTransactionDetail;
 import au.org.consumerdatastandards.holder.model.CommonEmailAddress;
 import au.org.consumerdatastandards.holder.model.CommonOrganisationDetail;
@@ -12,7 +12,7 @@
 import au.org.consumerdatastandards.holder.model.User;
 import au.org.consumerdatastandards.holder.repository.BankingAccountDetailRepository;
 import au.org.consumerdatastandards.holder.repository.BankingBalanceRepository;
-import au.org.consumerdatastandards.holder.repository.BankingProductDetailRepository;
+import au.org.consumerdatastandards.holder.repository.BankingProductDetailV2Repository;
 import au.org.consumerdatastandards.holder.repository.BankingTransactionDetailRepository;
 import au.org.consumerdatastandards.holder.repository.CommonOrganisationRepository;
 import au.org.consumerdatastandards.holder.repository.CommonPersonDetailRepository;
@@ -40,7 +40,7 @@
     private static final Logger LOGGER = LogManager.getLogger(CdsDataLoader.class);
     private static final String DEFAULT_PASSWORD = "password";
 
-    private BankingProductDetailRepository productDetailRepository;
+    private BankingProductDetailV2Repository productDetailRepository;
     private BankingAccountDetailRepository accountDetailRepository;
     private BankingBalanceRepository balanceRepository;
     private CommonPersonDetailRepository commonPersonDetailRepository;
@@ -54,7 +54,7 @@
     private int organisationUserIdSeq = 0;
 
     @Autowired
-    public CdsDataLoader(BankingProductDetailRepository productDetailRepository,
+    public CdsDataLoader(BankingProductDetailV2Repository productDetailRepository,
                          BankingAccountDetailRepository accountDetailRepository,
                          BankingBalanceRepository balanceRepository,
                          CommonPersonDetailRepository commonPersonDetailRepository,
@@ -80,7 +80,7 @@ public void loadAll() throws IOException {
         load("payloads/accounts", accountDetailRepository, BankingAccountDetail.class);
         load("payloads/balances", balanceRepository, BankingBalance.class);
         load("payloads/persons", commonPersonDetailRepository, CommonPersonDetail.class);
-        load("payloads/products", productDetailRepository, BankingProductDetail.class);
+        load("payloads/products", productDetailRepository, BankingProductDetailV2.class);
         load("payloads/transactions", transactionDetailRepository, BankingTransactionDetail.class);
     }
 
diff --git a/pom.xml b/pom.xml
index 7451d7c..8182963 100644
--- a/pom.xml
+++ b/pom.xml
@@ -3,7 +3,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>au.org.consumerdatastandards</groupId>
     <artifactId>cds-java-artefacts</artifactId>
-    <version>1.1.0-SNAPSHOT</version>
+    <version>1.1.1-SNAPSHOT</version>
     <packaging>pom</packaging>
     <name>CDS Java Artefacts</name>
     <description>A collection of Java artefacts for Consumer Data Standards Australia</description>
diff --git a/reference-test/pom.xml b/reference-test/pom.xml
index ed7ed29..d74cd22 100644
--- a/reference-test/pom.xml
+++ b/reference-test/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>reference-test</artifactId>
     <name>Reference Test</name>
diff --git a/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/ModelValidatorRegistry.java b/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/ModelValidatorRegistry.java
index 56bbf35..42bce21 100644
--- a/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/ModelValidatorRegistry.java
+++ b/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/ModelValidatorRegistry.java
@@ -1,7 +1,7 @@
 package au.org.consumerdatastandards.conformance.validator;
 
-import au.org.consumerdatastandards.api.common.models.CommonOrganisationDetail;
-import au.org.consumerdatastandards.api.common.models.CommonPersonDetail;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.CommonOrganisationDetail;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.CommonPersonDetail;
 
 import java.util.HashMap;
 import java.util.Map;
diff --git a/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/PhysicalAddressesFieldValidator.java b/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/PhysicalAddressesFieldValidator.java
index d0f58c0..6d24666 100644
--- a/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/PhysicalAddressesFieldValidator.java
+++ b/reference-test/src/main/java/au/org/consumerdatastandards/conformance/validator/PhysicalAddressesFieldValidator.java
@@ -1,6 +1,6 @@
 package au.org.consumerdatastandards.conformance.validator;
 
-import au.org.consumerdatastandards.api.common.models.CommonPhysicalAddressWithPurpose;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.CommonPhysicalAddressWithPurpose;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
 import au.org.consumerdatastandards.reflection.ReflectionUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/AccountsAPIStepsBase.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/AccountsAPIStepsBase.java
index aa17e6f..d39b181 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/AccountsAPIStepsBase.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/AccountsAPIStepsBase.java
@@ -1,8 +1,8 @@
 package au.org.consumerdatastandards.conformance;
 
-import au.org.consumerdatastandards.api.banking.models.BankingAccount;
-import au.org.consumerdatastandards.api.banking.models.BankingProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingAccount;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountById;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
 import au.org.consumerdatastandards.support.Header;
 import au.org.consumerdatastandards.support.ResponseCode;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/accounts/AccountsAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/accounts/AccountsAPISteps.java
index 35594d6..3db5eba 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/accounts/AccountsAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/accounts/AccountsAPISteps.java
@@ -1,10 +1,10 @@
 package au.org.consumerdatastandards.conformance.accounts;
 
-import au.org.consumerdatastandards.api.banking.models.BankingAccount;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingAccount;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountListData;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/BalancesAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/BalancesAPISteps.java
index 679395e..ec85748 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/BalancesAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/BalancesAPISteps.java
@@ -1,11 +1,11 @@
 package au.org.consumerdatastandards.conformance.balances;
 
-import au.org.consumerdatastandards.api.banking.models.BankingBalance;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountsBalanceById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountsBalanceList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingAccountsBalanceListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingBalance;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountsBalanceById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountsBalanceList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingAccountsBalanceListData;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/ListBalancesTest.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/ListBalancesTest.java
index 726560c..1f77b50 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/ListBalancesTest.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/balances/ListBalancesTest.java
@@ -1,6 +1,6 @@
 package au.org.consumerdatastandards.conformance.balances;
 
-import au.org.consumerdatastandards.api.banking.models.BankingBalance;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingBalance;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import net.serenitybdd.junit.runners.SerenityParameterizedRunner;
 import net.thucydides.junit.annotations.UseTestDataFrom;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/customer/CustomerAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/customer/CustomerAPISteps.java
index 571b919..69ab3b0 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/customer/CustomerAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/customer/CustomerAPISteps.java
@@ -1,7 +1,7 @@
 package au.org.consumerdatastandards.conformance.customer;
 
-import au.org.consumerdatastandards.api.common.models.ResponseCommonCustomer;
-import au.org.consumerdatastandards.api.common.models.ResponseCommonCustomerDetail;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseCommonCustomer;
+import au.org.consumerdatastandards.api.v1_0_0.common.models.ResponseCommonCustomerDetail;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.ProtectedAPIStepsBase;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/DirectDebitsAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/DirectDebitsAPISteps.java
index f2bf132..ce79cb9 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/DirectDebitsAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/DirectDebitsAPISteps.java
@@ -1,10 +1,10 @@
 package au.org.consumerdatastandards.conformance.directdebits;
 
-import au.org.consumerdatastandards.api.banking.models.BankingDirectDebit;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingDirectDebitAuthorisationList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingDirectDebitAuthorisationListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingDirectDebit;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingDirectDebitAuthorisationList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingDirectDebitAuthorisationListData;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/ListDirectDebitsTest.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/ListDirectDebitsTest.java
index 045d687..d75f040 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/ListDirectDebitsTest.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/directdebits/ListDirectDebitsTest.java
@@ -1,6 +1,6 @@
 package au.org.consumerdatastandards.conformance.directdebits;
 
-import au.org.consumerdatastandards.api.banking.models.BankingDirectDebit;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingDirectDebit;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import net.serenitybdd.junit.runners.SerenityParameterizedRunner;
 import net.thucydides.junit.annotations.UseTestDataFrom;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/payees/PayeesAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/payees/PayeesAPISteps.java
index 4a9f47c..8e06d87 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/payees/PayeesAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/payees/PayeesAPISteps.java
@@ -1,11 +1,11 @@
 package au.org.consumerdatastandards.conformance.payees;
 
-import au.org.consumerdatastandards.api.banking.BankingPayeesAPI;
-import au.org.consumerdatastandards.api.banking.models.BankingPayee;
-import au.org.consumerdatastandards.api.banking.models.BankingPayeeDetail;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingPayeeById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingPayeeList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingPayeeListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.BankingPayeesAPI;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingPayee;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingPayeeDetail;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingPayeeById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingPayeeList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingPayeeListData;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.ProtectedAPIStepsBase;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/products/BankingProductsAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/products/BankingProductsAPISteps.java
index 9a3a883..8acf25e 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/products/BankingProductsAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/products/BankingProductsAPISteps.java
@@ -1,11 +1,11 @@
 package au.org.consumerdatastandards.conformance.products;
 
-import au.org.consumerdatastandards.api.banking.models.BankingProduct;
-import au.org.consumerdatastandards.api.banking.models.BankingProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingProductById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingProductList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingProductListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingProduct;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingProductById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingProductList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingProductListData;
 import au.org.consumerdatastandards.conformance.APIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
@@ -27,7 +27,7 @@
 import java.util.Date;
 import java.util.List;
 
-import static au.org.consumerdatastandards.api.banking.BankingProductsAPI.ParamEffective;
+import static au.org.consumerdatastandards.api.v1_0_0.banking.BankingProductsAPI.ParamEffective;
 import static au.org.consumerdatastandards.conformance.ConformanceError.Type.DATA_NOT_MATCHING_CRITERIA;
 import static net.serenitybdd.rest.SerenityRest.given;
 import static org.junit.Assert.assertEquals;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ListScheduledPaymentsTest.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ListScheduledPaymentsTest.java
index 8062027..8143f16 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ListScheduledPaymentsTest.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ListScheduledPaymentsTest.java
@@ -1,6 +1,6 @@
 package au.org.consumerdatastandards.conformance.scheduled.payments;
 
-import au.org.consumerdatastandards.api.banking.models.BankingScheduledPayment;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingScheduledPayment;
 import net.serenitybdd.junit.runners.SerenityParameterizedRunner;
 import net.thucydides.junit.annotations.UseTestDataFrom;
 import org.apache.commons.lang3.StringUtils;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ScheduledPaymentsAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ScheduledPaymentsAPISteps.java
index 0a20f03..a9a08c4 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ScheduledPaymentsAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/scheduled/payments/ScheduledPaymentsAPISteps.java
@@ -1,11 +1,11 @@
 package au.org.consumerdatastandards.conformance.scheduled.payments;
 
-import au.org.consumerdatastandards.api.banking.models.BankingScheduledPayment;
-import au.org.consumerdatastandards.api.banking.models.BankingScheduledPaymentFrom;
-import au.org.consumerdatastandards.api.banking.models.ParamAccountOpenStatus;
-import au.org.consumerdatastandards.api.banking.models.ParamProductCategory;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingScheduledPaymentsList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingScheduledPaymentsListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingScheduledPayment;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingScheduledPaymentFrom;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamAccountOpenStatus;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ParamProductCategory;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingScheduledPaymentsList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingScheduledPaymentsListData;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/transactions/TransactionsAPISteps.java b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/transactions/TransactionsAPISteps.java
index 1270283..923847c 100644
--- a/reference-test/src/test/java/au/org/consumerdatastandards/conformance/transactions/TransactionsAPISteps.java
+++ b/reference-test/src/test/java/au/org/consumerdatastandards/conformance/transactions/TransactionsAPISteps.java
@@ -1,10 +1,10 @@
 package au.org.consumerdatastandards.conformance.transactions;
 
-import au.org.consumerdatastandards.api.banking.models.BankingTransaction;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingTransactionById;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingTransactionList;
-import au.org.consumerdatastandards.api.banking.models.ResponseBankingTransactionListData;
-import au.org.consumerdatastandards.api.banking.models.TxMetaPaginated;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.BankingTransaction;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingTransactionById;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingTransactionList;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.ResponseBankingTransactionListData;
+import au.org.consumerdatastandards.api.v1_0_0.banking.models.TxMetaPaginated;
 import au.org.consumerdatastandards.conformance.AccountsAPIStepsBase;
 import au.org.consumerdatastandards.conformance.ConformanceError;
 import au.org.consumerdatastandards.conformance.util.ConformanceUtil;
diff --git a/reflection/pom.xml b/reflection/pom.xml
index 20c2ec1..960c107 100644
--- a/reflection/pom.xml
+++ b/reflection/pom.xml
@@ -4,7 +4,7 @@
     <parent>
         <groupId>au.org.consumerdatastandards</groupId>
         <artifactId>cds-java-artefacts</artifactId>
-        <version>1.1.0-SNAPSHOT</version>
+        <version>1.1.1-SNAPSHOT</version>
     </parent>
     <artifactId>reflection</artifactId>
     <name>Reflection</name>
